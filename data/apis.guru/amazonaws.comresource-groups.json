{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Resource Groups</fullname> <p>AWS Resource Groups lets you organize AWS resources such as Amazon EC2 instances, Amazon Relational Database Service databases, and Amazon S3 buckets into groups using criteria that you define as tags. A resource group is a collection of resources that match the resource types specified in a query, and share one or more tags or portions of tags. You can create a group of resources based on their roles in your cloud infrastructure, lifecycle stages, regions, application layers, or virtually any criteria. Resource groups enable you to automate management tasks, such as those in AWS Systems Manager Automation documents, on tag-related resources in AWS Systems Manager. Groups of tagged resources also let you quickly view a custom console in AWS Systems Manager that shows AWS Config compliance and other monitoring data about member resources.</p> <p>To create a resource group, build a resource query, and specify tags that identify the criteria that members of the group have in common. Tags are key-value pairs.</p> <p>For more information about Resource Groups, see the <a href=\"https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html\">AWS Resource Groups User Guide</a>.</p> <p>AWS Resource Groups uses a REST-compliant API that you can use to perform the following types of operations.</p> <ul> <li> <p>Create, Read, Update, and Delete (CRUD) operations on resource groups and resource query entities</p> </li> <li> <p>Applying, editing, and removing tags from resource groups</p> </li> <li> <p>Resolving resource group member ARNs so they can be returned as search results</p> </li> <li> <p>Getting data about resources that are members of a group</p> </li> <li> <p>Searching AWS resources based on a resource query</p> </li> </ul>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Resource Groups",
    "version": "2017-11-27",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/resource-groups-2017-11-27.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "resource-groups"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/resource-groups/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/groups": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a group with a specified name, description, and resource query.",
        "operationId": "CreateGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Description": {
                    "description": "The description of the resource group. Descriptions can have a maximum of 511 characters, including letters, numbers, hyphens, underscores, punctuation, and spaces.",
                    "maxLength": 512,
                    "pattern": "[\\sa-zA-Z0-9_\\.-]*",
                    "type": "string"
                  },
                  "Name": {
                    "description": "The name of the group, which is the identifier of the group in other operations. A resource group name cannot be updated after it is created. A resource group name can have a maximum of 128 characters, including letters, numbers, hyphens, dots, and underscores. The name cannot start with <code>AWS</code> or <code>aws</code>; these are reserved. A resource group name must be unique within your account.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\.-]+",
                    "type": "string"
                  },
                  "ResourceQuery": {
                    "description": "The query that is used to define a resource group or a search for resources.",
                    "properties": {
                      "Query": { "$ref": "#/components/schemas/Query" },
                      "Type": { "$ref": "#/components/schemas/QueryType" }
                    },
                    "type": "object"
                  },
                  "Tags": {
                    "additionalProperties": { "$ref": "#/components/schemas/TagValue" },
                    "description": "The tags to add to the group. A tag is a string-to-string map of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                    "type": "object"
                  }
                },
                "required": ["Name", "ResourceQuery"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateGroupOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      }
    },
    "/groups-list": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of existing resource groups in your account.",
        "operationId": "ListGroups",
        "parameters": [
          {
            "description": "The maximum number of resource group results that are returned by ListGroups in paginated output. By default, this number is 50.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 }
          },
          {
            "description": "The NextToken value that is returned in a paginated <code>ListGroups</code> request. To get the next page of results, run the call again, add the NextToken parameter, and specify the NextToken value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string", "minLength": 0, "maxLength": 8192, "pattern": "^[a-zA-Z0-9+/]*={0,2}$" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Filters": {
                    "description": "<p>Filters, formatted as GroupFilter objects, that you want to apply to a ListGroups operation.</p> <ul> <li> <p> <code>resource-type</code> - Filter groups by resource type. Specify up to five resource types in the format AWS::ServiceCode::ResourceType. For example, AWS::EC2::Instance, or AWS::S3::Bucket.</p> </li> </ul>",
                    "items": { "$ref": "#/components/schemas/GroupFilter" },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListGroupsOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      }
    },
    "/groups/{GroupName}": {
      "delete": {
        "description": "Deletes a specified resource group. Deleting a resource group does not delete resources that are members of the group; it only deletes the group structure.",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "description": "The name of the resource group to delete.",
            "in": "path",
            "name": "GroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_\\.-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteGroupOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      },
      "get": {
        "description": "Returns information about a specified resource group.",
        "operationId": "GetGroup",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "GroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_\\.-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetGroupOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates an existing group with a new or changed description. You cannot update the name of a resource group.",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "description": "The name of the resource group for which you want to update its description.",
            "in": "path",
            "name": "GroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_\\.-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Description": {
                    "description": "The description of the resource group. Descriptions can have a maximum of 511 characters, including letters, numbers, hyphens, underscores, punctuation, and spaces.",
                    "maxLength": 512,
                    "pattern": "[\\sa-zA-Z0-9_\\.-]*",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateGroupOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      }
    },
    "/groups/{GroupName}/query": {
      "get": {
        "description": "Returns the resource query associated with the specified resource group.",
        "operationId": "GetGroupQuery",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "GroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_\\.-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetGroupQueryOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates the resource query of a group.",
        "operationId": "UpdateGroupQuery",
        "parameters": [
          {
            "description": "The name of the resource group for which you want to edit the query.",
            "in": "path",
            "name": "GroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_\\.-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ResourceQuery": {
                    "description": "The query that is used to define a resource group or a search for resources.",
                    "properties": {
                      "Query": { "$ref": "#/components/schemas/Query" },
                      "Type": { "$ref": "#/components/schemas/QueryType" }
                    },
                    "type": "object"
                  }
                },
                "required": ["ResourceQuery"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateGroupQueryOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      }
    },
    "/groups/{GroupName}/resource-identifiers-list": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of ARNs of resources that are members of a specified resource group.",
        "operationId": "ListGroupResources",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "GroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_\\.-]+" }
          },
          {
            "description": "The maximum number of group member ARNs that are returned in a single call by ListGroupResources, in paginated output. By default, this number is 50.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 }
          },
          {
            "description": "The NextToken value that is returned in a paginated ListGroupResources request. To get the next page of results, run the call again, add the NextToken parameter, and specify the NextToken value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string", "minLength": 0, "maxLength": 8192, "pattern": "^[a-zA-Z0-9+/]*={0,2}$" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Filters": {
                    "description": "<p>Filters, formatted as ResourceFilter objects, that you want to apply to a ListGroupResources operation.</p> <ul> <li> <p> <code>resource-type</code> - Filter resources by their type. Specify up to five resource types in the format AWS::ServiceCode::ResourceType. For example, AWS::EC2::Instance, or AWS::S3::Bucket.</p> </li> </ul>",
                    "items": { "$ref": "#/components/schemas/ResourceFilter" },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListGroupResourcesOutput" } } }
          },
          "480": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "483": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "484": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "486": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      }
    },
    "/resources/search": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of AWS resource identifiers that matches a specified query. The query uses the same format as a resource query in a CreateGroup or UpdateGroupQuery operation.",
        "operationId": "SearchResources",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of group member ARNs returned by <code>SearchResources</code> in paginated output. By default, this number is 50.",
                    "maximum": 50,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": {
                    "description": "The NextToken value that is returned in a paginated <code>SearchResources</code> request. To get the next page of results, run the call again, add the NextToken parameter, and specify the NextToken value.",
                    "maxLength": 8192,
                    "minLength": 0,
                    "pattern": "^[a-zA-Z0-9+/]*={0,2}$",
                    "type": "string"
                  },
                  "ResourceQuery": {
                    "description": "The query that is used to define a resource group or a search for resources.",
                    "properties": {
                      "Query": { "$ref": "#/components/schemas/Query" },
                      "Type": { "$ref": "#/components/schemas/QueryType" }
                    },
                    "type": "object"
                  }
                },
                "required": ["ResourceQuery"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchResourcesOutput" } } }
          },
          "480": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      }
    },
    "/resources/{Arn}/tags": {
      "get": {
        "description": "Returns a list of tags that are associated with a resource group, specified by an ARN.",
        "operationId": "GetTags",
        "parameters": [
          {
            "description": "The ARN of the resource group for which you want a list of tags. The resource must exist within the account you are using.",
            "in": "path",
            "name": "Arn",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 12,
              "maxLength": 1600,
              "pattern": "arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}-[a-z]+-\\d{1}:[0-9]{12}:group/[a-zA-Z0-9_\\.-]{1,128}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTagsOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Deletes specified tags from a specified resource.",
        "operationId": "Untag",
        "parameters": [
          {
            "description": "The ARN of the resource from which to remove tags.",
            "in": "path",
            "name": "Arn",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 12,
              "maxLength": 1600,
              "pattern": "arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}-[a-z]+-\\d{1}:[0-9]{12}:group/[a-zA-Z0-9_\\.-]{1,128}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Keys": {
                    "description": "The keys of the tags to be removed.",
                    "items": { "$ref": "#/components/schemas/TagKey" },
                    "type": "array"
                  }
                },
                "required": ["Keys"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      },
      "put": {
        "description": "Adds tags to a resource group with the specified ARN. Existing tags on a resource group are not changed if they are not specified in the request parameters.",
        "operationId": "Tag",
        "parameters": [
          {
            "description": "The ARN of the resource to which to add tags.",
            "in": "path",
            "name": "Arn",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 12,
              "maxLength": 1600,
              "pattern": "arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}-[a-z]+-\\d{1}:[0-9]{12}:group/[a-zA-Z0-9_\\.-]{1,128}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Tags": {
                    "additionalProperties": { "$ref": "#/components/schemas/TagValue" },
                    "description": "The tags to add to the specified resource. A tag is a string-to-string map of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                    "type": "object"
                  }
                },
                "required": ["Tags"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagOutput" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "482": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "483": {
            "description": "MethodNotAllowedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MethodNotAllowedException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The Resource Groups multi-region endpoint",
      "url": "http://resource-groups.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Resource Groups multi-region endpoint",
      "url": "https://resource-groups.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Resource Groups endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://resource-groups.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Resource Groups endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://resource-groups.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "BadRequestException": {},
      "CreateGroupInput": {
        "properties": {
          "Description": { "$ref": "#/components/schemas/GroupDescription" },
          "Name": { "$ref": "#/components/schemas/GroupName" },
          "ResourceQuery": { "$ref": "#/components/schemas/ResourceQuery" },
          "Tags": { "$ref": "#/components/schemas/Tags" }
        },
        "required": ["Name", "ResourceQuery"],
        "type": "object"
      },
      "CreateGroupOutput": {
        "properties": {
          "Group": { "$ref": "#/components/schemas/Group" },
          "ResourceQuery": { "$ref": "#/components/schemas/ResourceQuery" },
          "Tags": { "$ref": "#/components/schemas/Tags" }
        },
        "type": "object"
      },
      "DeleteGroupInput": { "properties": {}, "type": "object" },
      "DeleteGroupOutput": { "properties": { "Group": { "$ref": "#/components/schemas/Group" } }, "type": "object" },
      "ForbiddenException": {},
      "GetGroupInput": { "properties": {}, "type": "object" },
      "GetGroupOutput": { "properties": { "Group": { "$ref": "#/components/schemas/Group" } }, "type": "object" },
      "GetGroupQueryInput": { "properties": {}, "type": "object" },
      "GetGroupQueryOutput": {
        "properties": { "GroupQuery": { "$ref": "#/components/schemas/GroupQuery" } },
        "type": "object"
      },
      "GetTagsInput": { "properties": {}, "type": "object" },
      "GetTagsOutput": {
        "properties": {
          "Arn": { "$ref": "#/components/schemas/GroupArn" },
          "Tags": { "$ref": "#/components/schemas/Tags" }
        },
        "type": "object"
      },
      "Group": {
        "description": "A resource group.",
        "properties": {
          "Description": { "$ref": "#/components/schemas/GroupDescription" },
          "GroupArn": { "$ref": "#/components/schemas/GroupArn" },
          "Name": { "$ref": "#/components/schemas/GroupName" }
        },
        "required": ["GroupArn", "Name"],
        "type": "object"
      },
      "GroupArn": {
        "maxLength": 1600,
        "minLength": 12,
        "pattern": "arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}-[a-z]+-\\d{1}:[0-9]{12}:group/[a-zA-Z0-9_\\.-]{1,128}",
        "type": "string"
      },
      "GroupDescription": { "maxLength": 512, "pattern": "[\\sa-zA-Z0-9_\\.-]*", "type": "string" },
      "GroupFilter": {
        "description": "A filter name and value pair that is used to obtain more specific results from a list of groups.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/GroupFilterName" },
          "Values": { "$ref": "#/components/schemas/GroupFilterValues" }
        },
        "required": ["Name", "Values"],
        "type": "object"
      },
      "GroupFilterList": { "items": { "$ref": "#/components/schemas/GroupFilter" }, "type": "array" },
      "GroupFilterName": { "enum": ["resource-type"], "type": "string" },
      "GroupFilterValue": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "AWS::(AllSupported|[a-zA-Z0-9]+::[a-zA-Z0-9]+)",
        "type": "string"
      },
      "GroupFilterValues": {
        "items": { "$ref": "#/components/schemas/GroupFilterValue" },
        "maxItems": 5,
        "minItems": 1,
        "type": "array"
      },
      "GroupIdentifier": {
        "description": "The ARN and group name of a group.",
        "properties": {
          "GroupArn": { "$ref": "#/components/schemas/GroupArn" },
          "GroupName": { "$ref": "#/components/schemas/GroupName" }
        },
        "type": "object"
      },
      "GroupIdentifierList": { "items": { "$ref": "#/components/schemas/GroupIdentifier" }, "type": "array" },
      "GroupList": { "items": { "$ref": "#/components/schemas/Group" }, "type": "array" },
      "GroupName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9_\\.-]+", "type": "string" },
      "GroupQuery": {
        "description": "The underlying resource query of a resource group. Resources that match query results are part of the group.",
        "properties": {
          "GroupName": { "$ref": "#/components/schemas/GroupName" },
          "ResourceQuery": { "$ref": "#/components/schemas/ResourceQuery" }
        },
        "required": ["GroupName", "ResourceQuery"],
        "type": "object"
      },
      "InternalServerErrorException": {},
      "ListGroupResourcesInput": {
        "properties": { "Filters": { "$ref": "#/components/schemas/ResourceFilterList" } },
        "type": "object"
      },
      "ListGroupResourcesOutput": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "QueryErrors": { "$ref": "#/components/schemas/QueryErrorList" },
          "ResourceIdentifiers": { "$ref": "#/components/schemas/ResourceIdentifierList" }
        },
        "type": "object"
      },
      "ListGroupsInput": {
        "properties": { "Filters": { "$ref": "#/components/schemas/GroupFilterList" } },
        "type": "object"
      },
      "ListGroupsOutput": {
        "properties": {
          "GroupIdentifiers": { "$ref": "#/components/schemas/GroupIdentifierList" },
          "Groups": { "$ref": "#/components/schemas/GroupList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "MaxResults": { "maximum": 50, "minimum": 1, "type": "integer" },
      "MethodNotAllowedException": {},
      "NextToken": { "maxLength": 8192, "minLength": 0, "pattern": "^[a-zA-Z0-9+/]*={0,2}$", "type": "string" },
      "NotFoundException": {},
      "Query": { "maxLength": 4096, "pattern": "[\\s\\S]*", "type": "string" },
      "QueryError": {
        "description": "A two-part error structure that can occur in <code>ListGroupResources</code> or <code>SearchResources</code> operations on CloudFormation stack-based queries. The error occurs if the CloudFormation stack on which the query is based either does not exist, or has a status that renders the stack inactive. A <code>QueryError</code> occurrence does not necessarily mean that AWS Resource Groups could not complete the operation, but the resulting group might have no member resources.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/QueryErrorCode" },
          "Message": { "$ref": "#/components/schemas/QueryErrorMessage" }
        },
        "type": "object"
      },
      "QueryErrorCode": {
        "enum": ["CLOUDFORMATION_STACK_INACTIVE", "CLOUDFORMATION_STACK_NOT_EXISTING"],
        "type": "string"
      },
      "QueryErrorList": { "items": { "$ref": "#/components/schemas/QueryError" }, "type": "array" },
      "QueryErrorMessage": { "type": "string" },
      "QueryType": {
        "enum": ["TAG_FILTERS_1_0", "CLOUDFORMATION_STACK_1_0"],
        "maxLength": 128,
        "minLength": 1,
        "pattern": "^\\w+$",
        "type": "string"
      },
      "ResourceArn": {
        "pattern": "arn:aws(-[a-z]+)*:[a-z0-9\\-]*:([a-z]{2}-[a-z]+-\\d{1})?:([0-9]{12})?:.+",
        "type": "string"
      },
      "ResourceFilter": {
        "description": "A filter name and value pair that is used to obtain more specific results from a list of resources.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/ResourceFilterName" },
          "Values": { "$ref": "#/components/schemas/ResourceFilterValues" }
        },
        "required": ["Name", "Values"],
        "type": "object"
      },
      "ResourceFilterList": { "items": { "$ref": "#/components/schemas/ResourceFilter" }, "type": "array" },
      "ResourceFilterName": { "enum": ["resource-type"], "type": "string" },
      "ResourceFilterValue": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "AWS::[a-zA-Z0-9]+::[a-zA-Z0-9]+",
        "type": "string"
      },
      "ResourceFilterValues": {
        "items": { "$ref": "#/components/schemas/ResourceFilterValue" },
        "maxItems": 5,
        "minItems": 1,
        "type": "array"
      },
      "ResourceIdentifier": {
        "description": "The ARN of a resource, and its resource type.",
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/ResourceArn" },
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" }
        },
        "type": "object"
      },
      "ResourceIdentifierList": { "items": { "$ref": "#/components/schemas/ResourceIdentifier" }, "type": "array" },
      "ResourceQuery": {
        "description": "The query that is used to define a resource group or a search for resources.",
        "properties": {
          "Query": { "$ref": "#/components/schemas/Query" },
          "Type": { "$ref": "#/components/schemas/QueryType" }
        },
        "required": ["Type", "Query"],
        "type": "object"
      },
      "ResourceType": { "pattern": "AWS::[a-zA-Z0-9]+::\\w+", "type": "string" },
      "SearchResourcesInput": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/MaxResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ResourceQuery": { "$ref": "#/components/schemas/ResourceQuery" }
        },
        "required": ["ResourceQuery"],
        "type": "object"
      },
      "SearchResourcesOutput": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "QueryErrors": { "$ref": "#/components/schemas/QueryErrorList" },
          "ResourceIdentifiers": { "$ref": "#/components/schemas/ResourceIdentifierList" }
        },
        "type": "object"
      },
      "TagInput": {
        "properties": { "Tags": { "$ref": "#/components/schemas/Tags" } },
        "required": ["Tags"],
        "type": "object"
      },
      "TagKey": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "type": "string"
      },
      "TagKeyList": { "items": { "$ref": "#/components/schemas/TagKey" }, "type": "array" },
      "TagOutput": {
        "properties": {
          "Arn": { "$ref": "#/components/schemas/GroupArn" },
          "Tags": { "$ref": "#/components/schemas/Tags" }
        },
        "type": "object"
      },
      "TagValue": {
        "maxLength": 256,
        "minLength": 0,
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "type": "string"
      },
      "Tags": { "additionalProperties": { "$ref": "#/components/schemas/TagValue" }, "type": "object" },
      "TooManyRequestsException": {},
      "UnauthorizedException": {},
      "UntagInput": {
        "properties": { "Keys": { "$ref": "#/components/schemas/TagKeyList" } },
        "required": ["Keys"],
        "type": "object"
      },
      "UntagOutput": {
        "properties": {
          "Arn": { "$ref": "#/components/schemas/GroupArn" },
          "Keys": { "$ref": "#/components/schemas/TagKeyList" }
        },
        "type": "object"
      },
      "UpdateGroupInput": {
        "properties": { "Description": { "$ref": "#/components/schemas/GroupDescription" } },
        "type": "object"
      },
      "UpdateGroupOutput": { "properties": { "Group": { "$ref": "#/components/schemas/Group" } }, "type": "object" },
      "UpdateGroupQueryInput": {
        "properties": { "ResourceQuery": { "$ref": "#/components/schemas/ResourceQuery" } },
        "required": ["ResourceQuery"],
        "type": "object"
      },
      "UpdateGroupQueryOutput": {
        "properties": { "GroupQuery": { "$ref": "#/components/schemas/GroupQuery" } },
        "type": "object"
      }
    }
  }
}
