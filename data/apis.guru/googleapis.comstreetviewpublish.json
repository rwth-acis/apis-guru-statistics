{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": { "name": "Google", "url": "https://google.com" },
    "description": "Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images.\n",
    "license": { "name": "Creative Commons Attribution 3.0", "url": "http://creativecommons.org/licenses/by/3.0/" },
    "termsOfService": "https://developers.google.com/terms/",
    "title": "Street View Publish",
    "version": "v1",
    "x-apiClientRegistration": { "url": "https://console.developers.google.com" },
    "x-apisguru-categories": ["location"],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
    },
    "x-origin": [
      {
        "converter": { "url": "https://github.com/lucybot/api-spec-converter", "version": "2.7.31" },
        "format": "google",
        "url": "https://streetviewpublish.googleapis.com/$discovery/rest?version=v1",
        "version": "v1"
      }
    ],
    "x-preferred": true,
    "x-providerName": "googleapis.com",
    "x-serviceName": "streetviewpublish"
  },
  "externalDocs": { "url": "https://developers.google.com/streetview/publish/" },
  "tags": [{ "name": "photo" }, { "name": "photos" }],
  "paths": {
    "/v1/photo": {
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ],
      "post": {
        "description": "After the client finishes uploading the photo with the returned\nUploadRef,\nCreatePhoto\npublishes the uploaded Photo to\nStreet View on Google Maps.\n\nCurrently, the only way to set heading, pitch, and roll in CreatePhoto is\nthrough the [Photo Sphere XMP\nmetadata](https://developers.google.com/streetview/spherical-metadata) in\nthe photo bytes. CreatePhoto ignores the  `pose.heading`, `pose.pitch`,\n`pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.\n\nThis method returns the following error codes:\n\n* google.rpc.Code.INVALID_ARGUMENT if the request is malformed or if\nthe uploaded photo is not a 360 photo.\n* google.rpc.Code.NOT_FOUND if the upload reference does not exist.\n* google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the\nstorage limit.",
        "operationId": "streetviewpublish.photo.create",
        "requestBody": { "$ref": "#/components/requestBodies/Photo" },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/Photo" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photo"]
      }
    },
    "/v1/photo/{id}": {
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ],
      "put": {
        "description": "Updates the metadata of a Photo, such\nas pose, place association, connections, etc. Changing the pixels of a\nphoto is not supported.\n\nOnly the fields specified in the\nupdateMask\nfield are used. If `updateMask` is not present, the update applies to all\nfields.\n\nThis method returns the following error codes:\n\n* google.rpc.Code.PERMISSION_DENIED if the requesting user did not\ncreate the requested photo.\n* google.rpc.Code.INVALID_ARGUMENT if the request is malformed.\n* google.rpc.Code.NOT_FOUND if the requested photo does not exist.\n* google.rpc.Code.UNAVAILABLE if the requested\nPhoto is still being indexed.",
        "operationId": "streetviewpublish.photo.update",
        "parameters": [
          {
            "description": "Required. A unique identifier for a photo.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Mask that identifies fields on the photo metadata to update.\nIf not present, the old Photo\nmetadata is entirely replaced with the\nnew Photo metadata in this request.\nThe update fails if invalid fields are specified. Multiple fields can be\nspecified in a comma-delimited list.\n\nThe following fields are valid:\n\n* `pose.heading`\n* `pose.latLngPair`\n* `pose.pitch`\n* `pose.roll`\n* `pose.level`\n* `pose.altitude`\n* `connections`\n* `places`\n\n\n<aside class=\"note\"><b>Note:</b> When\nupdateMask\ncontains repeated fields, the entire set of repeated values get replaced\nwith the new contents. For example, if\nupdateMask\ncontains `connections` and `UpdatePhotoRequest.photo.connections` is empty,\nall connections are removed.</aside>",
            "in": "query",
            "name": "updateMask",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Photo" },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/Photo" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photo"]
      }
    },
    "/v1/photo/{photoId}": {
      "delete": {
        "description": "Deletes a Photo and its metadata.\n\nThis method returns the following error codes:\n\n* google.rpc.Code.PERMISSION_DENIED if the requesting user did not\ncreate the requested photo.\n* google.rpc.Code.NOT_FOUND if the photo ID does not exist.",
        "operationId": "streetviewpublish.photo.delete",
        "parameters": [
          {
            "description": "Required. ID of the Photo.",
            "in": "path",
            "name": "photoId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/Empty" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photo"]
      },
      "get": {
        "description": "Gets the metadata of the specified\nPhoto.\n\nThis method returns the following error codes:\n\n* google.rpc.Code.PERMISSION_DENIED if the requesting user did not\ncreate the requested Photo.\n* google.rpc.Code.NOT_FOUND if the requested\nPhoto does not exist.\n* google.rpc.Code.UNAVAILABLE if the requested\nPhoto is still being indexed.",
        "operationId": "streetviewpublish.photo.get",
        "parameters": [
          {
            "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more\ninformation, see\nhttp://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\nIf language_code is unspecified, the user's language preference for Google\nservices is used.",
            "in": "query",
            "name": "languageCode",
            "schema": { "type": "string" }
          },
          {
            "description": "Required. ID of the Photo.",
            "in": "path",
            "name": "photoId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Specifies if a download URL for the photo bytes should be returned in the\nPhoto response.",
            "in": "query",
            "name": "view",
            "schema": { "type": "string", "enum": ["BASIC", "INCLUDE_DOWNLOAD_URL"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/Photo" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photo"]
      },
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ]
    },
    "/v1/photo:startUpload": {
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ],
      "post": {
        "description": "Creates an upload session to start uploading photo bytes.  The method uses\nthe upload URL of the returned\nUploadRef to upload the bytes for\nthe Photo.\n\nIn addition to the photo requirements shown in\nhttps://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604,\nthe photo must meet the following requirements:\n\n* Photo Sphere XMP metadata must be included in the photo medadata. See\nhttps://developers.google.com/streetview/spherical-metadata for the\nrequired fields.\n* The pixel size of the photo must meet the size requirements listed in\nhttps://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604, and\nthe photo must be a full 360 horizontally.\n\nAfter the upload completes, the method uses\nUploadRef with\nCreatePhoto\nto create the Photo object entry.",
        "operationId": "streetviewpublish.photo.startUpload",
        "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/UploadRef" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photo"]
      }
    },
    "/v1/photos": {
      "get": {
        "description": "Lists all the Photos that belong to\nthe user.\n\n<aside class=\"note\"><b>Note:</b> Recently created photos that are still\nbeing indexed are not returned in the response.</aside>",
        "operationId": "streetviewpublish.photos.list",
        "parameters": [
          {
            "description": "The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`.\n\nThe only filter supported at the moment is `placeId`.",
            "in": "query",
            "name": "filter",
            "schema": { "type": "string" }
          },
          {
            "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more\ninformation, see\nhttp://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\nIf language_code is unspecified, the user's language preference for Google\nservices is used.",
            "in": "query",
            "name": "languageCode",
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of photos to return.\n`pageSize` must be non-negative. If `pageSize` is zero or is not provided,\nthe default page size of 100 is used.\nThe number of photos returned in the response may be less than `pageSize`\nif the number of photos that belong to the user is less than `pageSize`.",
            "in": "query",
            "name": "pageSize",
            "schema": { "type": "integer" }
          },
          {
            "description": "The\nnextPageToken\nvalue returned from a previous\nListPhotos\nrequest, if any.",
            "in": "query",
            "name": "pageToken",
            "schema": { "type": "string" }
          },
          {
            "description": "Specifies if a download URL for the photos bytes should be returned in the\nPhotos response.",
            "in": "query",
            "name": "view",
            "schema": { "type": "string", "enum": ["BASIC", "INCLUDE_DOWNLOAD_URL"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/ListPhotosResponse" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photos"]
      },
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ]
    },
    "/v1/photos:batchDelete": {
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ],
      "post": {
        "description": "Deletes a list of Photos and their\nmetadata.\n\nNote that if\nBatchDeletePhotos\nfails, either critical fields are missing or there is an authentication\nerror. Even if\nBatchDeletePhotos\nsucceeds, individual photos in the batch may have failures.\nThese failures are specified in each\nPhotoResponse.status\nin\nBatchDeletePhotosResponse.results.\nSee\nDeletePhoto\nfor specific failures that can occur per photo.",
        "operationId": "streetviewpublish.photos.batchDelete",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeletePhotosRequest" } } }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/BatchDeletePhotosResponse" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photos"]
      }
    },
    "/v1/photos:batchGet": {
      "get": {
        "description": "Gets the metadata of the specified\nPhoto batch.\n\nNote that if\nBatchGetPhotos\nfails, either critical fields are missing or there is an authentication\nerror. Even if\nBatchGetPhotos\nsucceeds, individual photos in the batch may have failures.\nThese failures are specified in each\nPhotoResponse.status\nin\nBatchGetPhotosResponse.results.\nSee\nGetPhoto\nfor specific failures that can occur per photo.",
        "operationId": "streetviewpublish.photos.batchGet",
        "parameters": [
          {
            "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more\ninformation, see\nhttp://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\nIf language_code is unspecified, the user's language preference for Google\nservices is used.",
            "in": "query",
            "name": "languageCode",
            "schema": { "type": "string" }
          },
          {
            "description": "Required. IDs of the Photos. For HTTP\nGET requests, the URL query parameter should be\n`photoIds=<id1>&photoIds=<id2>&...`.",
            "in": "query",
            "name": "photoIds",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "description": "Specifies if a download URL for the photo bytes should be returned in the\nPhoto response.",
            "in": "query",
            "name": "view",
            "schema": { "type": "string", "enum": ["BASIC", "INCLUDE_DOWNLOAD_URL"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/BatchGetPhotosResponse" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photos"]
      },
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ]
    },
    "/v1/photos:batchUpdate": {
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ],
      "post": {
        "description": "Updates the metadata of Photos, such\nas pose, place association, connections, etc. Changing the pixels of photos\nis not supported.\n\nNote that if\nBatchUpdatePhotos\nfails, either critical fields are missing or there is an authentication\nerror. Even if\nBatchUpdatePhotos\nsucceeds, individual photos in the batch may have failures.\nThese failures are specified in each\nPhotoResponse.status\nin\nBatchUpdatePhotosResponse.results.\nSee\nUpdatePhoto\nfor specific failures that can occur per photo.\n\nOnly the fields specified in\nupdateMask\nfield are used. If `updateMask` is not present, the update applies to all\nfields.\n\nThe number of\nUpdatePhotoRequest\nmessages in a\nBatchUpdatePhotosRequest\nmust not exceed 20.\n\n<aside class=\"note\"><b>Note:</b> To update\nPose.altitude,\nPose.latLngPair has to be\nfilled as well. Otherwise, the request will fail.</aside>",
        "operationId": "streetviewpublish.photos.batchUpdate",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchUpdatePhotosRequest" } } }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/BatchUpdatePhotosResponse" } } }
          }
        },
        "security": [
          {
            "Oauth2": ["https://www.googleapis.com/auth/streetviewpublish"],
            "Oauth2c": ["https://www.googleapis.com/auth/streetviewpublish"]
          }
        ],
        "tags": ["photos"]
      }
    }
  },
  "servers": [{ "url": "https://streetviewpublish.googleapis.com/" }],
  "components": {
    "parameters": {
      "access_token": {
        "description": "OAuth access token.",
        "in": "query",
        "name": "access_token",
        "schema": { "type": "string" }
      },
      "alt": {
        "description": "Data format for response.",
        "in": "query",
        "name": "alt",
        "schema": { "type": "string", "enum": ["json", "media", "proto"], "default": "json" }
      },
      "callback": { "description": "JSONP", "in": "query", "name": "callback", "schema": { "type": "string" } },
      "fields": {
        "description": "Selector specifying which fields to include in a partial response.",
        "in": "query",
        "name": "fields",
        "schema": { "type": "string" }
      },
      "key": {
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "in": "query",
        "name": "key",
        "schema": { "type": "string" }
      },
      "oauth_token": {
        "description": "OAuth 2.0 token for the current user.",
        "in": "query",
        "name": "oauth_token",
        "schema": { "type": "string" }
      },
      "prettyPrint": {
        "description": "Returns response with indentations and line breaks.",
        "in": "query",
        "name": "prettyPrint",
        "schema": { "type": "boolean", "default": true }
      },
      "quotaUser": {
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "in": "query",
        "name": "quotaUser",
        "schema": { "type": "string" }
      },
      "uploadType": {
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "in": "query",
        "name": "uploadType",
        "schema": { "type": "string" }
      },
      "upload_protocol": {
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "in": "query",
        "name": "upload_protocol",
        "schema": { "type": "string" }
      },
      "_.xgafv": {
        "description": "V1 error format.",
        "in": "query",
        "name": "$.xgafv",
        "schema": { "type": "string", "enum": ["1", "2"] }
      }
    },
    "requestBodies": {
      "Photo": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Photo" } } } }
    },
    "securitySchemes": {
      "Oauth2": {
        "description": "Oauth 2.0 implicit authentication",
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "scopes": {
              "https://www.googleapis.com/auth/streetviewpublish": "Publish and manage your 360 photos on Google Street View"
            }
          }
        }
      },
      "Oauth2c": {
        "description": "Oauth 2.0 accessCode authentication",
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "tokenUrl": "https://accounts.google.com/o/oauth2/token",
            "scopes": {
              "https://www.googleapis.com/auth/streetviewpublish": "Publish and manage your 360 photos on Google Street View"
            }
          }
        }
      }
    },
    "schemas": {
      "BatchDeletePhotosRequest": {
        "description": "Request to delete multiple Photos.",
        "properties": {
          "photoIds": {
            "description": "Required. IDs of the Photos. HTTP\nGET requests require the following syntax for the URL query parameter:\n`photoIds=<id1>&photoIds=<id2>&...`.",
            "items": { "type": "string" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BatchDeletePhotosResponse": {
        "description": "Response to batch delete of one or more\nPhotos.",
        "properties": {
          "status": {
            "description": "The status for the operation to delete a single\nPhoto in the batch request.",
            "items": { "$ref": "#/components/schemas/Status" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BatchGetPhotosResponse": {
        "description": "Response to batch get of Photos.",
        "properties": {
          "results": {
            "description": "List of results for each individual\nPhoto requested, in the same order as\nthe requests in\nBatchGetPhotos.",
            "items": { "$ref": "#/components/schemas/PhotoResponse" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BatchUpdatePhotosRequest": {
        "description": "Request to update the metadata of photos.\nUpdating the pixels of photos is not supported.",
        "properties": {
          "updatePhotoRequests": {
            "description": "Required. List of\nUpdatePhotoRequests.",
            "items": { "$ref": "#/components/schemas/UpdatePhotoRequest" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BatchUpdatePhotosResponse": {
        "description": "Response to batch update of metadata of one or more\nPhotos.",
        "properties": {
          "results": {
            "description": "List of results for each individual\nPhoto updated, in the same order as\nthe request.",
            "items": { "$ref": "#/components/schemas/PhotoResponse" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Connection": {
        "description": "A connection is the link from a source photo to a destination photo.",
        "properties": { "target": { "$ref": "#/components/schemas/PhotoId" } },
        "type": "object"
      },
      "Empty": {
        "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
        "properties": {},
        "type": "object"
      },
      "LatLng": {
        "description": "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>. Values must be within normalized ranges.",
        "properties": {
          "latitude": {
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Level": {
        "description": "Level information containing level number and its corresponding name.",
        "properties": {
          "name": {
            "description": "Required. A name assigned to this Level, restricted to 3 characters.\nConsider how the elevator buttons would be labeled for this level if there\nwas an elevator.",
            "type": "string"
          },
          "number": {
            "description": "Floor number, used for ordering. 0 indicates the ground level, 1 indicates\nthe first level above ground level, -1 indicates the first level under\nground level. Non-integer values are OK.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ListPhotosResponse": {
        "description": "Response to list all photos that belong to a user.",
        "properties": {
          "nextPageToken": {
            "description": "Token to retrieve the next page of results, or empty if there are no more\nresults in the list.",
            "type": "string"
          },
          "photos": {
            "description": "List of photos. The\npageSize field\nin the request determines the number of items returned.",
            "items": { "$ref": "#/components/schemas/Photo" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Operation": {
        "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
        "properties": {
          "done": {
            "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
            "type": "boolean"
          },
          "error": { "$ref": "#/components/schemas/Status" },
          "metadata": {
            "additionalProperties": { "description": "Properties of the object. Contains field @type with type URL." },
            "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
            "type": "object"
          },
          "name": {
            "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.",
            "type": "string"
          },
          "response": {
            "additionalProperties": { "description": "Properties of the object. Contains field @type with type URL." },
            "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Photo": {
        "description": "Photo is used to store 360 photos along with photo metadata.",
        "properties": {
          "captureTime": {
            "description": "Absolute time when the photo was captured.\nWhen the photo has no exif timestamp, this is used to set a timestamp in\nthe photo metadata.",
            "format": "google-datetime",
            "type": "string"
          },
          "connections": {
            "description": "Connections to other photos. A connection represents the link from this\nphoto to another photo.",
            "items": { "$ref": "#/components/schemas/Connection" },
            "type": "array"
          },
          "downloadUrl": {
            "description": "Output only. The download URL for the photo bytes. This field is set only\nwhen\nGetPhotoRequest.view\nis set to\nPhotoView.INCLUDE_DOWNLOAD_URL.",
            "type": "string"
          },
          "mapsPublishStatus": {
            "description": "Output only. Status in Google Maps, whether this photo was published or\nrejected.",
            "enum": ["UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN"],
            "type": "string"
          },
          "photoId": { "$ref": "#/components/schemas/PhotoId" },
          "places": {
            "description": "Places where this photo belongs.",
            "items": { "$ref": "#/components/schemas/Place" },
            "type": "array"
          },
          "pose": { "$ref": "#/components/schemas/Pose" },
          "shareLink": { "description": "Output only. The share link for the photo.", "type": "string" },
          "thumbnailUrl": {
            "description": "Output only. The thumbnail URL for showing a preview of the given photo.",
            "type": "string"
          },
          "transferStatus": {
            "description": "Output only. Status of rights transfer on this photo.",
            "enum": [
              "TRANSFER_STATUS_UNKNOWN",
              "NEVER_TRANSFERRED",
              "PENDING",
              "COMPLETED",
              "REJECTED",
              "EXPIRED",
              "CANCELLED",
              "RECEIVED_VIA_TRANSFER"
            ],
            "type": "string"
          },
          "uploadReference": { "$ref": "#/components/schemas/UploadRef" },
          "viewCount": { "description": "Output only. View count of the photo.", "format": "int64", "type": "string" }
        },
        "type": "object"
      },
      "PhotoId": {
        "description": "Identifier for a Photo.",
        "properties": { "id": { "description": "Required. A unique identifier for a photo.", "type": "string" } },
        "type": "object"
      },
      "PhotoResponse": {
        "description": "Response payload for a single\nPhoto\nin batch operations including\nBatchGetPhotos\nand\nBatchUpdatePhotos.",
        "properties": {
          "photo": { "$ref": "#/components/schemas/Photo" },
          "status": { "$ref": "#/components/schemas/Status" }
        },
        "type": "object"
      },
      "Place": {
        "description": "Place metadata for an entity.",
        "properties": {
          "languageCode": {
            "description": "Output-only. The language_code that the name is localized with. This should\nbe the language_code specified in the request, but may be a fallback.",
            "type": "string"
          },
          "name": {
            "description": "Output-only. The name of the place, localized to the language_code.",
            "type": "string"
          },
          "placeId": {
            "description": "Place identifier, as described in\nhttps://developers.google.com/places/place-id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pose": {
        "description": "Raw pose measurement for an entity.",
        "properties": {
          "accuracyMeters": {
            "description": "The estimated horizontal accuracy of this pose in meters with 68%\nconfidence (one standard deviation). For example, on Android, this value is\navailable from this method:\nhttps://developer.android.com/reference/android/location/Location#getAccuracy().\nOther platforms have different methods of obtaining similar accuracy\nestimations.",
            "format": "float",
            "type": "number"
          },
          "altitude": {
            "description": "Altitude of the pose in meters above WGS84 ellipsoid.\nNaN indicates an unmeasured quantity.",
            "format": "double",
            "type": "number"
          },
          "heading": {
            "description": "Compass heading, measured at the center of the photo in degrees clockwise\nfrom North. Value must be >=0 and <360.\nNaN indicates an unmeasured quantity.",
            "format": "double",
            "type": "number"
          },
          "latLngPair": { "$ref": "#/components/schemas/LatLng" },
          "level": { "$ref": "#/components/schemas/Level" },
          "pitch": {
            "description": "Pitch, measured at the center of the photo in degrees. Value must be >=-90\nand <= 90. A value of -90 means looking directly down, and a value of 90\nmeans looking directly up.\nNaN indicates an unmeasured quantity.",
            "format": "double",
            "type": "number"
          },
          "roll": {
            "description": "Roll, measured in degrees. Value must be >= 0 and <360. A value of 0\nmeans level with the horizon.\nNaN indicates an unmeasured quantity.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatePhotoRequest": {
        "description": "Request to update the metadata of a\nPhoto. Updating the pixels of a photo\nis not supported.",
        "properties": {
          "photo": { "$ref": "#/components/schemas/Photo" },
          "updateMask": {
            "description": "Mask that identifies fields on the photo metadata to update.\nIf not present, the old Photo\nmetadata is entirely replaced with the\nnew Photo metadata in this request.\nThe update fails if invalid fields are specified. Multiple fields can be\nspecified in a comma-delimited list.\n\nThe following fields are valid:\n\n* `pose.heading`\n* `pose.latLngPair`\n* `pose.pitch`\n* `pose.roll`\n* `pose.level`\n* `pose.altitude`\n* `connections`\n* `places`\n\n\n<aside class=\"note\"><b>Note:</b> When\nupdateMask\ncontains repeated fields, the entire set of repeated values get replaced\nwith the new contents. For example, if\nupdateMask\ncontains `connections` and `UpdatePhotoRequest.photo.connections` is empty,\nall connections are removed.</aside>",
            "format": "google-fieldmask",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UploadRef": {
        "description": "Upload reference for media files.",
        "properties": {
          "uploadUrl": {
            "description": "Required. An upload reference should be unique for each user. It follows\nthe form:\n\"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  }
}
