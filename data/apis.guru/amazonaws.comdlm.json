{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your AWS resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon DLM supports Amazon EBS volumes and snapshots. For information about using Amazon DLM with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\">Automating the Amazon EBS Snapshot Lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Data Lifecycle Manager",
    "version": "2018-01-12",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dlm-2018-01-12.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "dlm"
  },
  "externalDocs": { "description": "Amazon Web Services documentation", "url": "https://docs.aws.amazon.com/dlm/" },
  "security": [{ "hmac": [] }],
  "paths": {
    "/policies": {
      "get": {
        "description": "<p>Gets summary information about all or the specified data lifecycle policies.</p> <p>To get complete information about a policy, use <a>GetLifecyclePolicy</a>.</p>",
        "operationId": "GetLifecyclePolicies",
        "parameters": [
          {
            "description": "The identifiers of the data lifecycle policies.",
            "in": "query",
            "name": "policyIds",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "description": "The activation state.",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": { "type": "string", "enum": ["ENABLED", "DISABLED", "ERROR"] }
          },
          {
            "description": "The resource type.",
            "in": "query",
            "name": "resourceTypes",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "description": "<p>The target tag for a policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p>",
            "in": "query",
            "name": "targetTags",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "description": "<p>The tags to add to objects created by the policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p> <p>These user-defined tags are added in addition to the AWS-added lifecycle tags.</p>",
            "in": "query",
            "name": "tagsToAdd",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetLifecyclePoliciesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "InternalServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a policy to manage the lifecycle of the specified AWS resources. You can create up to 100 lifecycle policies.",
        "operationId": "CreateLifecyclePolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Description": {
                    "description": "A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.",
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ExecutionRoleArn": {
                    "description": "The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.",
                    "type": "string"
                  },
                  "PolicyDetails": {
                    "description": "Specifies the configuration of a lifecycle policy.",
                    "properties": {
                      "Parameters": { "$ref": "#/components/schemas/Parameters" },
                      "PolicyType": { "$ref": "#/components/schemas/PolicyTypeValues" },
                      "ResourceTypes": { "$ref": "#/components/schemas/ResourceTypeValuesList" },
                      "Schedules": { "$ref": "#/components/schemas/ScheduleList" },
                      "TargetTags": { "$ref": "#/components/schemas/TargetTagList" }
                    },
                    "type": "object"
                  },
                  "State": {
                    "description": "The desired activation state of the lifecycle policy after creation.",
                    "enum": ["ENABLED", "DISABLED"],
                    "type": "string"
                  }
                },
                "required": ["ExecutionRoleArn", "Description", "State", "PolicyDetails"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateLifecyclePolicyResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "482": {
            "description": "InternalServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/policies/{policyId}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates the specified lifecycle policy.",
        "operationId": "UpdateLifecyclePolicy",
        "parameters": [
          {
            "description": "The identifier of the lifecycle policy.",
            "in": "path",
            "name": "policyId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Description": {
                    "description": "A description of the lifecycle policy.",
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ExecutionRoleArn": {
                    "description": "The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.",
                    "type": "string"
                  },
                  "PolicyDetails": {
                    "description": "Specifies the configuration of a lifecycle policy.",
                    "properties": {
                      "Parameters": { "$ref": "#/components/schemas/Parameters" },
                      "PolicyType": { "$ref": "#/components/schemas/PolicyTypeValues" },
                      "ResourceTypes": { "$ref": "#/components/schemas/ResourceTypeValuesList" },
                      "Schedules": { "$ref": "#/components/schemas/ScheduleList" },
                      "TargetTags": { "$ref": "#/components/schemas/TargetTagList" }
                    },
                    "type": "object"
                  },
                  "State": {
                    "description": "The desired activation state of the lifecycle policy after creation.",
                    "enum": ["ENABLED", "DISABLED"],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateLifecyclePolicyResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "InternalServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/policies/{policyId}/": {
      "delete": {
        "description": "Deletes the specified lifecycle policy and halts the automated operations that the policy specified.",
        "operationId": "DeleteLifecyclePolicy",
        "parameters": [
          {
            "description": "The identifier of the lifecycle policy.",
            "in": "path",
            "name": "policyId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteLifecyclePolicyResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InternalServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      },
      "get": {
        "description": "Gets detailed information about the specified lifecycle policy.",
        "operationId": "GetLifecyclePolicy",
        "parameters": [
          {
            "description": "The identifier of the lifecycle policy.",
            "in": "path",
            "name": "policyId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetLifecyclePolicyResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InternalServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    }
  },
  "servers": [
    {
      "description": "The Amazon DLM multi-region endpoint",
      "url": "http://dlm.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon DLM multi-region endpoint",
      "url": "https://dlm.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon DLM endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://dlm.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Amazon DLM endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://dlm.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "CopyTags": { "type": "boolean" },
      "Count": { "maximum": 1000, "minimum": 1, "type": "integer" },
      "CreateLifecyclePolicyRequest": {
        "properties": {
          "Description": { "$ref": "#/components/schemas/PolicyDescription" },
          "ExecutionRoleArn": { "$ref": "#/components/schemas/ExecutionRoleArn" },
          "PolicyDetails": { "$ref": "#/components/schemas/PolicyDetails" },
          "State": { "$ref": "#/components/schemas/SettablePolicyStateValues" }
        },
        "required": ["ExecutionRoleArn", "Description", "State", "PolicyDetails"],
        "type": "object"
      },
      "CreateLifecyclePolicyResponse": {
        "properties": { "PolicyId": { "$ref": "#/components/schemas/PolicyId" } },
        "type": "object"
      },
      "CreateRule": {
        "description": "Specifies when to create snapshots of EBS volumes.",
        "properties": {
          "Interval": { "$ref": "#/components/schemas/Interval" },
          "IntervalUnit": { "$ref": "#/components/schemas/IntervalUnitValues" },
          "Times": { "$ref": "#/components/schemas/TimesList" }
        },
        "required": ["Interval", "IntervalUnit"],
        "type": "object"
      },
      "DeleteLifecyclePolicyRequest": { "properties": {}, "type": "object" },
      "DeleteLifecyclePolicyResponse": { "properties": {}, "type": "object" },
      "ExcludeBootVolume": { "type": "boolean" },
      "ExecutionRoleArn": { "type": "string" },
      "GetLifecyclePoliciesRequest": { "properties": {}, "type": "object" },
      "GetLifecyclePoliciesResponse": {
        "properties": { "Policies": { "$ref": "#/components/schemas/LifecyclePolicySummaryList" } },
        "type": "object"
      },
      "GetLifecyclePolicyRequest": { "properties": {}, "type": "object" },
      "GetLifecyclePolicyResponse": {
        "properties": { "Policy": { "$ref": "#/components/schemas/LifecyclePolicy" } },
        "type": "object"
      },
      "GettablePolicyStateValues": { "enum": ["ENABLED", "DISABLED", "ERROR"], "type": "string" },
      "InternalServerException": {},
      "Interval": { "minimum": 1, "type": "integer" },
      "IntervalUnitValues": { "enum": ["HOURS"], "type": "string" },
      "InvalidRequestException": {},
      "LifecyclePolicy": {
        "description": "Detailed information about a lifecycle policy.",
        "properties": {
          "DateCreated": { "$ref": "#/components/schemas/Timestamp" },
          "DateModified": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/PolicyDescription" },
          "ExecutionRoleArn": { "$ref": "#/components/schemas/ExecutionRoleArn" },
          "PolicyDetails": { "$ref": "#/components/schemas/PolicyDetails" },
          "PolicyId": { "$ref": "#/components/schemas/PolicyId" },
          "State": { "$ref": "#/components/schemas/GettablePolicyStateValues" }
        },
        "type": "object"
      },
      "LifecyclePolicySummary": {
        "description": "Summary information about a lifecycle policy.",
        "properties": {
          "Description": { "$ref": "#/components/schemas/PolicyDescription" },
          "PolicyId": { "$ref": "#/components/schemas/PolicyId" },
          "State": { "$ref": "#/components/schemas/GettablePolicyStateValues" }
        },
        "type": "object"
      },
      "LifecyclePolicySummaryList": {
        "items": { "$ref": "#/components/schemas/LifecyclePolicySummary" },
        "type": "array"
      },
      "LimitExceededException": {},
      "Parameters": {
        "description": "Optional parameters that can be added to the policy. The set of valid parameters depends on the combination of <code>policyType</code> and <code>resourceType</code> values.",
        "properties": { "ExcludeBootVolume": { "$ref": "#/components/schemas/ExcludeBootVolume" } },
        "type": "object"
      },
      "PolicyDescription": { "maxLength": 500, "minLength": 0, "type": "string" },
      "PolicyDetails": {
        "description": "Specifies the configuration of a lifecycle policy.",
        "properties": {
          "Parameters": { "$ref": "#/components/schemas/Parameters" },
          "PolicyType": { "$ref": "#/components/schemas/PolicyTypeValues" },
          "ResourceTypes": { "$ref": "#/components/schemas/ResourceTypeValuesList" },
          "Schedules": { "$ref": "#/components/schemas/ScheduleList" },
          "TargetTags": { "$ref": "#/components/schemas/TargetTagList" }
        },
        "type": "object"
      },
      "PolicyId": { "type": "string" },
      "PolicyIdList": { "items": { "$ref": "#/components/schemas/PolicyId" }, "type": "array" },
      "PolicyTypeValues": { "enum": ["EBS_SNAPSHOT_MANAGEMENT"], "type": "string" },
      "ResourceNotFoundException": {},
      "ResourceTypeValues": { "enum": ["VOLUME", "INSTANCE"], "type": "string" },
      "ResourceTypeValuesList": {
        "items": { "$ref": "#/components/schemas/ResourceTypeValues" },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "RetainRule": {
        "description": "Specifies the number of snapshots to keep for each EBS volume.",
        "properties": { "Count": { "$ref": "#/components/schemas/Count" } },
        "required": ["Count"],
        "type": "object"
      },
      "Schedule": {
        "description": "Specifies a schedule.",
        "properties": {
          "CopyTags": { "$ref": "#/components/schemas/CopyTags" },
          "CreateRule": { "$ref": "#/components/schemas/CreateRule" },
          "Name": { "$ref": "#/components/schemas/ScheduleName" },
          "RetainRule": { "$ref": "#/components/schemas/RetainRule" },
          "TagsToAdd": { "$ref": "#/components/schemas/TagsToAddList" },
          "VariableTags": { "$ref": "#/components/schemas/VariableTagsList" }
        },
        "type": "object"
      },
      "ScheduleList": {
        "items": { "$ref": "#/components/schemas/Schedule" },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "ScheduleName": { "maxLength": 500, "minLength": 0, "type": "string" },
      "SettablePolicyStateValues": { "enum": ["ENABLED", "DISABLED"], "type": "string" },
      "String": { "type": "string" },
      "Tag": {
        "description": "Specifies a tag for a resource.",
        "properties": {
          "Key": { "$ref": "#/components/schemas/String" },
          "Value": { "$ref": "#/components/schemas/String" }
        },
        "required": ["Key", "Value"],
        "type": "object"
      },
      "TagFilter": { "type": "string" },
      "TagsToAddFilterList": {
        "items": { "$ref": "#/components/schemas/TagFilter" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      },
      "TagsToAddList": {
        "items": { "$ref": "#/components/schemas/Tag" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      },
      "TargetTagList": {
        "items": { "$ref": "#/components/schemas/Tag" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "TargetTagsFilterList": {
        "items": { "$ref": "#/components/schemas/TagFilter" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "Time": { "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "type": "string" },
      "TimesList": { "items": { "$ref": "#/components/schemas/Time" }, "maxItems": 1, "type": "array" },
      "Timestamp": { "format": "date-time", "type": "string" },
      "UpdateLifecyclePolicyRequest": {
        "properties": {
          "Description": { "$ref": "#/components/schemas/PolicyDescription" },
          "ExecutionRoleArn": { "$ref": "#/components/schemas/ExecutionRoleArn" },
          "PolicyDetails": { "$ref": "#/components/schemas/PolicyDetails" },
          "State": { "$ref": "#/components/schemas/SettablePolicyStateValues" }
        },
        "type": "object"
      },
      "UpdateLifecyclePolicyResponse": { "properties": {}, "type": "object" },
      "VariableTagsList": {
        "items": { "$ref": "#/components/schemas/Tag" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      }
    }
  }
}
