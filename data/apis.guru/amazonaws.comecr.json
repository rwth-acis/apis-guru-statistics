{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed Docker registry service. Customers can use the familiar Docker CLI to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry. Amazon ECR supports private Docker repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images. Developers can use the Docker CLI to author and manage images.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon EC2 Container Registry",
    "version": "2015-09-21",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ecr-2015-09-21.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "ecr"
  },
  "externalDocs": { "description": "Amazon Web Services documentation", "url": "https://docs.aws.amazon.com/ecr/" },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Check the availability of multiple image layers in a specified registry and repository.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
        "operationId": "BatchCheckLayerAvailability",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchCheckLayerAvailabilityRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchCheckLayerAvailabilityResponse" } }
            }
          },
          "480": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes a list of specified images within a specified repository. Images are specified with either <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>",
        "operationId": "BatchDeleteImage",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteImageRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteImageResponse" } } }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets detailed information for specified images within a specified repository. Images are specified with either <code>imageTag</code> or <code>imageDigest</code>.",
        "operationId": "BatchGetImage",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.BatchGetImage"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetImageRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetImageResponse" } } }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
        "operationId": "CompleteLayerUpload",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CompleteLayerUploadRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CompleteLayerUploadResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "UploadNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UploadNotFoundException" } } }
          },
          "484": {
            "description": "InvalidLayerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLayerException" } } }
          },
          "485": {
            "description": "LayerPartTooSmallException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LayerPartTooSmallException" } }
            }
          },
          "486": {
            "description": "LayerAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LayerAlreadyExistsException" } }
            }
          },
          "487": {
            "description": "EmptyUploadException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EmptyUploadException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates an image repository.",
        "operationId": "CreateRepository",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.CreateRepository"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateRepositoryRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateRepositoryResponse" } } }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "InvalidTagParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTagParameterException" } }
            }
          },
          "483": {
            "description": "TooManyTagsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyTagsException" } } }
          },
          "484": {
            "description": "RepositoryAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryAlreadyExistsException" } }
            }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified lifecycle policy.",
        "operationId": "DeleteLifecyclePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteLifecyclePolicyRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteLifecyclePolicyResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "LifecyclePolicyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LifecyclePolicyNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes an existing image repository. If a repository contains images, you must use the <code>force</code> option to delete it.",
        "operationId": "DeleteRepository",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.DeleteRepository"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRepositoryRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRepositoryResponse" } } }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "RepositoryNotEmptyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotEmptyException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the repository policy from a specified repository.",
        "operationId": "DeleteRepositoryPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRepositoryPolicyRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRepositoryPolicyResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "RepositoryPolicyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryPolicyNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns metadata about the images in a repository, including image size, image tags, and creation date.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
        "operationId": "DescribeImages",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.DescribeImages"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeImagesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeImagesResponse" } } }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "ImageNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ImageNotFoundException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Describes image repositories in a registry.",
        "operationId": "DescribeRepositories",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.DescribeRepositories"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeRepositoriesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeRepositoriesResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves a token that is valid for a specified registry for 12 hours. This command allows you to use the <code>docker</code> CLI to push and pull images with Amazon ECR. If you do not specify a registry, the default registry is assumed.</p> <p>The <code>authorizationToken</code> returned for each registry specified is a base64 encoded string that can be decoded and used in a <code>docker login</code> command to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code> command that simplifies the login process.</p>",
        "operationId": "GetAuthorizationToken",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetAuthorizationTokenRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetAuthorizationTokenResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
        "operationId": "GetDownloadUrlForLayer",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetDownloadUrlForLayerRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetDownloadUrlForLayerResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "LayersNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LayersNotFoundException" } } }
          },
          "483": {
            "description": "LayerInaccessibleException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LayerInaccessibleException" } }
            }
          },
          "484": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the specified lifecycle policy.",
        "operationId": "GetLifecyclePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetLifecyclePolicyRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetLifecyclePolicyResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "LifecyclePolicyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LifecyclePolicyNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the results of the specified lifecycle policy preview request.",
        "operationId": "GetLifecyclePolicyPreview",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetLifecyclePolicyPreviewRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetLifecyclePolicyPreviewResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "LifecyclePolicyPreviewNotFoundException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LifecyclePolicyPreviewNotFoundException" }
              }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the repository policy for a specified repository.",
        "operationId": "GetRepositoryPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetRepositoryPolicyRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetRepositoryPolicyResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "RepositoryPolicyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryPolicyNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Notify Amazon ECR that you intend to upload an image layer.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
        "operationId": "InitiateLayerUpload",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/InitiateLayerUploadRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InitiateLayerUploadResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists all the image IDs for a given repository.</p> <p>You can filter images based on whether or not they are tagged by setting the <code>tagStatus</code> parameter to <code>TAGGED</code> or <code>UNTAGGED</code>. For example, you can filter your results to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results to return only <code>TAGGED</code> images to list all of the tags in your repository.</p>",
        "operationId": "ListImages",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.ListImages"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListImagesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListImagesResponse" } } }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "List the tags for an Amazon ECR resource.",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.ListTagsForResource"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "482": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates or updates the image manifest and tags associated with an image.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
        "operationId": "PutImage",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.PutImage"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutImageRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutImageResponse" } } }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "ImageAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ImageAlreadyExistsException" } }
            }
          },
          "484": {
            "description": "LayersNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LayersNotFoundException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "486": {
            "description": "ImageTagAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ImageTagAlreadyExistsException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the image tag mutability settings for a repository.",
        "operationId": "PutImageTagMutability",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/PutImageTagMutabilityRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutImageTagMutabilityResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\">Lifecycle Policy Template</a>.",
        "operationId": "PutLifecyclePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutLifecyclePolicyRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutLifecyclePolicyResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Applies a repository policy on a specified repository to control access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicies.html\">Amazon ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
        "operationId": "SetRepositoryPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SetRepositoryPolicyRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SetRepositoryPolicyResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts a preview of the specified lifecycle policy. This allows you to see the results before creating the lifecycle policy.",
        "operationId": "StartLifecyclePolicyPreview",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/StartLifecyclePolicyPreviewRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartLifecyclePolicyPreviewResponse" } }
            }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "483": {
            "description": "LifecyclePolicyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LifecyclePolicyNotFoundException" } }
            }
          },
          "484": {
            "description": "LifecyclePolicyPreviewInProgressException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LifecyclePolicyPreviewInProgressException" }
              }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "InvalidTagParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTagParameterException" } }
            }
          },
          "482": {
            "description": "TooManyTagsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyTagsException" } } }
          },
          "483": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "484": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes specified tags from a resource.",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "InvalidTagParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTagParameterException" } }
            }
          },
          "482": {
            "description": "TooManyTagsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyTagsException" } } }
          },
          "483": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "484": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Uploads an image layer part to Amazon ECR.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
        "operationId": "UploadLayerPart",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonEC2ContainerRegistry_V20150921.UploadLayerPart"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UploadLayerPartRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UploadLayerPartResponse" } } }
          },
          "480": {
            "description": "ServerException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ServerException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "InvalidLayerPartException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLayerPartException" } }
            }
          },
          "483": {
            "description": "RepositoryNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNotFoundException" } }
            }
          },
          "484": {
            "description": "UploadNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UploadNotFoundException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The Amazon ECR multi-region endpoint",
      "url": "http://api.ecr.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon ECR multi-region endpoint",
      "url": "https://api.ecr.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon ECR endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://api.ecr.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Amazon ECR endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://api.ecr.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "Arn": { "type": "string" },
      "AuthorizationData": {
        "description": "An object representing authorization data for an Amazon ECR registry.",
        "properties": {
          "authorizationToken": { "$ref": "#/components/schemas/Base64" },
          "expiresAt": { "$ref": "#/components/schemas/ExpirationTimestamp" },
          "proxyEndpoint": { "$ref": "#/components/schemas/ProxyEndpoint" }
        },
        "type": "object"
      },
      "AuthorizationDataList": { "items": { "$ref": "#/components/schemas/AuthorizationData" }, "type": "array" },
      "Base64": { "pattern": "^\\S+$", "type": "string" },
      "BatchCheckLayerAvailabilityRequest": {
        "properties": {
          "layerDigests": { "$ref": "#/components/schemas/BatchedOperationLayerDigestList" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "layerDigests"],
        "type": "object"
      },
      "BatchCheckLayerAvailabilityResponse": {
        "properties": {
          "failures": { "$ref": "#/components/schemas/LayerFailureList" },
          "layers": { "$ref": "#/components/schemas/LayerList" }
        },
        "type": "object"
      },
      "BatchDeleteImageRequest": {
        "description": "Deletes specified images within a specified repository. Images are specified with either the <code>imageTag</code> or <code>imageDigest</code>.",
        "properties": {
          "imageIds": { "$ref": "#/components/schemas/ImageIdentifierList" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "imageIds"],
        "type": "object"
      },
      "BatchDeleteImageResponse": {
        "example": {
          "failures": [],
          "imageIds": [
            {
              "imageDigest": "sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f",
              "imageTag": "precise"
            }
          ]
        },
        "properties": {
          "failures": { "$ref": "#/components/schemas/ImageFailureList" },
          "imageIds": { "$ref": "#/components/schemas/ImageIdentifierList" }
        },
        "type": "object"
      },
      "BatchGetImageRequest": {
        "properties": {
          "acceptedMediaTypes": { "$ref": "#/components/schemas/MediaTypeList" },
          "imageIds": { "$ref": "#/components/schemas/ImageIdentifierList" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "imageIds"],
        "type": "object"
      },
      "BatchGetImageResponse": {
        "example": {
          "failures": [],
          "images": [
            {
              "imageId": {
                "imageDigest": "sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a",
                "imageTag": "precise"
              },
              "imageManifest": "{\n \"schemaVersion\": 1,\n \"name\": \"ubuntu\",\n \"tag\": \"precise\",\n...",
              "registryId": "244698725403",
              "repositoryName": "ubuntu"
            }
          ]
        },
        "properties": {
          "failures": { "$ref": "#/components/schemas/ImageFailureList" },
          "images": { "$ref": "#/components/schemas/ImageList" }
        },
        "type": "object"
      },
      "BatchedOperationLayerDigest": { "maxLength": 1000, "minLength": 0, "type": "string" },
      "BatchedOperationLayerDigestList": {
        "items": { "$ref": "#/components/schemas/BatchedOperationLayerDigest" },
        "maxItems": 100,
        "minItems": 1,
        "type": "array"
      },
      "CompleteLayerUploadRequest": {
        "properties": {
          "layerDigests": { "$ref": "#/components/schemas/LayerDigestList" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "uploadId": { "$ref": "#/components/schemas/UploadId" }
        },
        "required": ["repositoryName", "uploadId", "layerDigests"],
        "type": "object"
      },
      "CompleteLayerUploadResponse": {
        "properties": {
          "layerDigest": { "$ref": "#/components/schemas/LayerDigest" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "uploadId": { "$ref": "#/components/schemas/UploadId" }
        },
        "type": "object"
      },
      "CreateRepositoryRequest": {
        "properties": {
          "imageTagMutability": { "$ref": "#/components/schemas/ImageTagMutability" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "CreateRepositoryResponse": {
        "example": {
          "repository": {
            "registryId": "012345678901",
            "repositoryArn": "arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app",
            "repositoryName": "project-a/nginx-web-app"
          }
        },
        "properties": { "repository": { "$ref": "#/components/schemas/Repository" } },
        "type": "object"
      },
      "CreationTimestamp": { "format": "date-time", "type": "string" },
      "DeleteLifecyclePolicyRequest": {
        "properties": {
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "DeleteLifecyclePolicyResponse": {
        "properties": {
          "lastEvaluatedAt": { "$ref": "#/components/schemas/EvaluationTimestamp" },
          "lifecyclePolicyText": { "$ref": "#/components/schemas/LifecyclePolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "DeleteRepositoryPolicyRequest": {
        "properties": {
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "DeleteRepositoryPolicyResponse": {
        "example": { "policyText": "{ ... }", "registryId": "012345678901", "repositoryName": "ubuntu" },
        "properties": {
          "policyText": { "$ref": "#/components/schemas/RepositoryPolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "DeleteRepositoryRequest": {
        "properties": {
          "force": { "$ref": "#/components/schemas/ForceFlag" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "DeleteRepositoryResponse": {
        "example": {
          "repository": {
            "registryId": "012345678901",
            "repositoryArn": "arn:aws:ecr:us-west-2:012345678901:repository/ubuntu",
            "repositoryName": "ubuntu"
          }
        },
        "properties": { "repository": { "$ref": "#/components/schemas/Repository" } },
        "type": "object"
      },
      "DescribeImagesFilter": {
        "description": "An object representing a filter on a <a>DescribeImages</a> operation.",
        "properties": { "tagStatus": { "$ref": "#/components/schemas/TagStatus" } },
        "type": "object"
      },
      "DescribeImagesRequest": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/DescribeImagesFilter" },
          "imageIds": { "$ref": "#/components/schemas/ImageIdentifierList" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "DescribeImagesResponse": {
        "properties": {
          "imageDetails": { "$ref": "#/components/schemas/ImageDetailList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "DescribeRepositoriesRequest": {
        "properties": {
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryNames": { "$ref": "#/components/schemas/RepositoryNameList" }
        },
        "type": "object"
      },
      "DescribeRepositoriesResponse": {
        "example": {
          "repositories": [
            {
              "registryId": "012345678910",
              "repositoryArn": "arn:aws:ecr:us-west-2:012345678910:repository/ubuntu",
              "repositoryName": "ubuntu"
            },
            {
              "registryId": "012345678910",
              "repositoryArn": "arn:aws:ecr:us-west-2:012345678910:repository/test",
              "repositoryName": "test"
            }
          ]
        },
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "repositories": { "$ref": "#/components/schemas/RepositoryList" }
        },
        "type": "object"
      },
      "EmptyUploadException": {},
      "EvaluationTimestamp": { "format": "date-time", "type": "string" },
      "ExpirationTimestamp": { "format": "date-time", "type": "string" },
      "ForceFlag": { "type": "boolean" },
      "GetAuthorizationTokenRegistryIdList": {
        "items": { "$ref": "#/components/schemas/RegistryId" },
        "maxItems": 10,
        "minItems": 1,
        "type": "array"
      },
      "GetAuthorizationTokenRequest": {
        "properties": { "registryIds": { "$ref": "#/components/schemas/GetAuthorizationTokenRegistryIdList" } },
        "type": "object"
      },
      "GetAuthorizationTokenResponse": {
        "example": {
          "authorizationData": [
            {
              "authorizationToken": "QVdTOkN...",
              "expiresAt": "1470951892432",
              "proxyEndpoint": "https://012345678901.dkr.ecr.us-west-2.amazonaws.com"
            }
          ]
        },
        "properties": { "authorizationData": { "$ref": "#/components/schemas/AuthorizationDataList" } },
        "type": "object"
      },
      "GetDownloadUrlForLayerRequest": {
        "properties": {
          "layerDigest": { "$ref": "#/components/schemas/LayerDigest" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "layerDigest"],
        "type": "object"
      },
      "GetDownloadUrlForLayerResponse": {
        "properties": {
          "downloadUrl": { "$ref": "#/components/schemas/Url" },
          "layerDigest": { "$ref": "#/components/schemas/LayerDigest" }
        },
        "type": "object"
      },
      "GetLifecyclePolicyPreviewRequest": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/LifecyclePolicyPreviewFilter" },
          "imageIds": { "$ref": "#/components/schemas/ImageIdentifierList" },
          "maxResults": { "$ref": "#/components/schemas/LifecyclePreviewMaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "GetLifecyclePolicyPreviewResponse": {
        "properties": {
          "lifecyclePolicyText": { "$ref": "#/components/schemas/LifecyclePolicyText" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "previewResults": { "$ref": "#/components/schemas/LifecyclePolicyPreviewResultList" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "status": { "$ref": "#/components/schemas/LifecyclePolicyPreviewStatus" },
          "summary": { "$ref": "#/components/schemas/LifecyclePolicyPreviewSummary" }
        },
        "type": "object"
      },
      "GetLifecyclePolicyRequest": {
        "properties": {
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "GetLifecyclePolicyResponse": {
        "properties": {
          "lastEvaluatedAt": { "$ref": "#/components/schemas/EvaluationTimestamp" },
          "lifecyclePolicyText": { "$ref": "#/components/schemas/LifecyclePolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "GetRepositoryPolicyRequest": {
        "properties": {
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "GetRepositoryPolicyResponse": {
        "example": {
          "policyText": "{\n  \"Version\" : \"2008-10-17\",\n  \"Statement\" : [ {\n    \"Sid\" : \"new statement\",\n    \"Effect\" : \"Allow\",\n    \"Principal\" : {\n     \"AWS\" : \"arn:aws:iam::012345678901:role/CodeDeployDemo\"\n    },\n\"Action\" : [ \"ecr:GetDownloadUrlForLayer\", \"ecr:BatchGetImage\", \"ecr:BatchCheckLayerAvailability\" ]\n } ]\n}",
          "registryId": "012345678901",
          "repositoryName": "ubuntu"
        },
        "properties": {
          "policyText": { "$ref": "#/components/schemas/RepositoryPolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "Image": {
        "description": "An object representing an Amazon ECR image.",
        "properties": {
          "imageId": { "$ref": "#/components/schemas/ImageIdentifier" },
          "imageManifest": { "$ref": "#/components/schemas/ImageManifest" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "ImageActionType": { "enum": ["EXPIRE"], "type": "string" },
      "ImageAlreadyExistsException": {},
      "ImageCount": { "minimum": 0, "type": "integer" },
      "ImageDetail": {
        "description": "An object that describes an image returned by a <a>DescribeImages</a> operation.",
        "properties": {
          "imageDigest": { "$ref": "#/components/schemas/ImageDigest" },
          "imagePushedAt": { "$ref": "#/components/schemas/PushTimestamp" },
          "imageSizeInBytes": { "$ref": "#/components/schemas/ImageSizeInBytes" },
          "imageTags": { "$ref": "#/components/schemas/ImageTagList" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "ImageDetailList": { "items": { "$ref": "#/components/schemas/ImageDetail" }, "type": "array" },
      "ImageDigest": { "type": "string" },
      "ImageFailure": {
        "description": "An object representing an Amazon ECR image failure.",
        "properties": {
          "failureCode": { "$ref": "#/components/schemas/ImageFailureCode" },
          "failureReason": { "$ref": "#/components/schemas/ImageFailureReason" },
          "imageId": { "$ref": "#/components/schemas/ImageIdentifier" }
        },
        "type": "object"
      },
      "ImageFailureCode": {
        "enum": [
          "InvalidImageDigest",
          "InvalidImageTag",
          "ImageTagDoesNotMatchDigest",
          "ImageNotFound",
          "MissingDigestAndTag"
        ],
        "type": "string"
      },
      "ImageFailureList": { "items": { "$ref": "#/components/schemas/ImageFailure" }, "type": "array" },
      "ImageFailureReason": { "type": "string" },
      "ImageIdentifier": {
        "description": "An object with identifying information for an Amazon ECR image.",
        "properties": {
          "imageDigest": { "$ref": "#/components/schemas/ImageDigest" },
          "imageTag": { "$ref": "#/components/schemas/ImageTag" }
        },
        "type": "object"
      },
      "ImageIdentifierList": {
        "items": { "$ref": "#/components/schemas/ImageIdentifier" },
        "maxItems": 100,
        "minItems": 1,
        "type": "array"
      },
      "ImageList": { "items": { "$ref": "#/components/schemas/Image" }, "type": "array" },
      "ImageManifest": { "type": "string" },
      "ImageNotFoundException": {},
      "ImageSizeInBytes": { "type": "integer" },
      "ImageTag": { "maxLength": 300, "minLength": 1, "type": "string" },
      "ImageTagAlreadyExistsException": {},
      "ImageTagList": { "items": { "$ref": "#/components/schemas/ImageTag" }, "type": "array" },
      "ImageTagMutability": { "enum": ["MUTABLE", "IMMUTABLE"], "type": "string" },
      "InitiateLayerUploadRequest": {
        "properties": {
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "InitiateLayerUploadResponse": {
        "properties": {
          "partSize": { "$ref": "#/components/schemas/PartSize" },
          "uploadId": { "$ref": "#/components/schemas/UploadId" }
        },
        "type": "object"
      },
      "InvalidLayerException": {},
      "InvalidLayerPartException": {},
      "InvalidParameterException": {},
      "InvalidTagParameterException": {},
      "Layer": {
        "description": "An object representing an Amazon ECR image layer.",
        "properties": {
          "layerAvailability": { "$ref": "#/components/schemas/LayerAvailability" },
          "layerDigest": { "$ref": "#/components/schemas/LayerDigest" },
          "layerSize": { "$ref": "#/components/schemas/LayerSizeInBytes" },
          "mediaType": { "$ref": "#/components/schemas/MediaType" }
        },
        "type": "object"
      },
      "LayerAlreadyExistsException": {},
      "LayerAvailability": { "enum": ["AVAILABLE", "UNAVAILABLE"], "type": "string" },
      "LayerDigest": { "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+", "type": "string" },
      "LayerDigestList": {
        "items": { "$ref": "#/components/schemas/LayerDigest" },
        "maxItems": 100,
        "minItems": 1,
        "type": "array"
      },
      "LayerFailure": {
        "description": "An object representing an Amazon ECR image layer failure.",
        "properties": {
          "failureCode": { "$ref": "#/components/schemas/LayerFailureCode" },
          "failureReason": { "$ref": "#/components/schemas/LayerFailureReason" },
          "layerDigest": { "$ref": "#/components/schemas/BatchedOperationLayerDigest" }
        },
        "type": "object"
      },
      "LayerFailureCode": { "enum": ["InvalidLayerDigest", "MissingLayerDigest"], "type": "string" },
      "LayerFailureList": { "items": { "$ref": "#/components/schemas/LayerFailure" }, "type": "array" },
      "LayerFailureReason": { "type": "string" },
      "LayerInaccessibleException": {},
      "LayerList": { "items": { "$ref": "#/components/schemas/Layer" }, "type": "array" },
      "LayerPartBlob": { "type": "string" },
      "LayerPartTooSmallException": {},
      "LayerSizeInBytes": { "type": "integer" },
      "LayersNotFoundException": {},
      "LifecyclePolicyNotFoundException": {},
      "LifecyclePolicyPreviewFilter": {
        "description": "The filter for the lifecycle policy preview.",
        "properties": { "tagStatus": { "$ref": "#/components/schemas/TagStatus" } },
        "type": "object"
      },
      "LifecyclePolicyPreviewInProgressException": {},
      "LifecyclePolicyPreviewNotFoundException": {},
      "LifecyclePolicyPreviewResult": {
        "description": "The result of the lifecycle policy preview.",
        "properties": {
          "action": { "$ref": "#/components/schemas/LifecyclePolicyRuleAction" },
          "appliedRulePriority": { "$ref": "#/components/schemas/LifecyclePolicyRulePriority" },
          "imageDigest": { "$ref": "#/components/schemas/ImageDigest" },
          "imagePushedAt": { "$ref": "#/components/schemas/PushTimestamp" },
          "imageTags": { "$ref": "#/components/schemas/ImageTagList" }
        },
        "type": "object"
      },
      "LifecyclePolicyPreviewResultList": {
        "items": { "$ref": "#/components/schemas/LifecyclePolicyPreviewResult" },
        "type": "array"
      },
      "LifecyclePolicyPreviewStatus": { "enum": ["IN_PROGRESS", "COMPLETE", "EXPIRED", "FAILED"], "type": "string" },
      "LifecyclePolicyPreviewSummary": {
        "description": "The summary of the lifecycle policy preview request.",
        "properties": { "expiringImageTotalCount": { "$ref": "#/components/schemas/ImageCount" } },
        "type": "object"
      },
      "LifecyclePolicyRuleAction": {
        "description": "The type of action to be taken.",
        "properties": { "type": { "$ref": "#/components/schemas/ImageActionType" } },
        "type": "object"
      },
      "LifecyclePolicyRulePriority": { "minimum": 1, "type": "integer" },
      "LifecyclePolicyText": { "maxLength": 30720, "minLength": 100, "type": "string" },
      "LifecyclePreviewMaxResults": { "maximum": 100, "minimum": 1, "type": "integer" },
      "LimitExceededException": {},
      "ListImagesFilter": {
        "description": "An object representing a filter on a <a>ListImages</a> operation.",
        "properties": { "tagStatus": { "$ref": "#/components/schemas/TagStatus" } },
        "type": "object"
      },
      "ListImagesRequest": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/ListImagesFilter" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "ListImagesResponse": {
        "example": {
          "imageIds": [
            {
              "imageDigest": "sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a",
              "imageTag": "precise"
            }
          ]
        },
        "properties": {
          "imageIds": { "$ref": "#/components/schemas/ImageIdentifierList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListTagsForResourceRequest": {
        "properties": { "resourceArn": { "$ref": "#/components/schemas/Arn" } },
        "required": ["resourceArn"],
        "type": "object"
      },
      "ListTagsForResourceResponse": {
        "properties": { "tags": { "$ref": "#/components/schemas/TagList" } },
        "type": "object"
      },
      "MaxResults": { "maximum": 1000, "minimum": 1, "type": "integer" },
      "MediaType": { "type": "string" },
      "MediaTypeList": {
        "items": { "$ref": "#/components/schemas/MediaType" },
        "maxItems": 100,
        "minItems": 1,
        "type": "array"
      },
      "NextToken": { "type": "string" },
      "PartSize": { "minimum": 0, "type": "integer" },
      "ProxyEndpoint": { "type": "string" },
      "PushTimestamp": { "format": "date-time", "type": "string" },
      "PutImageRequest": {
        "properties": {
          "imageManifest": { "$ref": "#/components/schemas/ImageManifest" },
          "imageTag": { "$ref": "#/components/schemas/ImageTag" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "imageManifest"],
        "type": "object"
      },
      "PutImageResponse": { "properties": { "image": { "$ref": "#/components/schemas/Image" } }, "type": "object" },
      "PutImageTagMutabilityRequest": {
        "properties": {
          "imageTagMutability": { "$ref": "#/components/schemas/ImageTagMutability" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "imageTagMutability"],
        "type": "object"
      },
      "PutImageTagMutabilityResponse": {
        "properties": {
          "imageTagMutability": { "$ref": "#/components/schemas/ImageTagMutability" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "PutLifecyclePolicyRequest": {
        "properties": {
          "lifecyclePolicyText": { "$ref": "#/components/schemas/LifecyclePolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "lifecyclePolicyText"],
        "type": "object"
      },
      "PutLifecyclePolicyResponse": {
        "properties": {
          "lifecyclePolicyText": { "$ref": "#/components/schemas/LifecyclePolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "RegistryId": { "pattern": "[0-9]{12}", "type": "string" },
      "Repository": {
        "description": "An object representing a repository.",
        "properties": {
          "createdAt": { "$ref": "#/components/schemas/CreationTimestamp" },
          "imageTagMutability": { "$ref": "#/components/schemas/ImageTagMutability" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryArn": { "$ref": "#/components/schemas/Arn" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "repositoryUri": { "$ref": "#/components/schemas/Url" }
        },
        "type": "object"
      },
      "RepositoryAlreadyExistsException": {},
      "RepositoryList": { "items": { "$ref": "#/components/schemas/Repository" }, "type": "array" },
      "RepositoryName": {
        "maxLength": 256,
        "minLength": 2,
        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
        "type": "string"
      },
      "RepositoryNameList": {
        "items": { "$ref": "#/components/schemas/RepositoryName" },
        "maxItems": 100,
        "minItems": 1,
        "type": "array"
      },
      "RepositoryNotEmptyException": {},
      "RepositoryNotFoundException": {},
      "RepositoryPolicyNotFoundException": {},
      "RepositoryPolicyText": { "maxLength": 10240, "minLength": 0, "type": "string" },
      "ServerException": {},
      "SetRepositoryPolicyRequest": {
        "properties": {
          "force": { "$ref": "#/components/schemas/ForceFlag" },
          "policyText": { "$ref": "#/components/schemas/RepositoryPolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "policyText"],
        "type": "object"
      },
      "SetRepositoryPolicyResponse": {
        "properties": {
          "policyText": { "$ref": "#/components/schemas/RepositoryPolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "StartLifecyclePolicyPreviewRequest": {
        "properties": {
          "lifecyclePolicyText": { "$ref": "#/components/schemas/LifecyclePolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "StartLifecyclePolicyPreviewResponse": {
        "properties": {
          "lifecyclePolicyText": { "$ref": "#/components/schemas/LifecyclePolicyText" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "status": { "$ref": "#/components/schemas/LifecyclePolicyPreviewStatus" }
        },
        "type": "object"
      },
      "Tag": {
        "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
        "properties": {
          "Key": { "$ref": "#/components/schemas/TagKey" },
          "Value": { "$ref": "#/components/schemas/TagValue" }
        },
        "type": "object"
      },
      "TagKey": { "type": "string" },
      "TagKeyList": { "items": { "$ref": "#/components/schemas/TagKey" }, "type": "array" },
      "TagList": { "items": { "$ref": "#/components/schemas/Tag" }, "type": "array" },
      "TagResourceRequest": {
        "properties": {
          "resourceArn": { "$ref": "#/components/schemas/Arn" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["resourceArn", "tags"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagStatus": { "enum": ["TAGGED", "UNTAGGED", "ANY"], "type": "string" },
      "TagValue": { "type": "string" },
      "TooManyTagsException": {},
      "UntagResourceRequest": {
        "properties": {
          "resourceArn": { "$ref": "#/components/schemas/Arn" },
          "tagKeys": { "$ref": "#/components/schemas/TagKeyList" }
        },
        "required": ["resourceArn", "tagKeys"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UploadId": {
        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
        "type": "string"
      },
      "UploadLayerPartRequest": {
        "properties": {
          "layerPartBlob": { "$ref": "#/components/schemas/LayerPartBlob" },
          "partFirstByte": { "$ref": "#/components/schemas/PartSize" },
          "partLastByte": { "$ref": "#/components/schemas/PartSize" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "uploadId": { "$ref": "#/components/schemas/UploadId" }
        },
        "required": ["repositoryName", "uploadId", "partFirstByte", "partLastByte", "layerPartBlob"],
        "type": "object"
      },
      "UploadLayerPartResponse": {
        "properties": {
          "lastByteReceived": { "$ref": "#/components/schemas/PartSize" },
          "registryId": { "$ref": "#/components/schemas/RegistryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "uploadId": { "$ref": "#/components/schemas/UploadId" }
        },
        "type": "object"
      },
      "UploadNotFoundException": {},
      "Url": { "type": "string" }
    }
  }
}
