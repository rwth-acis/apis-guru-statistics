{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Glue</fullname> <p>Defines the public endpoint for the AWS Glue service.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Glue",
    "version": "2017-03-31",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/glue-2017-03-31.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "glue"
  },
  "externalDocs": { "description": "Amazon Web Services documentation", "url": "https://docs.aws.amazon.com/glue/" },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=AWSGlue.BatchCreatePartition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates one or more partitions in a batch operation.",
        "operationId": "BatchCreatePartition",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchCreatePartition"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchCreatePartitionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchCreatePartitionResponse" } }
            }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "485": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchDeleteConnection": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a list of connection definitions from the Data Catalog.",
        "operationId": "BatchDeleteConnection",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchDeleteConnection"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteConnectionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteConnectionResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchDeletePartition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes one or more partitions in a batch operation.",
        "operationId": "BatchDeletePartition",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchDeletePartition"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeletePartitionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeletePartitionResponse" } }
            }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchDeleteTable": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes multiple tables at once.</p> <note> <p>After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. AWS Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>BatchDeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note>",
        "operationId": "BatchDeleteTable",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchDeleteTable"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteTableRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteTableResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchDeleteTableVersion": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified batch of versions of a table.",
        "operationId": "BatchDeleteTableVersion",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchDeleteTableVersion"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteTableVersionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteTableVersionResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetCrawlers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of resource metadata for a given list of crawler names. After calling the <code>ListCrawlers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.",
        "operationId": "BatchGetCrawlers",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchGetCrawlers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetCrawlersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetCrawlersResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetDevEndpoints": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of resource metadata for a given list of development endpoint names. After calling the <code>ListDevEndpoints</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.",
        "operationId": "BatchGetDevEndpoints",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchGetDevEndpoints"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetDevEndpointsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetDevEndpointsResponse" } }
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetJobs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of resource metadata for a given list of job names. After calling the <code>ListJobs</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. ",
        "operationId": "BatchGetJobs",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchGetJobs"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetJobsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetJobsResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "482": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetPartition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves partitions in a batch request.",
        "operationId": "BatchGetPartition",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchGetPartition"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetPartitionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetPartitionResponse" } }
            }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetTriggers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of resource metadata for a given list of trigger names. After calling the <code>ListTriggers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.",
        "operationId": "BatchGetTriggers",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchGetTriggers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetTriggersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetTriggersResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "482": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetWorkflows": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of resource metadata for a given list of workflow names. After calling the <code>ListWorkflows</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.",
        "operationId": "BatchGetWorkflows",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchGetWorkflows"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetWorkflowsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetWorkflowsResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "482": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchStopJobRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Stops one or more job runs for a specified job definition.",
        "operationId": "BatchStopJobRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.BatchStopJobRun"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchStopJobRunRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchStopJobRunResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CancelMLTaskRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Cancels (stops) a task run. Machine learning task runs are asynchronous tasks that AWS Glue runs on your behalf as part of various machine learning workflows. You can cancel a machine learning task run at any time by calling <code>CancelMLTaskRun</code> with a task run's parent transform's <code>TransformID</code> and the task run's <code>TaskRunId</code>. ",
        "operationId": "CancelMLTaskRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CancelMLTaskRun"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CancelMLTaskRunRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CancelMLTaskRunResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateClassifier": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a classifier in the user's account. This can be a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field of the request is present.",
        "operationId": "CreateClassifier",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateClassifier"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateClassifierRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateClassifierResponse" } } }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateConnection": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a connection definition in the Data Catalog.",
        "operationId": "CreateConnection",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateConnection"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateConnectionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateConnectionResponse" } } }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateCrawler": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in the <code>s3Targets</code> field, the <code>jdbcTargets</code> field, or the <code>DynamoDBTargets</code> field.",
        "operationId": "CreateCrawler",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateCrawler"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateCrawlerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateCrawlerResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateDatabase": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new database in a Data Catalog.",
        "operationId": "CreateDatabase",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateDatabase"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDatabaseRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDatabaseResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "485": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateDevEndpoint": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new development endpoint.",
        "operationId": "CreateDevEndpoint",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateDevEndpoint"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDevEndpointRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateDevEndpointResponse" } }
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "481": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "482": {
            "description": "IdempotentParameterMismatchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "485": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "486": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "487": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateJob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new job definition.",
        "operationId": "CreateJob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateJob"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateJobRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateJobResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "IdempotentParameterMismatchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "482": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateMLTransform": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates an AWS Glue machine learning transform. This operation creates the transform and all the necessary parameters to train it.</p> <p>Call this operation as the first step in the process of using a machine learning transform (such as the <code>FindMatches</code> transform) for deduplicating data. You can provide an optional <code>Description</code>, in addition to the parameters that you want to use for your algorithm.</p> <p>You must also specify certain parameters for the tasks that AWS Glue runs on your behalf as part of learning from your data and creating a high-quality machine learning transform. These parameters include <code>Role</code>, and optionally, <code>AllocatedCapacity</code>, <code>Timeout</code>, and <code>MaxRetries</code>. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html\">Jobs</a>.</p>",
        "operationId": "CreateMLTransform",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateMLTransform"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateMLTransformRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateMLTransformResponse" } }
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "486": {
            "description": "IdempotentParameterMismatchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreatePartition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new partition.",
        "operationId": "CreatePartition",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreatePartition"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreatePartitionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreatePartitionResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "485": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateScript": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Transforms a directed acyclic graph (DAG) into code.",
        "operationId": "CreateScript",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateScript"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateScriptRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateScriptResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateSecurityConfiguration": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new security configuration. A security configuration is a set of security properties that can be used by AWS Glue. You can use a security configuration to encrypt data at rest. For information about using security configurations in AWS Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html\">Encrypting Data Written by Crawlers, Jobs, and Development Endpoints</a>.",
        "operationId": "CreateSecurityConfiguration",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateSecurityConfiguration"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateSecurityConfigurationRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateSecurityConfigurationResponse" } }
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateTable": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new table definition in the Data Catalog.",
        "operationId": "CreateTable",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateTable"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTableRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTableResponse" } } }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "484": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "485": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateTrigger": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new trigger.",
        "operationId": "CreateTrigger",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateTrigger"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTriggerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTriggerResponse" } } }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "483": {
            "description": "IdempotentParameterMismatchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "484": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "485": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "486": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "487": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateUserDefinedFunction": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new function definition in the Data Catalog.",
        "operationId": "CreateUserDefinedFunction",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateUserDefinedFunction"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserDefinedFunctionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserDefinedFunctionResponse" } }
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "484": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateWorkflow": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new workflow.",
        "operationId": "CreateWorkflow",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.CreateWorkflow"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateWorkflowRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateWorkflowResponse" } } }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "485": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteClassifier": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes a classifier from the Data Catalog.",
        "operationId": "DeleteClassifier",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteClassifier"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteClassifierRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteClassifierResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteConnection": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a connection from the Data Catalog.",
        "operationId": "DeleteConnection",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteConnection"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteConnectionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteConnectionResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteCrawler": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes a specified crawler from the AWS Glue Data Catalog, unless the crawler state is <code>RUNNING</code>.",
        "operationId": "DeleteCrawler",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteCrawler"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteCrawlerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteCrawlerResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "CrawlerRunningException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerRunningException" } } }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchedulerTransitioningException" } }
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteDatabase": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Removes a specified database from a Data Catalog.</p> <note> <p>After completing this operation, you no longer have access to the tables (and all table versions and partitions that might belong to the tables) and the user-defined functions in the deleted database. AWS Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>DeleteDatabase</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, <code>DeletePartition</code> or <code>BatchDeletePartition</code>, <code>DeleteUserDefinedFunction</code>, and <code>DeleteTable</code> or <code>BatchDeleteTable</code>, to delete any resources that belong to the database.</p> </note>",
        "operationId": "DeleteDatabase",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteDatabase"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDatabaseRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDatabaseResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteDevEndpoint": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified development endpoint.",
        "operationId": "DeleteDevEndpoint",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteDevEndpoint"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDevEndpointRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDevEndpointResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteJob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified job definition. If the job definition is not found, no exception is thrown.",
        "operationId": "DeleteJob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteJob"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteJobRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteJobResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteMLTransform": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes an AWS Glue machine learning transform. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by AWS Glue. If you no longer need a transform, you can delete it by calling <code>DeleteMLTransforms</code>. However, any AWS Glue jobs that still reference the deleted transform will no longer succeed.",
        "operationId": "DeleteMLTransform",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteMLTransform"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteMLTransformRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteMLTransformResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeletePartition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified partition.",
        "operationId": "DeletePartition",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeletePartition"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeletePartitionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeletePartitionResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteResourcePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified policy.",
        "operationId": "DeleteResourcePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteResourcePolicy"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteResourcePolicyRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteResourcePolicyResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "484": {
            "description": "ConditionCheckFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConditionCheckFailureException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteSecurityConfiguration": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified security configuration.",
        "operationId": "DeleteSecurityConfiguration",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteSecurityConfiguration"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSecurityConfigurationRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSecurityConfigurationResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteTable": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Removes a table definition from the Data Catalog.</p> <note> <p>After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. AWS Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>DeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note>",
        "operationId": "DeleteTable",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteTable"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTableRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTableResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteTableVersion": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified version of a table.",
        "operationId": "DeleteTableVersion",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteTableVersion"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTableVersionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTableVersionResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteTrigger": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified trigger. If the trigger is not found, no exception is thrown.",
        "operationId": "DeleteTrigger",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteTrigger"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTriggerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTriggerResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteUserDefinedFunction": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes an existing function definition from the Data Catalog.",
        "operationId": "DeleteUserDefinedFunction",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteUserDefinedFunction"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserDefinedFunctionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserDefinedFunctionResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteWorkflow": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a workflow.",
        "operationId": "DeleteWorkflow",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.DeleteWorkflow"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteWorkflowRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteWorkflowResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetCatalogImportStatus": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the status of a migration operation.",
        "operationId": "GetCatalogImportStatus",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetCatalogImportStatus"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetCatalogImportStatusRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetCatalogImportStatusResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetClassifier": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieve a classifier by name.",
        "operationId": "GetClassifier",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetClassifier"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetClassifierRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetClassifierResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetClassifiers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists all classifier objects in the Data Catalog.",
        "operationId": "GetClassifiers",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetClassifiers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetClassifiersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetClassifiersResponse" } } }
          },
          "480": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetConnection": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a connection definition from the Data Catalog.",
        "operationId": "GetConnection",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetConnection"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetConnectionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetConnectionResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "482": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "483": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetConnections": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list of connection definitions from the Data Catalog.",
        "operationId": "GetConnections",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetConnections"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetConnectionsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetConnectionsResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "482": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "483": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetCrawler": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves metadata for a specified crawler.",
        "operationId": "GetCrawler",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetCrawler"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCrawlerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCrawlerResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetCrawlerMetrics": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves metrics about specified crawlers.",
        "operationId": "GetCrawlerMetrics",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetCrawlerMetrics"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCrawlerMetricsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetCrawlerMetricsResponse" } }
            }
          },
          "480": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetCrawlers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves metadata for all crawlers defined in the customer account.",
        "operationId": "GetCrawlers",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetCrawlers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCrawlersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCrawlersResponse" } } }
          },
          "480": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDataCatalogEncryptionSettings": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the security configuration for a specified catalog.",
        "operationId": "GetDataCatalogEncryptionSettings",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetDataCatalogEncryptionSettings"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetDataCatalogEncryptionSettingsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetDataCatalogEncryptionSettingsResponse" }
              }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDatabase": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the definition of a specified database.",
        "operationId": "GetDatabase",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetDatabase"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDatabaseRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDatabaseResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDatabases": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves all databases defined in a given Data Catalog.",
        "operationId": "GetDatabases",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetDatabases"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDatabasesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDatabasesResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDataflowGraph": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Transforms a Python script into a directed acyclic graph (DAG). ",
        "operationId": "GetDataflowGraph",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetDataflowGraph"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDataflowGraphRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDataflowGraphResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDevEndpoint": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves information about a specified development endpoint.</p> <note> <p>When you create a development endpoint in a virtual private cloud (VPC), AWS Glue returns only a private IP address, and the public IP address field is not populated. When you create a non-VPC development endpoint, AWS Glue returns only a public IP address.</p> </note>",
        "operationId": "GetDevEndpoint",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetDevEndpoint"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDevEndpointRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDevEndpointResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDevEndpoints": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves all the development endpoints in this AWS account.</p> <note> <p>When you create a development endpoint in a virtual private cloud (VPC), AWS Glue returns only a private IP address and the public IP address field is not populated. When you create a non-VPC development endpoint, AWS Glue returns only a public IP address.</p> </note>",
        "operationId": "GetDevEndpoints",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetDevEndpoints"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDevEndpointsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDevEndpointsResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves an existing job definition.",
        "operationId": "GetJob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetJob"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJobBookmark": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information on a job bookmark entry.",
        "operationId": "GetJobBookmark",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetJobBookmark"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobBookmarkRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobBookmarkResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJobRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the metadata for a given job run.",
        "operationId": "GetJobRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetJobRun"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobRunRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobRunResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJobRuns": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves metadata for all runs of a given job definition.",
        "operationId": "GetJobRuns",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetJobRuns"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobRunsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobRunsResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJobs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves all current job definitions.",
        "operationId": "GetJobs",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetJobs"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobsResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMLTaskRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets details for a specific task run on a machine learning transform. Machine learning task runs are asynchronous tasks that AWS Glue runs on your behalf as part of various machine learning workflows. You can check the stats of any task run by calling <code>GetMLTaskRun</code> with the <code>TaskRunID</code> and its parent transform's <code>TransformID</code>.",
        "operationId": "GetMLTaskRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetMLTaskRun"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLTaskRunRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLTaskRunResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMLTaskRuns": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Gets a list of runs for a machine learning transform. Machine learning task runs are asynchronous tasks that AWS Glue runs on your behalf as part of various machine learning workflows. You can get a sortable, filterable list of machine learning task runs by calling <code>GetMLTaskRuns</code> with their parent transform's <code>TransformID</code> and other optional parameters as documented in this section.</p> <p>This operation returns a list of historic runs and must be paginated.</p>",
        "operationId": "GetMLTaskRuns",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetMLTaskRuns"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLTaskRunsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLTaskRunsResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMLTransform": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets an AWS Glue machine learning transform artifact and all its corresponding metadata. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by AWS Glue. You can retrieve their metadata by calling <code>GetMLTransform</code>.",
        "operationId": "GetMLTransform",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetMLTransform"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLTransformRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLTransformResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMLTransforms": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets a sortable, filterable list of existing AWS Glue machine learning transforms. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by AWS Glue, and you can retrieve their metadata by calling <code>GetMLTransforms</code>.",
        "operationId": "GetMLTransforms",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetMLTransforms"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLTransformsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLTransformsResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMapping": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates mappings.",
        "operationId": "GetMapping",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetMapping"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMappingRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMappingResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetPartition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves information about a specified partition.",
        "operationId": "GetPartition",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetPartition"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPartitionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPartitionResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetPartitions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves information about the partitions in a table.",
        "operationId": "GetPartitions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetPartitions"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPartitionsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPartitionsResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetPlan": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets code to perform a specified mapping.",
        "operationId": "GetPlan",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetPlan"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPlanRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPlanResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetResourcePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a specified resource policy.",
        "operationId": "GetResourcePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetResourcePolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetResourcePolicyRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetResourcePolicyResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetSecurityConfiguration": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a specified security configuration.",
        "operationId": "GetSecurityConfiguration",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetSecurityConfiguration"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetSecurityConfigurationRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetSecurityConfigurationResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetSecurityConfigurations": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list of all security configurations.",
        "operationId": "GetSecurityConfigurations",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetSecurityConfigurations"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetSecurityConfigurationsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetSecurityConfigurationsResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTable": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the <code>Table</code> definition in a Data Catalog for a specified table.",
        "operationId": "GetTable",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetTable"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTableRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTableResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTableVersion": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a specified version of a table.",
        "operationId": "GetTableVersion",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetTableVersion"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTableVersionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTableVersionResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTableVersions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list of strings that identify available versions of a specified table.",
        "operationId": "GetTableVersions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetTableVersions"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTableVersionsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTableVersionsResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTables": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the definitions of some or all of the tables in a given <code>Database</code>.",
        "operationId": "GetTables",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetTables"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTablesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTablesResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTags": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list of tags associated with a resource.",
        "operationId": "GetTags",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetTags"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTagsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTagsResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTrigger": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the definition of a trigger.",
        "operationId": "GetTrigger",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetTrigger"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTriggerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTriggerResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTriggers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets all the triggers associated with a job.",
        "operationId": "GetTriggers",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetTriggers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTriggersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTriggersResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetUserDefinedFunction": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a specified function definition from the Data Catalog.",
        "operationId": "GetUserDefinedFunction",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetUserDefinedFunction"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetUserDefinedFunctionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetUserDefinedFunctionResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetUserDefinedFunctions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves multiple function definitions from the Data Catalog.",
        "operationId": "GetUserDefinedFunctions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetUserDefinedFunctions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetUserDefinedFunctionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetUserDefinedFunctionsResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetWorkflow": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves resource metadata for a workflow.",
        "operationId": "GetWorkflow",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetWorkflow"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetWorkflowRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetWorkflowResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetWorkflowRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the metadata for a given workflow run. ",
        "operationId": "GetWorkflowRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetWorkflowRun"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetWorkflowRunRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetWorkflowRunResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetWorkflowRunProperties": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the workflow run properties which were set during the run.",
        "operationId": "GetWorkflowRunProperties",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetWorkflowRunProperties"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetWorkflowRunPropertiesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetWorkflowRunPropertiesResponse" } }
            }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.GetWorkflowRuns": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves metadata for all runs of a given workflow.",
        "operationId": "GetWorkflowRuns",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.GetWorkflowRuns"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetWorkflowRunsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetWorkflowRunsResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.ImportCatalogToGlue": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Imports an existing Amazon Athena Data Catalog to AWS Glue",
        "operationId": "ImportCatalogToGlue",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.ImportCatalogToGlue"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ImportCatalogToGlueRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ImportCatalogToGlueResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.ListCrawlers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves the names of all crawler resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
        "operationId": "ListCrawlers",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.ListCrawlers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListCrawlersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListCrawlersResponse" } } }
          },
          "480": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.ListDevEndpoints": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves the names of all <code>DevEndpoint</code> resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
        "operationId": "ListDevEndpoints",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.ListDevEndpoints"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListDevEndpointsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListDevEndpointsResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.ListJobs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves the names of all job resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
        "operationId": "ListJobs",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.ListJobs"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListJobsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListJobsResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.ListTriggers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves the names of all trigger resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
        "operationId": "ListTriggers",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.ListTriggers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTriggersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTriggersResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.ListWorkflows": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists names of workflows created in the account.",
        "operationId": "ListWorkflows",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.ListWorkflows"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListWorkflowsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListWorkflowsResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.PutDataCatalogEncryptionSettings": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sets the security configuration for a specified catalog. After the configuration has been set, the specified encryption is applied to every catalog write thereafter.",
        "operationId": "PutDataCatalogEncryptionSettings",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.PutDataCatalogEncryptionSettings"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/PutDataCatalogEncryptionSettingsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PutDataCatalogEncryptionSettingsResponse" }
              }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.PutResourcePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sets the Data Catalog resource policy for access control.",
        "operationId": "PutResourcePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.PutResourcePolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutResourcePolicyRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutResourcePolicyResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "484": {
            "description": "ConditionCheckFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConditionCheckFailureException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.PutWorkflowRunProperties": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties.",
        "operationId": "PutWorkflowRunProperties",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.PutWorkflowRunProperties"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/PutWorkflowRunPropertiesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutWorkflowRunPropertiesResponse" } }
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.ResetJobBookmark": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Resets a bookmark entry.",
        "operationId": "ResetJobBookmark",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.ResetJobBookmark"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResetJobBookmarkRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResetJobBookmarkResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.SearchTables": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. </p> <p>You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. </p>",
        "operationId": "SearchTables",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.SearchTables"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchTablesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchTablesResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartCrawler": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, returns a <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException\">CrawlerRunningException</a>.",
        "operationId": "StartCrawler",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartCrawler"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartCrawlerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartCrawlerResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "CrawlerRunningException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerRunningException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartCrawlerSchedule": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Changes the schedule state of the specified crawler to <code>SCHEDULED</code>, unless the crawler is already running or the schedule state is already <code>SCHEDULED</code>.",
        "operationId": "StartCrawlerSchedule",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartCrawlerSchedule"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/StartCrawlerScheduleRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartCrawlerScheduleResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "SchedulerRunningException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchedulerRunningException" } }
            }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchedulerTransitioningException" } }
            }
          },
          "483": {
            "description": "NoScheduleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NoScheduleException" } } }
          },
          "484": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartExportLabelsTaskRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Begins an asynchronous task to export all labeled data for a particular transform. This task is the only label-related API call that is not part of the typical active learning workflow. You typically use <code>StartExportLabelsTaskRun</code> when you want to work with all of your existing labels at the same time, such as when you want to remove or change labels that were previously submitted as truth. This API operation accepts the <code>TransformId</code> whose labels you want to export and an Amazon Simple Storage Service (Amazon S3) path to export the labels to. The operation returns a <code>TaskRunId</code>. You can check on the status of your task run by calling the <code>GetMLTaskRun</code> API.",
        "operationId": "StartExportLabelsTaskRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartExportLabelsTaskRun"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/StartExportLabelsTaskRunRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartExportLabelsTaskRunResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartImportLabelsTaskRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Enables you to provide additional labels (examples of truth) to be used to teach the machine learning transform and improve its quality. This API operation is generally used as part of the active learning workflow that starts with the <code>StartMLLabelingSetGenerationTaskRun</code> call and that ultimately results in improving the quality of your machine learning transform. </p> <p>After the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue machine learning will have generated a series of questions for humans to answer. (Answering these questions is often called 'labeling' in the machine learning workflows). In the case of the <code>FindMatches</code> transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” After the labeling process is finished, users upload their answers/labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform use the new and improved labels and perform a higher-quality transformation.</p> <p>By default, <code>StartMLLabelingSetGenerationTaskRun</code> continually learns from and combines all labels that you upload unless you set <code>Replace</code> to true. If you set <code>Replace</code> to true, <code>StartImportLabelsTaskRun</code> deletes and forgets all previously uploaded labels and learns only from the exact set that you upload. Replacing labels can be helpful if you realize that you previously uploaded incorrect labels, and you believe that they are having a negative effect on your transform quality.</p> <p>You can check on the status of your task run by calling the <code>GetMLTaskRun</code> operation. </p>",
        "operationId": "StartImportLabelsTaskRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartImportLabelsTaskRun"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/StartImportLabelsTaskRunRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartImportLabelsTaskRunResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "484": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartJobRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts a job run using a job definition.",
        "operationId": "StartJobRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartJobRun"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartJobRunRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartJobRunResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "485": {
            "description": "ConcurrentRunsExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentRunsExceededException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartMLEvaluationTaskRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Starts a task to estimate the quality of the transform. </p> <p>When you provide label sets as examples of truth, AWS Glue machine learning uses some of those examples to learn from them. The rest of the labels are used as a test to estimate quality.</p> <p>Returns a unique identifier for the run. You can call <code>GetMLTaskRun</code> to get more information about the stats of the <code>EvaluationTaskRun</code>.</p>",
        "operationId": "StartMLEvaluationTaskRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartMLEvaluationTaskRun"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/StartMLEvaluationTaskRunRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartMLEvaluationTaskRunResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "ConcurrentRunsExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentRunsExceededException" } }
            }
          },
          "485": {
            "description": "MLTransformNotReadyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MLTransformNotReadyException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartMLLabelingSetGenerationTaskRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Starts the active learning workflow for your machine learning transform to improve the transform's quality by generating label sets and adding labels.</p> <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue will have generated a \"labeling set\" or a set of questions for humans to answer.</p> <p>In the case of the <code>FindMatches</code> transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” </p> <p>After the labeling process is finished, you can upload your labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform will use the new and improved labels and perform a higher-quality transformation.</p>",
        "operationId": "StartMLLabelingSetGenerationTaskRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartMLLabelingSetGenerationTaskRun"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/StartMLLabelingSetGenerationTaskRunRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StartMLLabelingSetGenerationTaskRunResponse" }
              }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "ConcurrentRunsExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentRunsExceededException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartTrigger": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts an existing trigger. See <a href=\"https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html\">Triggering Jobs</a> for information about how different types of trigger are started.",
        "operationId": "StartTrigger",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartTrigger"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartTriggerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartTriggerResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "485": {
            "description": "ConcurrentRunsExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentRunsExceededException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StartWorkflowRun": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts a new run of the specified workflow.",
        "operationId": "StartWorkflowRun",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StartWorkflowRun"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartWorkflowRunRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartWorkflowRunResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "485": {
            "description": "ConcurrentRunsExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentRunsExceededException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StopCrawler": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "If the specified crawler is running, stops the crawl.",
        "operationId": "StopCrawler",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StopCrawler"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopCrawlerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopCrawlerResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "CrawlerNotRunningException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerNotRunningException" } }
            }
          },
          "482": {
            "description": "CrawlerStoppingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerStoppingException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StopCrawlerSchedule": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sets the schedule state of the specified crawler to <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is already running.",
        "operationId": "StopCrawlerSchedule",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StopCrawlerSchedule"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/StopCrawlerScheduleRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StopCrawlerScheduleResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "SchedulerNotRunningException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchedulerNotRunningException" } }
            }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchedulerTransitioningException" } }
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.StopTrigger": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Stops a specified trigger.",
        "operationId": "StopTrigger",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.StopTrigger"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopTriggerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopTriggerResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds tags to a resource. A tag is a label you can assign to an AWS resource. In AWS Glue, you can tag only certain resources. For information about what resources you can tag, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">AWS Tags in AWS Glue</a>.",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes tags from a resource.",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateClassifier": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Modifies an existing classifier (a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field is present).",
        "operationId": "UpdateClassifier",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateClassifier"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateClassifierRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateClassifierResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "VersionMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionMismatchException" } } }
          },
          "482": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateConnection": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates a connection definition in the Data Catalog.",
        "operationId": "UpdateConnection",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateConnection"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateConnectionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateConnectionResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateCrawler": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates a crawler. If a crawler is running, you must stop it using <code>StopCrawler</code> before updating it.",
        "operationId": "UpdateCrawler",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateCrawler"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateCrawlerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateCrawlerResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "VersionMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionMismatchException" } } }
          },
          "482": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "483": {
            "description": "CrawlerRunningException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerRunningException" } } }
          },
          "484": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateCrawlerSchedule": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the schedule of a crawler using a <code>cron</code> expression. ",
        "operationId": "UpdateCrawlerSchedule",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateCrawlerSchedule"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateCrawlerScheduleRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateCrawlerScheduleResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "VersionMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionMismatchException" } } }
          },
          "483": {
            "description": "SchedulerTransitioningException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchedulerTransitioningException" } }
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateDatabase": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates an existing database definition in a Data Catalog.",
        "operationId": "UpdateDatabase",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateDatabase"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDatabaseRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDatabaseResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateDevEndpoint": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates a specified development endpoint.",
        "operationId": "UpdateDevEndpoint",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateDevEndpoint"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDevEndpointRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDevEndpointResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "484": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateJob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates an existing job definition.",
        "operationId": "UpdateJob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateJob"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateJobRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateJobResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateMLTransform": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates an existing machine learning transform. Call this operation to tune the algorithm parameters to achieve better results.</p> <p>After calling this operation, you can call the <code>StartMLEvaluationTaskRun</code> operation to assess how well your new parameters achieved your goals (such as improving the quality of your machine learning transform, or making it more cost-effective).</p>",
        "operationId": "UpdateMLTransform",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateMLTransform"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateMLTransformRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateMLTransformResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "483": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "484": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdatePartition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates a partition.",
        "operationId": "UpdatePartition",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdatePartition"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePartitionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePartitionResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateTable": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates a metadata table in the Data Catalog.",
        "operationId": "UpdateTable",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateTable"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTableRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTableResponse" } } }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNumberLimitExceededException" } }
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateTrigger": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates a trigger definition.",
        "operationId": "UpdateTrigger",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateTrigger"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTriggerRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTriggerResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "482": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateUserDefinedFunction": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates an existing function definition in the Data Catalog.",
        "operationId": "UpdateUserDefinedFunction",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateUserDefinedFunction"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserDefinedFunctionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserDefinedFunctionResponse" } }
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "481": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlueEncryptionException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateWorkflow": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates an existing workflow.",
        "operationId": "UpdateWorkflow",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSGlue.UpdateWorkflow"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateWorkflowRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateWorkflowResponse" } } }
          },
          "480": {
            "description": "InvalidInputException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "481": {
            "description": "EntityNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityNotFoundException" } } }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "OperationTimeoutException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationTimeoutException" } }
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The AWS Glue multi-region endpoint",
      "url": "http://glue.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS Glue multi-region endpoint",
      "url": "https://glue.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS Glue endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://glue.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The AWS Glue endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://glue.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AccessDeniedException": {},
      "Action": {
        "description": "Defines an action to be initiated by a trigger.",
        "properties": {
          "Arguments": { "$ref": "#/components/schemas/GenericMap" },
          "CrawlerName": { "$ref": "#/components/schemas/NameString" },
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "NotificationProperty": { "$ref": "#/components/schemas/NotificationProperty" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" }
        },
        "type": "object"
      },
      "ActionList": { "items": { "$ref": "#/components/schemas/Action" }, "type": "array" },
      "AlreadyExistsException": {},
      "AttemptCount": { "type": "integer" },
      "BatchCreatePartitionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "PartitionInputList": { "$ref": "#/components/schemas/PartitionInputList" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName", "PartitionInputList"],
        "type": "object"
      },
      "BatchCreatePartitionResponse": {
        "properties": { "Errors": { "$ref": "#/components/schemas/PartitionErrors" } },
        "type": "object"
      },
      "BatchDeleteConnectionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "ConnectionNameList": { "$ref": "#/components/schemas/DeleteConnectionNameList" }
        },
        "required": ["ConnectionNameList"],
        "type": "object"
      },
      "BatchDeleteConnectionResponse": {
        "properties": {
          "Errors": { "$ref": "#/components/schemas/ErrorByName" },
          "Succeeded": { "$ref": "#/components/schemas/NameStringList" }
        },
        "type": "object"
      },
      "BatchDeletePartitionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "PartitionsToDelete": { "$ref": "#/components/schemas/BatchDeletePartitionValueList" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName", "PartitionsToDelete"],
        "type": "object"
      },
      "BatchDeletePartitionResponse": {
        "properties": { "Errors": { "$ref": "#/components/schemas/PartitionErrors" } },
        "type": "object"
      },
      "BatchDeletePartitionValueList": {
        "items": { "$ref": "#/components/schemas/PartitionValueList" },
        "maxItems": 25,
        "minItems": 0,
        "type": "array"
      },
      "BatchDeleteTableNameList": {
        "items": { "$ref": "#/components/schemas/NameString" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "BatchDeleteTableRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "TablesToDelete": { "$ref": "#/components/schemas/BatchDeleteTableNameList" }
        },
        "required": ["DatabaseName", "TablesToDelete"],
        "type": "object"
      },
      "BatchDeleteTableResponse": {
        "properties": { "Errors": { "$ref": "#/components/schemas/TableErrors" } },
        "type": "object"
      },
      "BatchDeleteTableVersionList": {
        "items": { "$ref": "#/components/schemas/VersionString" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "BatchDeleteTableVersionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "TableName": { "$ref": "#/components/schemas/NameString" },
          "VersionIds": { "$ref": "#/components/schemas/BatchDeleteTableVersionList" }
        },
        "required": ["DatabaseName", "TableName", "VersionIds"],
        "type": "object"
      },
      "BatchDeleteTableVersionResponse": {
        "properties": { "Errors": { "$ref": "#/components/schemas/TableVersionErrors" } },
        "type": "object"
      },
      "BatchGetCrawlersRequest": {
        "properties": { "CrawlerNames": { "$ref": "#/components/schemas/CrawlerNameList" } },
        "required": ["CrawlerNames"],
        "type": "object"
      },
      "BatchGetCrawlersResponse": {
        "properties": {
          "Crawlers": { "$ref": "#/components/schemas/CrawlerList" },
          "CrawlersNotFound": { "$ref": "#/components/schemas/CrawlerNameList" }
        },
        "type": "object"
      },
      "BatchGetDevEndpointsRequest": {
        "properties": { "DevEndpointNames": { "$ref": "#/components/schemas/DevEndpointNames" } },
        "required": ["DevEndpointNames"],
        "type": "object"
      },
      "BatchGetDevEndpointsResponse": {
        "properties": {
          "DevEndpoints": { "$ref": "#/components/schemas/DevEndpointList" },
          "DevEndpointsNotFound": { "$ref": "#/components/schemas/DevEndpointNames" }
        },
        "type": "object"
      },
      "BatchGetJobsRequest": {
        "properties": { "JobNames": { "$ref": "#/components/schemas/JobNameList" } },
        "required": ["JobNames"],
        "type": "object"
      },
      "BatchGetJobsResponse": {
        "properties": {
          "Jobs": { "$ref": "#/components/schemas/JobList" },
          "JobsNotFound": { "$ref": "#/components/schemas/JobNameList" }
        },
        "type": "object"
      },
      "BatchGetPartitionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "PartitionsToGet": { "$ref": "#/components/schemas/BatchGetPartitionValueList" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName", "PartitionsToGet"],
        "type": "object"
      },
      "BatchGetPartitionResponse": {
        "properties": {
          "Partitions": { "$ref": "#/components/schemas/PartitionList" },
          "UnprocessedKeys": { "$ref": "#/components/schemas/BatchGetPartitionValueList" }
        },
        "type": "object"
      },
      "BatchGetPartitionValueList": {
        "items": { "$ref": "#/components/schemas/PartitionValueList" },
        "maxItems": 1000,
        "minItems": 0,
        "type": "array"
      },
      "BatchGetTriggersRequest": {
        "properties": { "TriggerNames": { "$ref": "#/components/schemas/TriggerNameList" } },
        "required": ["TriggerNames"],
        "type": "object"
      },
      "BatchGetTriggersResponse": {
        "properties": {
          "Triggers": { "$ref": "#/components/schemas/TriggerList" },
          "TriggersNotFound": { "$ref": "#/components/schemas/TriggerNameList" }
        },
        "type": "object"
      },
      "BatchGetWorkflowsRequest": {
        "properties": {
          "IncludeGraph": { "$ref": "#/components/schemas/NullableBoolean" },
          "Names": { "$ref": "#/components/schemas/WorkflowNames" }
        },
        "required": ["Names"],
        "type": "object"
      },
      "BatchGetWorkflowsResponse": {
        "properties": {
          "MissingWorkflows": { "$ref": "#/components/schemas/WorkflowNames" },
          "Workflows": { "$ref": "#/components/schemas/Workflows" }
        },
        "type": "object"
      },
      "BatchStopJobRunError": {
        "description": "Records an error that occurred when attempting to stop a specified job run.",
        "properties": {
          "ErrorDetail": { "$ref": "#/components/schemas/ErrorDetail" },
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "JobRunId": { "$ref": "#/components/schemas/IdString" }
        },
        "type": "object"
      },
      "BatchStopJobRunErrorList": { "items": { "$ref": "#/components/schemas/BatchStopJobRunError" }, "type": "array" },
      "BatchStopJobRunJobRunIdList": {
        "items": { "$ref": "#/components/schemas/IdString" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "BatchStopJobRunRequest": {
        "properties": {
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "JobRunIds": { "$ref": "#/components/schemas/BatchStopJobRunJobRunIdList" }
        },
        "required": ["JobName", "JobRunIds"],
        "type": "object"
      },
      "BatchStopJobRunResponse": {
        "properties": {
          "Errors": { "$ref": "#/components/schemas/BatchStopJobRunErrorList" },
          "SuccessfulSubmissions": { "$ref": "#/components/schemas/BatchStopJobRunSuccessfulSubmissionList" }
        },
        "type": "object"
      },
      "BatchStopJobRunSuccessfulSubmission": {
        "description": "Records a successful request to stop a specified <code>JobRun</code>.",
        "properties": {
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "JobRunId": { "$ref": "#/components/schemas/IdString" }
        },
        "type": "object"
      },
      "BatchStopJobRunSuccessfulSubmissionList": {
        "items": { "$ref": "#/components/schemas/BatchStopJobRunSuccessfulSubmission" },
        "type": "array"
      },
      "Boolean": { "type": "boolean" },
      "BooleanNullable": { "type": "boolean" },
      "BooleanValue": { "type": "boolean" },
      "BoundedPartitionValueList": {
        "items": { "$ref": "#/components/schemas/ValueString" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "CancelMLTaskRunRequest": {
        "properties": {
          "TaskRunId": { "$ref": "#/components/schemas/HashString" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "required": ["TransformId", "TaskRunId"],
        "type": "object"
      },
      "CancelMLTaskRunResponse": {
        "properties": {
          "Status": { "$ref": "#/components/schemas/TaskStatusType" },
          "TaskRunId": { "$ref": "#/components/schemas/HashString" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "type": "object"
      },
      "CatalogEncryptionMode": { "enum": ["DISABLED", "SSE-KMS"], "type": "string" },
      "CatalogEntries": { "items": { "$ref": "#/components/schemas/CatalogEntry" }, "type": "array" },
      "CatalogEntry": {
        "description": "Specifies a table definition in the AWS Glue Data Catalog.",
        "properties": {
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName"],
        "type": "object"
      },
      "CatalogIdString": {
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "CatalogImportStatus": {
        "description": "A structure containing migration status information.",
        "properties": {
          "ImportCompleted": { "$ref": "#/components/schemas/Boolean" },
          "ImportTime": { "$ref": "#/components/schemas/Timestamp" },
          "ImportedBy": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "CatalogTablesList": { "items": { "$ref": "#/components/schemas/NameString" }, "minItems": 1, "type": "array" },
      "CatalogTarget": {
        "description": "Specifies an AWS Glue Data Catalog target.",
        "properties": {
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "Tables": { "$ref": "#/components/schemas/CatalogTablesList" }
        },
        "required": ["DatabaseName", "Tables"],
        "type": "object"
      },
      "CatalogTargetList": { "items": { "$ref": "#/components/schemas/CatalogTarget" }, "type": "array" },
      "Classification": { "type": "string" },
      "Classifier": {
        "description": "<p>Classifiers are triggered during a crawl task. A classifier checks whether a given file is in a format it can handle. If it is, the classifier creates a schema in the form of a <code>StructType</code> object that matches that data format.</p> <p>You can use the standard classifiers that AWS Glue provides, or you can write your own classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A classifier can be a <code>grok</code> classifier, an <code>XML</code> classifier, a <code>JSON</code> classifier, or a custom <code>CSV</code> classifier, as specified in one of the fields in the <code>Classifier</code> object.</p>",
        "properties": {
          "CsvClassifier": { "$ref": "#/components/schemas/CsvClassifier" },
          "GrokClassifier": { "$ref": "#/components/schemas/GrokClassifier" },
          "JsonClassifier": { "$ref": "#/components/schemas/JsonClassifier" },
          "XMLClassifier": { "$ref": "#/components/schemas/XMLClassifier" }
        },
        "type": "object"
      },
      "ClassifierList": { "items": { "$ref": "#/components/schemas/Classifier" }, "type": "array" },
      "ClassifierNameList": { "items": { "$ref": "#/components/schemas/NameString" }, "type": "array" },
      "CloudWatchEncryption": {
        "description": "Specifies how Amazon CloudWatch data should be encrypted.",
        "properties": {
          "CloudWatchEncryptionMode": { "$ref": "#/components/schemas/CloudWatchEncryptionMode" },
          "KmsKeyArn": { "$ref": "#/components/schemas/KmsKeyArn" }
        },
        "type": "object"
      },
      "CloudWatchEncryptionMode": { "enum": ["DISABLED", "SSE-KMS"], "type": "string" },
      "CodeGenArgName": { "type": "string" },
      "CodeGenArgValue": { "type": "string" },
      "CodeGenEdge": {
        "description": "Represents a directional edge in a directed acyclic graph (DAG).",
        "properties": {
          "Source": { "$ref": "#/components/schemas/CodeGenIdentifier" },
          "Target": { "$ref": "#/components/schemas/CodeGenIdentifier" },
          "TargetParameter": { "$ref": "#/components/schemas/CodeGenArgName" }
        },
        "required": ["Source", "Target"],
        "type": "object"
      },
      "CodeGenIdentifier": { "maxLength": 255, "minLength": 1, "pattern": "[A-Za-z_][A-Za-z0-9_]*", "type": "string" },
      "CodeGenNode": {
        "description": "Represents a node in a directed acyclic graph (DAG)",
        "properties": {
          "Args": { "$ref": "#/components/schemas/CodeGenNodeArgs" },
          "Id": { "$ref": "#/components/schemas/CodeGenIdentifier" },
          "LineNumber": { "$ref": "#/components/schemas/Integer" },
          "NodeType": { "$ref": "#/components/schemas/CodeGenNodeType" }
        },
        "required": ["Id", "NodeType", "Args"],
        "type": "object"
      },
      "CodeGenNodeArg": {
        "description": "An argument or property of a node.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/CodeGenArgName" },
          "Param": { "$ref": "#/components/schemas/Boolean" },
          "Value": { "$ref": "#/components/schemas/CodeGenArgValue" }
        },
        "required": ["Name", "Value"],
        "type": "object"
      },
      "CodeGenNodeArgs": {
        "items": { "$ref": "#/components/schemas/CodeGenNodeArg" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      },
      "CodeGenNodeType": { "type": "string" },
      "Column": {
        "description": "A column in a <code>Table</code>.",
        "properties": {
          "Comment": { "$ref": "#/components/schemas/CommentString" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" },
          "Type": { "$ref": "#/components/schemas/ColumnTypeString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "ColumnList": { "items": { "$ref": "#/components/schemas/Column" }, "type": "array" },
      "ColumnNameString": {
        "maxLength": 1024,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "ColumnTypeString": {
        "maxLength": 131072,
        "minLength": 0,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "ColumnValueStringList": { "items": { "$ref": "#/components/schemas/ColumnValuesString" }, "type": "array" },
      "ColumnValuesString": { "type": "string" },
      "CommentString": {
        "maxLength": 255,
        "minLength": 0,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "Comparator": {
        "enum": ["EQUALS", "GREATER_THAN", "LESS_THAN", "GREATER_THAN_EQUALS", "LESS_THAN_EQUALS"],
        "type": "string"
      },
      "ConcurrentModificationException": {},
      "ConcurrentRunsExceededException": {},
      "Condition": {
        "description": "Defines a condition under which a trigger fires.",
        "properties": {
          "CrawlState": { "$ref": "#/components/schemas/CrawlState" },
          "CrawlerName": { "$ref": "#/components/schemas/NameString" },
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "LogicalOperator": { "$ref": "#/components/schemas/LogicalOperator" },
          "State": { "$ref": "#/components/schemas/JobRunState" }
        },
        "type": "object"
      },
      "ConditionCheckFailureException": {},
      "ConditionList": { "items": { "$ref": "#/components/schemas/Condition" }, "type": "array" },
      "ConfusionMatrix": {
        "description": "<p>The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Confusion_matrix\">Confusion matrix</a> in Wikipedia.</p>",
        "properties": {
          "NumFalseNegatives": { "$ref": "#/components/schemas/RecordsCount" },
          "NumFalsePositives": { "$ref": "#/components/schemas/RecordsCount" },
          "NumTrueNegatives": { "$ref": "#/components/schemas/RecordsCount" },
          "NumTruePositives": { "$ref": "#/components/schemas/RecordsCount" }
        },
        "type": "object"
      },
      "Connection": {
        "description": "Defines a connection to a data source.",
        "properties": {
          "ConnectionProperties": { "$ref": "#/components/schemas/ConnectionProperties" },
          "ConnectionType": { "$ref": "#/components/schemas/ConnectionType" },
          "CreationTime": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "LastUpdatedBy": { "$ref": "#/components/schemas/NameString" },
          "LastUpdatedTime": { "$ref": "#/components/schemas/Timestamp" },
          "MatchCriteria": { "$ref": "#/components/schemas/MatchCriteria" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "PhysicalConnectionRequirements": { "$ref": "#/components/schemas/PhysicalConnectionRequirements" }
        },
        "type": "object"
      },
      "ConnectionInput": {
        "description": "A structure that is used to specify a connection to create or update.",
        "properties": {
          "ConnectionProperties": { "$ref": "#/components/schemas/ConnectionProperties" },
          "ConnectionType": { "$ref": "#/components/schemas/ConnectionType" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "MatchCriteria": { "$ref": "#/components/schemas/MatchCriteria" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "PhysicalConnectionRequirements": { "$ref": "#/components/schemas/PhysicalConnectionRequirements" }
        },
        "required": ["Name", "ConnectionType", "ConnectionProperties"],
        "type": "object"
      },
      "ConnectionList": { "items": { "$ref": "#/components/schemas/Connection" }, "type": "array" },
      "ConnectionName": { "type": "string" },
      "ConnectionPasswordEncryption": {
        "description": "<p>The data structure used by the Data Catalog to encrypt the password as part of <code>CreateConnection</code> or <code>UpdateConnection</code> and store it in the <code>ENCRYPTED_PASSWORD</code> field in the connection properties. You can enable catalog encryption or only password encryption.</p> <p>When a <code>CreationConnection</code> request arrives containing a password, the Data Catalog first encrypts the password using your AWS KMS key. It then encrypts the whole connection object again if catalog encryption is also enabled.</p> <p>This encryption requires that you set AWS KMS key permissions to enable or restrict access on the password key according to your security requirements. For example, you might want only administrators to have decrypt permission on the password key.</p>",
        "properties": {
          "AwsKmsKeyId": { "$ref": "#/components/schemas/NameString" },
          "ReturnConnectionPasswordEncrypted": { "$ref": "#/components/schemas/Boolean" }
        },
        "required": ["ReturnConnectionPasswordEncrypted"],
        "type": "object"
      },
      "ConnectionProperties": {
        "additionalProperties": { "$ref": "#/components/schemas/ValueString" },
        "maxProperties": 100,
        "minProperties": 0,
        "type": "object"
      },
      "ConnectionPropertyKey": {
        "enum": [
          "HOST",
          "PORT",
          "USERNAME",
          "PASSWORD",
          "ENCRYPTED_PASSWORD",
          "JDBC_DRIVER_JAR_URI",
          "JDBC_DRIVER_CLASS_NAME",
          "JDBC_ENGINE",
          "JDBC_ENGINE_VERSION",
          "CONFIG_FILES",
          "INSTANCE_ID",
          "JDBC_CONNECTION_URL",
          "JDBC_ENFORCE_SSL"
        ],
        "type": "string"
      },
      "ConnectionType": { "enum": ["JDBC", "SFTP"], "type": "string" },
      "ConnectionsList": {
        "description": "Specifies the connections used by a job.",
        "properties": { "Connections": { "$ref": "#/components/schemas/OrchestrationStringList" } },
        "type": "object"
      },
      "Crawl": {
        "description": "The details of a crawl in the workflow.",
        "properties": {
          "CompletedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "ErrorMessage": { "$ref": "#/components/schemas/DescriptionString" },
          "LogGroup": { "$ref": "#/components/schemas/LogGroup" },
          "LogStream": { "$ref": "#/components/schemas/LogStream" },
          "StartedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "State": { "$ref": "#/components/schemas/CrawlState" }
        },
        "type": "object"
      },
      "CrawlList": { "items": { "$ref": "#/components/schemas/Crawl" }, "type": "array" },
      "CrawlState": { "enum": ["RUNNING", "SUCCEEDED", "CANCELLED", "FAILED"], "type": "string" },
      "Crawler": {
        "description": "Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema. If successful, the crawler records metadata concerning the data source in the AWS Glue Data Catalog.",
        "properties": {
          "Classifiers": { "$ref": "#/components/schemas/ClassifierNameList" },
          "Configuration": { "$ref": "#/components/schemas/CrawlerConfiguration" },
          "CrawlElapsedTime": { "$ref": "#/components/schemas/MillisecondsCount" },
          "CrawlerSecurityConfiguration": { "$ref": "#/components/schemas/CrawlerSecurityConfiguration" },
          "CreationTime": { "$ref": "#/components/schemas/Timestamp" },
          "DatabaseName": { "$ref": "#/components/schemas/DatabaseName" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "LastCrawl": { "$ref": "#/components/schemas/LastCrawlInfo" },
          "LastUpdated": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Role": { "$ref": "#/components/schemas/Role" },
          "Schedule": { "$ref": "#/components/schemas/Schedule" },
          "SchemaChangePolicy": { "$ref": "#/components/schemas/SchemaChangePolicy" },
          "State": { "$ref": "#/components/schemas/CrawlerState" },
          "TablePrefix": { "$ref": "#/components/schemas/TablePrefix" },
          "Targets": { "$ref": "#/components/schemas/CrawlerTargets" },
          "Version": { "$ref": "#/components/schemas/VersionId" }
        },
        "type": "object"
      },
      "CrawlerConfiguration": { "type": "string" },
      "CrawlerList": { "items": { "$ref": "#/components/schemas/Crawler" }, "type": "array" },
      "CrawlerMetrics": {
        "description": "Metrics for a specified crawler.",
        "properties": {
          "CrawlerName": { "$ref": "#/components/schemas/NameString" },
          "LastRuntimeSeconds": { "$ref": "#/components/schemas/NonNegativeDouble" },
          "MedianRuntimeSeconds": { "$ref": "#/components/schemas/NonNegativeDouble" },
          "StillEstimating": { "$ref": "#/components/schemas/Boolean" },
          "TablesCreated": { "$ref": "#/components/schemas/NonNegativeInteger" },
          "TablesDeleted": { "$ref": "#/components/schemas/NonNegativeInteger" },
          "TablesUpdated": { "$ref": "#/components/schemas/NonNegativeInteger" },
          "TimeLeftSeconds": { "$ref": "#/components/schemas/NonNegativeDouble" }
        },
        "type": "object"
      },
      "CrawlerMetricsList": { "items": { "$ref": "#/components/schemas/CrawlerMetrics" }, "type": "array" },
      "CrawlerNameList": {
        "items": { "$ref": "#/components/schemas/NameString" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "CrawlerNodeDetails": {
        "description": "The details of a Crawler node present in the workflow.",
        "properties": { "Crawls": { "$ref": "#/components/schemas/CrawlList" } },
        "type": "object"
      },
      "CrawlerNotRunningException": {},
      "CrawlerRunningException": {},
      "CrawlerSecurityConfiguration": { "maxLength": 128, "minLength": 0, "type": "string" },
      "CrawlerState": { "enum": ["READY", "RUNNING", "STOPPING"], "type": "string" },
      "CrawlerStoppingException": {},
      "CrawlerTargets": {
        "description": "Specifies data stores to crawl.",
        "properties": {
          "CatalogTargets": { "$ref": "#/components/schemas/CatalogTargetList" },
          "DynamoDBTargets": { "$ref": "#/components/schemas/DynamoDBTargetList" },
          "JdbcTargets": { "$ref": "#/components/schemas/JdbcTargetList" },
          "S3Targets": { "$ref": "#/components/schemas/S3TargetList" }
        },
        "type": "object"
      },
      "CreateClassifierRequest": {
        "properties": {
          "CsvClassifier": { "$ref": "#/components/schemas/CreateCsvClassifierRequest" },
          "GrokClassifier": { "$ref": "#/components/schemas/CreateGrokClassifierRequest" },
          "JsonClassifier": { "$ref": "#/components/schemas/CreateJsonClassifierRequest" },
          "XMLClassifier": { "$ref": "#/components/schemas/CreateXMLClassifierRequest" }
        },
        "type": "object"
      },
      "CreateClassifierResponse": { "properties": {}, "type": "object" },
      "CreateConnectionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "ConnectionInput": { "$ref": "#/components/schemas/ConnectionInput" }
        },
        "required": ["ConnectionInput"],
        "type": "object"
      },
      "CreateConnectionResponse": { "properties": {}, "type": "object" },
      "CreateCrawlerRequest": {
        "properties": {
          "Classifiers": { "$ref": "#/components/schemas/ClassifierNameList" },
          "Configuration": { "$ref": "#/components/schemas/CrawlerConfiguration" },
          "CrawlerSecurityConfiguration": { "$ref": "#/components/schemas/CrawlerSecurityConfiguration" },
          "DatabaseName": { "$ref": "#/components/schemas/DatabaseName" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Role": { "$ref": "#/components/schemas/Role" },
          "Schedule": { "$ref": "#/components/schemas/CronExpression" },
          "SchemaChangePolicy": { "$ref": "#/components/schemas/SchemaChangePolicy" },
          "TablePrefix": { "$ref": "#/components/schemas/TablePrefix" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" },
          "Targets": { "$ref": "#/components/schemas/CrawlerTargets" }
        },
        "required": ["Name", "Role", "Targets"],
        "type": "object"
      },
      "CreateCrawlerResponse": { "properties": {}, "type": "object" },
      "CreateCsvClassifierRequest": {
        "description": "Specifies a custom CSV classifier for <code>CreateClassifier</code> to create.",
        "properties": {
          "AllowSingleColumn": { "$ref": "#/components/schemas/NullableBoolean" },
          "ContainsHeader": { "$ref": "#/components/schemas/CsvHeaderOption" },
          "Delimiter": { "$ref": "#/components/schemas/CsvColumnDelimiter" },
          "DisableValueTrimming": { "$ref": "#/components/schemas/NullableBoolean" },
          "Header": { "$ref": "#/components/schemas/CsvHeader" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "QuoteSymbol": { "$ref": "#/components/schemas/CsvQuoteSymbol" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "CreateDatabaseRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseInput": { "$ref": "#/components/schemas/DatabaseInput" }
        },
        "required": ["DatabaseInput"],
        "type": "object"
      },
      "CreateDatabaseResponse": { "properties": {}, "type": "object" },
      "CreateDevEndpointRequest": {
        "properties": {
          "Arguments": { "$ref": "#/components/schemas/MapValue" },
          "EndpointName": { "$ref": "#/components/schemas/GenericString" },
          "ExtraJarsS3Path": { "$ref": "#/components/schemas/GenericString" },
          "ExtraPythonLibsS3Path": { "$ref": "#/components/schemas/GenericString" },
          "NumberOfNodes": { "$ref": "#/components/schemas/IntegerValue" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "PublicKey": { "$ref": "#/components/schemas/GenericString" },
          "PublicKeys": { "$ref": "#/components/schemas/PublicKeysList" },
          "RoleArn": { "$ref": "#/components/schemas/RoleArn" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "SecurityGroupIds": { "$ref": "#/components/schemas/StringList" },
          "SubnetId": { "$ref": "#/components/schemas/GenericString" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "required": ["EndpointName", "RoleArn"],
        "type": "object"
      },
      "CreateDevEndpointResponse": {
        "properties": {
          "Arguments": { "$ref": "#/components/schemas/MapValue" },
          "AvailabilityZone": { "$ref": "#/components/schemas/GenericString" },
          "CreatedTimestamp": { "$ref": "#/components/schemas/TimestampValue" },
          "EndpointName": { "$ref": "#/components/schemas/GenericString" },
          "ExtraJarsS3Path": { "$ref": "#/components/schemas/GenericString" },
          "ExtraPythonLibsS3Path": { "$ref": "#/components/schemas/GenericString" },
          "FailureReason": { "$ref": "#/components/schemas/GenericString" },
          "NumberOfNodes": { "$ref": "#/components/schemas/IntegerValue" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "RoleArn": { "$ref": "#/components/schemas/RoleArn" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "SecurityGroupIds": { "$ref": "#/components/schemas/StringList" },
          "Status": { "$ref": "#/components/schemas/GenericString" },
          "SubnetId": { "$ref": "#/components/schemas/GenericString" },
          "VpcId": { "$ref": "#/components/schemas/GenericString" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" },
          "YarnEndpointAddress": { "$ref": "#/components/schemas/GenericString" },
          "ZeppelinRemoteSparkInterpreterPort": { "$ref": "#/components/schemas/IntegerValue" }
        },
        "type": "object"
      },
      "CreateGrokClassifierRequest": {
        "description": "Specifies a <code>grok</code> classifier for <code>CreateClassifier</code> to create.",
        "properties": {
          "Classification": { "$ref": "#/components/schemas/Classification" },
          "CustomPatterns": { "$ref": "#/components/schemas/CustomPatterns" },
          "GrokPattern": { "$ref": "#/components/schemas/GrokPattern" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Classification", "Name", "GrokPattern"],
        "type": "object"
      },
      "CreateJobRequest": {
        "properties": {
          "AllocatedCapacity": { "$ref": "#/components/schemas/IntegerValue" },
          "Command": { "$ref": "#/components/schemas/JobCommand" },
          "Connections": { "$ref": "#/components/schemas/ConnectionsList" },
          "DefaultArguments": { "$ref": "#/components/schemas/GenericMap" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "ExecutionProperty": { "$ref": "#/components/schemas/ExecutionProperty" },
          "GlueVersion": { "$ref": "#/components/schemas/GlueVersionString" },
          "LogUri": { "$ref": "#/components/schemas/UriString" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "MaxRetries": { "$ref": "#/components/schemas/MaxRetries" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "NotificationProperty": { "$ref": "#/components/schemas/NotificationProperty" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "Role": { "$ref": "#/components/schemas/RoleString" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "required": ["Name", "Role", "Command"],
        "type": "object"
      },
      "CreateJobResponse": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "CreateJsonClassifierRequest": {
        "description": "Specifies a JSON classifier for <code>CreateClassifier</code> to create.",
        "properties": {
          "JsonPath": { "$ref": "#/components/schemas/JsonPath" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name", "JsonPath"],
        "type": "object"
      },
      "CreateMLTransformRequest": {
        "properties": {
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "InputRecordTables": { "$ref": "#/components/schemas/GlueTables" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "MaxRetries": { "$ref": "#/components/schemas/NullableInteger" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "Parameters": { "$ref": "#/components/schemas/TransformParameters" },
          "Role": { "$ref": "#/components/schemas/RoleString" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "required": ["Name", "InputRecordTables", "Parameters", "Role"],
        "type": "object"
      },
      "CreateMLTransformResponse": {
        "properties": { "TransformId": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "CreatePartitionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "PartitionInput": { "$ref": "#/components/schemas/PartitionInput" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName", "PartitionInput"],
        "type": "object"
      },
      "CreatePartitionResponse": { "properties": {}, "type": "object" },
      "CreateScriptRequest": {
        "properties": {
          "DagEdges": { "$ref": "#/components/schemas/DagEdges" },
          "DagNodes": { "$ref": "#/components/schemas/DagNodes" },
          "Language": { "$ref": "#/components/schemas/Language" }
        },
        "type": "object"
      },
      "CreateScriptResponse": {
        "properties": {
          "PythonScript": { "$ref": "#/components/schemas/PythonScript" },
          "ScalaCode": { "$ref": "#/components/schemas/ScalaCode" }
        },
        "type": "object"
      },
      "CreateSecurityConfigurationRequest": {
        "properties": {
          "EncryptionConfiguration": { "$ref": "#/components/schemas/EncryptionConfiguration" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name", "EncryptionConfiguration"],
        "type": "object"
      },
      "CreateSecurityConfigurationResponse": {
        "properties": {
          "CreatedTimestamp": { "$ref": "#/components/schemas/TimestampValue" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "CreateTableRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "TableInput": { "$ref": "#/components/schemas/TableInput" }
        },
        "required": ["DatabaseName", "TableInput"],
        "type": "object"
      },
      "CreateTableResponse": { "properties": {}, "type": "object" },
      "CreateTriggerRequest": {
        "properties": {
          "Actions": { "$ref": "#/components/schemas/ActionList" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Predicate": { "$ref": "#/components/schemas/Predicate" },
          "Schedule": { "$ref": "#/components/schemas/GenericString" },
          "StartOnCreation": { "$ref": "#/components/schemas/BooleanValue" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" },
          "Type": { "$ref": "#/components/schemas/TriggerType" },
          "WorkflowName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name", "Type", "Actions"],
        "type": "object"
      },
      "CreateTriggerResponse": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "CreateUserDefinedFunctionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "FunctionInput": { "$ref": "#/components/schemas/UserDefinedFunctionInput" }
        },
        "required": ["DatabaseName", "FunctionInput"],
        "type": "object"
      },
      "CreateUserDefinedFunctionResponse": { "properties": {}, "type": "object" },
      "CreateWorkflowRequest": {
        "properties": {
          "DefaultRunProperties": { "$ref": "#/components/schemas/WorkflowRunProperties" },
          "Description": { "$ref": "#/components/schemas/GenericString" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "CreateWorkflowResponse": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "CreateXMLClassifierRequest": {
        "description": "Specifies an XML classifier for <code>CreateClassifier</code> to create.",
        "properties": {
          "Classification": { "$ref": "#/components/schemas/Classification" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "RowTag": { "$ref": "#/components/schemas/RowTag" }
        },
        "required": ["Classification", "Name"],
        "type": "object"
      },
      "CronExpression": { "type": "string" },
      "CsvClassifier": {
        "description": "A classifier for custom <code>CSV</code> content.",
        "properties": {
          "AllowSingleColumn": { "$ref": "#/components/schemas/NullableBoolean" },
          "ContainsHeader": { "$ref": "#/components/schemas/CsvHeaderOption" },
          "CreationTime": { "$ref": "#/components/schemas/Timestamp" },
          "Delimiter": { "$ref": "#/components/schemas/CsvColumnDelimiter" },
          "DisableValueTrimming": { "$ref": "#/components/schemas/NullableBoolean" },
          "Header": { "$ref": "#/components/schemas/CsvHeader" },
          "LastUpdated": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "QuoteSymbol": { "$ref": "#/components/schemas/CsvQuoteSymbol" },
          "Version": { "$ref": "#/components/schemas/VersionId" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "CsvColumnDelimiter": { "maxLength": 1, "minLength": 1, "pattern": "[^\\r\\n]", "type": "string" },
      "CsvHeader": { "items": { "$ref": "#/components/schemas/NameString" }, "type": "array" },
      "CsvHeaderOption": { "enum": ["UNKNOWN", "PRESENT", "ABSENT"], "type": "string" },
      "CsvQuoteSymbol": { "maxLength": 1, "minLength": 1, "pattern": "[^\\r\\n]", "type": "string" },
      "CustomPatterns": {
        "maxLength": 16000,
        "minLength": 0,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "DagEdges": { "items": { "$ref": "#/components/schemas/CodeGenEdge" }, "type": "array" },
      "DagNodes": { "items": { "$ref": "#/components/schemas/CodeGenNode" }, "type": "array" },
      "DataCatalogEncryptionSettings": {
        "description": "Contains configuration information for maintaining Data Catalog security.",
        "properties": {
          "ConnectionPasswordEncryption": { "$ref": "#/components/schemas/ConnectionPasswordEncryption" },
          "EncryptionAtRest": { "$ref": "#/components/schemas/EncryptionAtRest" }
        },
        "type": "object"
      },
      "DataLakePrincipal": {
        "description": "The AWS Lake Formation principal.",
        "properties": { "DataLakePrincipalIdentifier": { "$ref": "#/components/schemas/DataLakePrincipalString" } },
        "type": "object"
      },
      "DataLakePrincipalString": { "maxLength": 255, "minLength": 1, "type": "string" },
      "Database": {
        "description": "The <code>Database</code> object represents a logical grouping of tables that might reside in a Hive metastore or an RDBMS.",
        "properties": {
          "CreateTableDefaultPermissions": { "$ref": "#/components/schemas/PrincipalPermissionsList" },
          "CreateTime": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "LocationUri": { "$ref": "#/components/schemas/URI" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "DatabaseInput": {
        "description": "The structure used to create or update a database.",
        "properties": {
          "CreateTableDefaultPermissions": { "$ref": "#/components/schemas/PrincipalPermissionsList" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "LocationUri": { "$ref": "#/components/schemas/URI" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "DatabaseList": { "items": { "$ref": "#/components/schemas/Database" }, "type": "array" },
      "DatabaseName": { "type": "string" },
      "DeleteBehavior": { "enum": ["LOG", "DELETE_FROM_DATABASE", "DEPRECATE_IN_DATABASE"], "type": "string" },
      "DeleteClassifierRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteClassifierResponse": { "properties": {}, "type": "object" },
      "DeleteConnectionNameList": {
        "items": { "$ref": "#/components/schemas/NameString" },
        "maxItems": 25,
        "minItems": 0,
        "type": "array"
      },
      "DeleteConnectionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "ConnectionName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["ConnectionName"],
        "type": "object"
      },
      "DeleteConnectionResponse": { "properties": {}, "type": "object" },
      "DeleteCrawlerRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteCrawlerResponse": { "properties": {}, "type": "object" },
      "DeleteDatabaseRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteDatabaseResponse": { "properties": {}, "type": "object" },
      "DeleteDevEndpointRequest": {
        "properties": { "EndpointName": { "$ref": "#/components/schemas/GenericString" } },
        "required": ["EndpointName"],
        "type": "object"
      },
      "DeleteDevEndpointResponse": { "properties": {}, "type": "object" },
      "DeleteJobRequest": {
        "properties": { "JobName": { "$ref": "#/components/schemas/NameString" } },
        "required": ["JobName"],
        "type": "object"
      },
      "DeleteJobResponse": {
        "properties": { "JobName": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "DeleteMLTransformRequest": {
        "properties": { "TransformId": { "$ref": "#/components/schemas/HashString" } },
        "required": ["TransformId"],
        "type": "object"
      },
      "DeleteMLTransformResponse": {
        "properties": { "TransformId": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "DeletePartitionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "PartitionValues": { "$ref": "#/components/schemas/ValueStringList" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName", "PartitionValues"],
        "type": "object"
      },
      "DeletePartitionResponse": { "properties": {}, "type": "object" },
      "DeleteResourcePolicyRequest": {
        "properties": { "PolicyHashCondition": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "DeleteResourcePolicyResponse": { "properties": {}, "type": "object" },
      "DeleteSecurityConfigurationRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteSecurityConfigurationResponse": { "properties": {}, "type": "object" },
      "DeleteTableRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "Name"],
        "type": "object"
      },
      "DeleteTableResponse": { "properties": {}, "type": "object" },
      "DeleteTableVersionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "TableName": { "$ref": "#/components/schemas/NameString" },
          "VersionId": { "$ref": "#/components/schemas/VersionString" }
        },
        "required": ["DatabaseName", "TableName", "VersionId"],
        "type": "object"
      },
      "DeleteTableVersionResponse": { "properties": {}, "type": "object" },
      "DeleteTriggerRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteTriggerResponse": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "DeleteUserDefinedFunctionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "FunctionName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "FunctionName"],
        "type": "object"
      },
      "DeleteUserDefinedFunctionResponse": { "properties": {}, "type": "object" },
      "DeleteWorkflowRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteWorkflowResponse": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "DescriptionString": {
        "maxLength": 2048,
        "minLength": 0,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "DescriptionStringRemovable": {
        "maxLength": 2048,
        "minLength": 0,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "DevEndpoint": {
        "description": "A development endpoint where a developer can remotely debug extract, transform, and load (ETL) scripts.",
        "properties": {
          "Arguments": { "$ref": "#/components/schemas/MapValue" },
          "AvailabilityZone": { "$ref": "#/components/schemas/GenericString" },
          "CreatedTimestamp": { "$ref": "#/components/schemas/TimestampValue" },
          "EndpointName": { "$ref": "#/components/schemas/GenericString" },
          "ExtraJarsS3Path": { "$ref": "#/components/schemas/GenericString" },
          "ExtraPythonLibsS3Path": { "$ref": "#/components/schemas/GenericString" },
          "FailureReason": { "$ref": "#/components/schemas/GenericString" },
          "LastModifiedTimestamp": { "$ref": "#/components/schemas/TimestampValue" },
          "LastUpdateStatus": { "$ref": "#/components/schemas/GenericString" },
          "NumberOfNodes": { "$ref": "#/components/schemas/IntegerValue" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "PrivateAddress": { "$ref": "#/components/schemas/GenericString" },
          "PublicAddress": { "$ref": "#/components/schemas/GenericString" },
          "PublicKey": { "$ref": "#/components/schemas/GenericString" },
          "PublicKeys": { "$ref": "#/components/schemas/PublicKeysList" },
          "RoleArn": { "$ref": "#/components/schemas/RoleArn" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "SecurityGroupIds": { "$ref": "#/components/schemas/StringList" },
          "Status": { "$ref": "#/components/schemas/GenericString" },
          "SubnetId": { "$ref": "#/components/schemas/GenericString" },
          "VpcId": { "$ref": "#/components/schemas/GenericString" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" },
          "YarnEndpointAddress": { "$ref": "#/components/schemas/GenericString" },
          "ZeppelinRemoteSparkInterpreterPort": { "$ref": "#/components/schemas/IntegerValue" }
        },
        "type": "object"
      },
      "DevEndpointCustomLibraries": {
        "description": "Custom libraries to be loaded into a development endpoint.",
        "properties": {
          "ExtraJarsS3Path": { "$ref": "#/components/schemas/GenericString" },
          "ExtraPythonLibsS3Path": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "DevEndpointList": { "items": { "$ref": "#/components/schemas/DevEndpoint" }, "type": "array" },
      "DevEndpointNameList": { "items": { "$ref": "#/components/schemas/NameString" }, "type": "array" },
      "DevEndpointNames": {
        "items": { "$ref": "#/components/schemas/GenericString" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "DynamoDBTarget": {
        "description": "Specifies an Amazon DynamoDB table to crawl.",
        "properties": { "Path": { "$ref": "#/components/schemas/Path" } },
        "type": "object"
      },
      "DynamoDBTargetList": { "items": { "$ref": "#/components/schemas/DynamoDBTarget" }, "type": "array" },
      "Edge": {
        "description": "An edge represents a directed connection between two AWS Glue components which are part of the workflow the edge belongs to.",
        "properties": {
          "DestinationId": { "$ref": "#/components/schemas/NameString" },
          "SourceId": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "EdgeList": { "items": { "$ref": "#/components/schemas/Edge" }, "type": "array" },
      "EncryptionAtRest": {
        "description": "Specifies the encryption-at-rest configuration for the Data Catalog.",
        "properties": {
          "CatalogEncryptionMode": { "$ref": "#/components/schemas/CatalogEncryptionMode" },
          "SseAwsKmsKeyId": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["CatalogEncryptionMode"],
        "type": "object"
      },
      "EncryptionConfiguration": {
        "description": "Specifies an encryption configuration.",
        "properties": {
          "CloudWatchEncryption": { "$ref": "#/components/schemas/CloudWatchEncryption" },
          "JobBookmarksEncryption": { "$ref": "#/components/schemas/JobBookmarksEncryption" },
          "S3Encryption": { "$ref": "#/components/schemas/S3EncryptionList" }
        },
        "type": "object"
      },
      "EntityNotFoundException": {},
      "ErrorByName": { "additionalProperties": { "$ref": "#/components/schemas/ErrorDetail" }, "type": "object" },
      "ErrorDetail": {
        "description": "Contains details about an error.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/NameString" },
          "ErrorMessage": { "$ref": "#/components/schemas/DescriptionString" }
        },
        "type": "object"
      },
      "ErrorString": { "type": "string" },
      "EvaluationMetrics": {
        "description": "Evaluation metrics provide an estimate of the quality of your machine learning transform.",
        "properties": {
          "FindMatchesMetrics": { "$ref": "#/components/schemas/FindMatchesMetrics" },
          "TransformType": { "$ref": "#/components/schemas/TransformType" }
        },
        "required": ["TransformType"],
        "type": "object"
      },
      "ExecutionProperty": {
        "description": "An execution property of a job.",
        "properties": { "MaxConcurrentRuns": { "$ref": "#/components/schemas/MaxConcurrentRuns" } },
        "type": "object"
      },
      "ExecutionTime": { "type": "integer" },
      "ExistCondition": { "enum": ["MUST_EXIST", "NOT_EXIST", "NONE"], "type": "string" },
      "ExportLabelsTaskRunProperties": {
        "description": "Specifies configuration properties for an exporting labels task run.",
        "properties": { "OutputS3Path": { "$ref": "#/components/schemas/UriString" } },
        "type": "object"
      },
      "FieldType": { "type": "string" },
      "FilterString": {
        "maxLength": 2048,
        "minLength": 0,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "FindMatchesMetrics": {
        "description": "The evaluation metrics for the find matches algorithm. The quality of your machine learning transform is measured by getting your transform to predict some matches and comparing the results to known matches from the same dataset. The quality metrics are based on a subset of your data, so they are not precise.",
        "properties": {
          "AreaUnderPRCurve": { "$ref": "#/components/schemas/GenericBoundedDouble" },
          "ConfusionMatrix": { "$ref": "#/components/schemas/ConfusionMatrix" },
          "F1": { "$ref": "#/components/schemas/GenericBoundedDouble" },
          "Precision": { "$ref": "#/components/schemas/GenericBoundedDouble" },
          "Recall": { "$ref": "#/components/schemas/GenericBoundedDouble" }
        },
        "type": "object"
      },
      "FindMatchesParameters": {
        "description": "The parameters to configure the find matches transform.",
        "properties": {
          "AccuracyCostTradeoff": { "$ref": "#/components/schemas/GenericBoundedDouble" },
          "EnforceProvidedLabels": { "$ref": "#/components/schemas/NullableBoolean" },
          "PrecisionRecallTradeoff": { "$ref": "#/components/schemas/GenericBoundedDouble" },
          "PrimaryKeyColumnName": { "$ref": "#/components/schemas/ColumnNameString" }
        },
        "type": "object"
      },
      "FindMatchesTaskRunProperties": {
        "description": "Specifies configuration properties for a Find Matches task run.",
        "properties": {
          "JobId": { "$ref": "#/components/schemas/HashString" },
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "JobRunId": { "$ref": "#/components/schemas/HashString" }
        },
        "type": "object"
      },
      "FormatString": {
        "maxLength": 128,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "GenericBoundedDouble": { "format": "double", "maximum": 1, "minimum": 0, "type": "number" },
      "GenericMap": { "additionalProperties": { "$ref": "#/components/schemas/GenericString" }, "type": "object" },
      "GenericString": { "type": "string" },
      "GetCatalogImportStatusRequest": {
        "properties": { "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" } },
        "type": "object"
      },
      "GetCatalogImportStatusResponse": {
        "properties": { "ImportStatus": { "$ref": "#/components/schemas/CatalogImportStatus" } },
        "type": "object"
      },
      "GetClassifierRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "GetClassifierResponse": {
        "properties": { "Classifier": { "$ref": "#/components/schemas/Classifier" } },
        "type": "object"
      },
      "GetClassifiersRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetClassifiersResponse": {
        "properties": {
          "Classifiers": { "$ref": "#/components/schemas/ClassifierList" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetConnectionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "HidePassword": { "$ref": "#/components/schemas/Boolean" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "GetConnectionResponse": {
        "properties": { "Connection": { "$ref": "#/components/schemas/Connection" } },
        "type": "object"
      },
      "GetConnectionsFilter": {
        "description": "Filters the connection definitions that are returned by the <code>GetConnections</code> API operation.",
        "properties": {
          "ConnectionType": { "$ref": "#/components/schemas/ConnectionType" },
          "MatchCriteria": { "$ref": "#/components/schemas/MatchCriteria" }
        },
        "type": "object"
      },
      "GetConnectionsRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "Filter": { "$ref": "#/components/schemas/GetConnectionsFilter" },
          "HidePassword": { "$ref": "#/components/schemas/Boolean" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetConnectionsResponse": {
        "properties": {
          "ConnectionList": { "$ref": "#/components/schemas/ConnectionList" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetCrawlerMetricsRequest": {
        "properties": {
          "CrawlerNameList": { "$ref": "#/components/schemas/CrawlerNameList" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetCrawlerMetricsResponse": {
        "properties": {
          "CrawlerMetricsList": { "$ref": "#/components/schemas/CrawlerMetricsList" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetCrawlerRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "GetCrawlerResponse": {
        "properties": { "Crawler": { "$ref": "#/components/schemas/Crawler" } },
        "type": "object"
      },
      "GetCrawlersRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetCrawlersResponse": {
        "properties": {
          "Crawlers": { "$ref": "#/components/schemas/CrawlerList" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetDataCatalogEncryptionSettingsRequest": {
        "properties": { "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" } },
        "type": "object"
      },
      "GetDataCatalogEncryptionSettingsResponse": {
        "properties": {
          "DataCatalogEncryptionSettings": { "$ref": "#/components/schemas/DataCatalogEncryptionSettings" }
        },
        "type": "object"
      },
      "GetDatabaseRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "GetDatabaseResponse": {
        "properties": { "Database": { "$ref": "#/components/schemas/Database" } },
        "type": "object"
      },
      "GetDatabasesRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "GetDatabasesResponse": {
        "properties": {
          "DatabaseList": { "$ref": "#/components/schemas/DatabaseList" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "required": ["DatabaseList"],
        "type": "object"
      },
      "GetDataflowGraphRequest": {
        "properties": { "PythonScript": { "$ref": "#/components/schemas/PythonScript" } },
        "type": "object"
      },
      "GetDataflowGraphResponse": {
        "properties": {
          "DagEdges": { "$ref": "#/components/schemas/DagEdges" },
          "DagNodes": { "$ref": "#/components/schemas/DagNodes" }
        },
        "type": "object"
      },
      "GetDevEndpointRequest": {
        "properties": { "EndpointName": { "$ref": "#/components/schemas/GenericString" } },
        "required": ["EndpointName"],
        "type": "object"
      },
      "GetDevEndpointResponse": {
        "properties": { "DevEndpoint": { "$ref": "#/components/schemas/DevEndpoint" } },
        "type": "object"
      },
      "GetDevEndpointsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "GetDevEndpointsResponse": {
        "properties": {
          "DevEndpoints": { "$ref": "#/components/schemas/DevEndpointList" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "GetJobBookmarkRequest": {
        "properties": {
          "JobName": { "$ref": "#/components/schemas/JobName" },
          "RunId": { "$ref": "#/components/schemas/RunId" }
        },
        "required": ["JobName"],
        "type": "object"
      },
      "GetJobBookmarkResponse": {
        "properties": { "JobBookmarkEntry": { "$ref": "#/components/schemas/JobBookmarkEntry" } },
        "type": "object"
      },
      "GetJobRequest": {
        "properties": { "JobName": { "$ref": "#/components/schemas/NameString" } },
        "required": ["JobName"],
        "type": "object"
      },
      "GetJobResponse": { "properties": { "Job": { "$ref": "#/components/schemas/Job" } }, "type": "object" },
      "GetJobRunRequest": {
        "properties": {
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "PredecessorsIncluded": { "$ref": "#/components/schemas/BooleanValue" },
          "RunId": { "$ref": "#/components/schemas/IdString" }
        },
        "required": ["JobName", "RunId"],
        "type": "object"
      },
      "GetJobRunResponse": { "properties": { "JobRun": { "$ref": "#/components/schemas/JobRun" } }, "type": "object" },
      "GetJobRunsRequest": {
        "properties": {
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "required": ["JobName"],
        "type": "object"
      },
      "GetJobRunsResponse": {
        "properties": {
          "JobRuns": { "$ref": "#/components/schemas/JobRunList" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "GetJobsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "GetJobsResponse": {
        "properties": {
          "Jobs": { "$ref": "#/components/schemas/JobList" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "GetMLTaskRunRequest": {
        "properties": {
          "TaskRunId": { "$ref": "#/components/schemas/HashString" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "required": ["TransformId", "TaskRunId"],
        "type": "object"
      },
      "GetMLTaskRunResponse": {
        "properties": {
          "CompletedOn": { "$ref": "#/components/schemas/Timestamp" },
          "ErrorString": { "$ref": "#/components/schemas/GenericString" },
          "ExecutionTime": { "$ref": "#/components/schemas/ExecutionTime" },
          "LastModifiedOn": { "$ref": "#/components/schemas/Timestamp" },
          "LogGroupName": { "$ref": "#/components/schemas/GenericString" },
          "Properties": { "$ref": "#/components/schemas/TaskRunProperties" },
          "StartedOn": { "$ref": "#/components/schemas/Timestamp" },
          "Status": { "$ref": "#/components/schemas/TaskStatusType" },
          "TaskRunId": { "$ref": "#/components/schemas/HashString" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "type": "object"
      },
      "GetMLTaskRunsRequest": {
        "properties": {
          "Filter": { "$ref": "#/components/schemas/TaskRunFilterCriteria" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/PaginationToken" },
          "Sort": { "$ref": "#/components/schemas/TaskRunSortCriteria" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "required": ["TransformId"],
        "type": "object"
      },
      "GetMLTaskRunsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/PaginationToken" },
          "TaskRuns": { "$ref": "#/components/schemas/TaskRunList" }
        },
        "type": "object"
      },
      "GetMLTransformRequest": {
        "properties": { "TransformId": { "$ref": "#/components/schemas/HashString" } },
        "required": ["TransformId"],
        "type": "object"
      },
      "GetMLTransformResponse": {
        "properties": {
          "CreatedOn": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "EvaluationMetrics": { "$ref": "#/components/schemas/EvaluationMetrics" },
          "InputRecordTables": { "$ref": "#/components/schemas/GlueTables" },
          "LabelCount": { "$ref": "#/components/schemas/LabelCount" },
          "LastModifiedOn": { "$ref": "#/components/schemas/Timestamp" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "MaxRetries": { "$ref": "#/components/schemas/NullableInteger" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "Parameters": { "$ref": "#/components/schemas/TransformParameters" },
          "Role": { "$ref": "#/components/schemas/RoleString" },
          "Schema": { "$ref": "#/components/schemas/TransformSchema" },
          "Status": { "$ref": "#/components/schemas/TransformStatusType" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "TransformId": { "$ref": "#/components/schemas/HashString" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "type": "object"
      },
      "GetMLTransformsRequest": {
        "properties": {
          "Filter": { "$ref": "#/components/schemas/TransformFilterCriteria" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/PaginationToken" },
          "Sort": { "$ref": "#/components/schemas/TransformSortCriteria" }
        },
        "type": "object"
      },
      "GetMLTransformsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/PaginationToken" },
          "Transforms": { "$ref": "#/components/schemas/TransformList" }
        },
        "required": ["Transforms"],
        "type": "object"
      },
      "GetMappingRequest": {
        "properties": {
          "Location": { "$ref": "#/components/schemas/Location" },
          "Sinks": { "$ref": "#/components/schemas/CatalogEntries" },
          "Source": { "$ref": "#/components/schemas/CatalogEntry" }
        },
        "required": ["Source"],
        "type": "object"
      },
      "GetMappingResponse": {
        "properties": { "Mapping": { "$ref": "#/components/schemas/MappingList" } },
        "required": ["Mapping"],
        "type": "object"
      },
      "GetPartitionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "PartitionValues": { "$ref": "#/components/schemas/ValueStringList" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName", "PartitionValues"],
        "type": "object"
      },
      "GetPartitionResponse": {
        "properties": { "Partition": { "$ref": "#/components/schemas/Partition" } },
        "type": "object"
      },
      "GetPartitionsRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "Expression": { "$ref": "#/components/schemas/PredicateString" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "Segment": { "$ref": "#/components/schemas/Segment" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName"],
        "type": "object"
      },
      "GetPartitionsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "Partitions": { "$ref": "#/components/schemas/PartitionList" }
        },
        "type": "object"
      },
      "GetPlanRequest": {
        "properties": {
          "Language": { "$ref": "#/components/schemas/Language" },
          "Location": { "$ref": "#/components/schemas/Location" },
          "Mapping": { "$ref": "#/components/schemas/MappingList" },
          "Sinks": { "$ref": "#/components/schemas/CatalogEntries" },
          "Source": { "$ref": "#/components/schemas/CatalogEntry" }
        },
        "required": ["Mapping", "Source"],
        "type": "object"
      },
      "GetPlanResponse": {
        "properties": {
          "PythonScript": { "$ref": "#/components/schemas/PythonScript" },
          "ScalaCode": { "$ref": "#/components/schemas/ScalaCode" }
        },
        "type": "object"
      },
      "GetResourcePolicyRequest": { "properties": {}, "type": "object" },
      "GetResourcePolicyResponse": {
        "properties": {
          "CreateTime": { "$ref": "#/components/schemas/Timestamp" },
          "PolicyHash": { "$ref": "#/components/schemas/HashString" },
          "PolicyInJson": { "$ref": "#/components/schemas/PolicyJsonString" },
          "UpdateTime": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "GetSecurityConfigurationRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "GetSecurityConfigurationResponse": {
        "properties": { "SecurityConfiguration": { "$ref": "#/components/schemas/SecurityConfiguration" } },
        "type": "object"
      },
      "GetSecurityConfigurationsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "GetSecurityConfigurationsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/GenericString" },
          "SecurityConfigurations": { "$ref": "#/components/schemas/SecurityConfigurationList" }
        },
        "type": "object"
      },
      "GetTableRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "Name"],
        "type": "object"
      },
      "GetTableResponse": { "properties": { "Table": { "$ref": "#/components/schemas/Table" } }, "type": "object" },
      "GetTableVersionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "TableName": { "$ref": "#/components/schemas/NameString" },
          "VersionId": { "$ref": "#/components/schemas/VersionString" }
        },
        "required": ["DatabaseName", "TableName"],
        "type": "object"
      },
      "GetTableVersionResponse": {
        "properties": { "TableVersion": { "$ref": "#/components/schemas/TableVersion" } },
        "type": "object"
      },
      "GetTableVersionsList": { "items": { "$ref": "#/components/schemas/TableVersion" }, "type": "array" },
      "GetTableVersionsRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName"],
        "type": "object"
      },
      "GetTableVersionsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "TableVersions": { "$ref": "#/components/schemas/GetTableVersionsList" }
        },
        "type": "object"
      },
      "GetTablesRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "Expression": { "$ref": "#/components/schemas/FilterString" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "required": ["DatabaseName"],
        "type": "object"
      },
      "GetTablesResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "TableList": { "$ref": "#/components/schemas/TableList" }
        },
        "type": "object"
      },
      "GetTagsRequest": {
        "properties": { "ResourceArn": { "$ref": "#/components/schemas/GlueResourceArn" } },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "GetTagsResponse": { "properties": { "Tags": { "$ref": "#/components/schemas/TagsMap" } }, "type": "object" },
      "GetTriggerRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "GetTriggerResponse": {
        "properties": { "Trigger": { "$ref": "#/components/schemas/Trigger" } },
        "type": "object"
      },
      "GetTriggersRequest": {
        "properties": {
          "DependentJobName": { "$ref": "#/components/schemas/NameString" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "GetTriggersResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/GenericString" },
          "Triggers": { "$ref": "#/components/schemas/TriggerList" }
        },
        "type": "object"
      },
      "GetUserDefinedFunctionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "FunctionName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "FunctionName"],
        "type": "object"
      },
      "GetUserDefinedFunctionResponse": {
        "properties": { "UserDefinedFunction": { "$ref": "#/components/schemas/UserDefinedFunction" } },
        "type": "object"
      },
      "GetUserDefinedFunctionsRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "Pattern": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "Pattern"],
        "type": "object"
      },
      "GetUserDefinedFunctionsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "UserDefinedFunctions": { "$ref": "#/components/schemas/UserDefinedFunctionList" }
        },
        "type": "object"
      },
      "GetWorkflowRequest": {
        "properties": {
          "IncludeGraph": { "$ref": "#/components/schemas/NullableBoolean" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "GetWorkflowResponse": {
        "properties": { "Workflow": { "$ref": "#/components/schemas/Workflow" } },
        "type": "object"
      },
      "GetWorkflowRunPropertiesRequest": {
        "properties": {
          "Name": { "$ref": "#/components/schemas/NameString" },
          "RunId": { "$ref": "#/components/schemas/IdString" }
        },
        "required": ["Name", "RunId"],
        "type": "object"
      },
      "GetWorkflowRunPropertiesResponse": {
        "properties": { "RunProperties": { "$ref": "#/components/schemas/WorkflowRunProperties" } },
        "type": "object"
      },
      "GetWorkflowRunRequest": {
        "properties": {
          "IncludeGraph": { "$ref": "#/components/schemas/NullableBoolean" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "RunId": { "$ref": "#/components/schemas/IdString" }
        },
        "required": ["Name", "RunId"],
        "type": "object"
      },
      "GetWorkflowRunResponse": {
        "properties": { "Run": { "$ref": "#/components/schemas/WorkflowRun" } },
        "type": "object"
      },
      "GetWorkflowRunsRequest": {
        "properties": {
          "IncludeGraph": { "$ref": "#/components/schemas/NullableBoolean" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "GetWorkflowRunsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/GenericString" },
          "Runs": { "$ref": "#/components/schemas/WorkflowRuns" }
        },
        "type": "object"
      },
      "GlueEncryptionException": {},
      "GlueResourceArn": { "maxLength": 10240, "minLength": 1, "pattern": "arn:aws:glue:.*", "type": "string" },
      "GlueTable": {
        "description": "The database and table in the AWS Glue Data Catalog that is used for input or output data.",
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/NameString" },
          "ConnectionName": { "$ref": "#/components/schemas/NameString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName"],
        "type": "object"
      },
      "GlueTables": {
        "items": { "$ref": "#/components/schemas/GlueTable" },
        "maxItems": 10,
        "minItems": 0,
        "type": "array"
      },
      "GlueVersionString": { "maxLength": 255, "minLength": 1, "pattern": "^\\w+\\.\\w+$", "type": "string" },
      "GrokClassifier": {
        "description": "A classifier that uses <code>grok</code> patterns.",
        "properties": {
          "Classification": { "$ref": "#/components/schemas/Classification" },
          "CreationTime": { "$ref": "#/components/schemas/Timestamp" },
          "CustomPatterns": { "$ref": "#/components/schemas/CustomPatterns" },
          "GrokPattern": { "$ref": "#/components/schemas/GrokPattern" },
          "LastUpdated": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Version": { "$ref": "#/components/schemas/VersionId" }
        },
        "required": ["Name", "Classification", "GrokPattern"],
        "type": "object"
      },
      "GrokPattern": {
        "maxLength": 2048,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*"
      },
      "HashString": {
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "IdString": {
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "IdempotentParameterMismatchException": {},
      "ImportCatalogToGlueRequest": {
        "properties": { "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" } },
        "type": "object"
      },
      "ImportCatalogToGlueResponse": { "properties": {}, "type": "object" },
      "ImportLabelsTaskRunProperties": {
        "description": "Specifies configuration properties for an importing labels task run.",
        "properties": {
          "InputS3Path": { "$ref": "#/components/schemas/UriString" },
          "Replace": { "$ref": "#/components/schemas/ReplaceBoolean" }
        },
        "type": "object"
      },
      "Integer": { "type": "integer" },
      "IntegerFlag": { "maximum": 1, "minimum": 0, "type": "integer" },
      "IntegerValue": { "type": "integer" },
      "InternalServiceException": {},
      "InvalidInputException": {},
      "JdbcTarget": {
        "description": "Specifies a JDBC data store to crawl.",
        "properties": {
          "ConnectionName": { "$ref": "#/components/schemas/ConnectionName" },
          "Exclusions": { "$ref": "#/components/schemas/PathList" },
          "Path": { "$ref": "#/components/schemas/Path" }
        },
        "type": "object"
      },
      "JdbcTargetList": { "items": { "$ref": "#/components/schemas/JdbcTarget" }, "type": "array" },
      "Job": {
        "description": "Specifies a job definition.",
        "properties": {
          "AllocatedCapacity": { "$ref": "#/components/schemas/IntegerValue" },
          "Command": { "$ref": "#/components/schemas/JobCommand" },
          "Connections": { "$ref": "#/components/schemas/ConnectionsList" },
          "CreatedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "DefaultArguments": { "$ref": "#/components/schemas/GenericMap" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "ExecutionProperty": { "$ref": "#/components/schemas/ExecutionProperty" },
          "GlueVersion": { "$ref": "#/components/schemas/GlueVersionString" },
          "LastModifiedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "LogUri": { "$ref": "#/components/schemas/UriString" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "MaxRetries": { "$ref": "#/components/schemas/MaxRetries" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "NotificationProperty": { "$ref": "#/components/schemas/NotificationProperty" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "Role": { "$ref": "#/components/schemas/RoleString" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "type": "object"
      },
      "JobBookmarkEntry": {
        "description": "Defines a point that a job can resume processing.",
        "properties": {
          "Attempt": { "$ref": "#/components/schemas/IntegerValue" },
          "JobBookmark": { "$ref": "#/components/schemas/JsonValue" },
          "JobName": { "$ref": "#/components/schemas/JobName" },
          "PreviousRunId": { "$ref": "#/components/schemas/RunId" },
          "Run": { "$ref": "#/components/schemas/IntegerValue" },
          "RunId": { "$ref": "#/components/schemas/RunId" },
          "Version": { "$ref": "#/components/schemas/IntegerValue" }
        },
        "type": "object"
      },
      "JobBookmarksEncryption": {
        "description": "Specifies how job bookmark data should be encrypted.",
        "properties": {
          "JobBookmarksEncryptionMode": { "$ref": "#/components/schemas/JobBookmarksEncryptionMode" },
          "KmsKeyArn": { "$ref": "#/components/schemas/KmsKeyArn" }
        },
        "type": "object"
      },
      "JobBookmarksEncryptionMode": { "enum": ["DISABLED", "CSE-KMS"], "type": "string" },
      "JobCommand": {
        "description": "Specifies code executed when a job is run.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/GenericString" },
          "PythonVersion": { "$ref": "#/components/schemas/PythonVersionString" },
          "ScriptLocation": { "$ref": "#/components/schemas/ScriptLocationString" }
        },
        "type": "object"
      },
      "JobList": { "items": { "$ref": "#/components/schemas/Job" }, "type": "array" },
      "JobName": { "type": "string" },
      "JobNameList": { "items": { "$ref": "#/components/schemas/NameString" }, "type": "array" },
      "JobNodeDetails": {
        "description": "The details of a Job node present in the workflow.",
        "properties": { "JobRuns": { "$ref": "#/components/schemas/JobRunList" } },
        "type": "object"
      },
      "JobRun": {
        "description": "Contains information about a job run.",
        "properties": {
          "AllocatedCapacity": { "$ref": "#/components/schemas/IntegerValue" },
          "Arguments": { "$ref": "#/components/schemas/GenericMap" },
          "Attempt": { "$ref": "#/components/schemas/AttemptCount" },
          "CompletedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "ErrorMessage": { "$ref": "#/components/schemas/ErrorString" },
          "ExecutionTime": { "$ref": "#/components/schemas/ExecutionTime" },
          "GlueVersion": { "$ref": "#/components/schemas/GlueVersionString" },
          "Id": { "$ref": "#/components/schemas/IdString" },
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "JobRunState": { "$ref": "#/components/schemas/JobRunState" },
          "LastModifiedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "LogGroupName": { "$ref": "#/components/schemas/GenericString" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "NotificationProperty": { "$ref": "#/components/schemas/NotificationProperty" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "PredecessorRuns": { "$ref": "#/components/schemas/PredecessorList" },
          "PreviousRunId": { "$ref": "#/components/schemas/IdString" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "StartedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "TriggerName": { "$ref": "#/components/schemas/NameString" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "type": "object"
      },
      "JobRunList": { "items": { "$ref": "#/components/schemas/JobRun" }, "type": "array" },
      "JobRunState": {
        "enum": ["STARTING", "RUNNING", "STOPPING", "STOPPED", "SUCCEEDED", "FAILED", "TIMEOUT"],
        "type": "string"
      },
      "JobUpdate": {
        "description": "Specifies information used to update an existing job definition. The previous job definition is completely overwritten by this information.",
        "properties": {
          "AllocatedCapacity": { "$ref": "#/components/schemas/IntegerValue" },
          "Command": { "$ref": "#/components/schemas/JobCommand" },
          "Connections": { "$ref": "#/components/schemas/ConnectionsList" },
          "DefaultArguments": { "$ref": "#/components/schemas/GenericMap" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "ExecutionProperty": { "$ref": "#/components/schemas/ExecutionProperty" },
          "GlueVersion": { "$ref": "#/components/schemas/GlueVersionString" },
          "LogUri": { "$ref": "#/components/schemas/UriString" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "MaxRetries": { "$ref": "#/components/schemas/MaxRetries" },
          "NotificationProperty": { "$ref": "#/components/schemas/NotificationProperty" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "Role": { "$ref": "#/components/schemas/RoleString" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "type": "object"
      },
      "JsonClassifier": {
        "description": "A classifier for <code>JSON</code> content.",
        "properties": {
          "CreationTime": { "$ref": "#/components/schemas/Timestamp" },
          "JsonPath": { "$ref": "#/components/schemas/JsonPath" },
          "LastUpdated": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Version": { "$ref": "#/components/schemas/VersionId" }
        },
        "required": ["Name", "JsonPath"],
        "type": "object"
      },
      "JsonPath": { "type": "string" },
      "JsonValue": { "type": "string" },
      "KeyString": {
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "KmsKeyArn": { "pattern": "arn:aws:kms:.*", "type": "string" },
      "LabelCount": { "type": "integer" },
      "LabelingSetGenerationTaskRunProperties": {
        "description": "Specifies configuration properties for a labeling set generation task run.",
        "properties": { "OutputS3Path": { "$ref": "#/components/schemas/UriString" } },
        "type": "object"
      },
      "Language": { "enum": ["PYTHON", "SCALA"], "type": "string" },
      "LastCrawlInfo": {
        "description": "Status and error information about the most recent crawl.",
        "properties": {
          "ErrorMessage": { "$ref": "#/components/schemas/DescriptionString" },
          "LogGroup": { "$ref": "#/components/schemas/LogGroup" },
          "LogStream": { "$ref": "#/components/schemas/LogStream" },
          "MessagePrefix": { "$ref": "#/components/schemas/MessagePrefix" },
          "StartTime": { "$ref": "#/components/schemas/Timestamp" },
          "Status": { "$ref": "#/components/schemas/LastCrawlStatus" }
        },
        "type": "object"
      },
      "LastCrawlStatus": { "enum": ["SUCCEEDED", "CANCELLED", "FAILED"], "type": "string" },
      "ListCrawlersRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" }
        },
        "type": "object"
      },
      "ListCrawlersResponse": {
        "properties": {
          "CrawlerNames": { "$ref": "#/components/schemas/CrawlerNameList" },
          "NextToken": { "$ref": "#/components/schemas/Token" }
        },
        "type": "object"
      },
      "ListDevEndpointsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" }
        },
        "type": "object"
      },
      "ListDevEndpointsResponse": {
        "properties": {
          "DevEndpointNames": { "$ref": "#/components/schemas/DevEndpointNameList" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "ListJobsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" }
        },
        "type": "object"
      },
      "ListJobsResponse": {
        "properties": {
          "JobNames": { "$ref": "#/components/schemas/JobNameList" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "ListTriggersRequest": {
        "properties": {
          "DependentJobName": { "$ref": "#/components/schemas/NameString" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" },
          "Tags": { "$ref": "#/components/schemas/TagsMap" }
        },
        "type": "object"
      },
      "ListTriggersResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/GenericString" },
          "TriggerNames": { "$ref": "#/components/schemas/TriggerNameList" }
        },
        "type": "object"
      },
      "ListWorkflowsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "ListWorkflowsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/GenericString" },
          "Workflows": { "$ref": "#/components/schemas/WorkflowNames" }
        },
        "type": "object"
      },
      "Location": {
        "description": "The location of resources.",
        "properties": {
          "DynamoDB": { "$ref": "#/components/schemas/CodeGenNodeArgs" },
          "Jdbc": { "$ref": "#/components/schemas/CodeGenNodeArgs" },
          "S3": { "$ref": "#/components/schemas/CodeGenNodeArgs" }
        },
        "type": "object"
      },
      "LocationMap": {
        "additionalProperties": { "$ref": "#/components/schemas/ColumnValuesString" },
        "type": "object"
      },
      "LocationString": {
        "maxLength": 2056,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "LogGroup": { "maxLength": 512, "minLength": 1, "pattern": "[\\.\\-_/#A-Za-z0-9]+", "type": "string" },
      "LogStream": { "maxLength": 512, "minLength": 1, "pattern": "[^:*]*", "type": "string" },
      "Logical": { "enum": ["AND", "ANY"], "type": "string" },
      "LogicalOperator": { "enum": ["EQUALS"], "type": "string" },
      "MLTransform": {
        "description": "A structure for a machine learning transform.",
        "properties": {
          "CreatedOn": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "EvaluationMetrics": { "$ref": "#/components/schemas/EvaluationMetrics" },
          "InputRecordTables": { "$ref": "#/components/schemas/GlueTables" },
          "LabelCount": { "$ref": "#/components/schemas/LabelCount" },
          "LastModifiedOn": { "$ref": "#/components/schemas/Timestamp" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "MaxRetries": { "$ref": "#/components/schemas/NullableInteger" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "Parameters": { "$ref": "#/components/schemas/TransformParameters" },
          "Role": { "$ref": "#/components/schemas/RoleString" },
          "Schema": { "$ref": "#/components/schemas/TransformSchema" },
          "Status": { "$ref": "#/components/schemas/TransformStatusType" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "TransformId": { "$ref": "#/components/schemas/HashString" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "type": "object"
      },
      "MLTransformNotReadyException": {},
      "MapValue": {
        "additionalProperties": { "$ref": "#/components/schemas/GenericString" },
        "maxProperties": 100,
        "minProperties": 0,
        "type": "object"
      },
      "MappingEntry": {
        "description": "Defines a mapping.",
        "properties": {
          "SourcePath": { "$ref": "#/components/schemas/SchemaPathString" },
          "SourceTable": { "$ref": "#/components/schemas/TableName" },
          "SourceType": { "$ref": "#/components/schemas/FieldType" },
          "TargetPath": { "$ref": "#/components/schemas/SchemaPathString" },
          "TargetTable": { "$ref": "#/components/schemas/TableName" },
          "TargetType": { "$ref": "#/components/schemas/FieldType" }
        },
        "type": "object"
      },
      "MappingList": { "items": { "$ref": "#/components/schemas/MappingEntry" }, "type": "array" },
      "MatchCriteria": {
        "items": { "$ref": "#/components/schemas/NameString" },
        "maxItems": 10,
        "minItems": 0,
        "type": "array"
      },
      "MaxConcurrentRuns": { "type": "integer" },
      "MaxRetries": { "type": "integer" },
      "MessagePrefix": {
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "MillisecondsCount": { "type": "integer" },
      "NameString": {
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "NameStringList": { "items": { "$ref": "#/components/schemas/NameString" }, "type": "array" },
      "NoScheduleException": {},
      "Node": {
        "description": "A node represents an AWS Glue component like Trigger, Job etc. which is part of a workflow.",
        "properties": {
          "CrawlerDetails": { "$ref": "#/components/schemas/CrawlerNodeDetails" },
          "JobDetails": { "$ref": "#/components/schemas/JobNodeDetails" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "TriggerDetails": { "$ref": "#/components/schemas/TriggerNodeDetails" },
          "Type": { "$ref": "#/components/schemas/NodeType" },
          "UniqueId": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "NodeList": { "items": { "$ref": "#/components/schemas/Node" }, "type": "array" },
      "NodeType": { "enum": ["CRAWLER", "JOB", "TRIGGER"], "type": "string" },
      "NonNegativeDouble": { "format": "double", "minimum": 0, "type": "number" },
      "NonNegativeInteger": { "minimum": 0, "type": "integer" },
      "NotificationProperty": {
        "description": "Specifies configuration properties of a notification.",
        "properties": { "NotifyDelayAfter": { "$ref": "#/components/schemas/NotifyDelayAfter" } },
        "type": "object"
      },
      "NotifyDelayAfter": { "minimum": 1, "type": "integer" },
      "NullableBoolean": { "type": "boolean" },
      "NullableDouble": { "format": "double", "type": "number" },
      "NullableInteger": { "type": "integer" },
      "OperationTimeoutException": {},
      "OrchestrationStringList": { "items": { "$ref": "#/components/schemas/GenericString" }, "type": "array" },
      "Order": {
        "description": "Specifies the sort order of a sorted column.",
        "properties": {
          "Column": { "$ref": "#/components/schemas/NameString" },
          "SortOrder": { "$ref": "#/components/schemas/IntegerFlag" }
        },
        "required": ["Column", "SortOrder"],
        "type": "object"
      },
      "OrderList": { "items": { "$ref": "#/components/schemas/Order" }, "type": "array" },
      "PageSize": { "maximum": 1000, "minimum": 1, "type": "integer" },
      "PaginationToken": { "type": "string" },
      "ParametersMap": {
        "additionalProperties": { "$ref": "#/components/schemas/ParametersMapValue" },
        "type": "object"
      },
      "ParametersMapValue": { "maxLength": 512000, "type": "string" },
      "Partition": {
        "description": "Represents a slice of table data.",
        "properties": {
          "CreationTime": { "$ref": "#/components/schemas/Timestamp" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "LastAccessTime": { "$ref": "#/components/schemas/Timestamp" },
          "LastAnalyzedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" },
          "StorageDescriptor": { "$ref": "#/components/schemas/StorageDescriptor" },
          "TableName": { "$ref": "#/components/schemas/NameString" },
          "Values": { "$ref": "#/components/schemas/ValueStringList" }
        },
        "type": "object"
      },
      "PartitionError": {
        "description": "Contains information about a partition error.",
        "properties": {
          "ErrorDetail": { "$ref": "#/components/schemas/ErrorDetail" },
          "PartitionValues": { "$ref": "#/components/schemas/ValueStringList" }
        },
        "type": "object"
      },
      "PartitionErrors": { "items": { "$ref": "#/components/schemas/PartitionError" }, "type": "array" },
      "PartitionInput": {
        "description": "The structure used to create and update a partition.",
        "properties": {
          "LastAccessTime": { "$ref": "#/components/schemas/Timestamp" },
          "LastAnalyzedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" },
          "StorageDescriptor": { "$ref": "#/components/schemas/StorageDescriptor" },
          "Values": { "$ref": "#/components/schemas/ValueStringList" }
        },
        "type": "object"
      },
      "PartitionInputList": {
        "items": { "$ref": "#/components/schemas/PartitionInput" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "PartitionList": { "items": { "$ref": "#/components/schemas/Partition" }, "type": "array" },
      "PartitionValueList": {
        "description": "Contains a list of values defining partitions.",
        "properties": { "Values": { "$ref": "#/components/schemas/ValueStringList" } },
        "required": ["Values"],
        "type": "object"
      },
      "Path": { "type": "string" },
      "PathList": { "items": { "$ref": "#/components/schemas/Path" }, "type": "array" },
      "Permission": {
        "enum": [
          "ALL",
          "SELECT",
          "ALTER",
          "DROP",
          "DELETE",
          "INSERT",
          "CREATE_DATABASE",
          "CREATE_TABLE",
          "DATA_LOCATION_ACCESS"
        ],
        "type": "string"
      },
      "PermissionList": { "items": { "$ref": "#/components/schemas/Permission" }, "type": "array" },
      "PhysicalConnectionRequirements": {
        "description": "Specifies the physical requirements for a connection.",
        "properties": {
          "AvailabilityZone": { "$ref": "#/components/schemas/NameString" },
          "SecurityGroupIdList": { "$ref": "#/components/schemas/SecurityGroupIdList" },
          "SubnetId": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "PolicyJsonString": { "maxLength": 10240, "minLength": 2, "type": "string" },
      "Predecessor": {
        "description": "A job run that was used in the predicate of a conditional trigger that triggered this job run.",
        "properties": {
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "RunId": { "$ref": "#/components/schemas/IdString" }
        },
        "type": "object"
      },
      "PredecessorList": { "items": { "$ref": "#/components/schemas/Predecessor" }, "type": "array" },
      "Predicate": {
        "description": "Defines the predicate of the trigger, which determines when it fires.",
        "properties": {
          "Conditions": { "$ref": "#/components/schemas/ConditionList" },
          "Logical": { "$ref": "#/components/schemas/Logical" }
        },
        "type": "object"
      },
      "PredicateString": {
        "maxLength": 2048,
        "minLength": 0,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "PrincipalPermissions": {
        "description": "Permissions granted to a principal.",
        "properties": {
          "Permissions": { "$ref": "#/components/schemas/PermissionList" },
          "Principal": { "$ref": "#/components/schemas/DataLakePrincipal" }
        },
        "type": "object"
      },
      "PrincipalPermissionsList": { "items": { "$ref": "#/components/schemas/PrincipalPermissions" }, "type": "array" },
      "PrincipalType": { "enum": ["USER", "ROLE", "GROUP"], "type": "string" },
      "PropertyPredicate": {
        "description": "Defines a property predicate.",
        "properties": {
          "Comparator": { "$ref": "#/components/schemas/Comparator" },
          "Key": { "$ref": "#/components/schemas/ValueString" },
          "Value": { "$ref": "#/components/schemas/ValueString" }
        },
        "type": "object"
      },
      "PublicKeysList": { "items": { "$ref": "#/components/schemas/GenericString" }, "maxItems": 5, "type": "array" },
      "PutDataCatalogEncryptionSettingsRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DataCatalogEncryptionSettings": { "$ref": "#/components/schemas/DataCatalogEncryptionSettings" }
        },
        "required": ["DataCatalogEncryptionSettings"],
        "type": "object"
      },
      "PutDataCatalogEncryptionSettingsResponse": { "properties": {}, "type": "object" },
      "PutResourcePolicyRequest": {
        "properties": {
          "PolicyExistsCondition": { "$ref": "#/components/schemas/ExistCondition" },
          "PolicyHashCondition": { "$ref": "#/components/schemas/HashString" },
          "PolicyInJson": { "$ref": "#/components/schemas/PolicyJsonString" }
        },
        "required": ["PolicyInJson"],
        "type": "object"
      },
      "PutResourcePolicyResponse": {
        "properties": { "PolicyHash": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "PutWorkflowRunPropertiesRequest": {
        "properties": {
          "Name": { "$ref": "#/components/schemas/NameString" },
          "RunId": { "$ref": "#/components/schemas/IdString" },
          "RunProperties": { "$ref": "#/components/schemas/WorkflowRunProperties" }
        },
        "required": ["Name", "RunId", "RunProperties"],
        "type": "object"
      },
      "PutWorkflowRunPropertiesResponse": { "properties": {}, "type": "object" },
      "PythonScript": { "type": "string" },
      "PythonVersionString": { "pattern": "^[2-3]$", "type": "string" },
      "RecordsCount": { "type": "integer" },
      "ReplaceBoolean": { "type": "boolean" },
      "ResetJobBookmarkRequest": {
        "properties": {
          "JobName": { "$ref": "#/components/schemas/JobName" },
          "RunId": { "$ref": "#/components/schemas/RunId" }
        },
        "required": ["JobName"],
        "type": "object"
      },
      "ResetJobBookmarkResponse": {
        "properties": { "JobBookmarkEntry": { "$ref": "#/components/schemas/JobBookmarkEntry" } },
        "type": "object"
      },
      "ResourceNumberLimitExceededException": {},
      "ResourceType": { "enum": ["JAR", "FILE", "ARCHIVE"], "type": "string" },
      "ResourceUri": {
        "description": "The URIs for function resources.",
        "properties": {
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" },
          "Uri": { "$ref": "#/components/schemas/URI" }
        },
        "type": "object"
      },
      "ResourceUriList": {
        "items": { "$ref": "#/components/schemas/ResourceUri" },
        "maxItems": 1000,
        "minItems": 0,
        "type": "array"
      },
      "Role": { "type": "string" },
      "RoleArn": { "pattern": "arn:aws:iam::\\d{12}:role/.*", "type": "string" },
      "RoleString": { "type": "string" },
      "RowTag": { "type": "string" },
      "RunId": { "type": "string" },
      "S3Encryption": {
        "description": "Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.",
        "properties": {
          "KmsKeyArn": { "$ref": "#/components/schemas/KmsKeyArn" },
          "S3EncryptionMode": { "$ref": "#/components/schemas/S3EncryptionMode" }
        },
        "type": "object"
      },
      "S3EncryptionList": { "items": { "$ref": "#/components/schemas/S3Encryption" }, "type": "array" },
      "S3EncryptionMode": { "enum": ["DISABLED", "SSE-KMS", "SSE-S3"], "type": "string" },
      "S3Target": {
        "description": "Specifies a data store in Amazon Simple Storage Service (Amazon S3).",
        "properties": {
          "Exclusions": { "$ref": "#/components/schemas/PathList" },
          "Path": { "$ref": "#/components/schemas/Path" }
        },
        "type": "object"
      },
      "S3TargetList": { "items": { "$ref": "#/components/schemas/S3Target" }, "type": "array" },
      "ScalaCode": { "type": "string" },
      "Schedule": {
        "description": "A scheduling object using a <code>cron</code> statement to schedule an event.",
        "properties": {
          "ScheduleExpression": { "$ref": "#/components/schemas/CronExpression" },
          "State": { "$ref": "#/components/schemas/ScheduleState" }
        },
        "type": "object"
      },
      "ScheduleState": { "enum": ["SCHEDULED", "NOT_SCHEDULED", "TRANSITIONING"], "type": "string" },
      "SchedulerNotRunningException": {},
      "SchedulerRunningException": {},
      "SchedulerTransitioningException": {},
      "SchemaChangePolicy": {
        "description": "A policy that specifies update and deletion behaviors for the crawler.",
        "properties": {
          "DeleteBehavior": { "$ref": "#/components/schemas/DeleteBehavior" },
          "UpdateBehavior": { "$ref": "#/components/schemas/UpdateBehavior" }
        },
        "type": "object"
      },
      "SchemaColumn": {
        "description": "A key-value pair representing a column and data type that this transform can run against. The <code>Schema</code> parameter of the <code>MLTransform</code> may contain up to 100 of these structures.",
        "properties": {
          "DataType": { "$ref": "#/components/schemas/ColumnTypeString" },
          "Name": { "$ref": "#/components/schemas/ColumnNameString" }
        },
        "type": "object"
      },
      "SchemaPathString": { "type": "string" },
      "ScriptLocationString": { "type": "string" },
      "SearchPropertyPredicates": { "items": { "$ref": "#/components/schemas/PropertyPredicate" }, "type": "array" },
      "SearchTablesRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "Filters": { "$ref": "#/components/schemas/SearchPropertyPredicates" },
          "MaxResults": { "$ref": "#/components/schemas/PageSize" },
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "SearchText": { "$ref": "#/components/schemas/ValueString" },
          "SortCriteria": { "$ref": "#/components/schemas/SortCriteria" }
        },
        "type": "object"
      },
      "SearchTablesResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/Token" },
          "TableList": { "$ref": "#/components/schemas/TableList" }
        },
        "type": "object"
      },
      "SecurityConfiguration": {
        "description": "Specifies a security configuration.",
        "properties": {
          "CreatedTimeStamp": { "$ref": "#/components/schemas/TimestampValue" },
          "EncryptionConfiguration": { "$ref": "#/components/schemas/EncryptionConfiguration" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "SecurityConfigurationList": {
        "items": { "$ref": "#/components/schemas/SecurityConfiguration" },
        "type": "array"
      },
      "SecurityGroupIdList": {
        "items": { "$ref": "#/components/schemas/NameString" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      },
      "Segment": {
        "description": "Defines a non-overlapping region of a table's partitions, allowing multiple requests to be executed in parallel.",
        "properties": {
          "SegmentNumber": { "$ref": "#/components/schemas/NonNegativeInteger" },
          "TotalSegments": { "$ref": "#/components/schemas/TotalSegmentsInteger" }
        },
        "required": ["SegmentNumber", "TotalSegments"],
        "type": "object"
      },
      "SerDeInfo": {
        "description": "Information about a serialization/deserialization program (SerDe) that serves as an extractor and loader.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" },
          "SerializationLibrary": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "SkewedInfo": {
        "description": "Specifies skewed values in a table. Skewed values are those that occur with very high frequency.",
        "properties": {
          "SkewedColumnNames": { "$ref": "#/components/schemas/NameStringList" },
          "SkewedColumnValueLocationMaps": { "$ref": "#/components/schemas/LocationMap" },
          "SkewedColumnValues": { "$ref": "#/components/schemas/ColumnValueStringList" }
        },
        "type": "object"
      },
      "Sort": { "enum": ["ASC", "DESC"], "type": "string" },
      "SortCriteria": {
        "items": { "$ref": "#/components/schemas/SortCriterion" },
        "maxItems": 1,
        "minItems": 0,
        "type": "array"
      },
      "SortCriterion": {
        "properties": {
          "FieldName": { "$ref": "#/components/schemas/ValueString" },
          "Sort": { "$ref": "#/components/schemas/Sort" }
        },
        "type": "object"
      },
      "SortDirectionType": { "enum": ["DESCENDING", "ASCENDING"], "type": "string" },
      "StartCrawlerRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "StartCrawlerResponse": { "properties": {}, "type": "object" },
      "StartCrawlerScheduleRequest": {
        "properties": { "CrawlerName": { "$ref": "#/components/schemas/NameString" } },
        "required": ["CrawlerName"],
        "type": "object"
      },
      "StartCrawlerScheduleResponse": { "properties": {}, "type": "object" },
      "StartExportLabelsTaskRunRequest": {
        "properties": {
          "OutputS3Path": { "$ref": "#/components/schemas/UriString" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "required": ["TransformId", "OutputS3Path"],
        "type": "object"
      },
      "StartExportLabelsTaskRunResponse": {
        "properties": { "TaskRunId": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "StartImportLabelsTaskRunRequest": {
        "properties": {
          "InputS3Path": { "$ref": "#/components/schemas/UriString" },
          "ReplaceAllLabels": { "$ref": "#/components/schemas/ReplaceBoolean" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "required": ["TransformId", "InputS3Path"],
        "type": "object"
      },
      "StartImportLabelsTaskRunResponse": {
        "properties": { "TaskRunId": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "StartJobRunRequest": {
        "properties": {
          "AllocatedCapacity": { "$ref": "#/components/schemas/IntegerValue" },
          "Arguments": { "$ref": "#/components/schemas/GenericMap" },
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "JobRunId": { "$ref": "#/components/schemas/IdString" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "NotificationProperty": { "$ref": "#/components/schemas/NotificationProperty" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "SecurityConfiguration": { "$ref": "#/components/schemas/NameString" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "required": ["JobName"],
        "type": "object"
      },
      "StartJobRunResponse": {
        "properties": { "JobRunId": { "$ref": "#/components/schemas/IdString" } },
        "type": "object"
      },
      "StartMLEvaluationTaskRunRequest": {
        "properties": { "TransformId": { "$ref": "#/components/schemas/HashString" } },
        "required": ["TransformId"],
        "type": "object"
      },
      "StartMLEvaluationTaskRunResponse": {
        "properties": { "TaskRunId": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "StartMLLabelingSetGenerationTaskRunRequest": {
        "properties": {
          "OutputS3Path": { "$ref": "#/components/schemas/UriString" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "required": ["TransformId", "OutputS3Path"],
        "type": "object"
      },
      "StartMLLabelingSetGenerationTaskRunResponse": {
        "properties": { "TaskRunId": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "StartTriggerRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "StartTriggerResponse": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "StartWorkflowRunRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "StartWorkflowRunResponse": {
        "properties": { "RunId": { "$ref": "#/components/schemas/IdString" } },
        "type": "object"
      },
      "StopCrawlerRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "StopCrawlerResponse": { "properties": {}, "type": "object" },
      "StopCrawlerScheduleRequest": {
        "properties": { "CrawlerName": { "$ref": "#/components/schemas/NameString" } },
        "required": ["CrawlerName"],
        "type": "object"
      },
      "StopCrawlerScheduleResponse": { "properties": {}, "type": "object" },
      "StopTriggerRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "required": ["Name"],
        "type": "object"
      },
      "StopTriggerResponse": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "StorageDescriptor": {
        "description": "Describes the physical storage of table data.",
        "properties": {
          "BucketColumns": { "$ref": "#/components/schemas/NameStringList" },
          "Columns": { "$ref": "#/components/schemas/ColumnList" },
          "Compressed": { "$ref": "#/components/schemas/Boolean" },
          "InputFormat": { "$ref": "#/components/schemas/FormatString" },
          "Location": { "$ref": "#/components/schemas/LocationString" },
          "NumberOfBuckets": { "$ref": "#/components/schemas/Integer" },
          "OutputFormat": { "$ref": "#/components/schemas/FormatString" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" },
          "SerdeInfo": { "$ref": "#/components/schemas/SerDeInfo" },
          "SkewedInfo": { "$ref": "#/components/schemas/SkewedInfo" },
          "SortColumns": { "$ref": "#/components/schemas/OrderList" },
          "StoredAsSubDirectories": { "$ref": "#/components/schemas/Boolean" }
        },
        "type": "object"
      },
      "StringList": { "items": { "$ref": "#/components/schemas/GenericString" }, "type": "array" },
      "Table": {
        "description": "Represents a collection of related data organized in columns and rows.",
        "properties": {
          "CreateTime": { "$ref": "#/components/schemas/Timestamp" },
          "CreatedBy": { "$ref": "#/components/schemas/NameString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "IsRegisteredWithLakeFormation": { "$ref": "#/components/schemas/Boolean" },
          "LastAccessTime": { "$ref": "#/components/schemas/Timestamp" },
          "LastAnalyzedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Owner": { "$ref": "#/components/schemas/NameString" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" },
          "PartitionKeys": { "$ref": "#/components/schemas/ColumnList" },
          "Retention": { "$ref": "#/components/schemas/NonNegativeInteger" },
          "StorageDescriptor": { "$ref": "#/components/schemas/StorageDescriptor" },
          "TableType": { "$ref": "#/components/schemas/TableTypeString" },
          "UpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "ViewExpandedText": { "$ref": "#/components/schemas/ViewTextString" },
          "ViewOriginalText": { "$ref": "#/components/schemas/ViewTextString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "TableError": {
        "description": "An error record for table operations.",
        "properties": {
          "ErrorDetail": { "$ref": "#/components/schemas/ErrorDetail" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "TableErrors": { "items": { "$ref": "#/components/schemas/TableError" }, "type": "array" },
      "TableInput": {
        "description": "A structure used to define a table.",
        "properties": {
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "LastAccessTime": { "$ref": "#/components/schemas/Timestamp" },
          "LastAnalyzedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Owner": { "$ref": "#/components/schemas/NameString" },
          "Parameters": { "$ref": "#/components/schemas/ParametersMap" },
          "PartitionKeys": { "$ref": "#/components/schemas/ColumnList" },
          "Retention": { "$ref": "#/components/schemas/NonNegativeInteger" },
          "StorageDescriptor": { "$ref": "#/components/schemas/StorageDescriptor" },
          "TableType": { "$ref": "#/components/schemas/TableTypeString" },
          "ViewExpandedText": { "$ref": "#/components/schemas/ViewTextString" },
          "ViewOriginalText": { "$ref": "#/components/schemas/ViewTextString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "TableList": { "items": { "$ref": "#/components/schemas/Table" }, "type": "array" },
      "TableName": { "type": "string" },
      "TablePrefix": { "maxLength": 128, "minLength": 0, "type": "string" },
      "TableTypeString": { "maxLength": 255, "type": "string" },
      "TableVersion": {
        "description": "Specifies a version of a table.",
        "properties": {
          "Table": { "$ref": "#/components/schemas/Table" },
          "VersionId": { "$ref": "#/components/schemas/VersionString" }
        },
        "type": "object"
      },
      "TableVersionError": {
        "description": "An error record for table-version operations.",
        "properties": {
          "ErrorDetail": { "$ref": "#/components/schemas/ErrorDetail" },
          "TableName": { "$ref": "#/components/schemas/NameString" },
          "VersionId": { "$ref": "#/components/schemas/VersionString" }
        },
        "type": "object"
      },
      "TableVersionErrors": { "items": { "$ref": "#/components/schemas/TableVersionError" }, "type": "array" },
      "TagKey": { "maxLength": 128, "minLength": 1, "type": "string" },
      "TagKeysList": {
        "items": { "$ref": "#/components/schemas/TagKey" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      },
      "TagResourceRequest": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/GlueResourceArn" },
          "TagsToAdd": { "$ref": "#/components/schemas/TagsMap" }
        },
        "required": ["ResourceArn", "TagsToAdd"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValue": { "maxLength": 256, "minLength": 0, "type": "string" },
      "TagsMap": {
        "additionalProperties": { "$ref": "#/components/schemas/TagValue" },
        "maxProperties": 50,
        "minProperties": 0,
        "type": "object"
      },
      "TaskRun": {
        "description": "The sampling parameters that are associated with the machine learning transform.",
        "properties": {
          "CompletedOn": { "$ref": "#/components/schemas/Timestamp" },
          "ErrorString": { "$ref": "#/components/schemas/GenericString" },
          "ExecutionTime": { "$ref": "#/components/schemas/ExecutionTime" },
          "LastModifiedOn": { "$ref": "#/components/schemas/Timestamp" },
          "LogGroupName": { "$ref": "#/components/schemas/GenericString" },
          "Properties": { "$ref": "#/components/schemas/TaskRunProperties" },
          "StartedOn": { "$ref": "#/components/schemas/Timestamp" },
          "Status": { "$ref": "#/components/schemas/TaskStatusType" },
          "TaskRunId": { "$ref": "#/components/schemas/HashString" },
          "TransformId": { "$ref": "#/components/schemas/HashString" }
        },
        "type": "object"
      },
      "TaskRunFilterCriteria": {
        "description": "The criteria that are used to filter the task runs for the machine learning transform.",
        "properties": {
          "StartedAfter": { "$ref": "#/components/schemas/Timestamp" },
          "StartedBefore": { "$ref": "#/components/schemas/Timestamp" },
          "Status": { "$ref": "#/components/schemas/TaskStatusType" },
          "TaskRunType": { "$ref": "#/components/schemas/TaskType" }
        },
        "type": "object"
      },
      "TaskRunList": { "items": { "$ref": "#/components/schemas/TaskRun" }, "type": "array" },
      "TaskRunProperties": {
        "description": "The configuration properties for the task run.",
        "properties": {
          "ExportLabelsTaskRunProperties": { "$ref": "#/components/schemas/ExportLabelsTaskRunProperties" },
          "FindMatchesTaskRunProperties": { "$ref": "#/components/schemas/FindMatchesTaskRunProperties" },
          "ImportLabelsTaskRunProperties": { "$ref": "#/components/schemas/ImportLabelsTaskRunProperties" },
          "LabelingSetGenerationTaskRunProperties": {
            "$ref": "#/components/schemas/LabelingSetGenerationTaskRunProperties"
          },
          "TaskType": { "$ref": "#/components/schemas/TaskType" }
        },
        "type": "object"
      },
      "TaskRunSortColumnType": { "enum": ["TASK_RUN_TYPE", "STATUS", "STARTED"], "type": "string" },
      "TaskRunSortCriteria": {
        "description": "The sorting criteria that are used to sort the list of task runs for the machine learning transform.",
        "properties": {
          "Column": { "$ref": "#/components/schemas/TaskRunSortColumnType" },
          "SortDirection": { "$ref": "#/components/schemas/SortDirectionType" }
        },
        "required": ["Column", "SortDirection"],
        "type": "object"
      },
      "TaskStatusType": {
        "enum": ["STARTING", "RUNNING", "STOPPING", "STOPPED", "SUCCEEDED", "FAILED", "TIMEOUT"],
        "type": "string"
      },
      "TaskType": {
        "enum": ["EVALUATION", "LABELING_SET_GENERATION", "IMPORT_LABELS", "EXPORT_LABELS", "FIND_MATCHES"],
        "type": "string"
      },
      "Timeout": { "minimum": 1, "type": "integer" },
      "Timestamp": { "format": "date-time", "type": "string" },
      "TimestampValue": { "format": "date-time", "type": "string" },
      "Token": { "type": "string" },
      "TotalSegmentsInteger": { "maximum": 10, "minimum": 1, "type": "integer" },
      "TransformFilterCriteria": {
        "description": "The criteria used to filter the machine learning transforms.",
        "properties": {
          "CreatedAfter": { "$ref": "#/components/schemas/Timestamp" },
          "CreatedBefore": { "$ref": "#/components/schemas/Timestamp" },
          "LastModifiedAfter": { "$ref": "#/components/schemas/Timestamp" },
          "LastModifiedBefore": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Schema": { "$ref": "#/components/schemas/TransformSchema" },
          "Status": { "$ref": "#/components/schemas/TransformStatusType" },
          "TransformType": { "$ref": "#/components/schemas/TransformType" }
        },
        "type": "object"
      },
      "TransformList": { "items": { "$ref": "#/components/schemas/MLTransform" }, "type": "array" },
      "TransformParameters": {
        "description": "The algorithm-specific parameters that are associated with the machine learning transform.",
        "properties": {
          "FindMatchesParameters": { "$ref": "#/components/schemas/FindMatchesParameters" },
          "TransformType": { "$ref": "#/components/schemas/TransformType" }
        },
        "required": ["TransformType"],
        "type": "object"
      },
      "TransformSchema": { "items": { "$ref": "#/components/schemas/SchemaColumn" }, "maxItems": 100, "type": "array" },
      "TransformSortColumnType": {
        "enum": ["NAME", "TRANSFORM_TYPE", "STATUS", "CREATED", "LAST_MODIFIED"],
        "type": "string"
      },
      "TransformSortCriteria": {
        "description": "The sorting criteria that are associated with the machine learning transform.",
        "properties": {
          "Column": { "$ref": "#/components/schemas/TransformSortColumnType" },
          "SortDirection": { "$ref": "#/components/schemas/SortDirectionType" }
        },
        "required": ["Column", "SortDirection"],
        "type": "object"
      },
      "TransformStatusType": { "enum": ["NOT_READY", "READY", "DELETING"], "type": "string" },
      "TransformType": { "enum": ["FIND_MATCHES"], "type": "string" },
      "Trigger": {
        "description": "Information about a specific trigger.",
        "properties": {
          "Actions": { "$ref": "#/components/schemas/ActionList" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "Id": { "$ref": "#/components/schemas/IdString" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Predicate": { "$ref": "#/components/schemas/Predicate" },
          "Schedule": { "$ref": "#/components/schemas/GenericString" },
          "State": { "$ref": "#/components/schemas/TriggerState" },
          "Type": { "$ref": "#/components/schemas/TriggerType" },
          "WorkflowName": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "TriggerList": { "items": { "$ref": "#/components/schemas/Trigger" }, "type": "array" },
      "TriggerNameList": { "items": { "$ref": "#/components/schemas/NameString" }, "type": "array" },
      "TriggerNodeDetails": {
        "description": "The details of a Trigger node present in the workflow.",
        "properties": { "Trigger": { "$ref": "#/components/schemas/Trigger" } },
        "type": "object"
      },
      "TriggerState": {
        "enum": [
          "CREATING",
          "CREATED",
          "ACTIVATING",
          "ACTIVATED",
          "DEACTIVATING",
          "DEACTIVATED",
          "DELETING",
          "UPDATING"
        ],
        "type": "string"
      },
      "TriggerType": { "enum": ["SCHEDULED", "CONDITIONAL", "ON_DEMAND"], "type": "string" },
      "TriggerUpdate": {
        "description": "A structure used to provide information used to update a trigger. This object updates the previous trigger definition by overwriting it completely.",
        "properties": {
          "Actions": { "$ref": "#/components/schemas/ActionList" },
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Predicate": { "$ref": "#/components/schemas/Predicate" },
          "Schedule": { "$ref": "#/components/schemas/GenericString" }
        },
        "type": "object"
      },
      "URI": {
        "maxLength": 1024,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "UntagResourceRequest": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/GlueResourceArn" },
          "TagsToRemove": { "$ref": "#/components/schemas/TagKeysList" }
        },
        "required": ["ResourceArn", "TagsToRemove"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UpdateBehavior": { "enum": ["LOG", "UPDATE_IN_DATABASE"], "type": "string" },
      "UpdateClassifierRequest": {
        "properties": {
          "CsvClassifier": { "$ref": "#/components/schemas/UpdateCsvClassifierRequest" },
          "GrokClassifier": { "$ref": "#/components/schemas/UpdateGrokClassifierRequest" },
          "JsonClassifier": { "$ref": "#/components/schemas/UpdateJsonClassifierRequest" },
          "XMLClassifier": { "$ref": "#/components/schemas/UpdateXMLClassifierRequest" }
        },
        "type": "object"
      },
      "UpdateClassifierResponse": { "properties": {}, "type": "object" },
      "UpdateConnectionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "ConnectionInput": { "$ref": "#/components/schemas/ConnectionInput" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name", "ConnectionInput"],
        "type": "object"
      },
      "UpdateConnectionResponse": { "properties": {}, "type": "object" },
      "UpdateCrawlerRequest": {
        "properties": {
          "Classifiers": { "$ref": "#/components/schemas/ClassifierNameList" },
          "Configuration": { "$ref": "#/components/schemas/CrawlerConfiguration" },
          "CrawlerSecurityConfiguration": { "$ref": "#/components/schemas/CrawlerSecurityConfiguration" },
          "DatabaseName": { "$ref": "#/components/schemas/DatabaseName" },
          "Description": { "$ref": "#/components/schemas/DescriptionStringRemovable" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "Role": { "$ref": "#/components/schemas/Role" },
          "Schedule": { "$ref": "#/components/schemas/CronExpression" },
          "SchemaChangePolicy": { "$ref": "#/components/schemas/SchemaChangePolicy" },
          "TablePrefix": { "$ref": "#/components/schemas/TablePrefix" },
          "Targets": { "$ref": "#/components/schemas/CrawlerTargets" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "UpdateCrawlerResponse": { "properties": {}, "type": "object" },
      "UpdateCrawlerScheduleRequest": {
        "properties": {
          "CrawlerName": { "$ref": "#/components/schemas/NameString" },
          "Schedule": { "$ref": "#/components/schemas/CronExpression" }
        },
        "required": ["CrawlerName"],
        "type": "object"
      },
      "UpdateCrawlerScheduleResponse": { "properties": {}, "type": "object" },
      "UpdateCsvClassifierRequest": {
        "description": "Specifies a custom CSV classifier to be updated.",
        "properties": {
          "AllowSingleColumn": { "$ref": "#/components/schemas/NullableBoolean" },
          "ContainsHeader": { "$ref": "#/components/schemas/CsvHeaderOption" },
          "Delimiter": { "$ref": "#/components/schemas/CsvColumnDelimiter" },
          "DisableValueTrimming": { "$ref": "#/components/schemas/NullableBoolean" },
          "Header": { "$ref": "#/components/schemas/CsvHeader" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "QuoteSymbol": { "$ref": "#/components/schemas/CsvQuoteSymbol" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "UpdateDatabaseRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseInput": { "$ref": "#/components/schemas/DatabaseInput" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name", "DatabaseInput"],
        "type": "object"
      },
      "UpdateDatabaseResponse": { "properties": {}, "type": "object" },
      "UpdateDevEndpointRequest": {
        "properties": {
          "AddArguments": { "$ref": "#/components/schemas/MapValue" },
          "AddPublicKeys": { "$ref": "#/components/schemas/PublicKeysList" },
          "CustomLibraries": { "$ref": "#/components/schemas/DevEndpointCustomLibraries" },
          "DeleteArguments": { "$ref": "#/components/schemas/StringList" },
          "DeletePublicKeys": { "$ref": "#/components/schemas/PublicKeysList" },
          "EndpointName": { "$ref": "#/components/schemas/GenericString" },
          "PublicKey": { "$ref": "#/components/schemas/GenericString" },
          "UpdateEtlLibraries": { "$ref": "#/components/schemas/BooleanValue" }
        },
        "required": ["EndpointName"],
        "type": "object"
      },
      "UpdateDevEndpointResponse": { "properties": {}, "type": "object" },
      "UpdateGrokClassifierRequest": {
        "description": "Specifies a grok classifier to update when passed to <code>UpdateClassifier</code>.",
        "properties": {
          "Classification": { "$ref": "#/components/schemas/Classification" },
          "CustomPatterns": { "$ref": "#/components/schemas/CustomPatterns" },
          "GrokPattern": { "$ref": "#/components/schemas/GrokPattern" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "UpdateJobRequest": {
        "properties": {
          "JobName": { "$ref": "#/components/schemas/NameString" },
          "JobUpdate": { "$ref": "#/components/schemas/JobUpdate" }
        },
        "required": ["JobName", "JobUpdate"],
        "type": "object"
      },
      "UpdateJobResponse": {
        "properties": { "JobName": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "UpdateJsonClassifierRequest": {
        "description": "Specifies a JSON classifier to be updated.",
        "properties": {
          "JsonPath": { "$ref": "#/components/schemas/JsonPath" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "UpdateMLTransformRequest": {
        "properties": {
          "Description": { "$ref": "#/components/schemas/DescriptionString" },
          "MaxCapacity": { "$ref": "#/components/schemas/NullableDouble" },
          "MaxRetries": { "$ref": "#/components/schemas/NullableInteger" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "NumberOfWorkers": { "$ref": "#/components/schemas/NullableInteger" },
          "Parameters": { "$ref": "#/components/schemas/TransformParameters" },
          "Role": { "$ref": "#/components/schemas/RoleString" },
          "Timeout": { "$ref": "#/components/schemas/Timeout" },
          "TransformId": { "$ref": "#/components/schemas/HashString" },
          "WorkerType": { "$ref": "#/components/schemas/WorkerType" }
        },
        "required": ["TransformId"],
        "type": "object"
      },
      "UpdateMLTransformResponse": {
        "properties": { "TransformId": { "$ref": "#/components/schemas/HashString" } },
        "type": "object"
      },
      "UpdatePartitionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "PartitionInput": { "$ref": "#/components/schemas/PartitionInput" },
          "PartitionValueList": { "$ref": "#/components/schemas/BoundedPartitionValueList" },
          "TableName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "TableName", "PartitionValueList", "PartitionInput"],
        "type": "object"
      },
      "UpdatePartitionResponse": { "properties": {}, "type": "object" },
      "UpdateTableRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "SkipArchive": { "$ref": "#/components/schemas/BooleanNullable" },
          "TableInput": { "$ref": "#/components/schemas/TableInput" }
        },
        "required": ["DatabaseName", "TableInput"],
        "type": "object"
      },
      "UpdateTableResponse": { "properties": {}, "type": "object" },
      "UpdateTriggerRequest": {
        "properties": {
          "Name": { "$ref": "#/components/schemas/NameString" },
          "TriggerUpdate": { "$ref": "#/components/schemas/TriggerUpdate" }
        },
        "required": ["Name", "TriggerUpdate"],
        "type": "object"
      },
      "UpdateTriggerResponse": {
        "properties": { "Trigger": { "$ref": "#/components/schemas/Trigger" } },
        "type": "object"
      },
      "UpdateUserDefinedFunctionRequest": {
        "properties": {
          "CatalogId": { "$ref": "#/components/schemas/CatalogIdString" },
          "DatabaseName": { "$ref": "#/components/schemas/NameString" },
          "FunctionInput": { "$ref": "#/components/schemas/UserDefinedFunctionInput" },
          "FunctionName": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["DatabaseName", "FunctionName", "FunctionInput"],
        "type": "object"
      },
      "UpdateUserDefinedFunctionResponse": { "properties": {}, "type": "object" },
      "UpdateWorkflowRequest": {
        "properties": {
          "DefaultRunProperties": { "$ref": "#/components/schemas/WorkflowRunProperties" },
          "Description": { "$ref": "#/components/schemas/GenericString" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "UpdateWorkflowResponse": {
        "properties": { "Name": { "$ref": "#/components/schemas/NameString" } },
        "type": "object"
      },
      "UpdateXMLClassifierRequest": {
        "description": "Specifies an XML classifier to be updated.",
        "properties": {
          "Classification": { "$ref": "#/components/schemas/Classification" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "RowTag": { "$ref": "#/components/schemas/RowTag" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "UriString": { "type": "string" },
      "UserDefinedFunction": {
        "description": "Represents the equivalent of a Hive user-defined function (<code>UDF</code>) definition.",
        "properties": {
          "ClassName": { "$ref": "#/components/schemas/NameString" },
          "CreateTime": { "$ref": "#/components/schemas/Timestamp" },
          "FunctionName": { "$ref": "#/components/schemas/NameString" },
          "OwnerName": { "$ref": "#/components/schemas/NameString" },
          "OwnerType": { "$ref": "#/components/schemas/PrincipalType" },
          "ResourceUris": { "$ref": "#/components/schemas/ResourceUriList" }
        },
        "type": "object"
      },
      "UserDefinedFunctionInput": {
        "description": "A structure used to create or update a user-defined function.",
        "properties": {
          "ClassName": { "$ref": "#/components/schemas/NameString" },
          "FunctionName": { "$ref": "#/components/schemas/NameString" },
          "OwnerName": { "$ref": "#/components/schemas/NameString" },
          "OwnerType": { "$ref": "#/components/schemas/PrincipalType" },
          "ResourceUris": { "$ref": "#/components/schemas/ResourceUriList" }
        },
        "type": "object"
      },
      "UserDefinedFunctionList": { "items": { "$ref": "#/components/schemas/UserDefinedFunction" }, "type": "array" },
      "ValidationException": {},
      "ValueString": { "maxLength": 1024, "type": "string" },
      "ValueStringList": { "items": { "$ref": "#/components/schemas/ValueString" }, "type": "array" },
      "VersionId": { "type": "integer" },
      "VersionMismatchException": {},
      "VersionString": {
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "ViewTextString": { "maxLength": 409600, "type": "string" },
      "WorkerType": { "enum": ["Standard", "G.1X", "G.2X"], "type": "string" },
      "Workflow": {
        "description": "A workflow represents a flow in which AWS Glue components should be executed to complete a logical task.",
        "properties": {
          "CreatedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "DefaultRunProperties": { "$ref": "#/components/schemas/WorkflowRunProperties" },
          "Description": { "$ref": "#/components/schemas/GenericString" },
          "Graph": { "$ref": "#/components/schemas/WorkflowGraph" },
          "LastModifiedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "LastRun": { "$ref": "#/components/schemas/WorkflowRun" },
          "Name": { "$ref": "#/components/schemas/NameString" }
        },
        "type": "object"
      },
      "WorkflowGraph": {
        "description": "A workflow graph represents the complete workflow containing all the AWS Glue components present in the workflow and all the directed connections between them.",
        "properties": {
          "Edges": { "$ref": "#/components/schemas/EdgeList" },
          "Nodes": { "$ref": "#/components/schemas/NodeList" }
        },
        "type": "object"
      },
      "WorkflowNames": {
        "items": { "$ref": "#/components/schemas/NameString" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "WorkflowRun": {
        "description": "A workflow run is an execution of a workflow providing all the runtime information.",
        "properties": {
          "CompletedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "Graph": { "$ref": "#/components/schemas/WorkflowGraph" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "StartedOn": { "$ref": "#/components/schemas/TimestampValue" },
          "Statistics": { "$ref": "#/components/schemas/WorkflowRunStatistics" },
          "Status": { "$ref": "#/components/schemas/WorkflowRunStatus" },
          "WorkflowRunId": { "$ref": "#/components/schemas/IdString" },
          "WorkflowRunProperties": { "$ref": "#/components/schemas/WorkflowRunProperties" }
        },
        "type": "object"
      },
      "WorkflowRunProperties": {
        "additionalProperties": { "$ref": "#/components/schemas/GenericString" },
        "type": "object"
      },
      "WorkflowRunStatistics": {
        "description": "Workflow run statistics provides statistics about the workflow run.",
        "properties": {
          "FailedActions": { "$ref": "#/components/schemas/IntegerValue" },
          "RunningActions": { "$ref": "#/components/schemas/IntegerValue" },
          "StoppedActions": { "$ref": "#/components/schemas/IntegerValue" },
          "SucceededActions": { "$ref": "#/components/schemas/IntegerValue" },
          "TimeoutActions": { "$ref": "#/components/schemas/IntegerValue" },
          "TotalActions": { "$ref": "#/components/schemas/IntegerValue" }
        },
        "type": "object"
      },
      "WorkflowRunStatus": { "enum": ["RUNNING", "COMPLETED"], "type": "string" },
      "WorkflowRuns": {
        "items": { "$ref": "#/components/schemas/WorkflowRun" },
        "maxItems": 1000,
        "minItems": 1,
        "type": "array"
      },
      "Workflows": {
        "items": { "$ref": "#/components/schemas/Workflow" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "XMLClassifier": {
        "description": "A classifier for <code>XML</code> content.",
        "properties": {
          "Classification": { "$ref": "#/components/schemas/Classification" },
          "CreationTime": { "$ref": "#/components/schemas/Timestamp" },
          "LastUpdated": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/NameString" },
          "RowTag": { "$ref": "#/components/schemas/RowTag" },
          "Version": { "$ref": "#/components/schemas/VersionId" }
        },
        "required": ["Name", "Classification"],
        "type": "object"
      }
    }
  }
}
