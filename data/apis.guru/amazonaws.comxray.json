{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "AWS X-Ray provides APIs for managing debug traces and retrieving service maps and other data created by processing those traces.",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS X-Ray",
    "version": "2016-04-12",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/xray-2016-04-12.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "xray"
  },
  "externalDocs": { "description": "Amazon Web Services documentation", "url": "https://docs.aws.amazon.com/xray/" },
  "security": [{ "hmac": [] }],
  "paths": {
    "/CreateGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a group resource with a name and a filter expression. ",
        "operationId": "CreateGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "FilterExpression": {
                    "description": "The filter expression defining criteria by which to group traces.",
                    "type": "string"
                  },
                  "GroupName": {
                    "description": "The case-sensitive name of the new group. Default is a reserved name and names must be unique.",
                    "maxLength": 32,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": ["GroupName"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateGroupResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/CreateSamplingRule": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a rule to control sampling behavior for instrumented applications. Services retrieve rules with <a>GetSamplingRules</a>, and evaluate each rule in ascending order of <i>priority</i> for each request. If a rule matches, the service records a trace, borrowing it from the reservoir size. After 10 seconds, the service reports back to X-Ray with <a>GetSamplingTargets</a> to get updated versions of each in-use rule. The updated rule contains a trace quota that the service can use instead of borrowing from the reservoir.",
        "operationId": "CreateSamplingRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "SamplingRule": {
                    "description": "A sampling rule that services use to decide whether to instrument a request. Rule fields can match properties of the service, or properties of a request. The service can ignore rules that don't match its properties.",
                    "properties": {
                      "Attributes": { "$ref": "#/components/schemas/AttributeMap" },
                      "FixedRate": { "$ref": "#/components/schemas/FixedRate" },
                      "HTTPMethod": { "$ref": "#/components/schemas/HTTPMethod" },
                      "Host": { "$ref": "#/components/schemas/Host" },
                      "Priority": { "$ref": "#/components/schemas/Priority" },
                      "ReservoirSize": { "$ref": "#/components/schemas/ReservoirSize" },
                      "ResourceARN": { "$ref": "#/components/schemas/ResourceARN" },
                      "RuleARN": { "$ref": "#/components/schemas/String" },
                      "RuleName": { "$ref": "#/components/schemas/RuleName" },
                      "ServiceName": { "$ref": "#/components/schemas/ServiceName" },
                      "ServiceType": { "$ref": "#/components/schemas/ServiceType" },
                      "URLPath": { "$ref": "#/components/schemas/URLPath" },
                      "Version": { "$ref": "#/components/schemas/Version" }
                    },
                    "type": "object"
                  }
                },
                "required": ["SamplingRule"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateSamplingRuleResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          },
          "482": {
            "description": "RuleLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RuleLimitExceededException" } }
            }
          }
        }
      }
    },
    "/DeleteGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a group resource.",
        "operationId": "DeleteGroup",
        "requestBody": { "$ref": "#/components/requestBodies/DeleteGroupBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteGroupResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/DeleteSamplingRule": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a sampling rule.",
        "operationId": "DeleteSamplingRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "RuleARN": {
                    "description": "The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.",
                    "type": "string"
                  },
                  "RuleName": {
                    "description": "The name of the sampling rule. Specify a rule by either name or ARN, but not both.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSamplingRuleResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/EncryptionConfig": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the current encryption configuration for X-Ray data.",
        "operationId": "GetEncryptionConfig",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetEncryptionConfigResult" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/GetGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves group resource details.",
        "operationId": "GetGroup",
        "requestBody": { "$ref": "#/components/requestBodies/DeleteGroupBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetGroupResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/GetSamplingRules": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves all sampling rules.",
        "operationId": "GetSamplingRules",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/GetSamplingRulesBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetSamplingRulesResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/Groups": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves all active group details.",
        "operationId": "GetGroups",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "NextToken": {
                    "description": "Pagination token. Not used.",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetGroupsResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/PutEncryptionConfig": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the encryption configuration for X-Ray data.",
        "operationId": "PutEncryptionConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "KeyId": {
                    "description": "<p>An AWS KMS customer master key (CMK) in one of the following formats:</p> <ul> <li> <p> <b>Alias</b> - The name of the key. For example, <code>alias/MyKey</code>.</p> </li> <li> <p> <b>Key ID</b> - The KMS key ID of the key. For example, <code>ae4aa6d49-a4d8-9df9-a475-4ff6d7898456</code>.</p> </li> <li> <p> <b>ARN</b> - The full Amazon Resource Name of the key ID or alias. For example, <code>arn:aws:kms:us-east-2:123456789012:key/ae4aa6d49-a4d8-9df9-a475-4ff6d7898456</code>. Use this format to specify a key in a different account.</p> </li> </ul> <p>Omit this key if you set <code>Type</code> to <code>NONE</code>.</p>",
                    "maxLength": 3000,
                    "minLength": 1,
                    "type": "string"
                  },
                  "Type": {
                    "description": "The type of encryption. Set to <code>KMS</code> to use your own key for encryption. Set to <code>NONE</code> for default encryption.",
                    "enum": ["NONE", "KMS"],
                    "type": "string"
                  }
                },
                "required": ["Type"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutEncryptionConfigResult" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/SamplingStatisticSummaries": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves information about recent sampling results for all sampling rules.",
        "operationId": "GetSamplingStatisticSummaries",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/GetSamplingRulesBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetSamplingStatisticSummariesResult" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/SamplingTargets": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Requests a sampling quota for rules that the service is using to sample requests. ",
        "operationId": "GetSamplingTargets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "SamplingStatisticsDocuments": {
                    "description": "Information about rules that the service is using to sample requests.",
                    "items": { "$ref": "#/components/schemas/SamplingStatisticsDocument" },
                    "maxItems": 25,
                    "type": "array"
                  }
                },
                "required": ["SamplingStatisticsDocuments"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetSamplingTargetsResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/ServiceGraph": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a document that describes services that process incoming requests, and downstream services that they call as a result. Root services process incoming requests and make calls to downstream services. Root services are applications that use the AWS X-Ray SDK. Downstream services can be other applications, AWS resources, HTTP web APIs, or SQL databases.",
        "operationId": "GetServiceGraph",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "EndTime": {
                    "description": "The end of the timeframe for which to generate a graph.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "GroupARN": {
                    "description": "The ARN of a group to generate a graph based on.",
                    "maxLength": 400,
                    "minLength": 1,
                    "type": "string"
                  },
                  "GroupName": {
                    "description": "The name of a group to generate a graph based on.",
                    "maxLength": 32,
                    "minLength": 1,
                    "type": "string"
                  },
                  "NextToken": { "description": "Pagination token. Not used.", "type": "string" },
                  "StartTime": {
                    "description": "The start of the time frame for which to generate a graph.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": ["StartTime", "EndTime"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetServiceGraphResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/TelemetryRecords": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Used by the AWS X-Ray daemon to upload telemetry.",
        "operationId": "PutTelemetryRecords",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "EC2InstanceId": { "description": "<p/>", "maxLength": 20, "type": "string" },
                  "Hostname": { "description": "<p/>", "maxLength": 255, "type": "string" },
                  "ResourceARN": { "description": "<p/>", "maxLength": 500, "type": "string" },
                  "TelemetryRecords": {
                    "description": "<p/>",
                    "items": { "$ref": "#/components/schemas/TelemetryRecord" },
                    "type": "array"
                  }
                },
                "required": ["TelemetryRecords"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutTelemetryRecordsResult" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/TimeSeriesServiceStatistics": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Get an aggregation of service statistics defined by a specific time range.",
        "operationId": "GetTimeSeriesServiceStatistics",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "EndTime": {
                    "description": "The end of the time frame for which to aggregate statistics.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "EntitySelectorExpression": {
                    "description": "A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. ",
                    "maxLength": 500,
                    "minLength": 1,
                    "type": "string"
                  },
                  "GroupARN": {
                    "description": "The ARN of the group for which to pull statistics from.",
                    "maxLength": 400,
                    "minLength": 1,
                    "type": "string"
                  },
                  "GroupName": {
                    "description": "The case-sensitive name of the group for which to pull statistics from.",
                    "maxLength": 32,
                    "minLength": 1,
                    "type": "string"
                  },
                  "NextToken": { "description": "Pagination token. Not used.", "type": "string" },
                  "Period": { "description": "Aggregation period in seconds.", "type": "integer" },
                  "StartTime": {
                    "description": "The start of the time frame for which to aggregate statistics.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": ["StartTime", "EndTime"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetTimeSeriesServiceStatisticsResult" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/TraceGraph": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a service graph for one or more specific trace IDs.",
        "operationId": "GetTraceGraph",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "NextToken": { "description": "Pagination token. Not used.", "type": "string" },
                  "TraceIds": {
                    "description": "Trace IDs of requests for which to generate a service graph.",
                    "items": { "$ref": "#/components/schemas/TraceId" },
                    "type": "array"
                  }
                },
                "required": ["TraceIds"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTraceGraphResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/TraceSegments": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Uploads segment documents to AWS X-Ray. The X-Ray SDK generates segment documents and sends them to the X-Ray daemon, which uploads them in batches. A segment document can be a completed segment, an in-progress segment, or an array of subsegments.</p> <p>Segments must include the following fields. For the full segment document schema, see <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html\">AWS X-Ray Segment Documents</a> in the <i>AWS X-Ray Developer Guide</i>.</p> <p class=\"title\"> <b>Required Segment Document Fields</b> </p> <ul> <li> <p> <code>name</code> - The name of the service that handled the request.</p> </li> <li> <p> <code>id</code> - A 64-bit identifier for the segment, unique among segments in the same trace, in 16 hexadecimal digits.</p> </li> <li> <p> <code>trace_id</code> - A unique identifier that connects all segments and subsegments originating from a single client request.</p> </li> <li> <p> <code>start_time</code> - Time the segment or subsegment was created, in floating point seconds in epoch time, accurate to milliseconds. For example, <code>1480615200.010</code> or <code>1.480615200010E9</code>.</p> </li> <li> <p> <code>end_time</code> - Time the segment or subsegment was closed. For example, <code>1480615200.090</code> or <code>1.480615200090E9</code>. Specify either an <code>end_time</code> or <code>in_progress</code>.</p> </li> <li> <p> <code>in_progress</code> - Set to <code>true</code> instead of specifying an <code>end_time</code> to record that a segment has been started, but is not complete. Send an in progress segment when your application receives a request that will take a long time to serve, to trace the fact that the request was received. When the response is sent, send the complete segment to overwrite the in-progress segment.</p> </li> </ul> <p>A <code>trace_id</code> consists of three numbers separated by hyphens. For example, 1-58406520-a006649127e371903a2de979. This includes:</p> <p class=\"title\"> <b>Trace ID Format</b> </p> <ul> <li> <p>The version number, i.e. <code>1</code>.</p> </li> <li> <p>The time of the original request, in Unix epoch time, in 8 hexadecimal digits. For example, 10:00AM December 2nd, 2016 PST in epoch time is <code>1480615200</code> seconds, or <code>58406520</code> in hexadecimal.</p> </li> <li> <p>A 96-bit identifier for the trace, globally unique, in 24 hexadecimal digits.</p> </li> </ul>",
        "operationId": "PutTraceSegments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "TraceSegmentDocuments": {
                    "description": "A string containing a JSON document defining one or more segments or subsegments.",
                    "items": { "$ref": "#/components/schemas/TraceSegmentDocument" },
                    "type": "array"
                  }
                },
                "required": ["TraceSegmentDocuments"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutTraceSegmentsResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/TraceSummaries": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves IDs and metadata for traces available for a specified time frame using an optional filter. To get the full traces, pass the trace IDs to <code>BatchGetTraces</code>.</p> <p>A filter expression can target traced requests that hit specific service nodes or edges, have errors, or come from a known user. For example, the following filter expression targets traces that pass through <code>api.example.com</code>:</p> <p> <code>service(\"api.example.com\")</code> </p> <p>This filter expression finds traces that have an annotation named <code>account</code> with the value <code>12345</code>:</p> <p> <code>annotation.account = \"12345\"</code> </p> <p>For a full list of indexed fields and keywords that you can use in filter expressions, see <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html\">Using Filter Expressions</a> in the <i>AWS X-Ray Developer Guide</i>.</p>",
        "operationId": "GetTraceSummaries",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "EndTime": {
                    "description": "The end of the time frame for which to retrieve traces.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "FilterExpression": {
                    "description": "Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.",
                    "type": "string"
                  },
                  "NextToken": {
                    "description": "Specify the pagination token returned by a previous request to retrieve the next page of results.",
                    "type": "string"
                  },
                  "Sampling": {
                    "description": "Set to <code>true</code> to get summaries for only a subset of available traces.",
                    "type": "boolean"
                  },
                  "SamplingStrategy": {
                    "description": "The name and value of a sampling rule to apply to a trace summary.",
                    "properties": {
                      "Name": { "$ref": "#/components/schemas/SamplingStrategyName" },
                      "Value": { "$ref": "#/components/schemas/NullableDouble" }
                    },
                    "type": "object"
                  },
                  "StartTime": {
                    "description": "The start of the time frame for which to retrieve traces.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "TimeRangeType": {
                    "description": "A parameter to indicate whether to query trace summaries by TraceId or Event time.",
                    "enum": ["TraceId", "Event"],
                    "type": "string"
                  }
                },
                "required": ["StartTime", "EndTime"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTraceSummariesResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/Traces": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list of traces specified by ID. Each trace is a collection of segment documents that originates from a single request. Use <code>GetTraceSummaries</code> to get a list of trace IDs.",
        "operationId": "BatchGetTraces",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "NextToken": { "description": "Pagination token. Not used.", "type": "string" },
                  "TraceIds": {
                    "description": "Specify the trace IDs of requests for which to retrieve segments.",
                    "items": { "$ref": "#/components/schemas/TraceId" },
                    "type": "array"
                  }
                },
                "required": ["TraceIds"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetTracesResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/UpdateGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates a group resource.",
        "operationId": "UpdateGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "FilterExpression": {
                    "description": "The updated filter expression defining criteria by which to group traces.",
                    "type": "string"
                  },
                  "GroupARN": {
                    "description": "The ARN that was generated upon creation.",
                    "maxLength": 400,
                    "minLength": 1,
                    "type": "string"
                  },
                  "GroupName": {
                    "description": "The case-sensitive name of the group.",
                    "maxLength": 32,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateGroupResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    },
    "/UpdateSamplingRule": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Modifies a sampling rule's configuration.",
        "operationId": "UpdateSamplingRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "SamplingRuleUpdate": {
                    "description": "A document specifying changes to a sampling rule's configuration.",
                    "properties": {
                      "Attributes": { "$ref": "#/components/schemas/AttributeMap" },
                      "FixedRate": { "$ref": "#/components/schemas/NullableDouble" },
                      "HTTPMethod": { "$ref": "#/components/schemas/HTTPMethod" },
                      "Host": { "$ref": "#/components/schemas/Host" },
                      "Priority": { "$ref": "#/components/schemas/NullableInteger" },
                      "ReservoirSize": { "$ref": "#/components/schemas/NullableInteger" },
                      "ResourceARN": { "$ref": "#/components/schemas/ResourceARN" },
                      "RuleARN": { "$ref": "#/components/schemas/String" },
                      "RuleName": { "$ref": "#/components/schemas/RuleName" },
                      "ServiceName": { "$ref": "#/components/schemas/ServiceName" },
                      "ServiceType": { "$ref": "#/components/schemas/ServiceType" },
                      "URLPath": { "$ref": "#/components/schemas/URLPath" }
                    },
                    "type": "object"
                  }
                },
                "required": ["SamplingRuleUpdate"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateSamplingRuleResult" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottledException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottledException" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The AWS X-Ray multi-region endpoint",
      "url": "http://xray.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS X-Ray multi-region endpoint",
      "url": "https://xray.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS X-Ray endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://xray.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The AWS X-Ray endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://xray.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "requestBodies": {
      "GetSamplingRulesBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": { "NextToken": { "description": "Pagination token. Not used.", "type": "string" } },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "DeleteGroupBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "GroupARN": {
                  "description": "The ARN of the group that was generated on creation.",
                  "maxLength": 400,
                  "minLength": 1,
                  "type": "string"
                },
                "GroupName": {
                  "description": "The case-sensitive name of the group.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "Alias": {
        "description": "An alias for an edge.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/String" },
          "Names": { "$ref": "#/components/schemas/AliasNames" },
          "Type": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "AliasList": { "items": { "$ref": "#/components/schemas/Alias" }, "type": "array" },
      "AliasNames": { "items": { "$ref": "#/components/schemas/String" }, "type": "array" },
      "AnnotationKey": { "type": "string" },
      "AnnotationValue": {
        "description": "Value of a segment annotation. Has one of three value types: Number, Boolean or String.",
        "properties": {
          "BooleanValue": { "$ref": "#/components/schemas/NullableBoolean" },
          "NumberValue": { "$ref": "#/components/schemas/NullableDouble" },
          "StringValue": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "Annotations": {
        "additionalProperties": { "$ref": "#/components/schemas/ValuesWithServiceIds" },
        "type": "object"
      },
      "AttributeKey": { "maxLength": 32, "minLength": 1, "type": "string" },
      "AttributeMap": {
        "additionalProperties": { "$ref": "#/components/schemas/AttributeValue" },
        "maxProperties": 5,
        "type": "object"
      },
      "AttributeValue": { "maxLength": 32, "minLength": 1, "type": "string" },
      "AvailabilityZoneDetail": {
        "description": "A list of availability zones corresponding to the segments in a trace.",
        "properties": { "Name": { "$ref": "#/components/schemas/String" } },
        "type": "object"
      },
      "BackendConnectionErrors": {
        "description": "<p/>",
        "properties": {
          "ConnectionRefusedCount": { "$ref": "#/components/schemas/NullableInteger" },
          "HTTPCode4XXCount": { "$ref": "#/components/schemas/NullableInteger" },
          "HTTPCode5XXCount": { "$ref": "#/components/schemas/NullableInteger" },
          "OtherCount": { "$ref": "#/components/schemas/NullableInteger" },
          "TimeoutCount": { "$ref": "#/components/schemas/NullableInteger" },
          "UnknownHostCount": { "$ref": "#/components/schemas/NullableInteger" }
        },
        "type": "object"
      },
      "BatchGetTracesRequest": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "TraceIds": { "$ref": "#/components/schemas/TraceIdList" }
        },
        "required": ["TraceIds"],
        "type": "object"
      },
      "BatchGetTracesResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Traces": { "$ref": "#/components/schemas/TraceList" },
          "UnprocessedTraceIds": { "$ref": "#/components/schemas/UnprocessedTraceIdList" }
        },
        "type": "object"
      },
      "Boolean": { "type": "boolean" },
      "BorrowCount": { "minimum": 0, "type": "integer" },
      "ClientID": { "maxLength": 24, "minLength": 24, "type": "string" },
      "CreateGroupRequest": {
        "properties": {
          "FilterExpression": { "$ref": "#/components/schemas/FilterExpression" },
          "GroupName": { "$ref": "#/components/schemas/GroupName" }
        },
        "required": ["GroupName"],
        "type": "object"
      },
      "CreateGroupResult": { "properties": { "Group": { "$ref": "#/components/schemas/Group" } }, "type": "object" },
      "CreateSamplingRuleRequest": {
        "properties": { "SamplingRule": { "$ref": "#/components/schemas/SamplingRule" } },
        "required": ["SamplingRule"],
        "type": "object"
      },
      "CreateSamplingRuleResult": {
        "properties": { "SamplingRuleRecord": { "$ref": "#/components/schemas/SamplingRuleRecord" } },
        "type": "object"
      },
      "DeleteGroupRequest": {
        "properties": {
          "GroupARN": { "$ref": "#/components/schemas/GroupARN" },
          "GroupName": { "$ref": "#/components/schemas/GroupName" }
        },
        "type": "object"
      },
      "DeleteGroupResult": { "properties": {}, "type": "object" },
      "DeleteSamplingRuleRequest": {
        "properties": {
          "RuleARN": { "$ref": "#/components/schemas/String" },
          "RuleName": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DeleteSamplingRuleResult": {
        "properties": { "SamplingRuleRecord": { "$ref": "#/components/schemas/SamplingRuleRecord" } },
        "type": "object"
      },
      "Double": { "format": "double", "type": "number" },
      "EC2InstanceId": { "maxLength": 20, "type": "string" },
      "Edge": {
        "description": "Information about a connection between two services.",
        "properties": {
          "Aliases": { "$ref": "#/components/schemas/AliasList" },
          "EndTime": { "$ref": "#/components/schemas/Timestamp" },
          "ReferenceId": { "$ref": "#/components/schemas/NullableInteger" },
          "ResponseTimeHistogram": { "$ref": "#/components/schemas/Histogram" },
          "StartTime": { "$ref": "#/components/schemas/Timestamp" },
          "SummaryStatistics": { "$ref": "#/components/schemas/EdgeStatistics" }
        },
        "type": "object"
      },
      "EdgeList": { "items": { "$ref": "#/components/schemas/Edge" }, "type": "array" },
      "EdgeStatistics": {
        "description": "Response statistics for an edge.",
        "properties": {
          "ErrorStatistics": { "$ref": "#/components/schemas/ErrorStatistics" },
          "FaultStatistics": { "$ref": "#/components/schemas/FaultStatistics" },
          "OkCount": { "$ref": "#/components/schemas/NullableLong" },
          "TotalCount": { "$ref": "#/components/schemas/NullableLong" },
          "TotalResponseTime": { "$ref": "#/components/schemas/NullableDouble" }
        },
        "type": "object"
      },
      "EncryptionConfig": {
        "description": "A configuration document that specifies encryption configuration settings.",
        "properties": {
          "KeyId": { "$ref": "#/components/schemas/String" },
          "Status": { "$ref": "#/components/schemas/EncryptionStatus" },
          "Type": { "$ref": "#/components/schemas/EncryptionType" }
        },
        "type": "object"
      },
      "EncryptionKeyId": { "maxLength": 3000, "minLength": 1, "type": "string" },
      "EncryptionStatus": { "enum": ["UPDATING", "ACTIVE"], "type": "string" },
      "EncryptionType": { "enum": ["NONE", "KMS"], "type": "string" },
      "EntitySelectorExpression": { "maxLength": 500, "minLength": 1, "type": "string" },
      "ErrorRootCause": {
        "description": "The root cause of a trace summary error.",
        "properties": { "Services": { "$ref": "#/components/schemas/ErrorRootCauseServices" } },
        "type": "object"
      },
      "ErrorRootCauseEntity": {
        "description": "A collection of segments and corresponding subsegments associated to a trace summary error.",
        "properties": {
          "Exceptions": { "$ref": "#/components/schemas/RootCauseExceptions" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Remote": { "$ref": "#/components/schemas/NullableBoolean" }
        },
        "type": "object"
      },
      "ErrorRootCauseEntityPath": { "items": { "$ref": "#/components/schemas/ErrorRootCauseEntity" }, "type": "array" },
      "ErrorRootCauseService": {
        "description": "A collection of fields identifying the services in a trace summary error.",
        "properties": {
          "AccountId": { "$ref": "#/components/schemas/String" },
          "EntityPath": { "$ref": "#/components/schemas/ErrorRootCauseEntityPath" },
          "Inferred": { "$ref": "#/components/schemas/NullableBoolean" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Names": { "$ref": "#/components/schemas/ServiceNames" },
          "Type": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ErrorRootCauseServices": { "items": { "$ref": "#/components/schemas/ErrorRootCauseService" }, "type": "array" },
      "ErrorRootCauses": { "items": { "$ref": "#/components/schemas/ErrorRootCause" }, "type": "array" },
      "ErrorStatistics": {
        "description": "Information about requests that failed with a 4xx Client Error status code.",
        "properties": {
          "OtherCount": { "$ref": "#/components/schemas/NullableLong" },
          "ThrottleCount": { "$ref": "#/components/schemas/NullableLong" },
          "TotalCount": { "$ref": "#/components/schemas/NullableLong" }
        },
        "type": "object"
      },
      "FaultRootCause": {
        "description": "The root cause information for a trace summary fault.",
        "properties": { "Services": { "$ref": "#/components/schemas/FaultRootCauseServices" } },
        "type": "object"
      },
      "FaultRootCauseEntity": {
        "description": "A collection of segments and corresponding subsegments associated to a trace summary fault error.",
        "properties": {
          "Exceptions": { "$ref": "#/components/schemas/RootCauseExceptions" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Remote": { "$ref": "#/components/schemas/NullableBoolean" }
        },
        "type": "object"
      },
      "FaultRootCauseEntityPath": { "items": { "$ref": "#/components/schemas/FaultRootCauseEntity" }, "type": "array" },
      "FaultRootCauseService": {
        "description": "A collection of fields identifying the services in a trace summary fault.",
        "properties": {
          "AccountId": { "$ref": "#/components/schemas/String" },
          "EntityPath": { "$ref": "#/components/schemas/FaultRootCauseEntityPath" },
          "Inferred": { "$ref": "#/components/schemas/NullableBoolean" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Names": { "$ref": "#/components/schemas/ServiceNames" },
          "Type": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "FaultRootCauseServices": { "items": { "$ref": "#/components/schemas/FaultRootCauseService" }, "type": "array" },
      "FaultRootCauses": { "items": { "$ref": "#/components/schemas/FaultRootCause" }, "type": "array" },
      "FaultStatistics": {
        "description": "Information about requests that failed with a 5xx Server Error status code.",
        "properties": {
          "OtherCount": { "$ref": "#/components/schemas/NullableLong" },
          "TotalCount": { "$ref": "#/components/schemas/NullableLong" }
        },
        "type": "object"
      },
      "FilterExpression": { "type": "string" },
      "FixedRate": { "format": "double", "maximum": 1, "minimum": 0, "type": "number" },
      "GetEncryptionConfigRequest": { "properties": {}, "type": "object" },
      "GetEncryptionConfigResult": {
        "properties": { "EncryptionConfig": { "$ref": "#/components/schemas/EncryptionConfig" } },
        "type": "object"
      },
      "GetGroupRequest": {
        "properties": {
          "GroupARN": { "$ref": "#/components/schemas/GroupARN" },
          "GroupName": { "$ref": "#/components/schemas/GroupName" }
        },
        "type": "object"
      },
      "GetGroupResult": { "properties": { "Group": { "$ref": "#/components/schemas/Group" } }, "type": "object" },
      "GetGroupsNextToken": { "maxLength": 100, "minLength": 1, "type": "string" },
      "GetGroupsRequest": {
        "properties": { "NextToken": { "$ref": "#/components/schemas/GetGroupsNextToken" } },
        "type": "object"
      },
      "GetGroupsResult": {
        "properties": {
          "Groups": { "$ref": "#/components/schemas/GroupSummaryList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "GetSamplingRulesRequest": {
        "properties": { "NextToken": { "$ref": "#/components/schemas/String" } },
        "type": "object"
      },
      "GetSamplingRulesResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "SamplingRuleRecords": { "$ref": "#/components/schemas/SamplingRuleRecordList" }
        },
        "type": "object"
      },
      "GetSamplingStatisticSummariesRequest": {
        "properties": { "NextToken": { "$ref": "#/components/schemas/String" } },
        "type": "object"
      },
      "GetSamplingStatisticSummariesResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "SamplingStatisticSummaries": { "$ref": "#/components/schemas/SamplingStatisticSummaryList" }
        },
        "type": "object"
      },
      "GetSamplingTargetsRequest": {
        "properties": {
          "SamplingStatisticsDocuments": { "$ref": "#/components/schemas/SamplingStatisticsDocumentList" }
        },
        "required": ["SamplingStatisticsDocuments"],
        "type": "object"
      },
      "GetSamplingTargetsResult": {
        "properties": {
          "LastRuleModification": { "$ref": "#/components/schemas/Timestamp" },
          "SamplingTargetDocuments": { "$ref": "#/components/schemas/SamplingTargetDocumentList" },
          "UnprocessedStatistics": { "$ref": "#/components/schemas/UnprocessedStatisticsList" }
        },
        "type": "object"
      },
      "GetServiceGraphRequest": {
        "properties": {
          "EndTime": { "$ref": "#/components/schemas/Timestamp" },
          "GroupARN": { "$ref": "#/components/schemas/GroupARN" },
          "GroupName": { "$ref": "#/components/schemas/GroupName" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "StartTime": { "$ref": "#/components/schemas/Timestamp" }
        },
        "required": ["StartTime", "EndTime"],
        "type": "object"
      },
      "GetServiceGraphResult": {
        "properties": {
          "ContainsOldGroupVersions": { "$ref": "#/components/schemas/Boolean" },
          "EndTime": { "$ref": "#/components/schemas/Timestamp" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Services": { "$ref": "#/components/schemas/ServiceList" },
          "StartTime": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "GetTimeSeriesServiceStatisticsRequest": {
        "properties": {
          "EndTime": { "$ref": "#/components/schemas/Timestamp" },
          "EntitySelectorExpression": { "$ref": "#/components/schemas/EntitySelectorExpression" },
          "GroupARN": { "$ref": "#/components/schemas/GroupARN" },
          "GroupName": { "$ref": "#/components/schemas/GroupName" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Period": { "$ref": "#/components/schemas/NullableInteger" },
          "StartTime": { "$ref": "#/components/schemas/Timestamp" }
        },
        "required": ["StartTime", "EndTime"],
        "type": "object"
      },
      "GetTimeSeriesServiceStatisticsResult": {
        "properties": {
          "ContainsOldGroupVersions": { "$ref": "#/components/schemas/Boolean" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "TimeSeriesServiceStatistics": { "$ref": "#/components/schemas/TimeSeriesServiceStatisticsList" }
        },
        "type": "object"
      },
      "GetTraceGraphRequest": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "TraceIds": { "$ref": "#/components/schemas/TraceIdList" }
        },
        "required": ["TraceIds"],
        "type": "object"
      },
      "GetTraceGraphResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Services": { "$ref": "#/components/schemas/ServiceList" }
        },
        "type": "object"
      },
      "GetTraceSummariesRequest": {
        "properties": {
          "EndTime": { "$ref": "#/components/schemas/Timestamp" },
          "FilterExpression": { "$ref": "#/components/schemas/FilterExpression" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Sampling": { "$ref": "#/components/schemas/NullableBoolean" },
          "SamplingStrategy": { "$ref": "#/components/schemas/SamplingStrategy" },
          "StartTime": { "$ref": "#/components/schemas/Timestamp" },
          "TimeRangeType": { "$ref": "#/components/schemas/TimeRangeType" }
        },
        "required": ["StartTime", "EndTime"],
        "type": "object"
      },
      "GetTraceSummariesResult": {
        "properties": {
          "ApproximateTime": { "$ref": "#/components/schemas/Timestamp" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "TraceSummaries": { "$ref": "#/components/schemas/TraceSummaryList" },
          "TracesProcessedCount": { "$ref": "#/components/schemas/NullableLong" }
        },
        "type": "object"
      },
      "Group": {
        "description": "Details and metadata for a group.",
        "properties": {
          "FilterExpression": { "$ref": "#/components/schemas/String" },
          "GroupARN": { "$ref": "#/components/schemas/String" },
          "GroupName": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "GroupARN": { "maxLength": 400, "minLength": 1, "type": "string" },
      "GroupName": { "maxLength": 32, "minLength": 1, "type": "string" },
      "GroupSummary": {
        "description": "Details for a group without metadata.",
        "properties": {
          "FilterExpression": { "$ref": "#/components/schemas/String" },
          "GroupARN": { "$ref": "#/components/schemas/String" },
          "GroupName": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "GroupSummaryList": { "items": { "$ref": "#/components/schemas/GroupSummary" }, "type": "array" },
      "HTTPMethod": { "maxLength": 10, "type": "string" },
      "Histogram": { "items": { "$ref": "#/components/schemas/HistogramEntry" }, "type": "array" },
      "HistogramEntry": {
        "description": "An entry in a histogram for a statistic. A histogram maps the range of observed values on the X axis, and the prevalence of each value on the Y axis.",
        "properties": {
          "Count": { "$ref": "#/components/schemas/Integer" },
          "Value": { "$ref": "#/components/schemas/Double" }
        },
        "type": "object"
      },
      "Host": { "maxLength": 64, "type": "string" },
      "Hostname": { "maxLength": 255, "type": "string" },
      "Http": {
        "description": "Information about an HTTP request.",
        "properties": {
          "ClientIp": { "$ref": "#/components/schemas/String" },
          "HttpMethod": { "$ref": "#/components/schemas/String" },
          "HttpStatus": { "$ref": "#/components/schemas/NullableInteger" },
          "HttpURL": { "$ref": "#/components/schemas/String" },
          "UserAgent": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "InstanceIdDetail": {
        "description": "A list of EC2 instance IDs corresponding to the segments in a trace. ",
        "properties": { "Id": { "$ref": "#/components/schemas/String" } },
        "type": "object"
      },
      "Integer": { "type": "integer" },
      "InvalidRequestException": {},
      "NullableBoolean": { "type": "boolean" },
      "NullableDouble": { "format": "double", "type": "number" },
      "NullableInteger": { "type": "integer" },
      "NullableLong": { "type": "integer" },
      "Priority": { "maximum": 9999, "minimum": 1, "type": "integer" },
      "PutEncryptionConfigRequest": {
        "properties": {
          "KeyId": { "$ref": "#/components/schemas/EncryptionKeyId" },
          "Type": { "$ref": "#/components/schemas/EncryptionType" }
        },
        "required": ["Type"],
        "type": "object"
      },
      "PutEncryptionConfigResult": {
        "properties": { "EncryptionConfig": { "$ref": "#/components/schemas/EncryptionConfig" } },
        "type": "object"
      },
      "PutTelemetryRecordsRequest": {
        "properties": {
          "EC2InstanceId": { "$ref": "#/components/schemas/EC2InstanceId" },
          "Hostname": { "$ref": "#/components/schemas/Hostname" },
          "ResourceARN": { "$ref": "#/components/schemas/ResourceARN" },
          "TelemetryRecords": { "$ref": "#/components/schemas/TelemetryRecordList" }
        },
        "required": ["TelemetryRecords"],
        "type": "object"
      },
      "PutTelemetryRecordsResult": { "properties": {}, "type": "object" },
      "PutTraceSegmentsRequest": {
        "properties": { "TraceSegmentDocuments": { "$ref": "#/components/schemas/TraceSegmentDocumentList" } },
        "required": ["TraceSegmentDocuments"],
        "type": "object"
      },
      "PutTraceSegmentsResult": {
        "properties": { "UnprocessedTraceSegments": { "$ref": "#/components/schemas/UnprocessedTraceSegmentList" } },
        "type": "object"
      },
      "RequestCount": { "minimum": 0, "type": "integer" },
      "ReservoirSize": { "minimum": 0, "type": "integer" },
      "ResourceARN": { "maxLength": 500, "type": "string" },
      "ResourceARNDetail": {
        "description": "A list of resources ARNs corresponding to the segments in a trace.",
        "properties": { "ARN": { "$ref": "#/components/schemas/String" } },
        "type": "object"
      },
      "ResponseTimeRootCause": {
        "description": "The root cause information for a response time warning.",
        "properties": { "Services": { "$ref": "#/components/schemas/ResponseTimeRootCauseServices" } },
        "type": "object"
      },
      "ResponseTimeRootCauseEntity": {
        "description": "A collection of segments and corresponding subsegments associated to a response time warning.",
        "properties": {
          "Coverage": { "$ref": "#/components/schemas/NullableDouble" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Remote": { "$ref": "#/components/schemas/NullableBoolean" }
        },
        "type": "object"
      },
      "ResponseTimeRootCauseEntityPath": {
        "items": { "$ref": "#/components/schemas/ResponseTimeRootCauseEntity" },
        "type": "array"
      },
      "ResponseTimeRootCauseService": {
        "description": "A collection of fields identifying the service in a response time warning.",
        "properties": {
          "AccountId": { "$ref": "#/components/schemas/String" },
          "EntityPath": { "$ref": "#/components/schemas/ResponseTimeRootCauseEntityPath" },
          "Inferred": { "$ref": "#/components/schemas/NullableBoolean" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Names": { "$ref": "#/components/schemas/ServiceNames" },
          "Type": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ResponseTimeRootCauseServices": {
        "items": { "$ref": "#/components/schemas/ResponseTimeRootCauseService" },
        "type": "array"
      },
      "ResponseTimeRootCauses": { "items": { "$ref": "#/components/schemas/ResponseTimeRootCause" }, "type": "array" },
      "RootCauseException": {
        "description": "The exception associated with a root cause.",
        "properties": {
          "Message": { "$ref": "#/components/schemas/String" },
          "Name": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "RootCauseExceptions": { "items": { "$ref": "#/components/schemas/RootCauseException" }, "type": "array" },
      "RuleLimitExceededException": {},
      "RuleName": { "maxLength": 32, "minLength": 1, "type": "string" },
      "SampledCount": { "minimum": 0, "type": "integer" },
      "SamplingRule": {
        "description": "A sampling rule that services use to decide whether to instrument a request. Rule fields can match properties of the service, or properties of a request. The service can ignore rules that don't match its properties.",
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/AttributeMap" },
          "FixedRate": { "$ref": "#/components/schemas/FixedRate" },
          "HTTPMethod": { "$ref": "#/components/schemas/HTTPMethod" },
          "Host": { "$ref": "#/components/schemas/Host" },
          "Priority": { "$ref": "#/components/schemas/Priority" },
          "ReservoirSize": { "$ref": "#/components/schemas/ReservoirSize" },
          "ResourceARN": { "$ref": "#/components/schemas/ResourceARN" },
          "RuleARN": { "$ref": "#/components/schemas/String" },
          "RuleName": { "$ref": "#/components/schemas/RuleName" },
          "ServiceName": { "$ref": "#/components/schemas/ServiceName" },
          "ServiceType": { "$ref": "#/components/schemas/ServiceType" },
          "URLPath": { "$ref": "#/components/schemas/URLPath" },
          "Version": { "$ref": "#/components/schemas/Version" }
        },
        "required": [
          "ResourceARN",
          "Priority",
          "FixedRate",
          "ReservoirSize",
          "ServiceName",
          "ServiceType",
          "Host",
          "HTTPMethod",
          "URLPath",
          "Version"
        ],
        "type": "object"
      },
      "SamplingRuleRecord": {
        "description": "A <a>SamplingRule</a> and its metadata.",
        "properties": {
          "CreatedAt": { "$ref": "#/components/schemas/Timestamp" },
          "ModifiedAt": { "$ref": "#/components/schemas/Timestamp" },
          "SamplingRule": { "$ref": "#/components/schemas/SamplingRule" }
        },
        "type": "object"
      },
      "SamplingRuleRecordList": { "items": { "$ref": "#/components/schemas/SamplingRuleRecord" }, "type": "array" },
      "SamplingRuleUpdate": {
        "description": "A document specifying changes to a sampling rule's configuration.",
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/AttributeMap" },
          "FixedRate": { "$ref": "#/components/schemas/NullableDouble" },
          "HTTPMethod": { "$ref": "#/components/schemas/HTTPMethod" },
          "Host": { "$ref": "#/components/schemas/Host" },
          "Priority": { "$ref": "#/components/schemas/NullableInteger" },
          "ReservoirSize": { "$ref": "#/components/schemas/NullableInteger" },
          "ResourceARN": { "$ref": "#/components/schemas/ResourceARN" },
          "RuleARN": { "$ref": "#/components/schemas/String" },
          "RuleName": { "$ref": "#/components/schemas/RuleName" },
          "ServiceName": { "$ref": "#/components/schemas/ServiceName" },
          "ServiceType": { "$ref": "#/components/schemas/ServiceType" },
          "URLPath": { "$ref": "#/components/schemas/URLPath" }
        },
        "type": "object"
      },
      "SamplingStatisticSummary": {
        "description": "Aggregated request sampling data for a sampling rule across all services for a 10 second window.",
        "properties": {
          "BorrowCount": { "$ref": "#/components/schemas/Integer" },
          "RequestCount": { "$ref": "#/components/schemas/Integer" },
          "RuleName": { "$ref": "#/components/schemas/String" },
          "SampledCount": { "$ref": "#/components/schemas/Integer" },
          "Timestamp": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "SamplingStatisticSummaryList": {
        "items": { "$ref": "#/components/schemas/SamplingStatisticSummary" },
        "type": "array"
      },
      "SamplingStatisticsDocument": {
        "description": "Request sampling results for a single rule from a service. Results are for the last 10 seconds unless the service has been assigned a longer reporting interval after a previous call to <a>GetSamplingTargets</a>.",
        "properties": {
          "BorrowCount": { "$ref": "#/components/schemas/BorrowCount" },
          "ClientID": { "$ref": "#/components/schemas/ClientID" },
          "RequestCount": { "$ref": "#/components/schemas/RequestCount" },
          "RuleName": { "$ref": "#/components/schemas/RuleName" },
          "SampledCount": { "$ref": "#/components/schemas/SampledCount" },
          "Timestamp": { "$ref": "#/components/schemas/Timestamp" }
        },
        "required": ["RuleName", "ClientID", "Timestamp", "RequestCount", "SampledCount"],
        "type": "object"
      },
      "SamplingStatisticsDocumentList": {
        "items": { "$ref": "#/components/schemas/SamplingStatisticsDocument" },
        "maxItems": 25,
        "type": "array"
      },
      "SamplingStrategy": {
        "description": "The name and value of a sampling rule to apply to a trace summary.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/SamplingStrategyName" },
          "Value": { "$ref": "#/components/schemas/NullableDouble" }
        },
        "type": "object"
      },
      "SamplingStrategyName": { "enum": ["PartialScan", "FixedRate"], "type": "string" },
      "SamplingTargetDocument": {
        "description": "Temporary changes to a sampling rule configuration. To meet the global sampling target for a rule, X-Ray calculates a new reservoir for each service based on the recent sampling results of all services that called <a>GetSamplingTargets</a>.",
        "properties": {
          "FixedRate": { "$ref": "#/components/schemas/Double" },
          "Interval": { "$ref": "#/components/schemas/NullableInteger" },
          "ReservoirQuota": { "$ref": "#/components/schemas/NullableInteger" },
          "ReservoirQuotaTTL": { "$ref": "#/components/schemas/Timestamp" },
          "RuleName": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "SamplingTargetDocumentList": {
        "items": { "$ref": "#/components/schemas/SamplingTargetDocument" },
        "type": "array"
      },
      "Segment": {
        "description": "<p>A segment from a trace that has been ingested by the X-Ray service. The segment can be compiled from documents uploaded with <a>PutTraceSegments</a>, or an <code>inferred</code> segment for a downstream service, generated from a subsegment sent by the service that called it.</p> <p>For the full segment document schema, see <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html\">AWS X-Ray Segment Documents</a> in the <i>AWS X-Ray Developer Guide</i>.</p>",
        "properties": {
          "Document": { "$ref": "#/components/schemas/SegmentDocument" },
          "Id": { "$ref": "#/components/schemas/SegmentId" }
        },
        "type": "object"
      },
      "SegmentDocument": { "minLength": 1, "type": "string" },
      "SegmentId": { "type": "string" },
      "SegmentList": { "items": { "$ref": "#/components/schemas/Segment" }, "type": "array" },
      "Service": {
        "description": "Information about an application that processed requests, users that made requests, or downstream services, resources and applications that an application used.",
        "properties": {
          "AccountId": { "$ref": "#/components/schemas/String" },
          "DurationHistogram": { "$ref": "#/components/schemas/Histogram" },
          "Edges": { "$ref": "#/components/schemas/EdgeList" },
          "EndTime": { "$ref": "#/components/schemas/Timestamp" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Names": { "$ref": "#/components/schemas/ServiceNames" },
          "ReferenceId": { "$ref": "#/components/schemas/NullableInteger" },
          "ResponseTimeHistogram": { "$ref": "#/components/schemas/Histogram" },
          "Root": { "$ref": "#/components/schemas/NullableBoolean" },
          "StartTime": { "$ref": "#/components/schemas/Timestamp" },
          "State": { "$ref": "#/components/schemas/String" },
          "SummaryStatistics": { "$ref": "#/components/schemas/ServiceStatistics" },
          "Type": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ServiceId": {
        "description": "<p/>",
        "properties": {
          "AccountId": { "$ref": "#/components/schemas/String" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Names": { "$ref": "#/components/schemas/ServiceNames" },
          "Type": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ServiceIds": { "items": { "$ref": "#/components/schemas/ServiceId" }, "type": "array" },
      "ServiceList": { "items": { "$ref": "#/components/schemas/Service" }, "type": "array" },
      "ServiceName": { "maxLength": 64, "type": "string" },
      "ServiceNames": { "items": { "$ref": "#/components/schemas/String" }, "type": "array" },
      "ServiceStatistics": {
        "description": "Response statistics for a service.",
        "properties": {
          "ErrorStatistics": { "$ref": "#/components/schemas/ErrorStatistics" },
          "FaultStatistics": { "$ref": "#/components/schemas/FaultStatistics" },
          "OkCount": { "$ref": "#/components/schemas/NullableLong" },
          "TotalCount": { "$ref": "#/components/schemas/NullableLong" },
          "TotalResponseTime": { "$ref": "#/components/schemas/NullableDouble" }
        },
        "type": "object"
      },
      "ServiceType": { "maxLength": 64, "type": "string" },
      "String": { "type": "string" },
      "TelemetryRecord": {
        "description": "<p/>",
        "properties": {
          "BackendConnectionErrors": { "$ref": "#/components/schemas/BackendConnectionErrors" },
          "SegmentsReceivedCount": { "$ref": "#/components/schemas/NullableInteger" },
          "SegmentsRejectedCount": { "$ref": "#/components/schemas/NullableInteger" },
          "SegmentsSentCount": { "$ref": "#/components/schemas/NullableInteger" },
          "SegmentsSpilloverCount": { "$ref": "#/components/schemas/NullableInteger" },
          "Timestamp": { "$ref": "#/components/schemas/Timestamp" }
        },
        "required": ["Timestamp"],
        "type": "object"
      },
      "TelemetryRecordList": { "items": { "$ref": "#/components/schemas/TelemetryRecord" }, "type": "array" },
      "ThrottledException": {},
      "TimeRangeType": { "enum": ["TraceId", "Event"], "type": "string" },
      "TimeSeriesServiceStatistics": {
        "description": "A list of TimeSeriesStatistic structures.",
        "properties": {
          "EdgeSummaryStatistics": { "$ref": "#/components/schemas/EdgeStatistics" },
          "ResponseTimeHistogram": { "$ref": "#/components/schemas/Histogram" },
          "ServiceSummaryStatistics": { "$ref": "#/components/schemas/ServiceStatistics" },
          "Timestamp": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "TimeSeriesServiceStatisticsList": {
        "items": { "$ref": "#/components/schemas/TimeSeriesServiceStatistics" },
        "type": "array"
      },
      "Timestamp": { "format": "date-time", "type": "string" },
      "Trace": {
        "description": "A collection of segment documents with matching trace IDs.",
        "properties": {
          "Duration": { "$ref": "#/components/schemas/NullableDouble" },
          "Id": { "$ref": "#/components/schemas/TraceId" },
          "Segments": { "$ref": "#/components/schemas/SegmentList" }
        },
        "type": "object"
      },
      "TraceAvailabilityZones": { "items": { "$ref": "#/components/schemas/AvailabilityZoneDetail" }, "type": "array" },
      "TraceId": { "maxLength": 35, "minLength": 1, "type": "string" },
      "TraceIdList": { "items": { "$ref": "#/components/schemas/TraceId" }, "type": "array" },
      "TraceInstanceIds": { "items": { "$ref": "#/components/schemas/InstanceIdDetail" }, "type": "array" },
      "TraceList": { "items": { "$ref": "#/components/schemas/Trace" }, "type": "array" },
      "TraceResourceARNs": { "items": { "$ref": "#/components/schemas/ResourceARNDetail" }, "type": "array" },
      "TraceSegmentDocument": { "type": "string" },
      "TraceSegmentDocumentList": { "items": { "$ref": "#/components/schemas/TraceSegmentDocument" }, "type": "array" },
      "TraceSummary": {
        "description": "Metadata generated from the segment documents in a trace.",
        "properties": {
          "Annotations": { "$ref": "#/components/schemas/Annotations" },
          "AvailabilityZones": { "$ref": "#/components/schemas/TraceAvailabilityZones" },
          "Duration": { "$ref": "#/components/schemas/NullableDouble" },
          "EntryPoint": { "$ref": "#/components/schemas/ServiceId" },
          "ErrorRootCauses": { "$ref": "#/components/schemas/ErrorRootCauses" },
          "FaultRootCauses": { "$ref": "#/components/schemas/FaultRootCauses" },
          "HasError": { "$ref": "#/components/schemas/NullableBoolean" },
          "HasFault": { "$ref": "#/components/schemas/NullableBoolean" },
          "HasThrottle": { "$ref": "#/components/schemas/NullableBoolean" },
          "Http": { "$ref": "#/components/schemas/Http" },
          "Id": { "$ref": "#/components/schemas/TraceId" },
          "InstanceIds": { "$ref": "#/components/schemas/TraceInstanceIds" },
          "IsPartial": { "$ref": "#/components/schemas/NullableBoolean" },
          "MatchedEventTime": { "$ref": "#/components/schemas/Timestamp" },
          "ResourceARNs": { "$ref": "#/components/schemas/TraceResourceARNs" },
          "ResponseTime": { "$ref": "#/components/schemas/NullableDouble" },
          "ResponseTimeRootCauses": { "$ref": "#/components/schemas/ResponseTimeRootCauses" },
          "Revision": { "$ref": "#/components/schemas/Integer" },
          "ServiceIds": { "$ref": "#/components/schemas/ServiceIds" },
          "Users": { "$ref": "#/components/schemas/TraceUsers" }
        },
        "type": "object"
      },
      "TraceSummaryList": { "items": { "$ref": "#/components/schemas/TraceSummary" }, "type": "array" },
      "TraceUser": {
        "description": "Information about a user recorded in segment documents.",
        "properties": {
          "ServiceIds": { "$ref": "#/components/schemas/ServiceIds" },
          "UserName": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "TraceUsers": { "items": { "$ref": "#/components/schemas/TraceUser" }, "type": "array" },
      "URLPath": { "maxLength": 128, "type": "string" },
      "UnprocessedStatistics": {
        "description": "Sampling statistics from a call to <a>GetSamplingTargets</a> that X-Ray could not process.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/String" },
          "Message": { "$ref": "#/components/schemas/String" },
          "RuleName": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "UnprocessedStatisticsList": {
        "items": { "$ref": "#/components/schemas/UnprocessedStatistics" },
        "type": "array"
      },
      "UnprocessedTraceIdList": { "items": { "$ref": "#/components/schemas/TraceId" }, "type": "array" },
      "UnprocessedTraceSegment": {
        "description": "Information about a segment that failed processing.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/String" },
          "Id": { "$ref": "#/components/schemas/String" },
          "Message": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "UnprocessedTraceSegmentList": {
        "items": { "$ref": "#/components/schemas/UnprocessedTraceSegment" },
        "type": "array"
      },
      "UpdateGroupRequest": {
        "properties": {
          "FilterExpression": { "$ref": "#/components/schemas/FilterExpression" },
          "GroupARN": { "$ref": "#/components/schemas/GroupARN" },
          "GroupName": { "$ref": "#/components/schemas/GroupName" }
        },
        "type": "object"
      },
      "UpdateGroupResult": { "properties": { "Group": { "$ref": "#/components/schemas/Group" } }, "type": "object" },
      "UpdateSamplingRuleRequest": {
        "properties": { "SamplingRuleUpdate": { "$ref": "#/components/schemas/SamplingRuleUpdate" } },
        "required": ["SamplingRuleUpdate"],
        "type": "object"
      },
      "UpdateSamplingRuleResult": {
        "properties": { "SamplingRuleRecord": { "$ref": "#/components/schemas/SamplingRuleRecord" } },
        "type": "object"
      },
      "ValueWithServiceIds": {
        "description": "Information about a segment annotation.",
        "properties": {
          "AnnotationValue": { "$ref": "#/components/schemas/AnnotationValue" },
          "ServiceIds": { "$ref": "#/components/schemas/ServiceIds" }
        },
        "type": "object"
      },
      "ValuesWithServiceIds": { "items": { "$ref": "#/components/schemas/ValueWithServiceIds" }, "type": "array" },
      "Version": { "minimum": 1, "type": "integer" }
    }
  }
}
