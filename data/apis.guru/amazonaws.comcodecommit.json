{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for AWS CodeCommit API along with usage examples.</p> <p>You can use the AWS CodeCommit API to work with the following objects:</p> <p>Repositories, by calling the following:</p> <ul> <li> <p> <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p> </li> <li> <p> <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p> </li> <li> <p> <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p> </li> <li> <p> <a>GetRepository</a>, which returns information about a specified repository.</p> </li> <li> <p> <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p> </li> <li> <p> <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p> </li> <li> <p> <a>UpdateRepositoryName</a>, which changes the name of the repository. If you change the name of a repository, no other users of that repository will be able to access it until you send them the new HTTPS or SSH URL to use.</p> </li> </ul> <p>Branches, by calling the following:</p> <ul> <li> <p> <a>CreateBranch</a>, which creates a new branch in a specified repository.</p> </li> <li> <p> <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p> </li> <li> <p> <a>GetBranch</a>, which returns information about a specified branch.</p> </li> <li> <p> <a>ListBranches</a>, which lists all branches for a specified repository.</p> </li> <li> <p> <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p> </li> </ul> <p>Files, by calling the following:</p> <ul> <li> <p> <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p> </li> <li> <p> <a>GetBlob</a>, which returns the base-64 encoded content of an individual Git blob object within a repository.</p> </li> <li> <p> <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p> </li> <li> <p> <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p> </li> <li> <p> <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p> </li> </ul> <p>Commits, by calling the following:</p> <ul> <li> <p> <a>BatchGetCommits</a>, which returns information about one or more commits in a repository</p> </li> <li> <p> <a>CreateCommit</a>, which creates a commit for changes to a repository.</p> </li> <li> <p> <a>GetCommit</a>, which returns information about a commit, including commit messages and author and committer information.</p> </li> <li> <p> <a>GetDifferences</a>, which returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID or other fully qualified reference).</p> </li> </ul> <p>Merges, by calling the following:</p> <ul> <li> <p> <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p> </li> <li> <p> <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the purpose of comparing them and identifying any potential conflicts.</p> </li> <li> <p> <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions of a file in a potential merge.</p> </li> <li> <p> <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p> </li> <li> <p> <a>GetMergeConflicts</a>, which returns information about merge conflicts between the source and destination branch in a pull request.</p> </li> <li> <p> <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p> </li> <li> <p> <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p> </li> <li> <p> <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p> </li> <li> <p> <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p> </li> </ul> <p>Pull requests, by calling the following:</p> <ul> <li> <p> <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p> </li> <li> <p> <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p> </li> <li> <p> <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p> </li> <li> <p> <a>GetPullRequest</a>, which returns information about a specified pull request.</p> </li> <li> <p> <a>ListPullRequests</a>, which lists all pull requests for a repository.</p> </li> <li> <p> <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the fast-forward merge option.</p> </li> <li> <p> <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the squash merge option.</p> </li> <li> <p> <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination branch for that pull request using the three-way merge option.</p> </li> <li> <p> <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p> </li> <li> <p> <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p> </li> </ul> <p>Comments in a repository, by calling the following:</p> <ul> <li> <p> <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p> </li> <li> <p> <a>GetComment</a>, which returns information about a comment on a commit.</p> </li> <li> <p> <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentReply</a>, which creates a reply to a comment.</p> </li> <li> <p> <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p> </li> </ul> <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p> <ul> <li> <p> <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p> </li> <li> <p> <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p> </li> <li> <p> <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p> </li> </ul> <p>Triggers, by calling the following:</p> <ul> <li> <p> <a>GetRepositoryTriggers</a>, which returns information about triggers configured for a repository.</p> </li> <li> <p> <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can be used to create or delete triggers.</p> </li> <li> <p> <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger by sending data to the trigger target.</p> </li> </ul> <p>For information about how to use AWS CodeCommit, see the <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">AWS CodeCommit User Guide</a>.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS CodeCommit",
    "version": "2015-04-13",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/codecommit-2015-04-13.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "codecommit"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/codecommit/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.",
        "operationId": "BatchDescribeMergeConflicts",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.BatchDescribeMergeConflicts"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchDescribeMergeConflictsInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchDescribeMergeConflictsOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "MergeOptionRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergeOptionRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidMergeOptionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMergeOptionException" } }
            }
          },
          "485": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          },
          "486": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "487": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "488": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "489": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "490": {
            "description": "InvalidMaxConflictFilesException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxConflictFilesException" } }
            }
          },
          "491": {
            "description": "InvalidMaxMergeHunksException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxMergeHunksException" } }
            }
          },
          "492": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "493": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "494": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "495": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "496": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "497": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "498": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "499": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "500": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.BatchGetCommits": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about the contents of one or more commits in a repository.",
        "operationId": "BatchGetCommits",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.BatchGetCommits"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetCommitsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetCommitsOutput" } } }
          },
          "480": {
            "description": "CommitIdsListRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdsListRequiredException" } }
            }
          },
          "481": {
            "description": "CommitIdsLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdsLimitExceededException" } }
            }
          },
          "482": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "484": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.BatchGetRepositories": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns information about one or more repositories.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>",
        "operationId": "BatchGetRepositories",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.BatchGetRepositories"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetRepositoriesInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchGetRepositoriesOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNamesRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNamesRequiredException" } }
            }
          },
          "481": {
            "description": "MaximumRepositoryNamesExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumRepositoryNamesExceededException" }
              }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateBranch": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a new branch in a repository and points the branch to a commit.</p> <note> <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p> </note>",
        "operationId": "CreateBranch",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.CreateBranch"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateBranchInput" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "484": {
            "description": "BranchNameExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameExistsException" } }
            }
          },
          "485": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "486": {
            "description": "CommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdRequiredException" } }
            }
          },
          "487": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "488": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "489": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "490": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "491": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "492": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "493": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateCommit": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a commit for a repository on the tip of a specified branch.",
        "operationId": "CreateCommit",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.CreateCommit"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateCommitInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateCommitOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "ParentCommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitIdRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidParentCommitIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParentCommitIdException" } }
            }
          },
          "485": {
            "description": "ParentCommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitDoesNotExistException" } }
            }
          },
          "486": {
            "description": "ParentCommitIdOutdatedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitIdOutdatedException" } }
            }
          },
          "487": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "488": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "489": {
            "description": "BranchDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDoesNotExistException" } }
            }
          },
          "490": {
            "description": "BranchNameIsTagNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameIsTagNameException" } }
            }
          },
          "491": {
            "description": "FileEntryRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileEntryRequiredException" } }
            }
          },
          "492": {
            "description": "MaximumFileEntriesExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MaximumFileEntriesExceededException" } }
            }
          },
          "493": {
            "description": "PutFileEntryConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutFileEntryConflictException" } }
            }
          },
          "494": {
            "description": "SourceFileOrContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceFileOrContentRequiredException" } }
            }
          },
          "495": {
            "description": "FileContentAndSourceFileSpecifiedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileContentAndSourceFileSpecifiedException" }
              }
            }
          },
          "496": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "497": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "498": {
            "description": "SamePathRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SamePathRequestException" } } }
          },
          "499": {
            "description": "FileDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileDoesNotExistException" } }
            }
          },
          "500": {
            "description": "FileContentSizeLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileContentSizeLimitExceededException" } }
            }
          },
          "501": {
            "description": "FolderContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FolderContentSizeLimitExceededException" }
              }
            }
          },
          "502": {
            "description": "InvalidDeletionParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidDeletionParameterException" } }
            }
          },
          "503": {
            "description": "RestrictedSourceFileException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestrictedSourceFileException" } }
            }
          },
          "504": {
            "description": "FileModeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileModeRequiredException" } }
            }
          },
          "505": {
            "description": "InvalidFileModeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileModeException" } } }
          },
          "506": {
            "description": "NameLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NameLengthExceededException" } }
            }
          },
          "507": {
            "description": "InvalidEmailException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailException" } } }
          },
          "508": {
            "description": "CommitMessageLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitMessageLengthExceededException" } }
            }
          },
          "509": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "510": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "511": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "512": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "513": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "514": {
            "description": "NoChangeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NoChangeException" } } }
          },
          "515": {
            "description": "FileNameConflictsWithDirectoryNameException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileNameConflictsWithDirectoryNameException" }
              }
            }
          },
          "516": {
            "description": "DirectoryNameConflictsWithFileNameException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DirectoryNameConflictsWithFileNameException" }
              }
            }
          },
          "517": {
            "description": "FilePathConflictsWithSubmodulePathException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FilePathConflictsWithSubmodulePathException" }
              }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreatePullRequest": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a pull request in the specified repository.",
        "operationId": "CreatePullRequest",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.CreatePullRequest"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreatePullRequestInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreatePullRequestOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "488": {
            "description": "ClientRequestTokenRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ClientRequestTokenRequiredException" } }
            }
          },
          "489": {
            "description": "InvalidClientRequestTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidClientRequestTokenException" } }
            }
          },
          "490": {
            "description": "IdempotencyParameterMismatchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotencyParameterMismatchException" } }
            }
          },
          "491": {
            "description": "ReferenceNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReferenceNameRequiredException" } }
            }
          },
          "492": {
            "description": "InvalidReferenceNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReferenceNameException" } }
            }
          },
          "493": {
            "description": "ReferenceDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReferenceDoesNotExistException" } }
            }
          },
          "494": {
            "description": "ReferenceTypeNotSupportedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReferenceTypeNotSupportedException" } }
            }
          },
          "495": {
            "description": "TitleRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TitleRequiredException" } } }
          },
          "496": {
            "description": "InvalidTitleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTitleException" } } }
          },
          "497": {
            "description": "InvalidDescriptionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidDescriptionException" } }
            }
          },
          "498": {
            "description": "TargetsRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TargetsRequiredException" } } }
          },
          "499": {
            "description": "InvalidTargetsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTargetsException" } } }
          },
          "500": {
            "description": "TargetRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TargetRequiredException" } } }
          },
          "501": {
            "description": "InvalidTargetException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTargetException" } } }
          },
          "502": {
            "description": "MultipleRepositoriesInPullRequestException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MultipleRepositoriesInPullRequestException" }
              }
            }
          },
          "503": {
            "description": "MaximumOpenPullRequestsExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumOpenPullRequestsExceededException" }
              }
            }
          },
          "504": {
            "description": "SourceAndDestinationAreSameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceAndDestinationAreSameException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateRepository": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new, empty repository.",
        "operationId": "CreateRepository",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.CreateRepository"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateRepositoryInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateRepositoryOutput" } } }
          },
          "480": {
            "description": "RepositoryNameExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameExistsException" } }
            }
          },
          "481": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "InvalidRepositoryDescriptionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryDescriptionException" } }
            }
          },
          "484": {
            "description": "RepositoryLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryLimitExceededException" } }
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "490": {
            "description": "InvalidTagsMapException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTagsMapException" } } }
          },
          "491": {
            "description": "TooManyTagsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyTagsException" } } }
          },
          "492": {
            "description": "InvalidSystemTagUsageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSystemTagUsageException" } }
            }
          },
          "493": {
            "description": "TagPolicyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagPolicyException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy, as that strategy does not create a merge commit.</p> <note> <p>This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p> </note>",
        "operationId": "CreateUnreferencedMergeCommit",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.CreateUnreferencedMergeCommit"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateUnreferencedMergeCommitInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateUnreferencedMergeCommitOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "484": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "485": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "486": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "487": {
            "description": "MergeOptionRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergeOptionRequiredException" } }
            }
          },
          "488": {
            "description": "InvalidMergeOptionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMergeOptionException" } }
            }
          },
          "489": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "490": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "491": {
            "description": "InvalidConflictResolutionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionException" } }
            }
          },
          "492": {
            "description": "ManualMergeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ManualMergeRequiredException" } }
            }
          },
          "493": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumConflictResolutionEntriesExceededException" }
              }
            }
          },
          "494": {
            "description": "MultipleConflictResolutionEntriesException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MultipleConflictResolutionEntriesException" }
              }
            }
          },
          "495": {
            "description": "ReplacementTypeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementTypeRequiredException" } }
            }
          },
          "496": {
            "description": "InvalidReplacementTypeException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementTypeException" } }
            }
          },
          "497": {
            "description": "ReplacementContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementContentRequiredException" } }
            }
          },
          "498": {
            "description": "InvalidReplacementContentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementContentException" } }
            }
          },
          "499": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "500": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "501": {
            "description": "FileContentSizeLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileContentSizeLimitExceededException" } }
            }
          },
          "502": {
            "description": "FolderContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FolderContentSizeLimitExceededException" }
              }
            }
          },
          "503": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "504": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "505": {
            "description": "ConcurrentReferenceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentReferenceUpdateException" } }
            }
          },
          "506": {
            "description": "FileModeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileModeRequiredException" } }
            }
          },
          "507": {
            "description": "InvalidFileModeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileModeException" } } }
          },
          "508": {
            "description": "NameLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NameLengthExceededException" } }
            }
          },
          "509": {
            "description": "InvalidEmailException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailException" } } }
          },
          "510": {
            "description": "CommitMessageLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitMessageLengthExceededException" } }
            }
          },
          "511": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "512": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "513": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "514": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "515": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteBranch": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a branch from a repository, unless that branch is the default branch for the repository. ",
        "operationId": "DeleteBranch",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.DeleteBranch"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteBranchInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteBranchOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "485": {
            "description": "DefaultBranchCannotBeDeletedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DefaultBranchCannotBeDeletedException" } }
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteCommentContent": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the content of a comment made on a change, file, or commit in a repository.",
        "operationId": "DeleteCommentContent",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.DeleteCommentContent"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteCommentContentInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteCommentContentOutput" } }
            }
          },
          "480": {
            "description": "CommentDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentDoesNotExistException" } }
            }
          },
          "481": {
            "description": "CommentIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentIdRequiredException" } }
            }
          },
          "482": {
            "description": "InvalidCommentIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommentIdException" } }
            }
          },
          "483": {
            "description": "CommentDeletedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommentDeletedException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteFile": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file will still exist in the commits prior to the commit that contains the deletion.",
        "operationId": "DeleteFile",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.DeleteFile"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteFileInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteFileOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "ParentCommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitIdRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidParentCommitIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParentCommitIdException" } }
            }
          },
          "485": {
            "description": "ParentCommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitDoesNotExistException" } }
            }
          },
          "486": {
            "description": "ParentCommitIdOutdatedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitIdOutdatedException" } }
            }
          },
          "487": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "488": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "489": {
            "description": "FileDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileDoesNotExistException" } }
            }
          },
          "490": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "491": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "492": {
            "description": "BranchDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDoesNotExistException" } }
            }
          },
          "493": {
            "description": "BranchNameIsTagNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameIsTagNameException" } }
            }
          },
          "494": {
            "description": "NameLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NameLengthExceededException" } }
            }
          },
          "495": {
            "description": "InvalidEmailException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailException" } } }
          },
          "496": {
            "description": "CommitMessageLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitMessageLengthExceededException" } }
            }
          },
          "497": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "498": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "499": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "500": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "501": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteRepository": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes a repository. If a specified repository was already deleted, a null repository ID will be returned.</p> <important> <p>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository will fail.</p> </important>",
        "operationId": "DeleteRepository",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.DeleteRepository"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRepositoryInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRepositoryOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "483": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "484": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "485": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "486": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception will be thrown.",
        "operationId": "DescribeMergeConflicts",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxMergeHunks",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.DescribeMergeConflicts"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeMergeConflictsInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeMergeConflictsOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "MergeOptionRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergeOptionRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidMergeOptionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMergeOptionException" } }
            }
          },
          "485": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          },
          "486": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "487": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "488": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "489": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "490": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "491": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "492": {
            "description": "FileDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileDoesNotExistException" } }
            }
          },
          "493": {
            "description": "InvalidMaxMergeHunksException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxMergeHunksException" } }
            }
          },
          "494": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "495": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "496": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "497": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "498": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "499": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "500": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "501": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "502": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about one or more pull request events.",
        "operationId": "DescribePullRequestEvents",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.DescribePullRequestEvents"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribePullRequestEventsInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribePullRequestEventsOutput" } }
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidPullRequestEventTypeException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestEventTypeException" } }
            }
          },
          "484": {
            "description": "InvalidActorArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidActorArnException" } } }
          },
          "485": {
            "description": "ActorDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ActorDoesNotExistException" } }
            }
          },
          "486": {
            "description": "InvalidMaxResultsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxResultsException" } }
            }
          },
          "487": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetBlob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns the base-64 encoded content of an individual blob within a repository.",
        "operationId": "GetBlob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetBlob"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetBlobInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetBlobOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "BlobIdRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BlobIdRequiredException" } } }
          },
          "484": {
            "description": "InvalidBlobIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBlobIdException" } } }
          },
          "485": {
            "description": "BlobIdDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BlobIdDoesNotExistException" } }
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "491": {
            "description": "FileTooLargeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FileTooLargeException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetBranch": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about a repository branch, including its name and the last commit ID.",
        "operationId": "GetBranch",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetBranch"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetBranchInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetBranchOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "485": {
            "description": "BranchDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDoesNotExistException" } }
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetComment": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns the content of a comment made on a change, file, or commit in a repository.",
        "operationId": "GetComment",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetComment"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCommentInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCommentOutput" } } }
          },
          "480": {
            "description": "CommentDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentDoesNotExistException" } }
            }
          },
          "481": {
            "description": "CommentIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentIdRequiredException" } }
            }
          },
          "482": {
            "description": "InvalidCommentIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommentIdException" } }
            }
          },
          "483": {
            "description": "CommentDeletedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommentDeletedException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about comments made on the comparison between two commits.",
        "operationId": "GetCommentsForComparedCommit",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetCommentsForComparedCommit"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetCommentsForComparedCommitInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetCommentsForComparedCommitOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "CommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "485": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "486": {
            "description": "InvalidMaxResultsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxResultsException" } }
            }
          },
          "487": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns comments made on a pull request.",
        "operationId": "GetCommentsForPullRequest",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetCommentsForPullRequest"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetCommentsForPullRequestInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetCommentsForPullRequestOutput" } }
            }
          },
          "480": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "481": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "483": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "484": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "485": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "486": {
            "description": "CommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdRequiredException" } }
            }
          },
          "487": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "488": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "489": {
            "description": "InvalidMaxResultsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxResultsException" } }
            }
          },
          "490": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          },
          "491": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryNotAssociatedWithPullRequestException" }
              }
            }
          },
          "492": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "493": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "494": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "495": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "496": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetCommit": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about a commit, including commit message and committer information.",
        "operationId": "GetCommit",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetCommit"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCommitInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCommitOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "CommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "485": {
            "description": "CommitIdDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdDoesNotExistException" } }
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetDifferences": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID or other fully qualified reference). Results can be limited to a specified path.",
        "operationId": "GetDifferences",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetDifferences"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDifferencesInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDifferencesOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          },
          "484": {
            "description": "InvalidMaxResultsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxResultsException" } }
            }
          },
          "485": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "486": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "487": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "488": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "489": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "490": {
            "description": "PathDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PathDoesNotExistException" } }
            }
          },
          "491": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "492": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "493": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "494": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "495": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetFile": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns the base-64 encoded contents of a specified file and its metadata.",
        "operationId": "GetFile",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetFile"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetFileInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetFileOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "484": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "485": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "486": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "487": {
            "description": "FileDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileDoesNotExistException" } }
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "493": {
            "description": "FileTooLargeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FileTooLargeException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetFolder": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns the contents of a specified folder in a repository.",
        "operationId": "GetFolder",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetFolder"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetFolderInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetFolderOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "484": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "485": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "486": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "487": {
            "description": "FolderDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FolderDoesNotExistException" } }
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetMergeCommit": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about a specified merge commit.",
        "operationId": "GetMergeCommit",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetMergeCommit"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMergeCommitInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMergeCommitOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "484": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "485": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "486": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "487": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetMergeConflicts": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.",
        "operationId": "GetMergeConflicts",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxConflictFiles",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetMergeConflicts"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMergeConflictsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMergeConflictsOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "MergeOptionRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergeOptionRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidMergeOptionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMergeOptionException" } }
            }
          },
          "485": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          },
          "486": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "487": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "488": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "489": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "490": {
            "description": "InvalidMaxConflictFilesException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxConflictFilesException" } }
            }
          },
          "491": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "492": {
            "description": "InvalidDestinationCommitSpecifierException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidDestinationCommitSpecifierException" }
              }
            }
          },
          "493": {
            "description": "InvalidSourceCommitSpecifierException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSourceCommitSpecifierException" } }
            }
          },
          "494": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "495": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "496": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "497": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "498": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "499": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "500": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "501": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetMergeOptions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns information about the merge options available for merging two specified branches. For details about why a particular merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.",
        "operationId": "GetMergeOptions",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetMergeOptions"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMergeOptionsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMergeOptionsOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "484": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "485": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "486": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "487": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "488": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "489": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "490": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "491": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "492": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "493": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "494": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "495": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetPullRequest": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets information about a pull request in a specified repository.",
        "operationId": "GetPullRequest",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetPullRequest"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPullRequestInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPullRequestOutput" } } }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetRepository": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns information about a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>",
        "operationId": "GetRepository",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetRepository"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetRepositoryInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetRepositoryOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets information about triggers configured for a repository.",
        "operationId": "GetRepositoryTriggers",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.GetRepositoryTriggers"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetRepositoryTriggersInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetRepositoryTriggersOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListBranches": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets information about one or more branches in a repository.",
        "operationId": "ListBranches",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.ListBranches"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListBranchesInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListBranchesOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "488": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListPullRequests": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.",
        "operationId": "ListPullRequests",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.ListPullRequests"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListPullRequestsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListPullRequestsOutput" } } }
          },
          "480": {
            "description": "InvalidPullRequestStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestStatusException" } }
            }
          },
          "481": {
            "description": "InvalidAuthorArnException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAuthorArnException" } }
            }
          },
          "482": {
            "description": "AuthorDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AuthorDoesNotExistException" } }
            }
          },
          "483": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "485": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "486": {
            "description": "InvalidMaxResultsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidMaxResultsException" } }
            }
          },
          "487": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListRepositories": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets information about one or more repositories.",
        "operationId": "ListRepositories",
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.ListRepositories"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListRepositoriesInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListRepositoriesOutput" } } }
          },
          "480": {
            "description": "InvalidSortByException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSortByException" } } }
          },
          "481": {
            "description": "InvalidOrderException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidOrderException" } } }
          },
          "482": {
            "description": "InvalidContinuationTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidContinuationTokenException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListTagsForResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\">CodeCommit Resources and Operations</a> in the AWS CodeCommit User Guide.",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.ListTagsForResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceOutput" } }
            }
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "ResourceArnRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceArnRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidResourceArnException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidResourceArnException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Merges two branches using the fast-forward merge strategy.",
        "operationId": "MergeBranchesByFastForward",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.MergeBranchesByFastForward"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MergeBranchesByFastForwardInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergeBranchesByFastForwardOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "484": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "485": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "486": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "487": {
            "description": "InvalidTargetBranchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTargetBranchException" } }
            }
          },
          "488": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "489": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "490": {
            "description": "BranchNameIsTagNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameIsTagNameException" } }
            }
          },
          "491": {
            "description": "BranchDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDoesNotExistException" } }
            }
          },
          "492": {
            "description": "ManualMergeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ManualMergeRequiredException" } }
            }
          },
          "493": {
            "description": "ConcurrentReferenceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentReferenceUpdateException" } }
            }
          },
          "494": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "495": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "496": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "497": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "498": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Merges two branches using the squash merge strategy.",
        "operationId": "MergeBranchesBySquash",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.MergeBranchesBySquash"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MergeBranchesBySquashInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergeBranchesBySquashOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "484": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "485": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "486": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "487": {
            "description": "InvalidTargetBranchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTargetBranchException" } }
            }
          },
          "488": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "489": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "490": {
            "description": "BranchNameIsTagNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameIsTagNameException" } }
            }
          },
          "491": {
            "description": "BranchDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDoesNotExistException" } }
            }
          },
          "492": {
            "description": "ManualMergeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ManualMergeRequiredException" } }
            }
          },
          "493": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "494": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "495": {
            "description": "InvalidConflictResolutionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionException" } }
            }
          },
          "496": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumConflictResolutionEntriesExceededException" }
              }
            }
          },
          "497": {
            "description": "MultipleConflictResolutionEntriesException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MultipleConflictResolutionEntriesException" }
              }
            }
          },
          "498": {
            "description": "ReplacementTypeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementTypeRequiredException" } }
            }
          },
          "499": {
            "description": "InvalidReplacementTypeException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementTypeException" } }
            }
          },
          "500": {
            "description": "ReplacementContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementContentRequiredException" } }
            }
          },
          "501": {
            "description": "InvalidReplacementContentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementContentException" } }
            }
          },
          "502": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "503": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "504": {
            "description": "FileContentSizeLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileContentSizeLimitExceededException" } }
            }
          },
          "505": {
            "description": "FolderContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FolderContentSizeLimitExceededException" }
              }
            }
          },
          "506": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "507": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "508": {
            "description": "FileModeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileModeRequiredException" } }
            }
          },
          "509": {
            "description": "InvalidFileModeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileModeException" } } }
          },
          "510": {
            "description": "NameLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NameLengthExceededException" } }
            }
          },
          "511": {
            "description": "InvalidEmailException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailException" } } }
          },
          "512": {
            "description": "CommitMessageLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitMessageLengthExceededException" } }
            }
          },
          "513": {
            "description": "ConcurrentReferenceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentReferenceUpdateException" } }
            }
          },
          "514": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "515": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "516": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "517": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "518": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Merges two specified branches using the three-way merge strategy.",
        "operationId": "MergeBranchesByThreeWay",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.MergeBranchesByThreeWay"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MergeBranchesByThreeWayInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergeBranchesByThreeWayOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "484": {
            "description": "CommitRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommitRequiredException" } } }
          },
          "485": {
            "description": "InvalidCommitException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitException" } } }
          },
          "486": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "487": {
            "description": "InvalidTargetBranchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTargetBranchException" } }
            }
          },
          "488": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "489": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "490": {
            "description": "BranchNameIsTagNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameIsTagNameException" } }
            }
          },
          "491": {
            "description": "BranchDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDoesNotExistException" } }
            }
          },
          "492": {
            "description": "ManualMergeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ManualMergeRequiredException" } }
            }
          },
          "493": {
            "description": "ConcurrentReferenceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentReferenceUpdateException" } }
            }
          },
          "494": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "495": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "496": {
            "description": "InvalidConflictResolutionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionException" } }
            }
          },
          "497": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumConflictResolutionEntriesExceededException" }
              }
            }
          },
          "498": {
            "description": "MultipleConflictResolutionEntriesException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MultipleConflictResolutionEntriesException" }
              }
            }
          },
          "499": {
            "description": "ReplacementTypeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementTypeRequiredException" } }
            }
          },
          "500": {
            "description": "InvalidReplacementTypeException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementTypeException" } }
            }
          },
          "501": {
            "description": "ReplacementContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementContentRequiredException" } }
            }
          },
          "502": {
            "description": "InvalidReplacementContentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementContentException" } }
            }
          },
          "503": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "504": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "505": {
            "description": "FileContentSizeLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileContentSizeLimitExceededException" } }
            }
          },
          "506": {
            "description": "FolderContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FolderContentSizeLimitExceededException" }
              }
            }
          },
          "507": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "508": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "509": {
            "description": "FileModeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileModeRequiredException" } }
            }
          },
          "510": {
            "description": "InvalidFileModeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileModeException" } } }
          },
          "511": {
            "description": "NameLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NameLengthExceededException" } }
            }
          },
          "512": {
            "description": "InvalidEmailException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailException" } } }
          },
          "513": {
            "description": "CommitMessageLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitMessageLengthExceededException" } }
            }
          },
          "514": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "515": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "516": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "517": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "518": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.",
        "operationId": "MergePullRequestByFastForward",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.MergePullRequestByFastForward"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MergePullRequestByFastForwardInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergePullRequestByFastForwardOutput" } }
            }
          },
          "480": {
            "description": "ManualMergeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ManualMergeRequiredException" } }
            }
          },
          "481": {
            "description": "PullRequestAlreadyClosedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestAlreadyClosedException" } }
            }
          },
          "482": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "483": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "484": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "485": {
            "description": "TipOfSourceReferenceIsDifferentException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TipOfSourceReferenceIsDifferentException" }
              }
            }
          },
          "486": {
            "description": "ReferenceDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReferenceDoesNotExistException" } }
            }
          },
          "487": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "488": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryNotAssociatedWithPullRequestException" }
              }
            }
          },
          "489": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "490": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "491": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "492": {
            "description": "ConcurrentReferenceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentReferenceUpdateException" } }
            }
          },
          "493": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "494": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "495": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "496": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "497": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.",
        "operationId": "MergePullRequestBySquash",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.MergePullRequestBySquash"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MergePullRequestBySquashInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergePullRequestBySquashOutput" } }
            }
          },
          "480": {
            "description": "PullRequestAlreadyClosedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestAlreadyClosedException" } }
            }
          },
          "481": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "484": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "485": {
            "description": "ManualMergeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ManualMergeRequiredException" } }
            }
          },
          "486": {
            "description": "TipOfSourceReferenceIsDifferentException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TipOfSourceReferenceIsDifferentException" }
              }
            }
          },
          "487": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "488": {
            "description": "NameLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NameLengthExceededException" } }
            }
          },
          "489": {
            "description": "InvalidEmailException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailException" } } }
          },
          "490": {
            "description": "CommitMessageLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitMessageLengthExceededException" } }
            }
          },
          "491": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "492": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "493": {
            "description": "InvalidConflictResolutionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionException" } }
            }
          },
          "494": {
            "description": "ReplacementTypeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementTypeRequiredException" } }
            }
          },
          "495": {
            "description": "InvalidReplacementTypeException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementTypeException" } }
            }
          },
          "496": {
            "description": "MultipleConflictResolutionEntriesException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MultipleConflictResolutionEntriesException" }
              }
            }
          },
          "497": {
            "description": "ReplacementContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementContentRequiredException" } }
            }
          },
          "498": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumConflictResolutionEntriesExceededException" }
              }
            }
          },
          "499": {
            "description": "ConcurrentReferenceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentReferenceUpdateException" } }
            }
          },
          "500": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "501": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "502": {
            "description": "InvalidFileModeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileModeException" } } }
          },
          "503": {
            "description": "InvalidReplacementContentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementContentException" } }
            }
          },
          "504": {
            "description": "FileContentSizeLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileContentSizeLimitExceededException" } }
            }
          },
          "505": {
            "description": "FolderContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FolderContentSizeLimitExceededException" }
              }
            }
          },
          "506": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "507": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "508": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "509": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "510": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "511": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryNotAssociatedWithPullRequestException" }
              }
            }
          },
          "512": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "513": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "514": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "515": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "516": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.",
        "operationId": "MergePullRequestByThreeWay",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.MergePullRequestByThreeWay"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MergePullRequestByThreeWayInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergePullRequestByThreeWayOutput" } }
            }
          },
          "480": {
            "description": "PullRequestAlreadyClosedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestAlreadyClosedException" } }
            }
          },
          "481": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "484": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "485": {
            "description": "ManualMergeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ManualMergeRequiredException" } }
            }
          },
          "486": {
            "description": "TipOfSourceReferenceIsDifferentException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TipOfSourceReferenceIsDifferentException" }
              }
            }
          },
          "487": {
            "description": "TipsDivergenceExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TipsDivergenceExceededException" } }
            }
          },
          "488": {
            "description": "NameLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NameLengthExceededException" } }
            }
          },
          "489": {
            "description": "InvalidEmailException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailException" } } }
          },
          "490": {
            "description": "CommitMessageLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitMessageLengthExceededException" } }
            }
          },
          "491": {
            "description": "InvalidConflictDetailLevelException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictDetailLevelException" } }
            }
          },
          "492": {
            "description": "InvalidConflictResolutionStrategyException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionStrategyException" }
              }
            }
          },
          "493": {
            "description": "InvalidConflictResolutionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidConflictResolutionException" } }
            }
          },
          "494": {
            "description": "ReplacementTypeRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementTypeRequiredException" } }
            }
          },
          "495": {
            "description": "InvalidReplacementTypeException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementTypeException" } }
            }
          },
          "496": {
            "description": "MultipleConflictResolutionEntriesException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MultipleConflictResolutionEntriesException" }
              }
            }
          },
          "497": {
            "description": "ReplacementContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReplacementContentRequiredException" } }
            }
          },
          "498": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumConflictResolutionEntriesExceededException" }
              }
            }
          },
          "499": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "500": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "501": {
            "description": "InvalidFileModeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileModeException" } } }
          },
          "502": {
            "description": "InvalidReplacementContentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidReplacementContentException" } }
            }
          },
          "503": {
            "description": "FileContentSizeLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileContentSizeLimitExceededException" } }
            }
          },
          "504": {
            "description": "FolderContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FolderContentSizeLimitExceededException" }
              }
            }
          },
          "505": {
            "description": "MaximumFileContentToLoadExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumFileContentToLoadExceededException" }
              }
            }
          },
          "506": {
            "description": "MaximumItemsToCompareExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumItemsToCompareExceededException" }
              }
            }
          },
          "507": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "508": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "509": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "510": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryNotAssociatedWithPullRequestException" }
              }
            }
          },
          "511": {
            "description": "ConcurrentReferenceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentReferenceUpdateException" } }
            }
          },
          "512": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "513": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "514": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "515": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "516": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Posts a comment on the comparison between two commits.",
        "operationId": "PostCommentForComparedCommit",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.PostCommentForComparedCommit"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/PostCommentForComparedCommitInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PostCommentForComparedCommitOutput" } }
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "ClientRequestTokenRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ClientRequestTokenRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidClientRequestTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidClientRequestTokenException" } }
            }
          },
          "485": {
            "description": "IdempotencyParameterMismatchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotencyParameterMismatchException" } }
            }
          },
          "486": {
            "description": "CommentContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentContentRequiredException" } }
            }
          },
          "487": {
            "description": "CommentContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentContentSizeLimitExceededException" }
              }
            }
          },
          "488": {
            "description": "InvalidFileLocationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileLocationException" } }
            }
          },
          "489": {
            "description": "InvalidRelativeFileVersionEnumException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRelativeFileVersionEnumException" }
              }
            }
          },
          "490": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "491": {
            "description": "InvalidFilePositionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFilePositionException" } }
            }
          },
          "492": {
            "description": "CommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdRequiredException" } }
            }
          },
          "493": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "494": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "495": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "496": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "497": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "498": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "499": {
            "description": "BeforeCommitIdAndAfterCommitIdAreSameException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BeforeCommitIdAndAfterCommitIdAreSameException" }
              }
            }
          },
          "500": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "501": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "502": {
            "description": "PathDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PathDoesNotExistException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Posts a comment on a pull request.",
        "operationId": "PostCommentForPullRequest",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.PostCommentForPullRequest"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/PostCommentForPullRequestInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PostCommentForPullRequestOutput" } }
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "483": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryNotAssociatedWithPullRequestException" }
              }
            }
          },
          "484": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "485": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "486": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "487": {
            "description": "ClientRequestTokenRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ClientRequestTokenRequiredException" } }
            }
          },
          "488": {
            "description": "InvalidClientRequestTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidClientRequestTokenException" } }
            }
          },
          "489": {
            "description": "IdempotencyParameterMismatchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotencyParameterMismatchException" } }
            }
          },
          "490": {
            "description": "CommentContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentContentRequiredException" } }
            }
          },
          "491": {
            "description": "CommentContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentContentSizeLimitExceededException" }
              }
            }
          },
          "492": {
            "description": "InvalidFileLocationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileLocationException" } }
            }
          },
          "493": {
            "description": "InvalidRelativeFileVersionEnumException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRelativeFileVersionEnumException" }
              }
            }
          },
          "494": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "495": {
            "description": "InvalidFilePositionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFilePositionException" } }
            }
          },
          "496": {
            "description": "CommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitIdRequiredException" } }
            }
          },
          "497": {
            "description": "InvalidCommitIdException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommitIdException" } } }
          },
          "498": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "499": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "500": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "501": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "502": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "503": {
            "description": "CommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitDoesNotExistException" } }
            }
          },
          "504": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "505": {
            "description": "PathDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PathDoesNotExistException" } }
            }
          },
          "506": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "507": {
            "description": "BeforeCommitIdAndAfterCommitIdAreSameException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BeforeCommitIdAndAfterCommitIdAreSameException" }
              }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PostCommentReply": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Posts a comment in reply to an existing comment on a comparison between commits or a pull request.",
        "operationId": "PostCommentReply",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.PostCommentReply"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PostCommentReplyInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PostCommentReplyOutput" } } }
          },
          "480": {
            "description": "ClientRequestTokenRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ClientRequestTokenRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidClientRequestTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidClientRequestTokenException" } }
            }
          },
          "482": {
            "description": "IdempotencyParameterMismatchException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotencyParameterMismatchException" } }
            }
          },
          "483": {
            "description": "CommentContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentContentRequiredException" } }
            }
          },
          "484": {
            "description": "CommentContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentContentSizeLimitExceededException" }
              }
            }
          },
          "485": {
            "description": "CommentDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentDoesNotExistException" } }
            }
          },
          "486": {
            "description": "CommentIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentIdRequiredException" } }
            }
          },
          "487": {
            "description": "InvalidCommentIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommentIdException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PutFile": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.",
        "operationId": "PutFile",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.PutFile"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutFileInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutFileOutput" } } }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "483": {
            "description": "ParentCommitIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitIdRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidParentCommitIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParentCommitIdException" } }
            }
          },
          "485": {
            "description": "ParentCommitDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitDoesNotExistException" } }
            }
          },
          "486": {
            "description": "ParentCommitIdOutdatedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ParentCommitIdOutdatedException" } }
            }
          },
          "487": {
            "description": "FileContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileContentRequiredException" } }
            }
          },
          "488": {
            "description": "FileContentSizeLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FileContentSizeLimitExceededException" } }
            }
          },
          "489": {
            "description": "FolderContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FolderContentSizeLimitExceededException" }
              }
            }
          },
          "490": {
            "description": "PathRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PathRequiredException" } } }
          },
          "491": {
            "description": "InvalidPathException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPathException" } } }
          },
          "492": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "493": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "494": {
            "description": "BranchDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDoesNotExistException" } }
            }
          },
          "495": {
            "description": "BranchNameIsTagNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameIsTagNameException" } }
            }
          },
          "496": {
            "description": "InvalidFileModeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFileModeException" } } }
          },
          "497": {
            "description": "NameLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NameLengthExceededException" } }
            }
          },
          "498": {
            "description": "InvalidEmailException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailException" } } }
          },
          "499": {
            "description": "CommitMessageLengthExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommitMessageLengthExceededException" } }
            }
          },
          "500": {
            "description": "InvalidDeletionParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidDeletionParameterException" } }
            }
          },
          "501": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "502": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "503": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "504": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "505": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          },
          "506": {
            "description": "SameFileContentException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SameFileContentException" } } }
          },
          "507": {
            "description": "FileNameConflictsWithDirectoryNameException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileNameConflictsWithDirectoryNameException" }
              }
            }
          },
          "508": {
            "description": "DirectoryNameConflictsWithFileNameException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DirectoryNameConflictsWithFileNameException" }
              }
            }
          },
          "509": {
            "description": "FilePathConflictsWithSubmodulePathException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FilePathConflictsWithSubmodulePathException" }
              }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Replaces all triggers for a repository. This can be used to create or delete triggers.",
        "operationId": "PutRepositoryTriggers",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.PutRepositoryTriggers"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/PutRepositoryTriggersInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutRepositoryTriggersOutput" } }
            }
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "481": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "RepositoryTriggersListRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggersListRequiredException" }
              }
            }
          },
          "484": {
            "description": "MaximumRepositoryTriggersExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumRepositoryTriggersExceededException" }
              }
            }
          },
          "485": {
            "description": "InvalidRepositoryTriggerNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerNameException" } }
            }
          },
          "486": {
            "description": "InvalidRepositoryTriggerDestinationArnException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerDestinationArnException" }
              }
            }
          },
          "487": {
            "description": "InvalidRepositoryTriggerRegionException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerRegionException" }
              }
            }
          },
          "488": {
            "description": "InvalidRepositoryTriggerCustomDataException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerCustomDataException" }
              }
            }
          },
          "489": {
            "description": "MaximumBranchesExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MaximumBranchesExceededException" } }
            }
          },
          "490": {
            "description": "InvalidRepositoryTriggerBranchNameException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerBranchNameException" }
              }
            }
          },
          "491": {
            "description": "InvalidRepositoryTriggerEventsException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerEventsException" }
              }
            }
          },
          "492": {
            "description": "RepositoryTriggerNameRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggerNameRequiredException" }
              }
            }
          },
          "493": {
            "description": "RepositoryTriggerDestinationArnRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggerDestinationArnRequiredException" }
              }
            }
          },
          "494": {
            "description": "RepositoryTriggerBranchNameListRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggerBranchNameListRequiredException" }
              }
            }
          },
          "495": {
            "description": "RepositoryTriggerEventsListRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggerEventsListRequiredException" }
              }
            }
          },
          "496": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "497": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "498": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "499": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "500": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\">CodeCommit Resources and Operations</a> in the AWS CodeCommit User Guide.",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "ResourceArnRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceArnRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidResourceArnException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidResourceArnException" } }
            }
          },
          "484": {
            "description": "TagsMapRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagsMapRequiredException" } } }
          },
          "485": {
            "description": "InvalidTagsMapException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTagsMapException" } } }
          },
          "486": {
            "description": "TooManyTagsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyTagsException" } } }
          },
          "487": {
            "description": "InvalidSystemTagUsageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSystemTagUsageException" } }
            }
          },
          "488": {
            "description": "TagPolicyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagPolicyException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test will send data from the last commit. If no data is available, sample data will be generated.",
        "operationId": "TestRepositoryTriggers",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.TestRepositoryTriggers"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TestRepositoryTriggersInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TestRepositoryTriggersOutput" } }
            }
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "481": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "RepositoryTriggersListRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggersListRequiredException" }
              }
            }
          },
          "484": {
            "description": "MaximumRepositoryTriggersExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MaximumRepositoryTriggersExceededException" }
              }
            }
          },
          "485": {
            "description": "InvalidRepositoryTriggerNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerNameException" } }
            }
          },
          "486": {
            "description": "InvalidRepositoryTriggerDestinationArnException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerDestinationArnException" }
              }
            }
          },
          "487": {
            "description": "InvalidRepositoryTriggerRegionException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerRegionException" }
              }
            }
          },
          "488": {
            "description": "InvalidRepositoryTriggerCustomDataException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerCustomDataException" }
              }
            }
          },
          "489": {
            "description": "MaximumBranchesExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MaximumBranchesExceededException" } }
            }
          },
          "490": {
            "description": "InvalidRepositoryTriggerBranchNameException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerBranchNameException" }
              }
            }
          },
          "491": {
            "description": "InvalidRepositoryTriggerEventsException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidRepositoryTriggerEventsException" }
              }
            }
          },
          "492": {
            "description": "RepositoryTriggerNameRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggerNameRequiredException" }
              }
            }
          },
          "493": {
            "description": "RepositoryTriggerDestinationArnRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggerDestinationArnRequiredException" }
              }
            }
          },
          "494": {
            "description": "RepositoryTriggerBranchNameListRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggerBranchNameListRequiredException" }
              }
            }
          },
          "495": {
            "description": "RepositoryTriggerEventsListRequiredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepositoryTriggerEventsListRequiredException" }
              }
            }
          },
          "496": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "497": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "498": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "499": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "500": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\">CodeCommit Resources and Operations</a> in the AWS CodeCommit User Guide.",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "482": {
            "description": "ResourceArnRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceArnRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidResourceArnException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidResourceArnException" } }
            }
          },
          "484": {
            "description": "TagKeysListRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TagKeysListRequiredException" } }
            }
          },
          "485": {
            "description": "InvalidTagKeysListException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTagKeysListException" } }
            }
          },
          "486": {
            "description": "TooManyTagsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyTagsException" } } }
          },
          "487": {
            "description": "InvalidSystemTagUsageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSystemTagUsageException" } }
            }
          },
          "488": {
            "description": "TagPolicyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagPolicyException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateComment": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Replaces the contents of a comment.",
        "operationId": "UpdateComment",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.UpdateComment"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateCommentInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateCommentOutput" } } }
          },
          "480": {
            "description": "CommentContentRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentContentRequiredException" } }
            }
          },
          "481": {
            "description": "CommentContentSizeLimitExceededException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentContentSizeLimitExceededException" }
              }
            }
          },
          "482": {
            "description": "CommentDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentDoesNotExistException" } }
            }
          },
          "483": {
            "description": "CommentIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentIdRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidCommentIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidCommentIdException" } }
            }
          },
          "485": {
            "description": "CommentNotCreatedByCallerException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CommentNotCreatedByCallerException" } }
            }
          },
          "486": {
            "description": "CommentDeletedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CommentDeletedException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Sets or changes the default branch name for the specified repository.</p> <note> <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p> </note>",
        "operationId": "UpdateDefaultBranch",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.UpdateDefaultBranch"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDefaultBranchInput" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "BranchNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchNameRequiredException" } }
            }
          },
          "484": {
            "description": "InvalidBranchNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidBranchNameException" } }
            }
          },
          "485": {
            "description": "BranchDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BranchDoesNotExistException" } }
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Replaces the contents of the description of a pull request.",
        "operationId": "UpdatePullRequestDescription",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.UpdatePullRequestDescription"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePullRequestDescriptionInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePullRequestDescriptionOutput" } }
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidDescriptionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidDescriptionException" } }
            }
          },
          "484": {
            "description": "PullRequestAlreadyClosedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestAlreadyClosedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the status of a pull request. ",
        "operationId": "UpdatePullRequestStatus",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.UpdatePullRequestStatus"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePullRequestStatusInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePullRequestStatusOutput" } }
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidPullRequestStatusUpdateException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidPullRequestStatusUpdateException" }
              }
            }
          },
          "484": {
            "description": "InvalidPullRequestStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestStatusException" } }
            }
          },
          "485": {
            "description": "PullRequestStatusRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestStatusRequiredException" } }
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Replaces the title of a pull request.",
        "operationId": "UpdatePullRequestTitle",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.UpdatePullRequestTitle"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePullRequestTitleInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePullRequestTitleOutput" } }
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestDoesNotExistException" } }
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPullRequestIdException" } }
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestIdRequiredException" } }
            }
          },
          "483": {
            "description": "TitleRequiredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TitleRequiredException" } } }
          },
          "484": {
            "description": "InvalidTitleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTitleException" } } }
          },
          "485": {
            "description": "PullRequestAlreadyClosedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PullRequestAlreadyClosedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Sets or changes the comment or description for a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>",
        "operationId": "UpdateRepositoryDescription",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.UpdateRepositoryDescription"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateRepositoryDescriptionInput" } }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          },
          "483": {
            "description": "InvalidRepositoryDescriptionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryDescriptionException" } }
            }
          },
          "484": {
            "description": "EncryptionIntegrityChecksFailedException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EncryptionIntegrityChecksFailedException" }
              }
            }
          },
          "485": {
            "description": "EncryptionKeyAccessDeniedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyAccessDeniedException" } }
            }
          },
          "486": {
            "description": "EncryptionKeyDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyDisabledException" } }
            }
          },
          "487": {
            "description": "EncryptionKeyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyNotFoundException" } }
            }
          },
          "488": {
            "description": "EncryptionKeyUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptionKeyUnavailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Renames a repository. The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix \".git\" is prohibited. For a full description of the limits on repository names, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">Limits</a> in the AWS CodeCommit User Guide.",
        "operationId": "UpdateRepositoryName",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["CodeCommit_20150413.UpdateRepositoryName"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateRepositoryNameInput" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryDoesNotExistException" } }
            }
          },
          "481": {
            "description": "RepositoryNameExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameExistsException" } }
            }
          },
          "482": {
            "description": "RepositoryNameRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RepositoryNameRequiredException" } }
            }
          },
          "483": {
            "description": "InvalidRepositoryNameException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRepositoryNameException" } }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The CodeCommit multi-region endpoint",
      "url": "http://codecommit.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The CodeCommit multi-region endpoint",
      "url": "https://codecommit.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The CodeCommit endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://codecommit.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The CodeCommit endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://codecommit.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AccountId": { "type": "string" },
      "ActorDoesNotExistException": {},
      "AdditionalData": { "type": "string" },
      "Arn": { "type": "string" },
      "AuthorDoesNotExistException": {},
      "BatchDescribeMergeConflictsError": {
        "description": "Information about errors in a BatchDescribeMergeConflicts operation.",
        "properties": {
          "exceptionName": { "$ref": "#/components/schemas/ExceptionName" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "message": { "$ref": "#/components/schemas/Message" }
        },
        "required": ["filePath", "exceptionName", "message"],
        "type": "object"
      },
      "BatchDescribeMergeConflictsErrors": {
        "items": { "$ref": "#/components/schemas/BatchDescribeMergeConflictsError" },
        "type": "array"
      },
      "BatchDescribeMergeConflictsInput": {
        "properties": {
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "filePaths": { "$ref": "#/components/schemas/FilePaths" },
          "maxConflictFiles": { "$ref": "#/components/schemas/MaxResults" },
          "maxMergeHunks": { "$ref": "#/components/schemas/MaxResults" },
          "mergeOption": { "$ref": "#/components/schemas/MergeOptionTypeEnum" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" }
        },
        "required": ["repositoryName", "destinationCommitSpecifier", "sourceCommitSpecifier", "mergeOption"],
        "type": "object"
      },
      "BatchDescribeMergeConflictsOutput": {
        "properties": {
          "baseCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "conflicts": { "$ref": "#/components/schemas/Conflicts" },
          "destinationCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "errors": { "$ref": "#/components/schemas/BatchDescribeMergeConflictsErrors" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "sourceCommitId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["conflicts", "destinationCommitId", "sourceCommitId"],
        "type": "object"
      },
      "BatchGetCommitsError": {
        "description": "Returns information about errors in a BatchGetCommits operation.",
        "properties": {
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "errorCode": { "$ref": "#/components/schemas/ErrorCode" },
          "errorMessage": { "$ref": "#/components/schemas/ErrorMessage" }
        },
        "type": "object"
      },
      "BatchGetCommitsErrorsList": {
        "items": { "$ref": "#/components/schemas/BatchGetCommitsError" },
        "type": "array"
      },
      "BatchGetCommitsInput": {
        "properties": {
          "commitIds": { "$ref": "#/components/schemas/CommitIdsInputList" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["commitIds", "repositoryName"],
        "type": "object"
      },
      "BatchGetCommitsOutput": {
        "properties": {
          "commits": { "$ref": "#/components/schemas/CommitObjectsList" },
          "errors": { "$ref": "#/components/schemas/BatchGetCommitsErrorsList" }
        },
        "type": "object"
      },
      "BatchGetRepositoriesInput": {
        "description": "Represents the input of a batch get repositories operation.",
        "properties": { "repositoryNames": { "$ref": "#/components/schemas/RepositoryNameList" } },
        "required": ["repositoryNames"],
        "type": "object"
      },
      "BatchGetRepositoriesOutput": {
        "description": "Represents the output of a batch get repositories operation.",
        "properties": {
          "repositories": { "$ref": "#/components/schemas/RepositoryMetadataList" },
          "repositoriesNotFound": { "$ref": "#/components/schemas/RepositoryNotFoundList" }
        },
        "type": "object"
      },
      "BeforeCommitIdAndAfterCommitIdAreSameException": {},
      "BlobIdDoesNotExistException": {},
      "BlobIdRequiredException": {},
      "BlobMetadata": {
        "description": "Returns information about a specific Git blob object.",
        "properties": {
          "blobId": { "$ref": "#/components/schemas/ObjectId" },
          "mode": { "$ref": "#/components/schemas/Mode" },
          "path": { "$ref": "#/components/schemas/Path" }
        },
        "type": "object"
      },
      "BranchDoesNotExistException": {},
      "BranchInfo": {
        "description": "Returns information about a branch.",
        "properties": {
          "branchName": { "$ref": "#/components/schemas/BranchName" },
          "commitId": { "$ref": "#/components/schemas/CommitId" }
        },
        "type": "object"
      },
      "BranchName": { "maxLength": 256, "minLength": 1, "type": "string" },
      "BranchNameExistsException": {},
      "BranchNameIsTagNameException": {},
      "BranchNameList": { "items": { "$ref": "#/components/schemas/BranchName" }, "type": "array" },
      "BranchNameRequiredException": {},
      "CapitalBoolean": { "type": "boolean" },
      "ChangeTypeEnum": { "enum": ["A", "M", "D"], "type": "string" },
      "ClientRequestToken": { "type": "string" },
      "ClientRequestTokenRequiredException": {},
      "CloneUrlHttp": { "type": "string" },
      "CloneUrlSsh": { "type": "string" },
      "Comment": {
        "description": "Returns information about a specific comment.",
        "properties": {
          "authorArn": { "$ref": "#/components/schemas/Arn" },
          "clientRequestToken": { "$ref": "#/components/schemas/ClientRequestToken" },
          "commentId": { "$ref": "#/components/schemas/CommentId" },
          "content": { "$ref": "#/components/schemas/Content" },
          "creationDate": { "$ref": "#/components/schemas/CreationDate" },
          "deleted": { "$ref": "#/components/schemas/IsCommentDeleted" },
          "inReplyTo": { "$ref": "#/components/schemas/CommentId" },
          "lastModifiedDate": { "$ref": "#/components/schemas/LastModifiedDate" }
        },
        "type": "object"
      },
      "CommentContentRequiredException": {},
      "CommentContentSizeLimitExceededException": {},
      "CommentDeletedException": {},
      "CommentDoesNotExistException": {},
      "CommentId": { "type": "string" },
      "CommentIdRequiredException": {},
      "CommentNotCreatedByCallerException": {},
      "Comments": { "items": { "$ref": "#/components/schemas/Comment" }, "type": "array" },
      "CommentsForComparedCommit": {
        "description": "Returns information about comments on the comparison between two commits.",
        "properties": {
          "afterBlobId": { "$ref": "#/components/schemas/ObjectId" },
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeBlobId": { "$ref": "#/components/schemas/ObjectId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "comments": { "$ref": "#/components/schemas/Comments" },
          "location": { "$ref": "#/components/schemas/Location" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "CommentsForComparedCommitData": {
        "items": { "$ref": "#/components/schemas/CommentsForComparedCommit" },
        "type": "array"
      },
      "CommentsForPullRequest": {
        "description": "Returns information about comments on a pull request.",
        "properties": {
          "afterBlobId": { "$ref": "#/components/schemas/ObjectId" },
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeBlobId": { "$ref": "#/components/schemas/ObjectId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "comments": { "$ref": "#/components/schemas/Comments" },
          "location": { "$ref": "#/components/schemas/Location" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "CommentsForPullRequestData": {
        "items": { "$ref": "#/components/schemas/CommentsForPullRequest" },
        "type": "array"
      },
      "Commit": {
        "description": "Returns information about a specific commit.",
        "properties": {
          "additionalData": { "$ref": "#/components/schemas/AdditionalData" },
          "author": { "$ref": "#/components/schemas/UserInfo" },
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "committer": { "$ref": "#/components/schemas/UserInfo" },
          "message": { "$ref": "#/components/schemas/Message" },
          "parents": { "$ref": "#/components/schemas/ParentList" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "type": "object"
      },
      "CommitDoesNotExistException": {},
      "CommitId": { "type": "string" },
      "CommitIdDoesNotExistException": {},
      "CommitIdRequiredException": {},
      "CommitIdsInputList": { "items": { "$ref": "#/components/schemas/ObjectId" }, "type": "array" },
      "CommitIdsLimitExceededException": {},
      "CommitIdsListRequiredException": {},
      "CommitMessageLengthExceededException": {},
      "CommitName": { "type": "string" },
      "CommitObjectsList": { "items": { "$ref": "#/components/schemas/Commit" }, "type": "array" },
      "CommitRequiredException": {},
      "ConcurrentReferenceUpdateException": {},
      "Conflict": {
        "description": "Information about conflicts in a merge operation.",
        "properties": {
          "conflictMetadata": { "$ref": "#/components/schemas/ConflictMetadata" },
          "mergeHunks": { "$ref": "#/components/schemas/MergeHunks" }
        },
        "type": "object"
      },
      "ConflictDetailLevelTypeEnum": { "enum": ["FILE_LEVEL", "LINE_LEVEL"], "type": "string" },
      "ConflictMetadata": {
        "description": "Information about the metadata for a conflict in a merge operation.",
        "properties": {
          "contentConflict": { "$ref": "#/components/schemas/IsContentConflict" },
          "fileModeConflict": { "$ref": "#/components/schemas/IsFileModeConflict" },
          "fileModes": { "$ref": "#/components/schemas/FileModes" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "fileSizes": { "$ref": "#/components/schemas/FileSizes" },
          "isBinaryFile": { "$ref": "#/components/schemas/IsBinaryFile" },
          "mergeOperations": { "$ref": "#/components/schemas/MergeOperations" },
          "numberOfConflicts": { "$ref": "#/components/schemas/NumberOfConflicts" },
          "objectTypeConflict": { "$ref": "#/components/schemas/IsObjectTypeConflict" },
          "objectTypes": { "$ref": "#/components/schemas/ObjectTypes" }
        },
        "type": "object"
      },
      "ConflictMetadataList": { "items": { "$ref": "#/components/schemas/ConflictMetadata" }, "type": "array" },
      "ConflictResolution": {
        "description": "A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.",
        "properties": {
          "deleteFiles": { "$ref": "#/components/schemas/DeleteFileEntries" },
          "replaceContents": { "$ref": "#/components/schemas/ReplaceContentEntries" },
          "setFileModes": { "$ref": "#/components/schemas/SetFileModeEntries" }
        },
        "type": "object"
      },
      "ConflictResolutionStrategyTypeEnum": {
        "enum": ["NONE", "ACCEPT_SOURCE", "ACCEPT_DESTINATION", "AUTOMERGE"],
        "type": "string"
      },
      "Conflicts": { "items": { "$ref": "#/components/schemas/Conflict" }, "type": "array" },
      "Content": { "type": "string" },
      "CreateBranchInput": {
        "description": "Represents the input of a create branch operation.",
        "properties": {
          "branchName": { "$ref": "#/components/schemas/BranchName" },
          "commitId": { "$ref": "#/components/schemas/CommitId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "branchName", "commitId"],
        "type": "object"
      },
      "CreateCommitInput": {
        "properties": {
          "authorName": { "$ref": "#/components/schemas/Name" },
          "branchName": { "$ref": "#/components/schemas/BranchName" },
          "commitMessage": { "$ref": "#/components/schemas/Message" },
          "deleteFiles": { "$ref": "#/components/schemas/DeleteFileEntries" },
          "email": { "$ref": "#/components/schemas/Email" },
          "keepEmptyFolders": { "$ref": "#/components/schemas/KeepEmptyFolders" },
          "parentCommitId": { "$ref": "#/components/schemas/CommitId" },
          "putFiles": { "$ref": "#/components/schemas/PutFileEntries" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "setFileModes": { "$ref": "#/components/schemas/SetFileModeEntries" }
        },
        "required": ["repositoryName", "branchName"],
        "type": "object"
      },
      "CreateCommitOutput": {
        "properties": {
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "filesAdded": { "$ref": "#/components/schemas/FilesMetadata" },
          "filesDeleted": { "$ref": "#/components/schemas/FilesMetadata" },
          "filesUpdated": { "$ref": "#/components/schemas/FilesMetadata" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "type": "object"
      },
      "CreatePullRequestInput": {
        "properties": {
          "clientRequestToken": { "$ref": "#/components/schemas/ClientRequestToken" },
          "description": { "$ref": "#/components/schemas/Description" },
          "targets": { "$ref": "#/components/schemas/TargetList" },
          "title": { "$ref": "#/components/schemas/Title" }
        },
        "required": ["title", "targets"],
        "type": "object"
      },
      "CreatePullRequestOutput": {
        "properties": { "pullRequest": { "$ref": "#/components/schemas/PullRequest" } },
        "required": ["pullRequest"],
        "type": "object"
      },
      "CreateRepositoryInput": {
        "description": "Represents the input of a create repository operation.",
        "properties": {
          "repositoryDescription": { "$ref": "#/components/schemas/RepositoryDescription" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "tags": { "$ref": "#/components/schemas/TagsMap" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "CreateRepositoryOutput": {
        "description": "Represents the output of a create repository operation.",
        "properties": { "repositoryMetadata": { "$ref": "#/components/schemas/RepositoryMetadata" } },
        "type": "object"
      },
      "CreateUnreferencedMergeCommitInput": {
        "properties": {
          "authorName": { "$ref": "#/components/schemas/Name" },
          "commitMessage": { "$ref": "#/components/schemas/Message" },
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolution": { "$ref": "#/components/schemas/ConflictResolution" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "email": { "$ref": "#/components/schemas/Email" },
          "keepEmptyFolders": { "$ref": "#/components/schemas/KeepEmptyFolders" },
          "mergeOption": { "$ref": "#/components/schemas/MergeOptionTypeEnum" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" }
        },
        "required": ["repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier", "mergeOption"],
        "type": "object"
      },
      "CreateUnreferencedMergeCommitOutput": {
        "properties": {
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "type": "object"
      },
      "CreationDate": { "format": "date-time", "type": "string" },
      "Date": { "type": "string" },
      "DefaultBranchCannotBeDeletedException": {},
      "DeleteBranchInput": {
        "description": "Represents the input of a delete branch operation.",
        "properties": {
          "branchName": { "$ref": "#/components/schemas/BranchName" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "branchName"],
        "type": "object"
      },
      "DeleteBranchOutput": {
        "description": "Represents the output of a delete branch operation.",
        "properties": { "deletedBranch": { "$ref": "#/components/schemas/BranchInfo" } },
        "type": "object"
      },
      "DeleteCommentContentInput": {
        "properties": { "commentId": { "$ref": "#/components/schemas/CommentId" } },
        "required": ["commentId"],
        "type": "object"
      },
      "DeleteCommentContentOutput": {
        "properties": { "comment": { "$ref": "#/components/schemas/Comment" } },
        "type": "object"
      },
      "DeleteFileEntries": { "items": { "$ref": "#/components/schemas/DeleteFileEntry" }, "type": "array" },
      "DeleteFileEntry": {
        "description": "A file that will be deleted as part of a commit.",
        "properties": { "filePath": { "$ref": "#/components/schemas/Path" } },
        "required": ["filePath"],
        "type": "object"
      },
      "DeleteFileInput": {
        "properties": {
          "branchName": { "$ref": "#/components/schemas/BranchName" },
          "commitMessage": { "$ref": "#/components/schemas/Message" },
          "email": { "$ref": "#/components/schemas/Email" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "keepEmptyFolders": { "$ref": "#/components/schemas/KeepEmptyFolders" },
          "name": { "$ref": "#/components/schemas/Name" },
          "parentCommitId": { "$ref": "#/components/schemas/CommitId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "branchName", "filePath", "parentCommitId"],
        "type": "object"
      },
      "DeleteFileOutput": {
        "properties": {
          "blobId": { "$ref": "#/components/schemas/ObjectId" },
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["commitId", "blobId", "treeId", "filePath"],
        "type": "object"
      },
      "DeleteRepositoryInput": {
        "description": "Represents the input of a delete repository operation.",
        "properties": { "repositoryName": { "$ref": "#/components/schemas/RepositoryName" } },
        "required": ["repositoryName"],
        "type": "object"
      },
      "DeleteRepositoryOutput": {
        "description": "Represents the output of a delete repository operation.",
        "properties": { "repositoryId": { "$ref": "#/components/schemas/RepositoryId" } },
        "type": "object"
      },
      "DescribeMergeConflictsInput": {
        "properties": {
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "maxMergeHunks": { "$ref": "#/components/schemas/MaxResults" },
          "mergeOption": { "$ref": "#/components/schemas/MergeOptionTypeEnum" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" }
        },
        "required": [
          "repositoryName",
          "destinationCommitSpecifier",
          "sourceCommitSpecifier",
          "mergeOption",
          "filePath"
        ],
        "type": "object"
      },
      "DescribeMergeConflictsOutput": {
        "properties": {
          "baseCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "conflictMetadata": { "$ref": "#/components/schemas/ConflictMetadata" },
          "destinationCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "mergeHunks": { "$ref": "#/components/schemas/MergeHunks" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "sourceCommitId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["conflictMetadata", "mergeHunks", "destinationCommitId", "sourceCommitId"],
        "type": "object"
      },
      "DescribePullRequestEventsInput": {
        "properties": {
          "actorArn": { "$ref": "#/components/schemas/Arn" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "pullRequestEventType": { "$ref": "#/components/schemas/PullRequestEventType" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" }
        },
        "required": ["pullRequestId"],
        "type": "object"
      },
      "DescribePullRequestEventsOutput": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "pullRequestEvents": { "$ref": "#/components/schemas/PullRequestEventList" }
        },
        "required": ["pullRequestEvents"],
        "type": "object"
      },
      "Description": { "maxLength": 10240, "type": "string" },
      "Difference": {
        "description": "Returns information about a set of differences for a commit specifier.",
        "properties": {
          "afterBlob": { "$ref": "#/components/schemas/BlobMetadata" },
          "beforeBlob": { "$ref": "#/components/schemas/BlobMetadata" },
          "changeType": { "$ref": "#/components/schemas/ChangeTypeEnum" }
        },
        "type": "object"
      },
      "DifferenceList": { "items": { "$ref": "#/components/schemas/Difference" }, "type": "array" },
      "DirectoryNameConflictsWithFileNameException": {},
      "Email": { "type": "string" },
      "EncryptionIntegrityChecksFailedException": {},
      "EncryptionKeyAccessDeniedException": {},
      "EncryptionKeyDisabledException": {},
      "EncryptionKeyNotFoundException": {},
      "EncryptionKeyUnavailableException": {},
      "ErrorCode": { "type": "string" },
      "ErrorMessage": { "type": "string" },
      "EventDate": { "format": "date-time", "type": "string" },
      "ExceptionName": { "type": "string" },
      "File": {
        "description": "Returns information about a file in a repository.",
        "properties": {
          "absolutePath": { "$ref": "#/components/schemas/Path" },
          "blobId": { "$ref": "#/components/schemas/ObjectId" },
          "fileMode": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "relativePath": { "$ref": "#/components/schemas/Path" }
        },
        "type": "object"
      },
      "FileContent": { "maxLength": 6291456, "type": "string" },
      "FileContentAndSourceFileSpecifiedException": {},
      "FileContentRequiredException": {},
      "FileContentSizeLimitExceededException": {},
      "FileDoesNotExistException": {},
      "FileEntryRequiredException": {},
      "FileList": { "items": { "$ref": "#/components/schemas/File" }, "type": "array" },
      "FileMetadata": {
        "description": "A file that will be added, updated, or deleted as part of a commit.",
        "properties": {
          "absolutePath": { "$ref": "#/components/schemas/Path" },
          "blobId": { "$ref": "#/components/schemas/ObjectId" },
          "fileMode": { "$ref": "#/components/schemas/FileModeTypeEnum" }
        },
        "type": "object"
      },
      "FileModeRequiredException": {},
      "FileModeTypeEnum": { "enum": ["EXECUTABLE", "NORMAL", "SYMLINK"], "type": "string" },
      "FileModes": {
        "description": "Information about file modes in a merge or pull request.",
        "properties": {
          "base": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "destination": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "source": { "$ref": "#/components/schemas/FileModeTypeEnum" }
        },
        "type": "object"
      },
      "FileNameConflictsWithDirectoryNameException": {},
      "FilePathConflictsWithSubmodulePathException": {},
      "FilePaths": { "items": { "$ref": "#/components/schemas/Path" }, "type": "array" },
      "FileSize": { "type": "integer" },
      "FileSizes": {
        "description": "Information about the size of files in a merge or pull request.",
        "properties": {
          "base": { "$ref": "#/components/schemas/FileSize" },
          "destination": { "$ref": "#/components/schemas/FileSize" },
          "source": { "$ref": "#/components/schemas/FileSize" }
        },
        "type": "object"
      },
      "FileTooLargeException": {},
      "FilesMetadata": { "items": { "$ref": "#/components/schemas/FileMetadata" }, "type": "array" },
      "Folder": {
        "description": "Returns information about a folder in a repository.",
        "properties": {
          "absolutePath": { "$ref": "#/components/schemas/Path" },
          "relativePath": { "$ref": "#/components/schemas/Path" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "type": "object"
      },
      "FolderContentSizeLimitExceededException": {},
      "FolderDoesNotExistException": {},
      "FolderList": { "items": { "$ref": "#/components/schemas/Folder" }, "type": "array" },
      "GetBlobInput": {
        "description": "Represents the input of a get blob operation.",
        "properties": {
          "blobId": { "$ref": "#/components/schemas/ObjectId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "blobId"],
        "type": "object"
      },
      "GetBlobOutput": {
        "description": "Represents the output of a get blob operation.",
        "properties": { "content": { "$ref": "#/components/schemas/blob" } },
        "required": ["content"],
        "type": "object"
      },
      "GetBranchInput": {
        "description": "Represents the input of a get branch operation.",
        "properties": {
          "branchName": { "$ref": "#/components/schemas/BranchName" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "GetBranchOutput": {
        "description": "Represents the output of a get branch operation.",
        "properties": { "branch": { "$ref": "#/components/schemas/BranchInfo" } },
        "type": "object"
      },
      "GetCommentInput": {
        "properties": { "commentId": { "$ref": "#/components/schemas/CommentId" } },
        "required": ["commentId"],
        "type": "object"
      },
      "GetCommentOutput": { "properties": { "comment": { "$ref": "#/components/schemas/Comment" } }, "type": "object" },
      "GetCommentsForComparedCommitInput": {
        "properties": {
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "afterCommitId"],
        "type": "object"
      },
      "GetCommentsForComparedCommitOutput": {
        "properties": {
          "commentsForComparedCommitData": { "$ref": "#/components/schemas/CommentsForComparedCommitData" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "GetCommentsForPullRequestInput": {
        "properties": {
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["pullRequestId"],
        "type": "object"
      },
      "GetCommentsForPullRequestOutput": {
        "properties": {
          "commentsForPullRequestData": { "$ref": "#/components/schemas/CommentsForPullRequestData" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "GetCommitInput": {
        "description": "Represents the input of a get commit operation.",
        "properties": {
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "commitId"],
        "type": "object"
      },
      "GetCommitOutput": {
        "description": "Represents the output of a get commit operation.",
        "properties": { "commit": { "$ref": "#/components/schemas/Commit" } },
        "required": ["commit"],
        "type": "object"
      },
      "GetDifferencesInput": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/Limit" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "afterCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "afterPath": { "$ref": "#/components/schemas/Path" },
          "beforeCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "beforePath": { "$ref": "#/components/schemas/Path" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "afterCommitSpecifier"],
        "type": "object"
      },
      "GetDifferencesOutput": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "differences": { "$ref": "#/components/schemas/DifferenceList" }
        },
        "type": "object"
      },
      "GetFileInput": {
        "properties": {
          "commitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "filePath"],
        "type": "object"
      },
      "GetFileOutput": {
        "properties": {
          "blobId": { "$ref": "#/components/schemas/ObjectId" },
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "fileContent": { "$ref": "#/components/schemas/FileContent" },
          "fileMode": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "fileSize": { "$ref": "#/components/schemas/ObjectSize" }
        },
        "required": ["commitId", "blobId", "filePath", "fileMode", "fileSize", "fileContent"],
        "type": "object"
      },
      "GetFolderInput": {
        "properties": {
          "commitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "folderPath": { "$ref": "#/components/schemas/Path" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "folderPath"],
        "type": "object"
      },
      "GetFolderOutput": {
        "properties": {
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "files": { "$ref": "#/components/schemas/FileList" },
          "folderPath": { "$ref": "#/components/schemas/Path" },
          "subFolders": { "$ref": "#/components/schemas/FolderList" },
          "subModules": { "$ref": "#/components/schemas/SubModuleList" },
          "symbolicLinks": { "$ref": "#/components/schemas/SymbolicLinkList" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["commitId", "folderPath"],
        "type": "object"
      },
      "GetMergeCommitInput": {
        "properties": {
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" }
        },
        "required": ["repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier"],
        "type": "object"
      },
      "GetMergeCommitOutput": {
        "properties": {
          "baseCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "destinationCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "mergedCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "sourceCommitId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "type": "object"
      },
      "GetMergeConflictsInput": {
        "properties": {
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "maxConflictFiles": { "$ref": "#/components/schemas/MaxResults" },
          "mergeOption": { "$ref": "#/components/schemas/MergeOptionTypeEnum" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" }
        },
        "required": ["repositoryName", "destinationCommitSpecifier", "sourceCommitSpecifier", "mergeOption"],
        "type": "object"
      },
      "GetMergeConflictsOutput": {
        "properties": {
          "baseCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "conflictMetadataList": { "$ref": "#/components/schemas/ConflictMetadataList" },
          "destinationCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "mergeable": { "$ref": "#/components/schemas/IsMergeable" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "sourceCommitId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["mergeable", "destinationCommitId", "sourceCommitId", "conflictMetadataList"],
        "type": "object"
      },
      "GetMergeOptionsInput": {
        "properties": {
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" }
        },
        "required": ["repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier"],
        "type": "object"
      },
      "GetMergeOptionsOutput": {
        "properties": {
          "baseCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "destinationCommitId": { "$ref": "#/components/schemas/ObjectId" },
          "mergeOptions": { "$ref": "#/components/schemas/MergeOptions" },
          "sourceCommitId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["mergeOptions", "sourceCommitId", "destinationCommitId", "baseCommitId"],
        "type": "object"
      },
      "GetPullRequestInput": {
        "properties": { "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" } },
        "required": ["pullRequestId"],
        "type": "object"
      },
      "GetPullRequestOutput": {
        "properties": { "pullRequest": { "$ref": "#/components/schemas/PullRequest" } },
        "required": ["pullRequest"],
        "type": "object"
      },
      "GetRepositoryInput": {
        "description": "Represents the input of a get repository operation.",
        "properties": { "repositoryName": { "$ref": "#/components/schemas/RepositoryName" } },
        "required": ["repositoryName"],
        "type": "object"
      },
      "GetRepositoryOutput": {
        "description": "Represents the output of a get repository operation.",
        "properties": { "repositoryMetadata": { "$ref": "#/components/schemas/RepositoryMetadata" } },
        "type": "object"
      },
      "GetRepositoryTriggersInput": {
        "description": "Represents the input of a get repository triggers operation.",
        "properties": { "repositoryName": { "$ref": "#/components/schemas/RepositoryName" } },
        "required": ["repositoryName"],
        "type": "object"
      },
      "GetRepositoryTriggersOutput": {
        "description": "Represents the output of a get repository triggers operation.",
        "properties": {
          "configurationId": { "$ref": "#/components/schemas/RepositoryTriggersConfigurationId" },
          "triggers": { "$ref": "#/components/schemas/RepositoryTriggersList" }
        },
        "type": "object"
      },
      "HunkContent": { "type": "string" },
      "IdempotencyParameterMismatchException": {},
      "InvalidActorArnException": {},
      "InvalidAuthorArnException": {},
      "InvalidBlobIdException": {},
      "InvalidBranchNameException": {},
      "InvalidClientRequestTokenException": {},
      "InvalidCommentIdException": {},
      "InvalidCommitException": {},
      "InvalidCommitIdException": {},
      "InvalidConflictDetailLevelException": {},
      "InvalidConflictResolutionException": {},
      "InvalidConflictResolutionStrategyException": {},
      "InvalidContinuationTokenException": {},
      "InvalidDeletionParameterException": {},
      "InvalidDescriptionException": {},
      "InvalidDestinationCommitSpecifierException": {},
      "InvalidEmailException": {},
      "InvalidFileLocationException": {},
      "InvalidFileModeException": {},
      "InvalidFilePositionException": {},
      "InvalidMaxConflictFilesException": {},
      "InvalidMaxMergeHunksException": {},
      "InvalidMaxResultsException": {},
      "InvalidMergeOptionException": {},
      "InvalidOrderException": {},
      "InvalidParentCommitIdException": {},
      "InvalidPathException": {},
      "InvalidPullRequestEventTypeException": {},
      "InvalidPullRequestIdException": {},
      "InvalidPullRequestStatusException": {},
      "InvalidPullRequestStatusUpdateException": {},
      "InvalidReferenceNameException": {},
      "InvalidRelativeFileVersionEnumException": {},
      "InvalidReplacementContentException": {},
      "InvalidReplacementTypeException": {},
      "InvalidRepositoryDescriptionException": {},
      "InvalidRepositoryNameException": {},
      "InvalidRepositoryTriggerBranchNameException": {},
      "InvalidRepositoryTriggerCustomDataException": {},
      "InvalidRepositoryTriggerDestinationArnException": {},
      "InvalidRepositoryTriggerEventsException": {},
      "InvalidRepositoryTriggerNameException": {},
      "InvalidRepositoryTriggerRegionException": {},
      "InvalidResourceArnException": {},
      "InvalidSortByException": {},
      "InvalidSourceCommitSpecifierException": {},
      "InvalidSystemTagUsageException": {},
      "InvalidTagKeysListException": {},
      "InvalidTagsMapException": {},
      "InvalidTargetBranchException": {},
      "InvalidTargetException": {},
      "InvalidTargetsException": {},
      "InvalidTitleException": {},
      "IsBinaryFile": {
        "description": "Information about whether a file is binary or textual in a merge or pull request operation.",
        "properties": {
          "base": { "$ref": "#/components/schemas/CapitalBoolean" },
          "destination": { "$ref": "#/components/schemas/CapitalBoolean" },
          "source": { "$ref": "#/components/schemas/CapitalBoolean" }
        },
        "type": "object"
      },
      "IsCommentDeleted": { "type": "boolean" },
      "IsContentConflict": { "type": "boolean" },
      "IsFileModeConflict": { "type": "boolean" },
      "IsHunkConflict": { "type": "boolean" },
      "IsMergeable": { "type": "boolean" },
      "IsMerged": { "type": "boolean" },
      "IsMove": { "type": "boolean" },
      "IsObjectTypeConflict": { "type": "boolean" },
      "KeepEmptyFolders": { "type": "boolean" },
      "LastModifiedDate": { "format": "date-time", "type": "string" },
      "Limit": { "type": "integer" },
      "LineNumber": { "type": "integer" },
      "ListBranchesInput": {
        "description": "Represents the input of a list branches operation.",
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "ListBranchesOutput": {
        "description": "Represents the output of a list branches operation.",
        "properties": {
          "branches": { "$ref": "#/components/schemas/BranchNameList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListPullRequestsInput": {
        "properties": {
          "authorArn": { "$ref": "#/components/schemas/Arn" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "pullRequestStatus": { "$ref": "#/components/schemas/PullRequestStatusEnum" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "ListPullRequestsOutput": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "pullRequestIds": { "$ref": "#/components/schemas/PullRequestIdList" }
        },
        "required": ["pullRequestIds"],
        "type": "object"
      },
      "ListRepositoriesInput": {
        "description": "Represents the input of a list repositories operation.",
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "order": { "$ref": "#/components/schemas/OrderEnum" },
          "sortBy": { "$ref": "#/components/schemas/SortByEnum" }
        },
        "type": "object"
      },
      "ListRepositoriesOutput": {
        "description": "Represents the output of a list repositories operation.",
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "repositories": { "$ref": "#/components/schemas/RepositoryNameIdPairList" }
        },
        "type": "object"
      },
      "ListTagsForResourceInput": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "resourceArn": { "$ref": "#/components/schemas/ResourceArn" }
        },
        "required": ["resourceArn"],
        "type": "object"
      },
      "ListTagsForResourceOutput": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "tags": { "$ref": "#/components/schemas/TagsMap" }
        },
        "type": "object"
      },
      "Location": {
        "description": "Returns information about the location of a change or comment in the comparison between two commits or a pull request.",
        "properties": {
          "filePath": { "$ref": "#/components/schemas/Path" },
          "filePosition": { "$ref": "#/components/schemas/Position" },
          "relativeFileVersion": { "$ref": "#/components/schemas/RelativeFileVersionEnum" }
        },
        "type": "object"
      },
      "ManualMergeRequiredException": {},
      "MaxResults": { "type": "integer" },
      "MaximumBranchesExceededException": {},
      "MaximumConflictResolutionEntriesExceededException": {},
      "MaximumFileContentToLoadExceededException": {},
      "MaximumFileEntriesExceededException": {},
      "MaximumItemsToCompareExceededException": {},
      "MaximumOpenPullRequestsExceededException": {},
      "MaximumRepositoryNamesExceededException": {},
      "MaximumRepositoryTriggersExceededException": {},
      "MergeBranchesByFastForwardInput": {
        "properties": {
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "targetBranch": { "$ref": "#/components/schemas/BranchName" }
        },
        "required": ["repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier"],
        "type": "object"
      },
      "MergeBranchesByFastForwardOutput": {
        "properties": {
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "type": "object"
      },
      "MergeBranchesBySquashInput": {
        "properties": {
          "authorName": { "$ref": "#/components/schemas/Name" },
          "commitMessage": { "$ref": "#/components/schemas/Message" },
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolution": { "$ref": "#/components/schemas/ConflictResolution" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "email": { "$ref": "#/components/schemas/Email" },
          "keepEmptyFolders": { "$ref": "#/components/schemas/KeepEmptyFolders" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "targetBranch": { "$ref": "#/components/schemas/BranchName" }
        },
        "required": ["repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier"],
        "type": "object"
      },
      "MergeBranchesBySquashOutput": {
        "properties": {
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "type": "object"
      },
      "MergeBranchesByThreeWayInput": {
        "properties": {
          "authorName": { "$ref": "#/components/schemas/Name" },
          "commitMessage": { "$ref": "#/components/schemas/Message" },
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolution": { "$ref": "#/components/schemas/ConflictResolution" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "destinationCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "email": { "$ref": "#/components/schemas/Email" },
          "keepEmptyFolders": { "$ref": "#/components/schemas/KeepEmptyFolders" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitSpecifier": { "$ref": "#/components/schemas/CommitName" },
          "targetBranch": { "$ref": "#/components/schemas/BranchName" }
        },
        "required": ["repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier"],
        "type": "object"
      },
      "MergeBranchesByThreeWayOutput": {
        "properties": {
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "type": "object"
      },
      "MergeHunk": {
        "description": "Information about merge hunks in a merge or pull request operation.",
        "properties": {
          "base": { "$ref": "#/components/schemas/MergeHunkDetail" },
          "destination": { "$ref": "#/components/schemas/MergeHunkDetail" },
          "isConflict": { "$ref": "#/components/schemas/IsHunkConflict" },
          "source": { "$ref": "#/components/schemas/MergeHunkDetail" }
        },
        "type": "object"
      },
      "MergeHunkDetail": {
        "description": "Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.",
        "properties": {
          "endLine": { "$ref": "#/components/schemas/LineNumber" },
          "hunkContent": { "$ref": "#/components/schemas/HunkContent" },
          "startLine": { "$ref": "#/components/schemas/LineNumber" }
        },
        "type": "object"
      },
      "MergeHunks": { "items": { "$ref": "#/components/schemas/MergeHunk" }, "type": "array" },
      "MergeMetadata": {
        "description": "Returns information about a merge or potential merge between a source reference and a destination reference in a pull request.",
        "properties": {
          "isMerged": { "$ref": "#/components/schemas/IsMerged" },
          "mergeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "mergeOption": { "$ref": "#/components/schemas/MergeOptionTypeEnum" },
          "mergedBy": { "$ref": "#/components/schemas/Arn" }
        },
        "type": "object"
      },
      "MergeOperations": {
        "description": "Information about the file operation conflicts in a merge operation.",
        "properties": {
          "destination": { "$ref": "#/components/schemas/ChangeTypeEnum" },
          "source": { "$ref": "#/components/schemas/ChangeTypeEnum" }
        },
        "type": "object"
      },
      "MergeOptionRequiredException": {},
      "MergeOptionTypeEnum": { "enum": ["FAST_FORWARD_MERGE", "SQUASH_MERGE", "THREE_WAY_MERGE"], "type": "string" },
      "MergeOptions": { "items": { "$ref": "#/components/schemas/MergeOptionTypeEnum" }, "type": "array" },
      "MergePullRequestByFastForwardInput": {
        "properties": {
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["pullRequestId", "repositoryName"],
        "type": "object"
      },
      "MergePullRequestByFastForwardOutput": {
        "properties": { "pullRequest": { "$ref": "#/components/schemas/PullRequest" } },
        "type": "object"
      },
      "MergePullRequestBySquashInput": {
        "properties": {
          "authorName": { "$ref": "#/components/schemas/Name" },
          "commitMessage": { "$ref": "#/components/schemas/Message" },
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolution": { "$ref": "#/components/schemas/ConflictResolution" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "email": { "$ref": "#/components/schemas/Email" },
          "keepEmptyFolders": { "$ref": "#/components/schemas/KeepEmptyFolders" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["pullRequestId", "repositoryName"],
        "type": "object"
      },
      "MergePullRequestBySquashOutput": {
        "properties": { "pullRequest": { "$ref": "#/components/schemas/PullRequest" } },
        "type": "object"
      },
      "MergePullRequestByThreeWayInput": {
        "properties": {
          "authorName": { "$ref": "#/components/schemas/Name" },
          "commitMessage": { "$ref": "#/components/schemas/Message" },
          "conflictDetailLevel": { "$ref": "#/components/schemas/ConflictDetailLevelTypeEnum" },
          "conflictResolution": { "$ref": "#/components/schemas/ConflictResolution" },
          "conflictResolutionStrategy": { "$ref": "#/components/schemas/ConflictResolutionStrategyTypeEnum" },
          "email": { "$ref": "#/components/schemas/Email" },
          "keepEmptyFolders": { "$ref": "#/components/schemas/KeepEmptyFolders" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["pullRequestId", "repositoryName"],
        "type": "object"
      },
      "MergePullRequestByThreeWayOutput": {
        "properties": { "pullRequest": { "$ref": "#/components/schemas/PullRequest" } },
        "type": "object"
      },
      "Message": { "type": "string" },
      "Mode": { "type": "string" },
      "MultipleConflictResolutionEntriesException": {},
      "MultipleRepositoriesInPullRequestException": {},
      "Name": { "type": "string" },
      "NameLengthExceededException": {},
      "NextToken": { "type": "string" },
      "NoChangeException": {},
      "NumberOfConflicts": { "type": "integer" },
      "ObjectId": { "type": "string" },
      "ObjectSize": { "type": "integer" },
      "ObjectTypeEnum": { "enum": ["FILE", "DIRECTORY", "GIT_LINK", "SYMBOLIC_LINK"], "type": "string" },
      "ObjectTypes": {
        "description": "Information about the type of an object in a merge operation.",
        "properties": {
          "base": { "$ref": "#/components/schemas/ObjectTypeEnum" },
          "destination": { "$ref": "#/components/schemas/ObjectTypeEnum" },
          "source": { "$ref": "#/components/schemas/ObjectTypeEnum" }
        },
        "type": "object"
      },
      "OrderEnum": { "enum": ["ascending", "descending"], "type": "string" },
      "ParentCommitDoesNotExistException": {},
      "ParentCommitIdOutdatedException": {},
      "ParentCommitIdRequiredException": {},
      "ParentList": { "items": { "$ref": "#/components/schemas/ObjectId" }, "type": "array" },
      "Path": { "type": "string" },
      "PathDoesNotExistException": {},
      "PathRequiredException": {},
      "Position": { "type": "integer" },
      "PostCommentForComparedCommitInput": {
        "properties": {
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "clientRequestToken": { "$ref": "#/components/schemas/ClientRequestToken" },
          "content": { "$ref": "#/components/schemas/Content" },
          "location": { "$ref": "#/components/schemas/Location" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "afterCommitId", "content"],
        "type": "object"
      },
      "PostCommentForComparedCommitOutput": {
        "properties": {
          "afterBlobId": { "$ref": "#/components/schemas/ObjectId" },
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeBlobId": { "$ref": "#/components/schemas/ObjectId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "comment": { "$ref": "#/components/schemas/Comment" },
          "location": { "$ref": "#/components/schemas/Location" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "PostCommentForPullRequestInput": {
        "properties": {
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "clientRequestToken": { "$ref": "#/components/schemas/ClientRequestToken" },
          "content": { "$ref": "#/components/schemas/Content" },
          "location": { "$ref": "#/components/schemas/Location" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["pullRequestId", "repositoryName", "beforeCommitId", "afterCommitId", "content"],
        "type": "object"
      },
      "PostCommentForPullRequestOutput": {
        "properties": {
          "afterBlobId": { "$ref": "#/components/schemas/ObjectId" },
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeBlobId": { "$ref": "#/components/schemas/ObjectId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "comment": { "$ref": "#/components/schemas/Comment" },
          "location": { "$ref": "#/components/schemas/Location" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "PostCommentReplyInput": {
        "properties": {
          "clientRequestToken": { "$ref": "#/components/schemas/ClientRequestToken" },
          "content": { "$ref": "#/components/schemas/Content" },
          "inReplyTo": { "$ref": "#/components/schemas/CommentId" }
        },
        "required": ["inReplyTo", "content"],
        "type": "object"
      },
      "PostCommentReplyOutput": {
        "properties": { "comment": { "$ref": "#/components/schemas/Comment" } },
        "type": "object"
      },
      "PullRequest": {
        "description": "Returns information about a pull request.",
        "properties": {
          "authorArn": { "$ref": "#/components/schemas/Arn" },
          "clientRequestToken": { "$ref": "#/components/schemas/ClientRequestToken" },
          "creationDate": { "$ref": "#/components/schemas/CreationDate" },
          "description": { "$ref": "#/components/schemas/Description" },
          "lastActivityDate": { "$ref": "#/components/schemas/LastModifiedDate" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "pullRequestStatus": { "$ref": "#/components/schemas/PullRequestStatusEnum" },
          "pullRequestTargets": { "$ref": "#/components/schemas/PullRequestTargetList" },
          "title": { "$ref": "#/components/schemas/Title" }
        },
        "type": "object"
      },
      "PullRequestAlreadyClosedException": {},
      "PullRequestCreatedEventMetadata": {
        "description": "Metadata about the pull request that is used when comparing the pull request source with its destination.",
        "properties": {
          "destinationCommitId": { "$ref": "#/components/schemas/CommitId" },
          "mergeBase": { "$ref": "#/components/schemas/CommitId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommitId": { "$ref": "#/components/schemas/CommitId" }
        },
        "type": "object"
      },
      "PullRequestDoesNotExistException": {},
      "PullRequestEvent": {
        "description": "Returns information about a pull request event.",
        "properties": {
          "actorArn": { "$ref": "#/components/schemas/Arn" },
          "eventDate": { "$ref": "#/components/schemas/EventDate" },
          "pullRequestCreatedEventMetadata": { "$ref": "#/components/schemas/PullRequestCreatedEventMetadata" },
          "pullRequestEventType": { "$ref": "#/components/schemas/PullRequestEventType" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "pullRequestMergedStateChangedEventMetadata": {
            "$ref": "#/components/schemas/PullRequestMergedStateChangedEventMetadata"
          },
          "pullRequestSourceReferenceUpdatedEventMetadata": {
            "$ref": "#/components/schemas/PullRequestSourceReferenceUpdatedEventMetadata"
          },
          "pullRequestStatusChangedEventMetadata": {
            "$ref": "#/components/schemas/PullRequestStatusChangedEventMetadata"
          }
        },
        "type": "object"
      },
      "PullRequestEventList": { "items": { "$ref": "#/components/schemas/PullRequestEvent" }, "type": "array" },
      "PullRequestEventType": {
        "enum": [
          "PULL_REQUEST_CREATED",
          "PULL_REQUEST_STATUS_CHANGED",
          "PULL_REQUEST_SOURCE_REFERENCE_UPDATED",
          "PULL_REQUEST_MERGE_STATE_CHANGED"
        ],
        "type": "string"
      },
      "PullRequestId": { "type": "string" },
      "PullRequestIdList": { "items": { "$ref": "#/components/schemas/PullRequestId" }, "type": "array" },
      "PullRequestIdRequiredException": {},
      "PullRequestMergedStateChangedEventMetadata": {
        "description": "Returns information about the change in the merge state for a pull request event. ",
        "properties": {
          "destinationReference": { "$ref": "#/components/schemas/ReferenceName" },
          "mergeMetadata": { "$ref": "#/components/schemas/MergeMetadata" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "PullRequestSourceReferenceUpdatedEventMetadata": {
        "description": "Information about an update to the source branch of a pull request.",
        "properties": {
          "afterCommitId": { "$ref": "#/components/schemas/CommitId" },
          "beforeCommitId": { "$ref": "#/components/schemas/CommitId" },
          "mergeBase": { "$ref": "#/components/schemas/CommitId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "PullRequestStatusChangedEventMetadata": {
        "description": "Information about a change to the status of a pull request.",
        "properties": { "pullRequestStatus": { "$ref": "#/components/schemas/PullRequestStatusEnum" } },
        "type": "object"
      },
      "PullRequestStatusEnum": { "enum": ["OPEN", "CLOSED"], "type": "string" },
      "PullRequestStatusRequiredException": {},
      "PullRequestTarget": {
        "description": "Returns information about a pull request target.",
        "properties": {
          "destinationCommit": { "$ref": "#/components/schemas/CommitId" },
          "destinationReference": { "$ref": "#/components/schemas/ReferenceName" },
          "mergeBase": { "$ref": "#/components/schemas/CommitId" },
          "mergeMetadata": { "$ref": "#/components/schemas/MergeMetadata" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceCommit": { "$ref": "#/components/schemas/CommitId" },
          "sourceReference": { "$ref": "#/components/schemas/ReferenceName" }
        },
        "type": "object"
      },
      "PullRequestTargetList": { "items": { "$ref": "#/components/schemas/PullRequestTarget" }, "type": "array" },
      "PutFileEntries": { "items": { "$ref": "#/components/schemas/PutFileEntry" }, "type": "array" },
      "PutFileEntry": {
        "description": "Information about a file that will be added or updated as part of a commit.",
        "properties": {
          "fileContent": { "$ref": "#/components/schemas/FileContent" },
          "fileMode": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "sourceFile": { "$ref": "#/components/schemas/SourceFileSpecifier" }
        },
        "required": ["filePath"],
        "type": "object"
      },
      "PutFileEntryConflictException": {},
      "PutFileInput": {
        "properties": {
          "branchName": { "$ref": "#/components/schemas/BranchName" },
          "commitMessage": { "$ref": "#/components/schemas/Message" },
          "email": { "$ref": "#/components/schemas/Email" },
          "fileContent": { "$ref": "#/components/schemas/FileContent" },
          "fileMode": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "name": { "$ref": "#/components/schemas/Name" },
          "parentCommitId": { "$ref": "#/components/schemas/CommitId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "branchName", "fileContent", "filePath"],
        "type": "object"
      },
      "PutFileOutput": {
        "properties": {
          "blobId": { "$ref": "#/components/schemas/ObjectId" },
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "treeId": { "$ref": "#/components/schemas/ObjectId" }
        },
        "required": ["commitId", "blobId", "treeId"],
        "type": "object"
      },
      "PutRepositoryTriggersInput": {
        "description": "Represents the input ofa put repository triggers operation.",
        "properties": {
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "triggers": { "$ref": "#/components/schemas/RepositoryTriggersList" }
        },
        "required": ["repositoryName", "triggers"],
        "type": "object"
      },
      "PutRepositoryTriggersOutput": {
        "description": "Represents the output of a put repository triggers operation.",
        "properties": { "configurationId": { "$ref": "#/components/schemas/RepositoryTriggersConfigurationId" } },
        "type": "object"
      },
      "ReferenceDoesNotExistException": {},
      "ReferenceName": { "type": "string" },
      "ReferenceNameRequiredException": {},
      "ReferenceTypeNotSupportedException": {},
      "RelativeFileVersionEnum": { "enum": ["BEFORE", "AFTER"], "type": "string" },
      "ReplaceContentEntries": { "items": { "$ref": "#/components/schemas/ReplaceContentEntry" }, "type": "array" },
      "ReplaceContentEntry": {
        "description": "Information about a replacement content entry in the conflict of a merge or pull request operation.",
        "properties": {
          "content": { "$ref": "#/components/schemas/FileContent" },
          "fileMode": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "filePath": { "$ref": "#/components/schemas/Path" },
          "replacementType": { "$ref": "#/components/schemas/ReplacementTypeEnum" }
        },
        "required": ["filePath", "replacementType"],
        "type": "object"
      },
      "ReplacementContentRequiredException": {},
      "ReplacementTypeEnum": {
        "enum": ["KEEP_BASE", "KEEP_SOURCE", "KEEP_DESTINATION", "USE_NEW_CONTENT"],
        "type": "string"
      },
      "ReplacementTypeRequiredException": {},
      "RepositoryDescription": { "maxLength": 1000, "type": "string" },
      "RepositoryDoesNotExistException": {},
      "RepositoryId": { "type": "string" },
      "RepositoryLimitExceededException": {},
      "RepositoryMetadata": {
        "description": "Information about a repository.",
        "properties": {
          "Arn": { "$ref": "#/components/schemas/Arn" },
          "accountId": { "$ref": "#/components/schemas/AccountId" },
          "cloneUrlHttp": { "$ref": "#/components/schemas/CloneUrlHttp" },
          "cloneUrlSsh": { "$ref": "#/components/schemas/CloneUrlSsh" },
          "creationDate": { "$ref": "#/components/schemas/CreationDate" },
          "defaultBranch": { "$ref": "#/components/schemas/BranchName" },
          "lastModifiedDate": { "$ref": "#/components/schemas/LastModifiedDate" },
          "repositoryDescription": { "$ref": "#/components/schemas/RepositoryDescription" },
          "repositoryId": { "$ref": "#/components/schemas/RepositoryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "RepositoryMetadataList": { "items": { "$ref": "#/components/schemas/RepositoryMetadata" }, "type": "array" },
      "RepositoryName": { "maxLength": 100, "minLength": 1, "pattern": "[\\w\\.-]+", "type": "string" },
      "RepositoryNameExistsException": {},
      "RepositoryNameIdPair": {
        "description": "Information about a repository name and ID.",
        "properties": {
          "repositoryId": { "$ref": "#/components/schemas/RepositoryId" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "type": "object"
      },
      "RepositoryNameIdPairList": { "items": { "$ref": "#/components/schemas/RepositoryNameIdPair" }, "type": "array" },
      "RepositoryNameList": { "items": { "$ref": "#/components/schemas/RepositoryName" }, "type": "array" },
      "RepositoryNameRequiredException": {},
      "RepositoryNamesRequiredException": {},
      "RepositoryNotAssociatedWithPullRequestException": {},
      "RepositoryNotFoundList": { "items": { "$ref": "#/components/schemas/RepositoryName" }, "type": "array" },
      "RepositoryTrigger": {
        "description": "Information about a trigger for a repository.",
        "properties": {
          "branches": { "$ref": "#/components/schemas/BranchNameList" },
          "customData": { "$ref": "#/components/schemas/RepositoryTriggerCustomData" },
          "destinationArn": { "$ref": "#/components/schemas/Arn" },
          "events": { "$ref": "#/components/schemas/RepositoryTriggerEventList" },
          "name": { "$ref": "#/components/schemas/RepositoryTriggerName" }
        },
        "required": ["name", "destinationArn", "events"],
        "type": "object"
      },
      "RepositoryTriggerBranchNameListRequiredException": {},
      "RepositoryTriggerCustomData": { "type": "string" },
      "RepositoryTriggerDestinationArnRequiredException": {},
      "RepositoryTriggerEventEnum": {
        "enum": ["all", "updateReference", "createReference", "deleteReference"],
        "type": "string"
      },
      "RepositoryTriggerEventList": {
        "items": { "$ref": "#/components/schemas/RepositoryTriggerEventEnum" },
        "type": "array"
      },
      "RepositoryTriggerEventsListRequiredException": {},
      "RepositoryTriggerExecutionFailure": {
        "description": "A trigger failed to run.",
        "properties": {
          "failureMessage": { "$ref": "#/components/schemas/RepositoryTriggerExecutionFailureMessage" },
          "trigger": { "$ref": "#/components/schemas/RepositoryTriggerName" }
        },
        "type": "object"
      },
      "RepositoryTriggerExecutionFailureList": {
        "items": { "$ref": "#/components/schemas/RepositoryTriggerExecutionFailure" },
        "type": "array"
      },
      "RepositoryTriggerExecutionFailureMessage": { "type": "string" },
      "RepositoryTriggerName": { "type": "string" },
      "RepositoryTriggerNameList": {
        "items": { "$ref": "#/components/schemas/RepositoryTriggerName" },
        "type": "array"
      },
      "RepositoryTriggerNameRequiredException": {},
      "RepositoryTriggersConfigurationId": { "type": "string" },
      "RepositoryTriggersList": { "items": { "$ref": "#/components/schemas/RepositoryTrigger" }, "type": "array" },
      "RepositoryTriggersListRequiredException": {},
      "ResourceArn": { "type": "string" },
      "ResourceArnRequiredException": {},
      "RestrictedSourceFileException": {},
      "SameFileContentException": {},
      "SamePathRequestException": {},
      "SetFileModeEntries": { "items": { "$ref": "#/components/schemas/SetFileModeEntry" }, "type": "array" },
      "SetFileModeEntry": {
        "description": "Information about the file mode changes.",
        "properties": {
          "fileMode": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "filePath": { "$ref": "#/components/schemas/Path" }
        },
        "required": ["filePath", "fileMode"],
        "type": "object"
      },
      "SortByEnum": { "enum": ["repositoryName", "lastModifiedDate"], "type": "string" },
      "SourceAndDestinationAreSameException": {},
      "SourceFileOrContentRequiredException": {},
      "SourceFileSpecifier": {
        "description": "Information about a source file that is part of changes made in a commit.",
        "properties": {
          "filePath": { "$ref": "#/components/schemas/Path" },
          "isMove": { "$ref": "#/components/schemas/IsMove" }
        },
        "required": ["filePath"],
        "type": "object"
      },
      "SubModule": {
        "description": "Returns information about a submodule reference in a repository folder.",
        "properties": {
          "absolutePath": { "$ref": "#/components/schemas/Path" },
          "commitId": { "$ref": "#/components/schemas/ObjectId" },
          "relativePath": { "$ref": "#/components/schemas/Path" }
        },
        "type": "object"
      },
      "SubModuleList": { "items": { "$ref": "#/components/schemas/SubModule" }, "type": "array" },
      "SymbolicLink": {
        "description": "Returns information about a symbolic link in a repository folder.",
        "properties": {
          "absolutePath": { "$ref": "#/components/schemas/Path" },
          "blobId": { "$ref": "#/components/schemas/ObjectId" },
          "fileMode": { "$ref": "#/components/schemas/FileModeTypeEnum" },
          "relativePath": { "$ref": "#/components/schemas/Path" }
        },
        "type": "object"
      },
      "SymbolicLinkList": { "items": { "$ref": "#/components/schemas/SymbolicLink" }, "type": "array" },
      "TagKey": { "maxLength": 128, "minLength": 1, "type": "string" },
      "TagKeysList": { "items": { "$ref": "#/components/schemas/TagKey" }, "type": "array" },
      "TagKeysListRequiredException": {},
      "TagPolicyException": {},
      "TagResourceInput": {
        "properties": {
          "resourceArn": { "$ref": "#/components/schemas/ResourceArn" },
          "tags": { "$ref": "#/components/schemas/TagsMap" }
        },
        "required": ["resourceArn", "tags"],
        "type": "object"
      },
      "TagValue": { "maxLength": 256, "minLength": 0, "type": "string" },
      "TagsMap": { "additionalProperties": { "$ref": "#/components/schemas/TagValue" }, "type": "object" },
      "TagsMapRequiredException": {},
      "Target": {
        "description": "Returns information about a target for a pull request.",
        "properties": {
          "destinationReference": { "$ref": "#/components/schemas/ReferenceName" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "sourceReference": { "$ref": "#/components/schemas/ReferenceName" }
        },
        "required": ["repositoryName", "sourceReference"],
        "type": "object"
      },
      "TargetList": { "items": { "$ref": "#/components/schemas/Target" }, "type": "array" },
      "TargetRequiredException": {},
      "TargetsRequiredException": {},
      "TestRepositoryTriggersInput": {
        "description": "Represents the input of a test repository triggers operation.",
        "properties": {
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" },
          "triggers": { "$ref": "#/components/schemas/RepositoryTriggersList" }
        },
        "required": ["repositoryName", "triggers"],
        "type": "object"
      },
      "TestRepositoryTriggersOutput": {
        "description": "Represents the output of a test repository triggers operation.",
        "properties": {
          "failedExecutions": { "$ref": "#/components/schemas/RepositoryTriggerExecutionFailureList" },
          "successfulExecutions": { "$ref": "#/components/schemas/RepositoryTriggerNameList" }
        },
        "type": "object"
      },
      "TipOfSourceReferenceIsDifferentException": {},
      "TipsDivergenceExceededException": {},
      "Title": { "maxLength": 150, "type": "string" },
      "TitleRequiredException": {},
      "TooManyTagsException": {},
      "UntagResourceInput": {
        "properties": {
          "resourceArn": { "$ref": "#/components/schemas/ResourceArn" },
          "tagKeys": { "$ref": "#/components/schemas/TagKeysList" }
        },
        "required": ["resourceArn", "tagKeys"],
        "type": "object"
      },
      "UpdateCommentInput": {
        "properties": {
          "commentId": { "$ref": "#/components/schemas/CommentId" },
          "content": { "$ref": "#/components/schemas/Content" }
        },
        "required": ["commentId", "content"],
        "type": "object"
      },
      "UpdateCommentOutput": {
        "properties": { "comment": { "$ref": "#/components/schemas/Comment" } },
        "type": "object"
      },
      "UpdateDefaultBranchInput": {
        "description": "Represents the input of an update default branch operation.",
        "properties": {
          "defaultBranchName": { "$ref": "#/components/schemas/BranchName" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName", "defaultBranchName"],
        "type": "object"
      },
      "UpdatePullRequestDescriptionInput": {
        "properties": {
          "description": { "$ref": "#/components/schemas/Description" },
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" }
        },
        "required": ["pullRequestId", "description"],
        "type": "object"
      },
      "UpdatePullRequestDescriptionOutput": {
        "properties": { "pullRequest": { "$ref": "#/components/schemas/PullRequest" } },
        "required": ["pullRequest"],
        "type": "object"
      },
      "UpdatePullRequestStatusInput": {
        "properties": {
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "pullRequestStatus": { "$ref": "#/components/schemas/PullRequestStatusEnum" }
        },
        "required": ["pullRequestId", "pullRequestStatus"],
        "type": "object"
      },
      "UpdatePullRequestStatusOutput": {
        "properties": { "pullRequest": { "$ref": "#/components/schemas/PullRequest" } },
        "required": ["pullRequest"],
        "type": "object"
      },
      "UpdatePullRequestTitleInput": {
        "properties": {
          "pullRequestId": { "$ref": "#/components/schemas/PullRequestId" },
          "title": { "$ref": "#/components/schemas/Title" }
        },
        "required": ["pullRequestId", "title"],
        "type": "object"
      },
      "UpdatePullRequestTitleOutput": {
        "properties": { "pullRequest": { "$ref": "#/components/schemas/PullRequest" } },
        "required": ["pullRequest"],
        "type": "object"
      },
      "UpdateRepositoryDescriptionInput": {
        "description": "Represents the input of an update repository description operation.",
        "properties": {
          "repositoryDescription": { "$ref": "#/components/schemas/RepositoryDescription" },
          "repositoryName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["repositoryName"],
        "type": "object"
      },
      "UpdateRepositoryNameInput": {
        "description": "Represents the input of an update repository description operation.",
        "properties": {
          "newName": { "$ref": "#/components/schemas/RepositoryName" },
          "oldName": { "$ref": "#/components/schemas/RepositoryName" }
        },
        "required": ["oldName", "newName"],
        "type": "object"
      },
      "UserInfo": {
        "description": "Information about the user who made a specified commit.",
        "properties": {
          "date": { "$ref": "#/components/schemas/Date" },
          "email": { "$ref": "#/components/schemas/Email" },
          "name": { "$ref": "#/components/schemas/Name" }
        },
        "type": "object"
      },
      "blob": { "type": "string" }
    }
  }
}
