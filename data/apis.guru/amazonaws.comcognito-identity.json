{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Cognito Identity",
    "version": "2014-06-30",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-identity-2014-06-30.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "cognito-identity"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/cognito-identity/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=AWSCognitoIdentityService.CreateIdentityPool": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The limit on identity pools is 60 per account. The keys for <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "CreateIdentityPool",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.CreateIdentityPool"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateIdentityPoolInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IdentityPool" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentities": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes identities from an identity pool. You can specify a list of 1-60 identities that you want to delete.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "DeleteIdentities",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.DeleteIdentities"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteIdentitiesInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteIdentitiesResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "482": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentityPool": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes an identity pool. Once a pool is deleted, users will not be able to authenticate with the pool.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "DeleteIdentityPool",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.DeleteIdentityPool"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteIdentityPoolInput" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentity": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns metadata related to the given identity, including when the identity was created and any associated linked logins.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "DescribeIdentity",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.DescribeIdentity"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeIdentityInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IdentityDescription" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentityPool": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "DescribeIdentityPool",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.DescribeIdentityPool"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeIdentityPoolInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IdentityPool" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetCredentialsForIdentity": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns credentials for the provided identity ID. Any provided logins will be validated against supported login providers. If the token is for cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service with the appropriate role for the token.</p> <p>This is a public API. You do not need any credentials to call this API.</p>",
        "operationId": "GetCredentialsForIdentity",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.GetCredentialsForIdentity"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetCredentialsForIdentityInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetCredentialsForIdentityResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InvalidIdentityPoolConfigurationException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidIdentityPoolConfigurationException" }
              }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "487": {
            "description": "ExternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetId": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.</p> <p>This is a public API. You do not need any credentials to call this API.</p>",
        "operationId": "GetId",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.GetId"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetIdInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetIdResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "487": {
            "description": "ExternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetIdentityPoolRoles": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Gets the roles for an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "GetIdentityPoolRoles",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.GetIdentityPoolRoles"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetIdentityPoolRolesInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetIdentityPoolRolesResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdToken": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by <a>GetId</a>. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.</p> <p>The OpenId token is valid for 10 minutes.</p> <p>This is a public API. You do not need any credentials to call this API.</p>",
        "operationId": "GetOpenIdToken",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.GetOpenIdToken"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetOpenIdTokenInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetOpenIdTokenResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "486": {
            "description": "ExternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the <code>Logins</code> map, which is linked to the identity pool. The developer provider is the \"domain\" by which Cognito will refer to your users.</p> <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the <code>IdentityId</code> should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing <code>IdentityId</code>. This API will create the identity in the specified <code>IdentityPoolId</code>.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "GetOpenIdTokenForDeveloperIdentity",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetOpenIdTokenForDeveloperIdentityInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetOpenIdTokenForDeveloperIdentityResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "486": {
            "description": "DeveloperUserAlreadyRegisteredException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeveloperUserAlreadyRegisteredException" }
              }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.ListIdentities": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists the identities in an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "ListIdentities",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.ListIdentities"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListIdentitiesInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListIdentitiesResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.ListIdentityPools": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists all of the Cognito identity pools registered for your account.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "ListIdentityPools",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.ListIdentityPools"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListIdentityPoolsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListIdentityPoolsResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.ListTagsForResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p> <p>A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>You can use this action up to 10 times per second, per account.</p>",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.ListTagsForResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.LookupDeveloperIdentity": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves the <code>IdentityID</code> associated with a <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code> values associated with an <code>IdentityId</code> for an existing identity. Either <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a <code>ResourceConflictException</code> is thrown.</p> <p> <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane operations: for example, to enable customer service to locate an identity ID by username. If you are using it for higher-volume operations such as user authentication, your requests are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a better option for higher-volume operations for user authentication.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "LookupDeveloperIdentity",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.LookupDeveloperIdentity"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/LookupDeveloperIdentityInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LookupDeveloperIdentityResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.MergeDeveloperIdentities": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Merges two users having different <code>IdentityId</code>s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.</p> <p>The number of linked logins is limited to 20. So, the number of linked logins for the source user, <code>SourceUserIdentifier</code>, and the destination user, <code>DestinationUserIdentifier</code>, together should not be larger than 20. Otherwise, an exception will be thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "MergeDeveloperIdentities",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.MergeDeveloperIdentities"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MergeDeveloperIdentitiesInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MergeDeveloperIdentitiesResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.SetIdentityPoolRoles": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "SetIdentityPoolRoles",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.SetIdentityPoolRoles"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SetIdentityPoolRolesInput" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can use to categorize and manage identity pools in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of an identity pool, one for testing and another for production, you might assign an <code>Environment</code> tag key to both identity pools. The value of this key might be <code>Test</code> for one identity pool and <code>Production</code> for the other.</p> <p>Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your identity pools. In an IAM policy, you can constrain permissions for identity pools based on specific tags or tag values.</p> <p>You can use this action up to 5 times per second, per account. An identity pool can have as many as 50 tags.</p>",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.UnlinkDeveloperIdentity": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "UnlinkDeveloperIdentity",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.UnlinkDeveloperIdentity"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UnlinkDeveloperIdentityInput" } }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.UnlinkIdentity": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.</p> <p>This is a public API. You do not need any credentials to call this API.</p>",
        "operationId": "UnlinkIdentity",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.UnlinkIdentity"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnlinkIdentityInput" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "486": {
            "description": "ExternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExternalServiceException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes the specified tags from an Amazon Cognito identity pool. You can use this action up to 5 times per second, per account",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.UpdateIdentityPool": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "UpdateIdentityPool",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityService.UpdateIdentityPool"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IdentityPool" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IdentityPool" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceConflictException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "487": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The Amazon Cognito Identity multi-region endpoint",
      "url": "http://cognito-identity.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon Cognito Identity multi-region endpoint",
      "url": "https://cognito-identity.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon Cognito Identity endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://cognito-identity.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Amazon Cognito Identity endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://cognito-identity.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "ARNString": { "maxLength": 2048, "minLength": 20, "type": "string" },
      "AccessKeyString": { "type": "string" },
      "AccountId": { "maxLength": 15, "minLength": 1, "pattern": "\\d+", "type": "string" },
      "AmbiguousRoleResolutionType": { "enum": ["AuthenticatedRole", "Deny"], "type": "string" },
      "ClaimName": {
        "maxLength": 64,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "ClaimValue": { "maxLength": 128, "minLength": 1, "type": "string" },
      "CognitoIdentityProvider": {
        "description": "A provider representing an Amazon Cognito user pool and its client ID.",
        "properties": {
          "ClientId": { "$ref": "#/components/schemas/CognitoIdentityProviderClientId" },
          "ProviderName": { "$ref": "#/components/schemas/CognitoIdentityProviderName" },
          "ServerSideTokenCheck": { "$ref": "#/components/schemas/CognitoIdentityProviderTokenCheck" }
        },
        "type": "object"
      },
      "CognitoIdentityProviderClientId": { "maxLength": 128, "minLength": 1, "pattern": "[\\w_]+", "type": "string" },
      "CognitoIdentityProviderList": {
        "items": { "$ref": "#/components/schemas/CognitoIdentityProvider" },
        "type": "array"
      },
      "CognitoIdentityProviderName": { "maxLength": 128, "minLength": 1, "pattern": "[\\w._:/-]+", "type": "string" },
      "CognitoIdentityProviderTokenCheck": { "type": "boolean" },
      "ConcurrentModificationException": {},
      "CreateIdentityPoolInput": {
        "description": "Input to the CreateIdentityPool action.",
        "properties": {
          "AllowUnauthenticatedIdentities": { "$ref": "#/components/schemas/IdentityPoolUnauthenticated" },
          "CognitoIdentityProviders": { "$ref": "#/components/schemas/CognitoIdentityProviderList" },
          "DeveloperProviderName": { "$ref": "#/components/schemas/DeveloperProviderName" },
          "IdentityPoolName": { "$ref": "#/components/schemas/IdentityPoolName" },
          "IdentityPoolTags": { "$ref": "#/components/schemas/IdentityPoolTagsType" },
          "OpenIdConnectProviderARNs": { "$ref": "#/components/schemas/OIDCProviderList" },
          "SamlProviderARNs": { "$ref": "#/components/schemas/SAMLProviderList" },
          "SupportedLoginProviders": { "$ref": "#/components/schemas/IdentityProviders" }
        },
        "required": ["IdentityPoolName", "AllowUnauthenticatedIdentities"],
        "type": "object"
      },
      "Credentials": {
        "description": "Credentials for the provided identity ID.",
        "properties": {
          "AccessKeyId": { "$ref": "#/components/schemas/AccessKeyString" },
          "Expiration": { "$ref": "#/components/schemas/DateType" },
          "SecretKey": { "$ref": "#/components/schemas/SecretKeyString" },
          "SessionToken": { "$ref": "#/components/schemas/SessionTokenString" }
        },
        "type": "object"
      },
      "DateType": { "format": "date-time", "type": "string" },
      "DeleteIdentitiesInput": {
        "description": "Input to the <code>DeleteIdentities</code> action.",
        "properties": { "IdentityIdsToDelete": { "$ref": "#/components/schemas/IdentityIdList" } },
        "required": ["IdentityIdsToDelete"],
        "type": "object"
      },
      "DeleteIdentitiesResponse": {
        "description": "Returned in response to a successful <code>DeleteIdentities</code> operation.",
        "properties": { "UnprocessedIdentityIds": { "$ref": "#/components/schemas/UnprocessedIdentityIdList" } },
        "type": "object"
      },
      "DeleteIdentityPoolInput": {
        "description": "Input to the DeleteIdentityPool action.",
        "properties": { "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" } },
        "required": ["IdentityPoolId"],
        "type": "object"
      },
      "DescribeIdentityInput": {
        "description": "Input to the <code>DescribeIdentity</code> action.",
        "properties": { "IdentityId": { "$ref": "#/components/schemas/IdentityId" } },
        "required": ["IdentityId"],
        "type": "object"
      },
      "DescribeIdentityPoolInput": {
        "description": "Input to the DescribeIdentityPool action.",
        "properties": { "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" } },
        "required": ["IdentityPoolId"],
        "type": "object"
      },
      "DeveloperProviderName": { "maxLength": 128, "minLength": 1, "pattern": "[\\w._-]+", "type": "string" },
      "DeveloperUserAlreadyRegisteredException": {},
      "DeveloperUserIdentifier": { "maxLength": 1024, "minLength": 1, "type": "string" },
      "DeveloperUserIdentifierList": {
        "items": { "$ref": "#/components/schemas/DeveloperUserIdentifier" },
        "type": "array"
      },
      "ErrorCode": { "enum": ["AccessDenied", "InternalServerError"], "type": "string" },
      "ExternalServiceException": {},
      "GetCredentialsForIdentityInput": {
        "description": "Input to the <code>GetCredentialsForIdentity</code> action.",
        "properties": {
          "CustomRoleArn": { "$ref": "#/components/schemas/ARNString" },
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "Logins": { "$ref": "#/components/schemas/LoginsMap" }
        },
        "required": ["IdentityId"],
        "type": "object"
      },
      "GetCredentialsForIdentityResponse": {
        "description": "Returned in response to a successful <code>GetCredentialsForIdentity</code> operation.",
        "properties": {
          "Credentials": { "$ref": "#/components/schemas/Credentials" },
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" }
        },
        "type": "object"
      },
      "GetIdInput": {
        "description": "Input to the GetId action.",
        "properties": {
          "AccountId": { "$ref": "#/components/schemas/AccountId" },
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "Logins": { "$ref": "#/components/schemas/LoginsMap" }
        },
        "required": ["IdentityPoolId"],
        "type": "object"
      },
      "GetIdResponse": {
        "description": "Returned in response to a GetId request.",
        "properties": { "IdentityId": { "$ref": "#/components/schemas/IdentityId" } },
        "type": "object"
      },
      "GetIdentityPoolRolesInput": {
        "description": "Input to the <code>GetIdentityPoolRoles</code> action.",
        "properties": { "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" } },
        "required": ["IdentityPoolId"],
        "type": "object"
      },
      "GetIdentityPoolRolesResponse": {
        "description": "Returned in response to a successful <code>GetIdentityPoolRoles</code> operation.",
        "properties": {
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "RoleMappings": { "$ref": "#/components/schemas/RoleMappingMap" },
          "Roles": { "$ref": "#/components/schemas/RolesMap" }
        },
        "type": "object"
      },
      "GetOpenIdTokenForDeveloperIdentityInput": {
        "description": "Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.",
        "properties": {
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "Logins": { "$ref": "#/components/schemas/LoginsMap" },
          "TokenDuration": { "$ref": "#/components/schemas/TokenDuration" }
        },
        "required": ["IdentityPoolId", "Logins"],
        "type": "object"
      },
      "GetOpenIdTokenForDeveloperIdentityResponse": {
        "description": "Returned in response to a successful <code>GetOpenIdTokenForDeveloperIdentity</code> request.",
        "properties": {
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "Token": { "$ref": "#/components/schemas/OIDCToken" }
        },
        "type": "object"
      },
      "GetOpenIdTokenInput": {
        "description": "Input to the GetOpenIdToken action.",
        "properties": {
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "Logins": { "$ref": "#/components/schemas/LoginsMap" }
        },
        "required": ["IdentityId"],
        "type": "object"
      },
      "GetOpenIdTokenResponse": {
        "description": "Returned in response to a successful GetOpenIdToken request.",
        "properties": {
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "Token": { "$ref": "#/components/schemas/OIDCToken" }
        },
        "type": "object"
      },
      "HideDisabled": { "type": "boolean" },
      "IdentitiesList": { "items": { "$ref": "#/components/schemas/IdentityDescription" }, "type": "array" },
      "IdentityDescription": {
        "description": "A description of the identity.",
        "properties": {
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "Logins": { "$ref": "#/components/schemas/LoginsList" }
        },
        "type": "object"
      },
      "IdentityId": { "maxLength": 55, "minLength": 1, "pattern": "[\\w-]+:[0-9a-f-]+", "type": "string" },
      "IdentityIdList": {
        "items": { "$ref": "#/components/schemas/IdentityId" },
        "maxItems": 60,
        "minItems": 1,
        "type": "array"
      },
      "IdentityPool": {
        "description": "An object representing an Amazon Cognito identity pool.",
        "properties": {
          "AllowUnauthenticatedIdentities": { "$ref": "#/components/schemas/IdentityPoolUnauthenticated" },
          "CognitoIdentityProviders": { "$ref": "#/components/schemas/CognitoIdentityProviderList" },
          "DeveloperProviderName": { "$ref": "#/components/schemas/DeveloperProviderName" },
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "IdentityPoolName": { "$ref": "#/components/schemas/IdentityPoolName" },
          "IdentityPoolTags": { "$ref": "#/components/schemas/IdentityPoolTagsType" },
          "OpenIdConnectProviderARNs": { "$ref": "#/components/schemas/OIDCProviderList" },
          "SamlProviderARNs": { "$ref": "#/components/schemas/SAMLProviderList" },
          "SupportedLoginProviders": { "$ref": "#/components/schemas/IdentityProviders" }
        },
        "required": ["IdentityPoolId", "IdentityPoolName", "AllowUnauthenticatedIdentities"],
        "type": "object"
      },
      "IdentityPoolId": { "maxLength": 55, "minLength": 1, "pattern": "[\\w-]+:[0-9a-f-]+", "type": "string" },
      "IdentityPoolName": { "maxLength": 128, "minLength": 1, "pattern": "[\\w ]+", "type": "string" },
      "IdentityPoolShortDescription": {
        "description": "A description of the identity pool.",
        "properties": {
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "IdentityPoolName": { "$ref": "#/components/schemas/IdentityPoolName" }
        },
        "type": "object"
      },
      "IdentityPoolTagsListType": { "items": { "$ref": "#/components/schemas/TagKeysType" }, "type": "array" },
      "IdentityPoolTagsType": {
        "additionalProperties": { "$ref": "#/components/schemas/TagValueType" },
        "type": "object"
      },
      "IdentityPoolUnauthenticated": { "type": "boolean" },
      "IdentityPoolsList": {
        "items": { "$ref": "#/components/schemas/IdentityPoolShortDescription" },
        "type": "array"
      },
      "IdentityProviderId": { "maxLength": 128, "minLength": 1, "pattern": "[\\w.;_/-]+", "type": "string" },
      "IdentityProviderName": { "maxLength": 128, "minLength": 1, "type": "string" },
      "IdentityProviderToken": { "maxLength": 50000, "minLength": 1, "type": "string" },
      "IdentityProviders": {
        "additionalProperties": { "$ref": "#/components/schemas/IdentityProviderId" },
        "maxProperties": 10,
        "type": "object"
      },
      "InternalErrorException": {},
      "InvalidIdentityPoolConfigurationException": {},
      "InvalidParameterException": {},
      "LimitExceededException": {},
      "ListIdentitiesInput": {
        "description": "Input to the ListIdentities action.",
        "properties": {
          "HideDisabled": { "$ref": "#/components/schemas/HideDisabled" },
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "MaxResults": { "$ref": "#/components/schemas/QueryLimit" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "required": ["IdentityPoolId", "MaxResults"],
        "type": "object"
      },
      "ListIdentitiesResponse": {
        "description": "The response to a ListIdentities request.",
        "properties": {
          "Identities": { "$ref": "#/components/schemas/IdentitiesList" },
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "type": "object"
      },
      "ListIdentityPoolsInput": {
        "description": "Input to the ListIdentityPools action.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/QueryLimit" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "required": ["MaxResults"],
        "type": "object"
      },
      "ListIdentityPoolsResponse": {
        "description": "The result of a successful ListIdentityPools action.",
        "properties": {
          "IdentityPools": { "$ref": "#/components/schemas/IdentityPoolsList" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "type": "object"
      },
      "ListTagsForResourceInput": {
        "properties": { "ResourceArn": { "$ref": "#/components/schemas/ARNString" } },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "ListTagsForResourceResponse": {
        "properties": { "Tags": { "$ref": "#/components/schemas/IdentityPoolTagsType" } },
        "type": "object"
      },
      "LoginsList": { "items": { "$ref": "#/components/schemas/IdentityProviderName" }, "type": "array" },
      "LoginsMap": {
        "additionalProperties": { "$ref": "#/components/schemas/IdentityProviderToken" },
        "maxProperties": 10,
        "type": "object"
      },
      "LookupDeveloperIdentityInput": {
        "description": "Input to the <code>LookupDeveloperIdentityInput</code> action.",
        "properties": {
          "DeveloperUserIdentifier": { "$ref": "#/components/schemas/DeveloperUserIdentifier" },
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "MaxResults": { "$ref": "#/components/schemas/QueryLimit" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "required": ["IdentityPoolId"],
        "type": "object"
      },
      "LookupDeveloperIdentityResponse": {
        "description": "Returned in response to a successful <code>LookupDeveloperIdentity</code> action.",
        "properties": {
          "DeveloperUserIdentifierList": { "$ref": "#/components/schemas/DeveloperUserIdentifierList" },
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "type": "object"
      },
      "MappingRule": {
        "description": "A rule that maps a claim name, a claim value, and a match type to a role ARN.",
        "properties": {
          "Claim": { "$ref": "#/components/schemas/ClaimName" },
          "MatchType": { "$ref": "#/components/schemas/MappingRuleMatchType" },
          "RoleARN": { "$ref": "#/components/schemas/ARNString" },
          "Value": { "$ref": "#/components/schemas/ClaimValue" }
        },
        "required": ["Claim", "MatchType", "Value", "RoleARN"],
        "type": "object"
      },
      "MappingRuleMatchType": { "enum": ["Equals", "Contains", "StartsWith", "NotEqual"], "type": "string" },
      "MappingRulesList": {
        "items": { "$ref": "#/components/schemas/MappingRule" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "MergeDeveloperIdentitiesInput": {
        "description": "Input to the <code>MergeDeveloperIdentities</code> action.",
        "properties": {
          "DestinationUserIdentifier": { "$ref": "#/components/schemas/DeveloperUserIdentifier" },
          "DeveloperProviderName": { "$ref": "#/components/schemas/DeveloperProviderName" },
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "SourceUserIdentifier": { "$ref": "#/components/schemas/DeveloperUserIdentifier" }
        },
        "required": ["SourceUserIdentifier", "DestinationUserIdentifier", "DeveloperProviderName", "IdentityPoolId"],
        "type": "object"
      },
      "MergeDeveloperIdentitiesResponse": {
        "description": "Returned in response to a successful <code>MergeDeveloperIdentities</code> action.",
        "properties": { "IdentityId": { "$ref": "#/components/schemas/IdentityId" } },
        "type": "object"
      },
      "NotAuthorizedException": {},
      "OIDCProviderList": { "items": { "$ref": "#/components/schemas/ARNString" }, "type": "array" },
      "OIDCToken": { "type": "string" },
      "PaginationKey": { "minLength": 1, "pattern": "[\\S]+", "type": "string" },
      "QueryLimit": { "maximum": 60, "minimum": 1, "type": "integer" },
      "ResourceConflictException": {},
      "ResourceNotFoundException": {},
      "RoleMapping": {
        "description": "A role mapping.",
        "properties": {
          "AmbiguousRoleResolution": { "$ref": "#/components/schemas/AmbiguousRoleResolutionType" },
          "RulesConfiguration": { "$ref": "#/components/schemas/RulesConfigurationType" },
          "Type": { "$ref": "#/components/schemas/RoleMappingType" }
        },
        "required": ["Type"],
        "type": "object"
      },
      "RoleMappingMap": {
        "additionalProperties": { "$ref": "#/components/schemas/RoleMapping" },
        "maxProperties": 10,
        "type": "object"
      },
      "RoleMappingType": { "enum": ["Token", "Rules"], "type": "string" },
      "RoleType": { "pattern": "(un)?authenticated", "type": "string" },
      "RolesMap": {
        "additionalProperties": { "$ref": "#/components/schemas/ARNString" },
        "maxProperties": 2,
        "type": "object"
      },
      "RulesConfigurationType": {
        "description": "A container for rules.",
        "properties": { "Rules": { "$ref": "#/components/schemas/MappingRulesList" } },
        "required": ["Rules"],
        "type": "object"
      },
      "SAMLProviderList": { "items": { "$ref": "#/components/schemas/ARNString" }, "type": "array" },
      "SecretKeyString": { "type": "string" },
      "SessionTokenString": { "type": "string" },
      "SetIdentityPoolRolesInput": {
        "description": "Input to the <code>SetIdentityPoolRoles</code> action.",
        "properties": {
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" },
          "RoleMappings": { "$ref": "#/components/schemas/RoleMappingMap" },
          "Roles": { "$ref": "#/components/schemas/RolesMap" }
        },
        "required": ["IdentityPoolId", "Roles"],
        "type": "object"
      },
      "TagKeysType": { "maxLength": 128, "minLength": 1, "type": "string" },
      "TagResourceInput": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/ARNString" },
          "Tags": { "$ref": "#/components/schemas/IdentityPoolTagsType" }
        },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValueType": { "maxLength": 256, "minLength": 0, "type": "string" },
      "TokenDuration": { "maximum": 86400, "minimum": 1, "type": "integer" },
      "TooManyRequestsException": {},
      "UnlinkDeveloperIdentityInput": {
        "description": "Input to the <code>UnlinkDeveloperIdentity</code> action.",
        "properties": {
          "DeveloperProviderName": { "$ref": "#/components/schemas/DeveloperProviderName" },
          "DeveloperUserIdentifier": { "$ref": "#/components/schemas/DeveloperUserIdentifier" },
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "IdentityPoolId": { "$ref": "#/components/schemas/IdentityPoolId" }
        },
        "required": ["IdentityId", "IdentityPoolId", "DeveloperProviderName", "DeveloperUserIdentifier"],
        "type": "object"
      },
      "UnlinkIdentityInput": {
        "description": "Input to the UnlinkIdentity action.",
        "properties": {
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" },
          "Logins": { "$ref": "#/components/schemas/LoginsMap" },
          "LoginsToRemove": { "$ref": "#/components/schemas/LoginsList" }
        },
        "required": ["IdentityId", "Logins", "LoginsToRemove"],
        "type": "object"
      },
      "UnprocessedIdentityId": {
        "description": "An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/ErrorCode" },
          "IdentityId": { "$ref": "#/components/schemas/IdentityId" }
        },
        "type": "object"
      },
      "UnprocessedIdentityIdList": {
        "items": { "$ref": "#/components/schemas/UnprocessedIdentityId" },
        "maxItems": 60,
        "type": "array"
      },
      "UntagResourceInput": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/ARNString" },
          "TagKeys": { "$ref": "#/components/schemas/IdentityPoolTagsListType" }
        },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" }
    }
  }
}
