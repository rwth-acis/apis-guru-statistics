{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS IoT</fullname> <p>AWS IoT provides secure, bi-directional communication between Internet-connected devices (such as sensors, actuators, embedded devices, or smart appliances) and the AWS cloud. You can discover your custom IoT-Data endpoint to communicate with, configure rules for data processing and integration with other services, organize resources associated with each device (Registry), configure logging, and create and manage policies and credentials to authenticate devices.</p> <p>For more information about how AWS IoT works, see the <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html\">Developer Guide</a>.</p> <p>For information about how to use the credentials provider for AWS IoT, see <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html\">Authorizing Direct Calls to AWS Services</a>.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS IoT",
    "version": "2015-05-28",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iot-2015-05-28.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "iot"
  },
  "externalDocs": { "description": "Amazon Web Services documentation", "url": "https://docs.aws.amazon.com/iot/" },
  "security": [{ "hmac": [] }],
  "paths": {
    "/accept-certificate-transfer/{certificateId}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "<p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>",
        "operationId": "AcceptCertificateTransfer",
        "parameters": [
          {
            "description": "The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)",
            "in": "path",
            "name": "certificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          },
          {
            "description": "Specifies whether the certificate is active.",
            "in": "query",
            "name": "setAsActive",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "TransferAlreadyCompletedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TransferAlreadyCompletedException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/active-violations": {
      "get": {
        "description": "Lists the active violations for a given Device Defender security profile.",
        "operationId": "ListActiveViolations",
        "parameters": [
          {
            "description": "The name of the thing whose active violations are listed.",
            "in": "query",
            "name": "thingName",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128 }
          },
          {
            "description": "The name of the Device Defender security profile for which violations are listed.",
            "in": "query",
            "name": "securityProfileName",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListActiveViolationsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/attached-policies/{target}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the policies attached to the specified thing group.",
        "operationId": "ListAttachedPolicies",
        "parameters": [
          {
            "description": "The group or principal for which the policies will be listed.",
            "in": "path",
            "name": "target",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "When true, recursively list attached policies.",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListAttachedPoliciesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/audit/configuration": {
      "delete": {
        "description": "Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. ",
        "operationId": "DeleteAccountAuditConfiguration",
        "parameters": [
          {
            "description": "If true, all scheduled audits are deleted.",
            "in": "query",
            "name": "deleteScheduledAudits",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeleteAccountAuditConfigurationResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.",
        "operationId": "DescribeAccountAuditConfiguration",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DescribeAccountAuditConfigurationResponse" }
              }
            }
          },
          "480": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.",
        "operationId": "UpdateAccountAuditConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "auditCheckConfigurations": {
                    "additionalProperties": { "$ref": "#/components/schemas/AuditCheckConfiguration" },
                    "description": "<p>Specifies which audit checks are enabled and disabled for this account. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are currently enabled.</p> <p>Some data collection might start immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted.</p> <p>You cannot disable a check if it is used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself.</p> <p>On the first call to <code>UpdateAccountAuditConfiguration</code>, this parameter is required and must specify at least one enabled check.</p>",
                    "type": "object"
                  },
                  "auditNotificationTargetConfigurations": {
                    "additionalProperties": { "$ref": "#/components/schemas/AuditNotificationTarget" },
                    "description": "Information about the targets to which audit notifications are sent.",
                    "type": "object"
                  },
                  "roleArn": {
                    "description": "The ARN of the role that grants permission to AWS IoT to access information about your devices, policies, certificates and other items as required when performing an audit.",
                    "maxLength": 2048,
                    "minLength": 20,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UpdateAccountAuditConfigurationResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/audit/findings": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)",
        "operationId": "ListAuditFindings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "checkName": {
                    "description": "An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)",
                    "type": "string"
                  },
                  "endTime": {
                    "description": "A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "maxResults": {
                    "description": "The maximum number of results to return at one time. The default is 25.",
                    "maximum": 250,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "nextToken": { "description": "The token for the next set of results.", "type": "string" },
                  "resourceIdentifier": {
                    "description": "Information that identifies the noncompliant resource.",
                    "properties": {
                      "account": { "$ref": "#/components/schemas/AwsAccountId" },
                      "caCertificateId": { "$ref": "#/components/schemas/CertificateId" },
                      "clientId": { "$ref": "#/components/schemas/ClientId" },
                      "cognitoIdentityPoolId": { "$ref": "#/components/schemas/CognitoIdentityPoolId" },
                      "deviceCertificateId": { "$ref": "#/components/schemas/CertificateId" },
                      "policyVersionIdentifier": { "$ref": "#/components/schemas/PolicyVersionIdentifier" }
                    },
                    "type": "object"
                  },
                  "startTime": {
                    "description": "A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "taskId": {
                    "description": "A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.",
                    "maxLength": 40,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9\\-]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListAuditFindingsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/audit/findings/{findingId}": {
      "get": {
        "description": "Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and when the audit that returned the finding was started.",
        "operationId": "DescribeAuditFinding",
        "parameters": [
          {
            "description": "A unique identifier for a single audit finding. You can use this identifier to apply mitigation actions to the finding.",
            "in": "path",
            "name": "findingId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeAuditFindingResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/audit/mitigationactions/executions#taskId&findingId": {
      "get": {
        "description": "Gets the status of audit mitigation action tasks that were executed.",
        "operationId": "ListAuditMitigationActionsExecutions",
        "parameters": [
          {
            "description": "Specify this filter to limit results to actions for a specific audit mitigation actions task.",
            "in": "query",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "Specify this filter to limit results to those with a specific status.",
            "in": "query",
            "name": "actionStatus",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["IN_PROGRESS", "COMPLETED", "FAILED", "CANCELED", "SKIPPED", "PENDING"]
            }
          },
          {
            "description": "Specify this filter to limit results to those that were applied to a specific audit finding.",
            "in": "query",
            "name": "findingId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "The maximum number of results to return at one time. The default is 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListAuditMitigationActionsExecutionsResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/audit/mitigationactions/tasks#startTime&endTime": {
      "get": {
        "description": "Gets a list of audit mitigation action tasks that match the specified filters.",
        "operationId": "ListAuditMitigationActionsTasks",
        "parameters": [
          {
            "description": "Specify this filter to limit results to tasks that were applied to results for a specific audit.",
            "in": "query",
            "name": "auditTaskId",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 40, "pattern": "[a-zA-Z0-9\\-]+" }
          },
          {
            "description": "Specify this filter to limit results to tasks that were applied to a specific audit finding.",
            "in": "query",
            "name": "findingId",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "Specify this filter to limit results to tasks that are in a specific state.",
            "in": "query",
            "name": "taskStatus",
            "required": false,
            "schema": { "type": "string", "enum": ["IN_PROGRESS", "COMPLETED", "FAILED", "CANCELED"] }
          },
          {
            "description": "The maximum number of results to return at one time. The default is 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Specify this filter to limit results to tasks that began on or after a specific date and time.",
            "in": "query",
            "name": "startTime",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.",
            "in": "query",
            "name": "endTime",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListAuditMitigationActionsTasksResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/audit/mitigationactions/tasks/{taskId}": {
      "get": {
        "description": "Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.",
        "operationId": "DescribeAuditMitigationActionsTask",
        "parameters": [
          {
            "description": "The unique identifier for the audit mitigation task.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DescribeAuditMitigationActionsTaskResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts a task that applies a set of mitigation actions to the specified target.",
        "operationId": "StartAuditMitigationActionsTask",
        "parameters": [
          {
            "description": "A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "auditCheckToActionsMapping": {
                    "additionalProperties": { "$ref": "#/components/schemas/MitigationActionNameList" },
                    "description": "For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your AWS account.",
                    "type": "object"
                  },
                  "clientRequestToken": {
                    "description": "Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9-_]+$",
                    "type": "string"
                  },
                  "target": {
                    "description": "Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.",
                    "properties": {
                      "auditCheckToReasonCodeFilter": { "$ref": "#/components/schemas/AuditCheckToReasonCodeFilter" },
                      "auditTaskId": { "$ref": "#/components/schemas/AuditTaskId" },
                      "findingIds": { "$ref": "#/components/schemas/FindingIds" }
                    },
                    "type": "object"
                  }
                },
                "required": ["target", "auditCheckToActionsMapping", "clientRequestToken"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StartAuditMitigationActionsTaskResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "TaskAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TaskAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/audit/mitigationactions/tasks/{taskId}/cancel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.",
        "operationId": "CancelAuditMitigationActionsTask",
        "parameters": [
          {
            "description": "The unique identifier for the task that you want to cancel. ",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CancelAuditMitigationActionsTaskResponse" }
              }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/audit/scheduledaudits": {
      "get": {
        "description": "Lists all of your scheduled audits.",
        "operationId": "ListScheduledAudits",
        "parameters": [
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time. The default is 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListScheduledAuditsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/audit/scheduledaudits/{scheduledAuditName}": {
      "delete": {
        "description": "Deletes a scheduled audit.",
        "operationId": "DeleteScheduledAudit",
        "parameters": [
          {
            "description": "The name of the scheduled audit you want to delete.",
            "in": "path",
            "name": "scheduledAuditName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteScheduledAuditResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about a scheduled audit.",
        "operationId": "DescribeScheduledAudit",
        "parameters": [
          {
            "description": "The name of the scheduled audit whose information you want to get.",
            "in": "path",
            "name": "scheduledAuditName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeScheduledAuditResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates a scheduled audit, including which checks are performed and how often the audit takes place.",
        "operationId": "UpdateScheduledAudit",
        "parameters": [
          {
            "description": "The name of the scheduled audit. (Max. 128 chars)",
            "in": "path",
            "name": "scheduledAuditName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dayOfMonth": {
                    "description": "The day of the month on which the scheduled audit takes place. Can be \"1\" through \"31\" or \"LAST\". This field is required if the \"frequency\" parameter is set to \"MONTHLY\". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the \"LAST\" day of the month.",
                    "pattern": "^([1-9]|[12][0-9]|3[01])$|^LAST$",
                    "type": "string"
                  },
                  "dayOfWeek": {
                    "description": "The day of the week on which the scheduled audit takes place. Can be one of \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", or \"SAT\". This field is required if the \"frequency\" parameter is set to \"WEEKLY\" or \"BIWEEKLY\".",
                    "enum": ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"],
                    "type": "string"
                  },
                  "frequency": {
                    "description": "How often the scheduled audit takes place. Can be one of \"DAILY\", \"WEEKLY\", \"BIWEEKLY\", or \"MONTHLY\". The start time of each audit is determined by the system.",
                    "enum": ["DAILY", "WEEKLY", "BIWEEKLY", "MONTHLY"],
                    "type": "string"
                  },
                  "targetCheckNames": {
                    "description": "Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)",
                    "items": { "$ref": "#/components/schemas/AuditCheckName" },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateScheduledAuditResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "post": {
        "description": "Creates a scheduled audit that is run at a specified time interval.",
        "operationId": "CreateScheduledAudit",
        "parameters": [
          {
            "description": "The name you want to give to the scheduled audit. (Max. 128 chars)",
            "in": "path",
            "name": "scheduledAuditName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dayOfMonth": {
                    "description": "The day of the month on which the scheduled audit takes place. Can be \"1\" through \"31\" or \"LAST\". This field is required if the \"frequency\" parameter is set to \"MONTHLY\". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the \"LAST\" day of the month.",
                    "pattern": "^([1-9]|[12][0-9]|3[01])$|^LAST$",
                    "type": "string"
                  },
                  "dayOfWeek": {
                    "description": "The day of the week on which the scheduled audit takes place. Can be one of \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", or \"SAT\". This field is required if the \"frequency\" parameter is set to \"WEEKLY\" or \"BIWEEKLY\".",
                    "enum": ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"],
                    "type": "string"
                  },
                  "frequency": {
                    "description": "How often the scheduled audit takes place. Can be one of \"DAILY\", \"WEEKLY\", \"BIWEEKLY\" or \"MONTHLY\". The start time of each audit is determined by the system.",
                    "enum": ["DAILY", "WEEKLY", "BIWEEKLY", "MONTHLY"],
                    "type": "string"
                  },
                  "tags": {
                    "description": "Metadata that can be used to manage the scheduled audit.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  },
                  "targetCheckNames": {
                    "description": "Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)",
                    "items": { "$ref": "#/components/schemas/AuditCheckName" },
                    "type": "array"
                  }
                },
                "required": ["frequency", "targetCheckNames"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateScheduledAuditResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/audit/tasks": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts an on-demand Device Defender audit.",
        "operationId": "StartOnDemandAuditTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "targetCheckNames": {
                    "description": "Which checks are performed during the audit. The checks you specify must be enabled for your account or an exception occurs. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.",
                    "items": { "$ref": "#/components/schemas/AuditCheckName" },
                    "type": "array"
                  }
                },
                "required": ["targetCheckNames"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartOnDemandAuditTaskResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/audit/tasks#startTime&endTime": {
      "get": {
        "description": "Lists the Device Defender audits that have been performed during a given time period.",
        "operationId": "ListAuditTasks",
        "parameters": [
          {
            "description": "The beginning of the time period. Audit information is retained for a limited time (180 days). Requesting a start time prior to what is retained results in an \"InvalidRequestException\".",
            "in": "query",
            "name": "startTime",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "The end of the time period.",
            "in": "query",
            "name": "endTime",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "A filter to limit the output to the specified type of audit: can be one of \"ON_DEMAND_AUDIT_TASK\" or \"SCHEDULED__AUDIT_TASK\".",
            "in": "query",
            "name": "taskType",
            "required": false,
            "schema": { "type": "string", "enum": ["ON_DEMAND_AUDIT_TASK", "SCHEDULED_AUDIT_TASK"] }
          },
          {
            "description": "A filter to limit the output to audits with the specified completion status: can be one of \"IN_PROGRESS\", \"COMPLETED\", \"FAILED\", or \"CANCELED\".",
            "in": "query",
            "name": "taskStatus",
            "required": false,
            "schema": { "type": "string", "enum": ["IN_PROGRESS", "COMPLETED", "FAILED", "CANCELED"] }
          },
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time. The default is 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListAuditTasksResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/audit/tasks/{taskId}": {
      "get": {
        "description": "Gets information about a Device Defender audit.",
        "operationId": "DescribeAuditTask",
        "parameters": [
          {
            "description": "The ID of the audit whose information you want to get.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 40, "pattern": "[a-zA-Z0-9\\-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeAuditTaskResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/audit/tasks/{taskId}/cancel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an \"InvalidRequestException\" occurs.",
        "operationId": "CancelAuditTask",
        "parameters": [
          {
            "description": "The ID of the audit you want to cancel. You can only cancel an audit that is \"IN_PROGRESS\".",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 40, "pattern": "[a-zA-Z0-9\\-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CancelAuditTaskResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/authorizer/{authorizerName}": {
      "delete": {
        "description": "Deletes an authorizer.",
        "operationId": "DeleteAuthorizer",
        "parameters": [
          {
            "description": "The name of the authorizer to delete.",
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteAuthorizerResponse" } } }
          },
          "480": {
            "description": "DeleteConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteConflictException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Describes an authorizer.",
        "operationId": "DescribeAuthorizer",
        "parameters": [
          {
            "description": "The name of the authorizer to describe.",
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeAuthorizerResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates an authorizer.",
        "operationId": "CreateAuthorizer",
        "parameters": [
          {
            "description": "The authorizer name.",
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "authorizerFunctionArn": {
                    "description": "The ARN of the authorizer's Lambda function.",
                    "type": "string"
                  },
                  "status": {
                    "description": "The status of the create authorizer request.",
                    "enum": ["ACTIVE", "INACTIVE"],
                    "type": "string"
                  },
                  "tokenKeyName": {
                    "description": "The name of the token key used to extract the token from the HTTP headers.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_-]+",
                    "type": "string"
                  },
                  "tokenSigningPublicKeys": {
                    "additionalProperties": { "$ref": "#/components/schemas/KeyValue" },
                    "description": "The public keys used to verify the digital signature returned by your custom authentication service.",
                    "type": "object"
                  }
                },
                "required": ["authorizerFunctionArn", "tokenKeyName", "tokenSigningPublicKeys"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateAuthorizerResponse" } } }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "put": {
        "description": "Updates an authorizer.",
        "operationId": "UpdateAuthorizer",
        "parameters": [
          {
            "description": "The authorizer name.",
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "authorizerFunctionArn": {
                    "description": "The ARN of the authorizer's Lambda function.",
                    "type": "string"
                  },
                  "status": {
                    "description": "The status of the update authorizer request.",
                    "enum": ["ACTIVE", "INACTIVE"],
                    "type": "string"
                  },
                  "tokenKeyName": {
                    "description": "The key used to extract the token from the HTTP headers. ",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_-]+",
                    "type": "string"
                  },
                  "tokenSigningPublicKeys": {
                    "additionalProperties": { "$ref": "#/components/schemas/KeyValue" },
                    "description": "The public keys used to verify the token signature.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAuthorizerResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/authorizer/{authorizerName}/test": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.",
        "operationId": "TestInvokeAuthorizer",
        "parameters": [
          {
            "description": "The custom authorizer name.",
            "in": "path",
            "name": "authorizerName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "token": {
                    "description": "The token returned by your custom authentication service.",
                    "maxLength": 6144,
                    "minLength": 1,
                    "type": "string"
                  },
                  "tokenSignature": {
                    "description": "The signature made with the token and your custom authentication service's private key.",
                    "maxLength": 2560,
                    "minLength": 1,
                    "pattern": "[A-Za-z0-9+/]+={0,2}",
                    "type": "string"
                  }
                },
                "required": ["token", "tokenSignature"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TestInvokeAuthorizerResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "InvalidResponseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidResponseException" } } }
          }
        }
      }
    },
    "/authorizers/": {
      "get": {
        "description": "Lists the authorizers registered in your account.",
        "operationId": "ListAuthorizers",
        "parameters": [
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "A marker used to get the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "Return the list of authorizers in ascending alphabetical order.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "The status of the list authorizers request.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": { "type": "string", "enum": ["ACTIVE", "INACTIVE"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListAuthorizersResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/billing-groups": {
      "get": {
        "description": "Lists the billing groups you have created.",
        "operationId": "ListBillingGroups",
        "parameters": [
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return per request.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "Limit the results to billing groups whose names have the given prefix.",
            "in": "query",
            "name": "namePrefixFilter",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListBillingGroupsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/billing-groups/addThingToBillingGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Adds a thing to a billing group.",
        "operationId": "AddThingToBillingGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "billingGroupArn": { "description": "The ARN of the billing group.", "type": "string" },
                  "billingGroupName": {
                    "description": "The name of the billing group.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "thingArn": {
                    "description": "The ARN of the thing to be added to the billing group.",
                    "type": "string"
                  },
                  "thingName": {
                    "description": "The name of the thing to be added to the billing group.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AddThingToBillingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/billing-groups/removeThingFromBillingGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Removes the given thing from the billing group.",
        "operationId": "RemoveThingFromBillingGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "billingGroupArn": { "description": "The ARN of the billing group.", "type": "string" },
                  "billingGroupName": {
                    "description": "The name of the billing group.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "thingArn": {
                    "description": "The ARN of the thing to be removed from the billing group.",
                    "type": "string"
                  },
                  "thingName": {
                    "description": "The name of the thing to be removed from the billing group.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RemoveThingFromBillingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/billing-groups/{billingGroupName}": {
      "delete": {
        "description": "Deletes the billing group.",
        "operationId": "DeleteBillingGroup",
        "parameters": [
          {
            "description": "The name of the billing group.",
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>DeleteBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.",
            "in": "query",
            "name": "expectedVersion",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteBillingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Returns information about a billing group.",
        "operationId": "DescribeBillingGroup",
        "parameters": [
          {
            "description": "The name of the billing group.",
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeBillingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates information about the billing group.",
        "operationId": "UpdateBillingGroup",
        "parameters": [
          {
            "description": "The name of the billing group.",
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "billingGroupProperties": {
                    "description": "The properties of a billing group.",
                    "properties": {
                      "billingGroupDescription": { "$ref": "#/components/schemas/BillingGroupDescription" }
                    },
                    "type": "object"
                  },
                  "expectedVersion": {
                    "description": "The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>UpdateBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.",
                    "type": "integer"
                  }
                },
                "required": ["billingGroupProperties"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateBillingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "post": {
        "description": "Creates a billing group.",
        "operationId": "CreateBillingGroup",
        "parameters": [
          {
            "description": "The name you wish to give to the billing group.",
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "billingGroupProperties": {
                    "description": "The properties of a billing group.",
                    "properties": {
                      "billingGroupDescription": { "$ref": "#/components/schemas/BillingGroupDescription" }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage the billing group.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateBillingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/billing-groups/{billingGroupName}/things": {
      "get": {
        "description": "Lists the things you have added to the given billing group.",
        "operationId": "ListThingsInBillingGroup",
        "parameters": [
          {
            "description": "The name of the billing group.",
            "in": "path",
            "name": "billingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return per request.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListThingsInBillingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/cacertificate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.",
        "operationId": "RegisterCACertificate",
        "parameters": [
          {
            "description": "A boolean value that specifies if the CA certificate is set to active.",
            "in": "query",
            "name": "setAsActive",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Allows this CA certificate to be used for auto registration of device certificates.",
            "in": "query",
            "name": "allowAutoRegistration",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "caCertificate": {
                    "description": "The PEM of a certificate.",
                    "maxLength": 65536,
                    "minLength": 1,
                    "type": "string"
                  },
                  "registrationConfig": {
                    "description": "The registration configuration.",
                    "properties": {
                      "roleArn": { "$ref": "#/components/schemas/RoleArn" },
                      "templateBody": { "$ref": "#/components/schemas/TemplateBody" }
                    },
                    "type": "object"
                  },
                  "verificationCertificate": {
                    "description": "The PEM of a certificate.",
                    "maxLength": 65536,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": ["caCertificate", "verificationCertificate"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RegisterCACertificateResponse" } }
            }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "RegistrationCodeValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RegistrationCodeValidationException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "CertificateValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CertificateValidationException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "486": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "487": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "488": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/cacertificate/{caCertificateId}": {
      "delete": {
        "description": "Deletes a registered CA certificate.",
        "operationId": "DeleteCACertificate",
        "parameters": [
          {
            "description": "The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)",
            "in": "path",
            "name": "caCertificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteCACertificateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "CertificateStateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CertificateStateException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "get": {
        "description": "Describes a registered CA certificate.",
        "operationId": "DescribeCACertificate",
        "parameters": [
          {
            "description": "The CA certificate identifier.",
            "in": "path",
            "name": "caCertificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeCACertificateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates a registered CA certificate.",
        "operationId": "UpdateCACertificate",
        "parameters": [
          {
            "description": "The CA certificate identifier.",
            "in": "path",
            "name": "caCertificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          },
          {
            "description": "<p>The updated status of the CA certificate.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>",
            "in": "query",
            "name": "newStatus",
            "required": false,
            "schema": { "type": "string", "enum": ["ACTIVE", "INACTIVE"] }
          },
          {
            "description": "The new value for the auto registration status. Valid values are: \"ENABLE\" or \"DISABLE\".",
            "in": "query",
            "name": "newAutoRegistrationStatus",
            "required": false,
            "schema": { "type": "string", "enum": ["ENABLE", "DISABLE"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "registrationConfig": {
                    "description": "The registration configuration.",
                    "properties": {
                      "roleArn": { "$ref": "#/components/schemas/RoleArn" },
                      "templateBody": { "$ref": "#/components/schemas/TemplateBody" }
                    },
                    "type": "object"
                  },
                  "removeAutoRegistration": { "description": "If true, removes auto registration.", "type": "boolean" }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/cacertificates": {
      "get": {
        "description": "<p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>",
        "operationId": "ListCACertificates",
        "parameters": [
          {
            "description": "The result page size.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The marker for the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "Determines the order of the results.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListCACertificatesResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/cancel-certificate-transfer/{certificateId}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "<p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>",
        "operationId": "CancelCertificateTransfer",
        "parameters": [
          {
            "description": "The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)",
            "in": "path",
            "name": "certificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "TransferAlreadyCompletedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TransferAlreadyCompletedException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/certificate/register": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.",
        "operationId": "RegisterCertificate",
        "parameters": [
          {
            "description": "A boolean value that specifies if the certificate is set to active.",
            "in": "query",
            "name": "setAsActive",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "caCertificatePem": {
                    "description": "The PEM of a certificate.",
                    "maxLength": 65536,
                    "minLength": 1,
                    "type": "string"
                  },
                  "certificatePem": {
                    "description": "The PEM of a certificate.",
                    "maxLength": 65536,
                    "minLength": 1,
                    "type": "string"
                  },
                  "status": {
                    "description": "The status of the register certificate request.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "REVOKED",
                      "PENDING_TRANSFER",
                      "REGISTER_INACTIVE",
                      "PENDING_ACTIVATION"
                    ],
                    "type": "string"
                  }
                },
                "required": ["certificatePem"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RegisterCertificateResponse" } }
            }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "CertificateValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CertificateValidationException" } }
            }
          },
          "483": {
            "description": "CertificateStateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CertificateStateException" } }
            }
          },
          "484": {
            "description": "CertificateConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CertificateConflictException" } }
            }
          },
          "485": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "486": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "487": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "488": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/certificates": {
      "get": {
        "description": "<p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>",
        "operationId": "ListCertificates",
        "parameters": [
          {
            "description": "The result page size.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The marker for the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListCertificatesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c \"cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path\"</p>",
        "operationId": "CreateCertificateFromCsr",
        "parameters": [
          {
            "description": "Specifies whether the certificate is active.",
            "in": "query",
            "name": "setAsActive",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "certificateSigningRequest": {
                    "description": "The certificate signing request (CSR).",
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": ["certificateSigningRequest"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateCertificateFromCsrResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/certificates-by-ca/{caCertificateId}": {
      "get": {
        "description": "List the device certificates signed by the specified CA certificate.",
        "operationId": "ListCertificatesByCA",
        "parameters": [
          {
            "description": "The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate.",
            "in": "path",
            "name": "caCertificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          },
          {
            "description": "The result page size.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The marker for the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListCertificatesByCAResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/certificates-out-going": {
      "get": {
        "description": "Lists certificates that are being transferred but not yet accepted.",
        "operationId": "ListOutgoingCertificates",
        "parameters": [
          {
            "description": "The result page size.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The marker for the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListOutgoingCertificatesResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/certificates/{certificateId}": {
      "delete": {
        "description": "<p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>",
        "operationId": "DeleteCertificate",
        "parameters": [
          {
            "description": "The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)",
            "in": "path",
            "name": "certificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          },
          {
            "description": "Forces the deletion of a certificate if it is inactive and is not attached to an IoT thing.",
            "in": "query",
            "name": "forceDelete",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "CertificateStateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CertificateStateException" } }
            }
          },
          "481": {
            "description": "DeleteConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteConflictException" } } }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified certificate.",
        "operationId": "DescribeCertificate",
        "parameters": [
          {
            "description": "The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)",
            "in": "path",
            "name": "certificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeCertificateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/certificates/{certificateId}#newStatus": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>",
        "operationId": "UpdateCertificate",
        "parameters": [
          {
            "description": "The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)",
            "in": "path",
            "name": "certificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          },
          {
            "description": "<p>The new status.</p> <p> <b>Note:</b> Setting the status to PENDING_TRANSFER will result in an exception being thrown. PENDING_TRANSFER is a status used internally by AWS IoT. It is not intended for developer use.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>",
            "in": "query",
            "name": "newStatus",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["ACTIVE", "INACTIVE", "REVOKED", "PENDING_TRANSFER", "REGISTER_INACTIVE", "PENDING_ACTIVATION"]
            }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "CertificateStateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CertificateStateException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/default-authorizer": {
      "delete": {
        "description": "Clears the default authorizer.",
        "operationId": "ClearDefaultAuthorizer",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ClearDefaultAuthorizerResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Describes the default authorizer.",
        "operationId": "DescribeDefaultAuthorizer",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeDefaultAuthorizerResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.",
        "operationId": "SetDefaultAuthorizer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "authorizerName": {
                    "description": "The authorizer name.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[\\w=,@-]+",
                    "type": "string"
                  }
                },
                "required": ["authorizerName"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SetDefaultAuthorizerResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          }
        }
      }
    },
    "/dynamic-thing-groups/{thingGroupName}": {
      "delete": {
        "description": "Deletes a dynamic thing group.",
        "operationId": "DeleteDynamicThingGroup",
        "parameters": [
          {
            "description": "The name of the dynamic thing group to delete.",
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The expected version of the dynamic thing group to delete.",
            "in": "query",
            "name": "expectedVersion",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDynamicThingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates a dynamic thing group.",
        "operationId": "UpdateDynamicThingGroup",
        "parameters": [
          {
            "description": "The name of the dynamic thing group to update.",
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expectedVersion": {
                    "description": "The expected version of the dynamic thing group to update.",
                    "type": "integer"
                  },
                  "indexName": {
                    "description": "<p>The dynamic thing group index to update.</p> <note> <p>Currently one index is supported: 'AWS_Things'.</p> </note>",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "queryString": {
                    "description": "The dynamic thing group search query string to update.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "queryVersion": {
                    "description": "<p>The dynamic thing group query version to update.</p> <note> <p>Currently one query version is supported: \"2017-09-30\". If not specified, the query version defaults to this value.</p> </note>",
                    "type": "string"
                  },
                  "thingGroupProperties": {
                    "description": "Thing group properties.",
                    "properties": {
                      "attributePayload": { "$ref": "#/components/schemas/AttributePayload" },
                      "thingGroupDescription": { "$ref": "#/components/schemas/ThingGroupDescription" }
                    },
                    "type": "object"
                  }
                },
                "required": ["thingGroupProperties"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDynamicThingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "485": {
            "description": "InvalidQueryException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidQueryException" } } }
          }
        }
      },
      "post": {
        "description": "Creates a dynamic thing group.",
        "operationId": "CreateDynamicThingGroup",
        "parameters": [
          {
            "description": "The dynamic thing group name to create.",
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "indexName": {
                    "description": "<p>The dynamic thing group index name.</p> <note> <p>Currently one index is supported: \"AWS_Things\".</p> </note>",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "queryString": {
                    "description": "<p>The dynamic thing group search query string.</p> <p>See <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html\">Query Syntax</a> for information about query string syntax.</p>",
                    "minLength": 1,
                    "type": "string"
                  },
                  "queryVersion": {
                    "description": "<p>The dynamic thing group query version.</p> <note> <p>Currently one query version is supported: \"2017-09-30\". If not specified, the query version defaults to this value.</p> </note>",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage the dynamic thing group.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  },
                  "thingGroupProperties": {
                    "description": "Thing group properties.",
                    "properties": {
                      "attributePayload": { "$ref": "#/components/schemas/AttributePayload" },
                      "thingGroupDescription": { "$ref": "#/components/schemas/ThingGroupDescription" }
                    },
                    "type": "object"
                  }
                },
                "required": ["queryString"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateDynamicThingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "InvalidQueryException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidQueryException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/effective-policies": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.",
        "operationId": "GetEffectivePolicies",
        "parameters": [
          {
            "description": "The thing name.",
            "in": "query",
            "name": "thingName",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cognitoIdentityPoolId": { "description": "The Cognito identity pool ID.", "type": "string" },
                  "principal": { "description": "The principal.", "type": "string" }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetEffectivePoliciesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/endpoint": {
      "get": {
        "description": "Returns a unique endpoint specific to the AWS account making the call.",
        "operationId": "DescribeEndpoint",
        "parameters": [
          {
            "description": "<p>The endpoint type. Valid endpoint types include:</p> <ul> <li> <p> <code>iot:Data</code> - Returns a VeriSign signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Data-ATS</code> - Returns an ATS signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:CredentialProvider</code> - Returns an AWS IoT credentials provider API endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Jobs</code> - Returns an AWS IoT device management Jobs API endpoint.</p> </li> </ul>",
            "in": "query",
            "name": "endpointType",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeEndpointResponse" } } }
          },
          "480": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/event-configurations": {
      "get": {
        "description": "Describes event configurations.",
        "operationId": "DescribeEventConfigurations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeEventConfigurationsResponse" } }
            }
          },
          "480": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates the event configurations.",
        "operationId": "UpdateEventConfigurations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "eventConfigurations": {
                    "additionalProperties": { "$ref": "#/components/schemas/Configuration" },
                    "description": "The new event configuration values.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateEventConfigurationsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/indexing/config": {
      "get": {
        "description": "Gets the search configuration.",
        "operationId": "GetIndexingConfiguration",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetIndexingConfigurationResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the search configuration.",
        "operationId": "UpdateIndexingConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "thingGroupIndexingConfiguration": {
                    "description": "Thing group indexing configuration.",
                    "properties": {
                      "thingGroupIndexingMode": { "$ref": "#/components/schemas/ThingGroupIndexingMode" }
                    },
                    "type": "object"
                  },
                  "thingIndexingConfiguration": {
                    "description": "The thing indexing configuration. For more information, see <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html\">Managing Thing Indexing</a>.",
                    "properties": {
                      "thingConnectivityIndexingMode": { "$ref": "#/components/schemas/ThingConnectivityIndexingMode" },
                      "thingIndexingMode": { "$ref": "#/components/schemas/ThingIndexingMode" }
                    },
                    "type": "object"
                  }
                },
                "required": ["thingIndexingConfiguration", "thingGroupIndexingConfiguration"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateIndexingConfigurationResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/indices": {
      "get": {
        "description": "Lists the search indices.",
        "operationId": "ListIndices",
        "parameters": [
          {
            "description": "The token used to get the next set of results, or null if there are no additional results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 500 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListIndicesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/indices/search": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "The query search index.",
        "operationId": "SearchIndex",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "indexName": {
                    "description": "The search index name.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "maxResults": {
                    "description": "The maximum number of results to return at one time.",
                    "maximum": 500,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "nextToken": {
                    "description": "The token used to get the next set of results, or null if there are no additional results.",
                    "type": "string"
                  },
                  "queryString": { "description": "The search query string.", "minLength": 1, "type": "string" },
                  "queryVersion": { "description": "The query version.", "type": "string" }
                },
                "required": ["queryString"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchIndexResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "486": {
            "description": "InvalidQueryException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidQueryException" } } }
          },
          "487": {
            "description": "IndexNotReadyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IndexNotReadyException" } } }
          }
        }
      }
    },
    "/indices/statistics": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets statistics about things that match the specified query.",
        "operationId": "GetStatistics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "aggregationField": {
                    "description": "The aggregation field name. Currently not supported.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "indexName": {
                    "description": "The name of the index to search. The default value is <code>AWS_Things</code>.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "queryString": {
                    "description": "The query used to search. You can specify \"*\" for the query string to get the count of all indexed things in your AWS account.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "queryVersion": { "description": "The version of the query used to search.", "type": "string" }
                },
                "required": ["queryString"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetStatisticsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "486": {
            "description": "InvalidQueryException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidQueryException" } } }
          },
          "487": {
            "description": "InvalidAggregationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAggregationException" } }
            }
          },
          "488": {
            "description": "IndexNotReadyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/IndexNotReadyException" } } }
          }
        }
      }
    },
    "/indices/{indexName}": {
      "get": {
        "description": "Describes a search index.",
        "operationId": "DescribeIndex",
        "parameters": [
          {
            "description": "The index name.",
            "in": "path",
            "name": "indexName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeIndexResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/jobs": {
      "get": {
        "description": "Lists jobs.",
        "operationId": "ListJobs",
        "parameters": [
          {
            "description": "An optional filter that lets you search for jobs that have the specified status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": { "type": "string", "enum": ["IN_PROGRESS", "CANCELED", "COMPLETED", "DELETION_IN_PROGRESS"] }
          },
          {
            "description": "Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. ",
            "in": "query",
            "name": "targetSelection",
            "required": false,
            "schema": { "type": "string", "enum": ["CONTINUOUS", "SNAPSHOT"] }
          },
          {
            "description": "The maximum number of results to return per request.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "A filter that limits the returned jobs to those for the specified group.",
            "in": "query",
            "name": "thingGroupName",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "A filter that limits the returned jobs to those for the specified group.",
            "in": "query",
            "name": "thingGroupId",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9\\-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListJobsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/jobs/{jobId}": {
      "delete": {
        "description": "<p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as \"DELETION_IN_PROGRESS\". Attempting to delete or cancel a job whose status is already \"DELETION_IN_PROGRESS\" will result in an error.</p> <p>Only 10 jobs may have status \"DELETION_IN_PROGRESS\" at the same time, or a LimitExceededException will occur.</p>",
        "operationId": "DeleteJob",
        "parameters": [
          {
            "description": "<p>The ID of the job to be deleted.</p> <p>After a job deletion is completed, you may reuse this jobId when you create a new job. However, this is not recommended, and you must ensure that your devices are not using the jobId to refer to the deleted job.</p>",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "<p>(Optional) When true, you can delete a job which is \"IN_PROGRESS\". Otherwise, you can only delete a job which is in a terminal state (\"COMPLETED\" or \"CANCELED\") or an exception will occur. The default is false.</p> <note> <p>Deleting a job which is \"IN_PROGRESS\", will cause a device which is executing the job to be unable to access job information or update the job execution status. Use caution and ensure that each device executing a job which is deleted is able to recover to a valid state.</p> </note>",
            "in": "query",
            "name": "force",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InvalidStateTransitionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidStateTransitionException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "get": {
        "description": "Describes a job.",
        "operationId": "DescribeJob",
        "parameters": [
          {
            "description": "The unique identifier you assigned to this job when it was created.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeJobResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates supported fields of the specified job.",
        "operationId": "UpdateJob",
        "parameters": [
          {
            "description": "The ID of the job to be updated.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "abortConfig": {
                    "description": "Details of abort criteria to abort the job.",
                    "properties": { "criteriaList": { "$ref": "#/components/schemas/AbortCriteriaList" } },
                    "type": "object"
                  },
                  "description": {
                    "description": "A short text description of the job.",
                    "maxLength": 2028,
                    "pattern": "[^\\p{C}]+",
                    "type": "string"
                  },
                  "jobExecutionsRolloutConfig": {
                    "description": "Allows you to create a staged rollout of a job.",
                    "properties": {
                      "exponentialRate": { "$ref": "#/components/schemas/ExponentialRolloutRate" },
                      "maximumPerMinute": { "$ref": "#/components/schemas/MaxJobExecutionsPerMin" }
                    },
                    "type": "object"
                  },
                  "presignedUrlConfig": {
                    "description": "Configuration for pre-signed S3 URLs.",
                    "properties": {
                      "expiresInSec": { "$ref": "#/components/schemas/ExpiresInSec" },
                      "roleArn": { "$ref": "#/components/schemas/RoleArn" }
                    },
                    "type": "object"
                  },
                  "timeoutConfig": {
                    "description": "Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.",
                    "properties": {
                      "inProgressTimeoutInMinutes": { "$ref": "#/components/schemas/InProgressTimeoutInMinutes" }
                    },
                    "type": "object"
                  }
                },
                "required": ["abortConfig"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "put": {
        "description": "Creates a job.",
        "operationId": "CreateJob",
        "parameters": [
          {
            "description": "A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric characters, \"-\" and \"_\" are valid for use here.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "abortConfig": {
                    "description": "Details of abort criteria to abort the job.",
                    "properties": { "criteriaList": { "$ref": "#/components/schemas/AbortCriteriaList" } },
                    "type": "object"
                  },
                  "description": {
                    "description": "A short text description of the job.",
                    "maxLength": 2028,
                    "pattern": "[^\\p{C}]+",
                    "type": "string"
                  },
                  "document": {
                    "description": "<p>The job document.</p> <note> <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p> <p>The placeholder link is of the following form:</p> <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p> <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p> </note>",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "documentSource": {
                    "description": "An S3 link to the job document.",
                    "maxLength": 1350,
                    "minLength": 1,
                    "type": "string"
                  },
                  "jobExecutionsRolloutConfig": {
                    "description": "Allows you to create a staged rollout of a job.",
                    "properties": {
                      "exponentialRate": { "$ref": "#/components/schemas/ExponentialRolloutRate" },
                      "maximumPerMinute": { "$ref": "#/components/schemas/MaxJobExecutionsPerMin" }
                    },
                    "type": "object"
                  },
                  "presignedUrlConfig": {
                    "description": "Configuration for pre-signed S3 URLs.",
                    "properties": {
                      "expiresInSec": { "$ref": "#/components/schemas/ExpiresInSec" },
                      "roleArn": { "$ref": "#/components/schemas/RoleArn" }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage the job.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  },
                  "targetSelection": {
                    "description": "Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.",
                    "enum": ["CONTINUOUS", "SNAPSHOT"],
                    "type": "string"
                  },
                  "targets": {
                    "description": "A list of things and thing groups to which the job should be sent.",
                    "items": { "$ref": "#/components/schemas/TargetArn" },
                    "minItems": 1,
                    "type": "array"
                  },
                  "timeoutConfig": {
                    "description": "Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.",
                    "properties": {
                      "inProgressTimeoutInMinutes": { "$ref": "#/components/schemas/InProgressTimeoutInMinutes" }
                    },
                    "type": "object"
                  }
                },
                "required": ["targets", "abortConfig"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateJobResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/jobs/{jobId}/cancel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Cancels a job.",
        "operationId": "CancelJob",
        "parameters": [
          {
            "description": "The unique identifier you assigned to this job when it was created.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "<p>(Optional) If <code>true</code> job executions with status \"IN_PROGRESS\" and \"QUEUED\" are canceled, otherwise only job executions with status \"QUEUED\" are canceled. The default is <code>false</code>.</p> <p>Canceling a job which is \"IN_PROGRESS\", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.</p>",
            "in": "query",
            "name": "force",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment": {
                    "description": "An optional comment string describing why the job was canceled.",
                    "maxLength": 2028,
                    "pattern": "[^\\p{C}]+",
                    "type": "string"
                  },
                  "reasonCode": {
                    "description": "(Optional)A reason code string that explains why the job was canceled.",
                    "maxLength": 128,
                    "pattern": "[\\p{Upper}\\p{Digit}_]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CancelJobResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/jobs/{jobId}/job-document": {
      "get": {
        "description": "Gets a job document.",
        "operationId": "GetJobDocument",
        "parameters": [
          {
            "description": "The unique identifier you assigned to this job when it was created.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetJobDocumentResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/jobs/{jobId}/targets": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to \"CONTINUOUS\".</p> </li> <li> <p>The job status must currently be \"IN_PROGRESS\".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>",
        "operationId": "AssociateTargetsWithJob",
        "parameters": [
          {
            "description": "The unique identifier you assigned to this job when it was created.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment": {
                    "description": "An optional comment string describing why the job was associated with the targets.",
                    "maxLength": 2028,
                    "pattern": "[^\\p{C}]+",
                    "type": "string"
                  },
                  "targets": {
                    "description": "A list of thing group ARNs that define the targets of the job.",
                    "items": { "$ref": "#/components/schemas/TargetArn" },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": ["targets"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AssociateTargetsWithJobResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/jobs/{jobId}/things": {
      "get": {
        "description": "Lists the job executions for a job.",
        "operationId": "ListJobExecutionsForJob",
        "parameters": [
          {
            "description": "The unique identifier you assigned to this job when it was created.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "The status of the job.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["QUEUED", "IN_PROGRESS", "SUCCEEDED", "FAILED", "TIMED_OUT", "REJECTED", "REMOVED", "CANCELED"]
            }
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListJobExecutionsForJobResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/keys-and-certificate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>",
        "operationId": "CreateKeysAndCertificate",
        "parameters": [
          {
            "description": "Specifies whether the certificate is active.",
            "in": "query",
            "name": "setAsActive",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateKeysAndCertificateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/loggingOptions": {
      "get": {
        "description": "<p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>",
        "operationId": "GetLoggingOptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetLoggingOptionsResponse" } }
            }
          },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>",
        "operationId": "SetLoggingOptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "loggingOptionsPayload": {
                    "description": "Describes the logging options payload.",
                    "properties": {
                      "logLevel": { "$ref": "#/components/schemas/LogLevel" },
                      "roleArn": { "$ref": "#/components/schemas/AwsArn" }
                    },
                    "type": "object"
                  }
                },
                "required": ["loggingOptionsPayload"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/mitigationactions/actions": {
      "get": {
        "description": "Gets a list of all mitigation actions that match the specified filter criteria.",
        "operationId": "ListMitigationActions",
        "parameters": [
          {
            "description": "Specify a value to limit the result to mitigation actions with a specific action type.",
            "in": "query",
            "name": "actionType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "UPDATE_DEVICE_CERTIFICATE",
                "UPDATE_CA_CERTIFICATE",
                "ADD_THINGS_TO_THING_GROUP",
                "REPLACE_DEFAULT_POLICY_VERSION",
                "ENABLE_IOT_LOGGING",
                "PUBLISH_FINDING_TO_SNS"
              ]
            }
          },
          {
            "description": "The maximum number of results to return at one time. The default is 25.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListMitigationActionsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/mitigationactions/actions/{actionName}": {
      "delete": {
        "description": "Deletes a defined mitigation action from your AWS account.",
        "operationId": "DeleteMitigationAction",
        "parameters": [
          {
            "description": "The name of the mitigation action that you want to delete.",
            "in": "path",
            "name": "actionName",
            "required": true,
            "schema": { "type": "string", "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteMitigationActionResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about a mitigation action.",
        "operationId": "DescribeMitigationAction",
        "parameters": [
          {
            "description": "The friendly name that uniquely identifies the mitigation action.",
            "in": "path",
            "name": "actionName",
            "required": true,
            "schema": { "type": "string", "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeMitigationActionResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates the definition for the specified mitigation action.",
        "operationId": "UpdateMitigationAction",
        "parameters": [
          {
            "description": "The friendly name for the mitigation action. You can't change the name by using <code>UpdateMitigationAction</code>. Instead, you must delete and re-create the mitigation action with the new name.",
            "in": "path",
            "name": "actionName",
            "required": true,
            "schema": { "type": "string", "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "actionParams": {
                    "description": "The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).",
                    "properties": {
                      "addThingsToThingGroupParams": { "$ref": "#/components/schemas/AddThingsToThingGroupParams" },
                      "enableIoTLoggingParams": { "$ref": "#/components/schemas/EnableIoTLoggingParams" },
                      "publishFindingToSnsParams": { "$ref": "#/components/schemas/PublishFindingToSnsParams" },
                      "replaceDefaultPolicyVersionParams": {
                        "$ref": "#/components/schemas/ReplaceDefaultPolicyVersionParams"
                      },
                      "updateCACertificateParams": { "$ref": "#/components/schemas/UpdateCACertificateParams" },
                      "updateDeviceCertificateParams": { "$ref": "#/components/schemas/UpdateDeviceCertificateParams" }
                    },
                    "type": "object"
                  },
                  "roleArn": {
                    "description": "The ARN of the IAM role that is used to apply the mitigation action.",
                    "maxLength": 2048,
                    "minLength": 20,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateMitigationActionResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "post": {
        "description": "Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Each mitigation action can apply only one type of change.",
        "operationId": "CreateMitigationAction",
        "parameters": [
          {
            "description": "A friendly name for the action. Choose a friendly name that accurately describes the action (for example, <code>EnableLoggingAction</code>).",
            "in": "path",
            "name": "actionName",
            "required": true,
            "schema": { "type": "string", "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "actionParams": {
                    "description": "The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).",
                    "properties": {
                      "addThingsToThingGroupParams": { "$ref": "#/components/schemas/AddThingsToThingGroupParams" },
                      "enableIoTLoggingParams": { "$ref": "#/components/schemas/EnableIoTLoggingParams" },
                      "publishFindingToSnsParams": { "$ref": "#/components/schemas/PublishFindingToSnsParams" },
                      "replaceDefaultPolicyVersionParams": {
                        "$ref": "#/components/schemas/ReplaceDefaultPolicyVersionParams"
                      },
                      "updateCACertificateParams": { "$ref": "#/components/schemas/UpdateCACertificateParams" },
                      "updateDeviceCertificateParams": { "$ref": "#/components/schemas/UpdateDeviceCertificateParams" }
                    },
                    "type": "object"
                  },
                  "roleArn": {
                    "description": "The ARN of the IAM role that is used to apply the mitigation action.",
                    "maxLength": 2048,
                    "minLength": 20,
                    "type": "string"
                  },
                  "tags": {
                    "description": "Metadata that can be used to manage the mitigation action.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  }
                },
                "required": ["roleArn", "actionParams"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateMitigationActionResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/otaUpdates": {
      "get": {
        "description": "Lists OTA updates.",
        "operationId": "ListOTAUpdates",
        "parameters": [
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "A token used to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The OTA update job status.",
            "in": "query",
            "name": "otaUpdateStatus",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["CREATE_PENDING", "CREATE_IN_PROGRESS", "CREATE_COMPLETE", "CREATE_FAILED"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListOTAUpdatesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/otaUpdates/{otaUpdateId}": {
      "delete": {
        "description": "Delete an OTA update.",
        "operationId": "DeleteOTAUpdate",
        "parameters": [
          {
            "description": "The OTA update ID to delete.",
            "in": "path",
            "name": "otaUpdateId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "Specifies if the stream associated with an OTA update should be deleted when the OTA update is deleted.",
            "in": "query",
            "name": "deleteStream",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Specifies if the AWS Job associated with the OTA update should be deleted with the OTA update is deleted.",
            "in": "query",
            "name": "forceDeleteAWSJob",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteOTAUpdateResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          }
        }
      },
      "get": {
        "description": "Gets an OTA update.",
        "operationId": "GetOTAUpdate",
        "parameters": [
          {
            "description": "The OTA update ID.",
            "in": "path",
            "name": "otaUpdateId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetOTAUpdateResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates an AWS IoT OTAUpdate on a target group of things or groups.",
        "operationId": "CreateOTAUpdate",
        "parameters": [
          {
            "description": "The ID of the OTA update to be created.",
            "in": "path",
            "name": "otaUpdateId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "additionalParameters": {
                    "additionalProperties": { "$ref": "#/components/schemas/Value" },
                    "description": "A list of additional OTA update parameters which are name-value pairs.",
                    "type": "object"
                  },
                  "awsJobExecutionsRolloutConfig": {
                    "description": "Configuration for the rollout of OTA updates.",
                    "properties": { "maximumPerMinute": { "$ref": "#/components/schemas/MaximumPerMinute" } },
                    "type": "object"
                  },
                  "description": {
                    "description": "The description of the OTA update.",
                    "maxLength": 2028,
                    "pattern": "[^\\p{C}]+",
                    "type": "string"
                  },
                  "files": {
                    "description": "The files to be streamed by the OTA update.",
                    "items": { "$ref": "#/components/schemas/OTAUpdateFile" },
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "array"
                  },
                  "roleArn": {
                    "description": "The IAM role that allows access to the AWS IoT Jobs service.",
                    "maxLength": 2048,
                    "minLength": 20,
                    "type": "string"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage updates.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  },
                  "targetSelection": {
                    "description": "Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.",
                    "enum": ["CONTINUOUS", "SNAPSHOT"],
                    "type": "string"
                  },
                  "targets": {
                    "description": "The targeted devices to receive OTA updates.",
                    "items": { "$ref": "#/components/schemas/Target" },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": ["targets", "files", "roleArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateOTAUpdateResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "487": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "description": "Lists your policies.",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "description": "The marker for the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "The result page size.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "Specifies the order for results. If true, the results are returned in ascending creation order.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListPoliciesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/policies/{policyName}": {
      "delete": {
        "description": "<p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>",
        "operationId": "DeletePolicy",
        "parameters": [
          {
            "description": "The name of the policy to delete.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "DeleteConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteConflictException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified policy with the policy document of the default version.",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "description": "The name of the policy.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPolicyResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>",
        "operationId": "CreatePolicy",
        "parameters": [
          {
            "description": "The policy name.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "policyDocument": {
                    "description": "The JSON document that describes the policy. <b>policyDocument</b> must have a minimum length of 1, with a maximum length of 2048, excluding whitespace.",
                    "type": "string"
                  }
                },
                "required": ["policyDocument"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreatePolicyResponse" } } }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "MalformedPolicyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MalformedPolicyException" } } }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/policies/{policyName}/version": {
      "get": {
        "description": "Lists the versions of the specified policy and identifies the default version.",
        "operationId": "ListPolicyVersions",
        "parameters": [
          {
            "description": "The policy name.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListPolicyVersionsResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>",
        "operationId": "CreatePolicyVersion",
        "parameters": [
          {
            "description": "The policy name.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          },
          {
            "description": "Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).",
            "in": "query",
            "name": "setAsDefault",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "policyDocument": {
                    "description": "The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespace.",
                    "type": "string"
                  }
                },
                "required": ["policyDocument"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreatePolicyVersionResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "MalformedPolicyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MalformedPolicyException" } } }
          },
          "482": {
            "description": "VersionsLimitExceededException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/VersionsLimitExceededException" } }
            }
          },
          "483": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "486": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "487": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/policies/{policyName}/version/{policyVersionId}": {
      "delete": {
        "description": "Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.",
        "operationId": "DeletePolicyVersion",
        "parameters": [
          {
            "description": "The name of the policy.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          },
          {
            "description": "The policy version ID.",
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "[0-9]+" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "DeleteConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteConflictException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified policy version.",
        "operationId": "GetPolicyVersion",
        "parameters": [
          {
            "description": "The name of the policy.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          },
          {
            "description": "The policy version ID.",
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "[0-9]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetPolicyVersionResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.",
        "operationId": "SetDefaultPolicyVersion",
        "parameters": [
          {
            "description": "The policy name.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          },
          {
            "description": "The policy version ID.",
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "[0-9]+" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/policy-principals#x-amzn-iot-policy": {
      "get": {
        "deprecated": true,
        "description": "<p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>",
        "operationId": "ListPolicyPrincipals",
        "parameters": [
          {
            "description": "The policy name.",
            "in": "header",
            "name": "x-amzn-iot-policy",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          },
          {
            "description": "The marker for the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "The result page size.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "Specifies the order for results. If true, the results are returned in ascending creation order.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListPolicyPrincipalsResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/policy-targets/{policyName}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "List targets for the specified policy.",
        "operationId": "ListTargetsForPolicy",
        "parameters": [
          {
            "description": "The policy name.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          },
          {
            "description": "A marker used to get the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTargetsForPolicyResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/principal-policies#x-amzn-iot-principal": {
      "get": {
        "deprecated": true,
        "description": "<p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href=\"https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax\">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>",
        "operationId": "ListPrincipalPolicies",
        "parameters": [
          {
            "description": "The principal.",
            "in": "header",
            "name": "x-amzn-iot-principal",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The marker for the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "The result page size.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "Specifies the order for results. If true, results are returned in ascending creation order.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListPrincipalPoliciesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/principal-policies/{policyName}#x-amzn-iot-principal": {
      "delete": {
        "deprecated": true,
        "description": "<p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>",
        "operationId": "DetachPrincipalPolicy",
        "parameters": [
          {
            "description": "The name of the policy to detach.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          },
          {
            "description": "<p>The principal.</p> <p>If the principal is a certificate, specify the certificate ARN. If the principal is an Amazon Cognito identity, specify the identity ID.</p>",
            "in": "header",
            "name": "x-amzn-iot-principal",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "deprecated": true,
        "description": "<p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>",
        "operationId": "AttachPrincipalPolicy",
        "parameters": [
          {
            "description": "The policy name.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          },
          {
            "description": "The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID.",
            "in": "header",
            "name": "x-amzn-iot-principal",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/principals/things#x-amzn-principal": {
      "get": {
        "description": "Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. ",
        "operationId": "ListPrincipalThings",
        "parameters": [
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return in this operation.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The principal.",
            "in": "header",
            "name": "x-amzn-principal",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListPrincipalThingsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/registrationcode": {
      "delete": {
        "description": "Deletes a CA certificate registration code.",
        "operationId": "DeleteRegistrationCode",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRegistrationCodeResponse" } }
            }
          },
          "480": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets a registration code used to register a CA certificate with AWS IoT.",
        "operationId": "GetRegistrationCode",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetRegistrationCodeResponse" } }
            }
          },
          "480": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/reject-certificate-transfer/{certificateId}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "<p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>",
        "operationId": "RejectCertificateTransfer",
        "parameters": [
          {
            "description": "The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)",
            "in": "path",
            "name": "certificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "rejectReason": {
                    "description": "The reason the certificate transfer was rejected.",
                    "maxLength": 128,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "TransferAlreadyCompletedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TransferAlreadyCompletedException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/role-aliases": {
      "get": {
        "description": "Lists the role aliases registered in your account.",
        "operationId": "ListRoleAliases",
        "parameters": [
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "A marker used to get the next set of results.",
            "in": "query",
            "name": "marker",
            "required": false,
            "schema": { "type": "string", "pattern": "[A-Za-z0-9+/]+={0,2}" }
          },
          {
            "description": "Return the list of role aliases in ascending alphabetical order.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListRoleAliasesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/role-aliases/{roleAlias}": {
      "delete": {
        "description": "Deletes a role alias",
        "operationId": "DeleteRoleAlias",
        "parameters": [
          {
            "description": "The role alias to delete.",
            "in": "path",
            "name": "roleAlias",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRoleAliasResponse" } } }
          },
          "480": {
            "description": "DeleteConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteConflictException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "get": {
        "description": "Describes a role alias.",
        "operationId": "DescribeRoleAlias",
        "parameters": [
          {
            "description": "The role alias to describe.",
            "in": "path",
            "name": "roleAlias",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeRoleAliasResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a role alias.",
        "operationId": "CreateRoleAlias",
        "parameters": [
          {
            "description": "The role alias that points to a role ARN. This allows you to change the role without having to update the device.",
            "in": "path",
            "name": "roleAlias",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialDurationSeconds": {
                    "description": "How long (in seconds) the credentials will be valid.",
                    "maximum": 3600,
                    "minimum": 900,
                    "type": "integer"
                  },
                  "roleArn": { "description": "The role ARN.", "maxLength": 2048, "minLength": 20, "type": "string" }
                },
                "required": ["roleArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateRoleAliasResponse" } } }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "put": {
        "description": "Updates a role alias.",
        "operationId": "UpdateRoleAlias",
        "parameters": [
          {
            "description": "The role alias to update.",
            "in": "path",
            "name": "roleAlias",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w=,@-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialDurationSeconds": {
                    "description": "The number of seconds the credential will be valid.",
                    "maximum": 3600,
                    "minimum": 900,
                    "type": "integer"
                  },
                  "roleArn": { "description": "The role ARN.", "maxLength": 2048, "minLength": 20, "type": "string" }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateRoleAliasResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/rules": {
      "get": {
        "description": "Lists the rules for the specific topic.",
        "operationId": "ListTopicRules",
        "parameters": [
          {
            "description": "The topic.",
            "in": "query",
            "name": "topic",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 10000 }
          },
          {
            "description": "A token used to retrieve the next value.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Specifies whether the rule is disabled.",
            "in": "query",
            "name": "ruleDisabled",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTopicRulesResponse" } } }
          },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/rules/{ruleName}": {
      "delete": {
        "description": "Deletes the rule.",
        "operationId": "DeleteTopicRule",
        "parameters": [
          {
            "description": "The name of the rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ConflictingResourceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConflictingResourceUpdateException" } }
            }
          }
        }
      },
      "get": {
        "description": "Gets information about the rule.",
        "operationId": "GetTopicRule",
        "parameters": [
          {
            "description": "The name of the rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetTopicRuleResponse" } } }
          },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.",
        "operationId": "ReplaceTopicRule",
        "parameters": [
          {
            "description": "The name of the rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ReplaceTopicRuleBody" },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "SqlParseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SqlParseException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ConflictingResourceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConflictingResourceUpdateException" } }
            }
          }
        }
      },
      "post": {
        "description": "Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.",
        "operationId": "CreateTopicRule",
        "parameters": [
          {
            "description": "The name of the rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          },
          {
            "description": "<p>Metadata which can be used to manage the topic rule.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: --tags \"key1=value1&amp;key2=value2...\"</p> <p>For the cli-input-json file use format: \"tags\": \"key1=value1&amp;key2=value2...\"</p> </note>",
            "in": "header",
            "name": "x-amz-tagging",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ReplaceTopicRuleBody" },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "SqlParseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SqlParseException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "ConflictingResourceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConflictingResourceUpdateException" } }
            }
          }
        }
      }
    },
    "/rules/{ruleName}/disable": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Disables the rule.",
        "operationId": "DisableTopicRule",
        "parameters": [
          {
            "description": "The name of the rule to disable.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ConflictingResourceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConflictingResourceUpdateException" } }
            }
          }
        }
      }
    },
    "/rules/{ruleName}/enable": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Enables the rule.",
        "operationId": "EnableTopicRule",
        "parameters": [
          {
            "description": "The name of the topic rule to enable.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ConflictingResourceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConflictingResourceUpdateException" } }
            }
          }
        }
      }
    },
    "/security-profile-behaviors/validate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Validates a Device Defender security profile behaviors specification.",
        "operationId": "ValidateSecurityProfileBehaviors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "behaviors": {
                    "description": "Specifies the behaviors that, when violated by a device (thing), cause an alert.",
                    "items": { "$ref": "#/components/schemas/Behavior" },
                    "maxItems": 100,
                    "type": "array"
                  }
                },
                "required": ["behaviors"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidateSecurityProfileBehaviorsResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/security-profiles": {
      "get": {
        "description": "Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.",
        "operationId": "ListSecurityProfiles",
        "parameters": [
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListSecurityProfilesResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/security-profiles-for-target#securityProfileTargetArn": {
      "get": {
        "description": "Lists the Device Defender security profiles attached to a target (thing group).",
        "operationId": "ListSecurityProfilesForTarget",
        "parameters": [
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "If true, return child groups too.",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "The ARN of the target (thing group) whose attached security profiles you want to get.",
            "in": "query",
            "name": "securityProfileTargetArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListSecurityProfilesForTargetResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/security-profiles/{securityProfileName}": {
      "delete": {
        "description": "Deletes a Device Defender security profile.",
        "operationId": "DeleteSecurityProfile",
        "parameters": [
          {
            "description": "The name of the security profile to be deleted.",
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.",
            "in": "query",
            "name": "expectedVersion",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSecurityProfileResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about a Device Defender security profile.",
        "operationId": "DescribeSecurityProfile",
        "parameters": [
          {
            "description": "The name of the security profile whose information you want to get.",
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeSecurityProfileResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates a Device Defender security profile.",
        "operationId": "UpdateSecurityProfile",
        "parameters": [
          {
            "description": "The name of the security profile you want to update.",
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.",
            "in": "query",
            "name": "expectedVersion",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "additionalMetricsToRetain": {
                    "description": "A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here.",
                    "items": { "$ref": "#/components/schemas/BehaviorMetric" },
                    "type": "array"
                  },
                  "alertTargets": {
                    "additionalProperties": { "$ref": "#/components/schemas/AlertTarget" },
                    "description": "Where the alerts are sent. (Alerts are always sent to the console.)",
                    "type": "object"
                  },
                  "behaviors": {
                    "description": "Specifies the behaviors that, when violated by a device (thing), cause an alert.",
                    "items": { "$ref": "#/components/schemas/Behavior" },
                    "maxItems": 100,
                    "type": "array"
                  },
                  "deleteAdditionalMetricsToRetain": {
                    "description": "If true, delete all <code>additionalMetricsToRetain</code> defined for this security profile. If any <code>additionalMetricsToRetain</code> are defined in the current invocation, an exception occurs.",
                    "type": "boolean"
                  },
                  "deleteAlertTargets": {
                    "description": "If true, delete all <code>alertTargets</code> defined for this security profile. If any <code>alertTargets</code> are defined in the current invocation, an exception occurs.",
                    "type": "boolean"
                  },
                  "deleteBehaviors": {
                    "description": "If true, delete all <code>behaviors</code> defined for this security profile. If any <code>behaviors</code> are defined in the current invocation, an exception occurs.",
                    "type": "boolean"
                  },
                  "securityProfileDescription": {
                    "description": "A description of the security profile.",
                    "maxLength": 1000,
                    "pattern": "[\\p{Graph}\\x20]*",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateSecurityProfileResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "post": {
        "description": "Creates a Device Defender security profile.",
        "operationId": "CreateSecurityProfile",
        "parameters": [
          {
            "description": "The name you are giving to the security profile.",
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "additionalMetricsToRetain": {
                    "description": "A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here.",
                    "items": { "$ref": "#/components/schemas/BehaviorMetric" },
                    "type": "array"
                  },
                  "alertTargets": {
                    "additionalProperties": { "$ref": "#/components/schemas/AlertTarget" },
                    "description": "Specifies the destinations to which alerts are sent. (Alerts are always sent to the console.) Alerts are generated when a device (thing) violates a behavior.",
                    "type": "object"
                  },
                  "behaviors": {
                    "description": "Specifies the behaviors that, when violated by a device (thing), cause an alert.",
                    "items": { "$ref": "#/components/schemas/Behavior" },
                    "maxItems": 100,
                    "type": "array"
                  },
                  "securityProfileDescription": {
                    "description": "A description of the security profile.",
                    "maxLength": 1000,
                    "pattern": "[\\p{Graph}\\x20]*",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Metadata that can be used to manage the security profile.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateSecurityProfileResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/security-profiles/{securityProfileName}/targets": {
      "get": {
        "description": "Lists the targets (thing groups) associated with a given Device Defender security profile.",
        "operationId": "ListTargetsForSecurityProfile",
        "parameters": [
          {
            "description": "The security profile.",
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTargetsForSecurityProfileResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/security-profiles/{securityProfileName}/targets#securityProfileTargetArn": {
      "delete": {
        "description": "Disassociates a Device Defender security profile from a thing group or from this account.",
        "operationId": "DetachSecurityProfile",
        "parameters": [
          {
            "description": "The security profile that is detached.",
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The ARN of the thing group from which the security profile is detached.",
            "in": "query",
            "name": "securityProfileTargetArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DetachSecurityProfileResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.",
        "operationId": "AttachSecurityProfile",
        "parameters": [
          {
            "description": "The security profile that is attached.",
            "in": "path",
            "name": "securityProfileName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The ARN of the target (thing group) to which the security profile is attached.",
            "in": "query",
            "name": "securityProfileTargetArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AttachSecurityProfileResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/streams": {
      "get": {
        "description": "Lists all of the streams in your AWS account.",
        "operationId": "ListStreams",
        "parameters": [
          {
            "description": "The maximum number of results to return at a time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "A token used to get the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Set to true to return the list of streams in ascending order.",
            "in": "query",
            "name": "isAscendingOrder",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListStreamsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/streams/{streamId}": {
      "delete": {
        "description": "Deletes a stream.",
        "operationId": "DeleteStream",
        "parameters": [
          {
            "description": "The stream ID.",
            "in": "path",
            "name": "streamId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteStreamResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "DeleteConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteConflictException" } } }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about a stream.",
        "operationId": "DescribeStream",
        "parameters": [
          {
            "description": "The stream ID.",
            "in": "path",
            "name": "streamId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeStreamResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream. The total size of a file associated with the stream cannot exceed more than 2 MB. The stream will be created with version 0. If a stream is created with the same streamID as a stream that existed and was deleted within last 90 days, we will resurrect that old stream by incrementing the version by 1.",
        "operationId": "CreateStream",
        "parameters": [
          {
            "description": "The stream ID.",
            "in": "path",
            "name": "streamId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "A description of the stream.",
                    "maxLength": 2028,
                    "pattern": "[^\\p{C}]+",
                    "type": "string"
                  },
                  "files": {
                    "description": "The files to stream.",
                    "items": { "$ref": "#/components/schemas/StreamFile" },
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "array"
                  },
                  "roleArn": {
                    "description": "An IAM role that allows the IoT service principal assumes to access your S3 files.",
                    "maxLength": 2048,
                    "minLength": 20,
                    "type": "string"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage streams.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  }
                },
                "required": ["files", "roleArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateStreamResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "486": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "487": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "put": {
        "description": "Updates an existing stream. The stream version will be incremented by one.",
        "operationId": "UpdateStream",
        "parameters": [
          {
            "description": "The stream ID.",
            "in": "path",
            "name": "streamId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "The description of the stream.",
                    "maxLength": 2028,
                    "pattern": "[^\\p{C}]+",
                    "type": "string"
                  },
                  "files": {
                    "description": "The files associated with the stream.",
                    "items": { "$ref": "#/components/schemas/StreamFile" },
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "array"
                  },
                  "roleArn": {
                    "description": "An IAM role that allows the IoT service principal assumes to access your S3 files.",
                    "maxLength": 2048,
                    "minLength": 20,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateStreamResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/tags": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.",
        "operationId": "TagResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "resourceArn": { "description": "The ARN of the resource.", "type": "string" },
                  "tags": {
                    "description": "The new or modified tags for the resource.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  }
                },
                "required": ["resourceArn", "tags"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/tags#resourceArn": {
      "get": {
        "description": "Lists the tags (metadata) you have assigned to the resource.",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "description": "The ARN of the resource.",
            "in": "query",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/target-policies/{policyName}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Detaches a policy from the specified target.",
        "operationId": "DetachPolicy",
        "parameters": [
          {
            "description": "The policy to detach.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "target": { "description": "The target from which the policy will be detached.", "type": "string" }
                },
                "required": ["target"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      },
      "put": {
        "description": "Attaches a policy to the specified target.",
        "operationId": "AttachPolicy",
        "parameters": [
          {
            "description": "The name of the policy to attach.",
            "in": "path",
            "name": "policyName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[\\w+=,.@-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "target": {
                    "description": "The <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/iot-security-identity.html\">identity</a> to which the policy is attached.",
                    "type": "string"
                  }
                },
                "required": ["target"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/test-authorization": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.",
        "operationId": "TestAuthorization",
        "parameters": [
          {
            "description": "The MQTT client ID.",
            "in": "query",
            "name": "clientId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "authInfos": {
                    "description": "A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list.",
                    "items": { "$ref": "#/components/schemas/AuthInfo" },
                    "maxItems": 10,
                    "minItems": 1,
                    "type": "array"
                  },
                  "cognitoIdentityPoolId": { "description": "The Cognito identity pool ID.", "type": "string" },
                  "policyNamesToAdd": {
                    "description": "When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.",
                    "items": { "$ref": "#/components/schemas/PolicyName" },
                    "type": "array"
                  },
                  "policyNamesToSkip": {
                    "description": "When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.",
                    "items": { "$ref": "#/components/schemas/PolicyName" },
                    "type": "array"
                  },
                  "principal": { "description": "The principal.", "type": "string" }
                },
                "required": ["authInfos"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TestAuthorizationResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/thing-groups": {
      "get": {
        "description": "List the thing groups in your account.",
        "operationId": "ListThingGroups",
        "parameters": [
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "A filter that limits the results to those with the specified parent group.",
            "in": "query",
            "name": "parentGroup",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "A filter that limits the results to those with the specified name prefix.",
            "in": "query",
            "name": "namePrefixFilter",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "If true, return child groups as well.",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListThingGroupsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/thing-groups/addThingToThingGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Adds a thing to a thing group.",
        "operationId": "AddThingToThingGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "overrideDynamicGroups": {
                    "description": "Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.",
                    "type": "boolean"
                  },
                  "thingArn": { "description": "The ARN of the thing to add to a group.", "type": "string" },
                  "thingGroupArn": {
                    "description": "The ARN of the group to which you are adding a thing.",
                    "type": "string"
                  },
                  "thingGroupName": {
                    "description": "The name of the group to which you are adding a thing.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "thingName": {
                    "description": "The name of the thing to add to a group.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AddThingToThingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/thing-groups/removeThingFromThingGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Remove the specified thing from the specified group.",
        "operationId": "RemoveThingFromThingGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "thingArn": { "description": "The ARN of the thing to remove from the group.", "type": "string" },
                  "thingGroupArn": { "description": "The group ARN.", "type": "string" },
                  "thingGroupName": {
                    "description": "The group name.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "thingName": {
                    "description": "The name of the thing to remove from the group.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RemoveThingFromThingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/thing-groups/updateThingGroupsForThing": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates the groups to which the thing belongs.",
        "operationId": "UpdateThingGroupsForThing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "overrideDynamicGroups": {
                    "description": "Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.",
                    "type": "boolean"
                  },
                  "thingGroupsToAdd": {
                    "description": "The groups to which the thing will be added.",
                    "items": { "$ref": "#/components/schemas/ThingGroupName" },
                    "type": "array"
                  },
                  "thingGroupsToRemove": {
                    "description": "The groups from which the thing will be removed.",
                    "items": { "$ref": "#/components/schemas/ThingGroupName" },
                    "type": "array"
                  },
                  "thingName": {
                    "description": "The thing whose group memberships will be updated.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateThingGroupsForThingResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/thing-groups/{thingGroupName}": {
      "delete": {
        "description": "Deletes a thing group.",
        "operationId": "DeleteThingGroup",
        "parameters": [
          {
            "description": "The name of the thing group to delete.",
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The expected version of the thing group to delete.",
            "in": "query",
            "name": "expectedVersion",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteThingGroupResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Describe a thing group.",
        "operationId": "DescribeThingGroup",
        "parameters": [
          {
            "description": "The name of the thing group.",
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeThingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Update a thing group.",
        "operationId": "UpdateThingGroup",
        "parameters": [
          {
            "description": "The thing group to update.",
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expectedVersion": {
                    "description": "The expected version of the thing group. If this does not match the version of the thing group being updated, the update will fail.",
                    "type": "integer"
                  },
                  "thingGroupProperties": {
                    "description": "Thing group properties.",
                    "properties": {
                      "attributePayload": { "$ref": "#/components/schemas/AttributePayload" },
                      "thingGroupDescription": { "$ref": "#/components/schemas/ThingGroupDescription" }
                    },
                    "type": "object"
                  }
                },
                "required": ["thingGroupProperties"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateThingGroupResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "post": {
        "description": "<p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html\">Authorization</a> for information about authorizing control plane actions.</p> </note>",
        "operationId": "CreateThingGroup",
        "parameters": [
          {
            "description": "The thing group name to create.",
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "parentGroupName": {
                    "description": "The name of the parent thing group.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage the thing group.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  },
                  "thingGroupProperties": {
                    "description": "Thing group properties.",
                    "properties": {
                      "attributePayload": { "$ref": "#/components/schemas/AttributePayload" },
                      "thingGroupDescription": { "$ref": "#/components/schemas/ThingGroupDescription" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateThingGroupResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/thing-groups/{thingGroupName}/things": {
      "get": {
        "description": "Lists the things in the specified group.",
        "operationId": "ListThingsInThingGroup",
        "parameters": [
          {
            "description": "The thing group name.",
            "in": "path",
            "name": "thingGroupName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "When true, list things in this thing group and in all child groups as well.",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListThingsInThingGroupResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/thing-registration-tasks": {
      "get": {
        "description": "List bulk thing provisioning tasks.",
        "operationId": "ListThingRegistrationTasks",
        "parameters": [
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The status of the bulk thing provisioning task.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": { "type": "string", "enum": ["InProgress", "Completed", "Failed", "Cancelled", "Cancelling"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListThingRegistrationTasksResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a bulk thing provisioning task.",
        "operationId": "StartThingRegistrationTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "inputFileBucket": {
                    "description": "The S3 bucket that contains the input file.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9._-]+",
                    "type": "string"
                  },
                  "inputFileKey": {
                    "description": "The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9!_.*'()-\\/]+",
                    "type": "string"
                  },
                  "roleArn": {
                    "description": "The IAM role ARN that grants permission the input file.",
                    "maxLength": 2048,
                    "minLength": 20,
                    "type": "string"
                  },
                  "templateBody": { "description": "The provisioning template.", "type": "string" }
                },
                "required": ["templateBody", "inputFileBucket", "inputFileKey", "roleArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartThingRegistrationTaskResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/thing-registration-tasks/{taskId}": {
      "get": {
        "description": "Describes a bulk thing provisioning task.",
        "operationId": "DescribeThingRegistrationTask",
        "parameters": [
          {
            "description": "The task ID.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "maxLength": 40 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeThingRegistrationTaskResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/thing-registration-tasks/{taskId}/cancel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Cancels a bulk thing provisioning task.",
        "operationId": "StopThingRegistrationTask",
        "parameters": [
          {
            "description": "The bulk thing provisioning task ID.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "maxLength": 40 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StopThingRegistrationTaskResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/thing-registration-tasks/{taskId}/reports#reportType": {
      "get": {
        "description": "Information about the thing registration tasks.",
        "operationId": "ListThingRegistrationTaskReports",
        "parameters": [
          {
            "description": "The id of the task.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": { "type": "string", "maxLength": 40 }
          },
          {
            "description": "The type of task report.",
            "in": "query",
            "name": "reportType",
            "required": true,
            "schema": { "type": "string", "enum": ["ERRORS", "RESULTS"] }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return per request.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListThingRegistrationTaskReportsResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/thing-types": {
      "get": {
        "description": "Lists the existing thing types.",
        "operationId": "ListThingTypes",
        "parameters": [
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return in this operation.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The name of the thing type.",
            "in": "query",
            "name": "thingTypeName",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListThingTypesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/thing-types/{thingTypeName}": {
      "delete": {
        "description": "Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.",
        "operationId": "DeleteThingType",
        "parameters": [
          {
            "description": "The name of the thing type.",
            "in": "path",
            "name": "thingTypeName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteThingTypeResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified thing type.",
        "operationId": "DescribeThingType",
        "parameters": [
          {
            "description": "The name of the thing type.",
            "in": "path",
            "name": "thingTypeName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeThingTypeResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new thing type.",
        "operationId": "CreateThingType",
        "parameters": [
          {
            "description": "The name of the thing type.",
            "in": "path",
            "name": "thingTypeName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "description": "Metadata which can be used to manage the thing type.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  },
                  "thingTypeProperties": {
                    "description": "The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.",
                    "properties": {
                      "searchableAttributes": { "$ref": "#/components/schemas/SearchableAttributes" },
                      "thingTypeDescription": { "$ref": "#/components/schemas/ThingTypeDescription" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateThingTypeResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          }
        }
      }
    },
    "/thing-types/{thingTypeName}/deprecate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deprecates a thing type. You can not associate new things with deprecated thing type.",
        "operationId": "DeprecateThingType",
        "parameters": [
          {
            "description": "The name of the thing type to deprecate.",
            "in": "path",
            "name": "thingTypeName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "undoDeprecate": {
                    "description": "Whether to undeprecate a deprecated thing type. If <b>true</b>, the thing type will not be deprecated anymore and you can associate it with things.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeprecateThingTypeResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/things": {
      "get": {
        "description": "Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. ",
        "operationId": "ListThings",
        "parameters": [
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return in this operation.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The attribute name used to search for things.",
            "in": "query",
            "name": "attributeName",
            "required": false,
            "schema": { "type": "string", "maxLength": 128, "pattern": "[a-zA-Z0-9_.,@/:#-]+" }
          },
          {
            "description": "The attribute value used to search for things.",
            "in": "query",
            "name": "attributeValue",
            "required": false,
            "schema": { "type": "string", "maxLength": 800, "pattern": "[a-zA-Z0-9_.,@/:#-]*" }
          },
          {
            "description": "The name of the thing type used to search for things.",
            "in": "query",
            "name": "thingTypeName",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListThingsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Provisions a thing.",
        "operationId": "RegisterThing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "parameters": {
                    "additionalProperties": { "$ref": "#/components/schemas/Value" },
                    "description": "The parameters for provisioning a thing. See <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/programmatic-provisioning.html\">Programmatic Provisioning</a> for more information.",
                    "type": "object"
                  },
                  "templateBody": {
                    "description": "The provisioning template. See <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/programmatic-provisioning.html\">Programmatic Provisioning</a> for more information.",
                    "type": "string"
                  }
                },
                "required": ["templateBody"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegisterThingResponse" } } }
          },
          "480": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "481": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "ConflictingResourceUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConflictingResourceUpdateException" } }
            }
          },
          "486": {
            "description": "ResourceRegistrationFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceRegistrationFailureException" } }
            }
          }
        }
      }
    },
    "/things/{thingName}": {
      "delete": {
        "description": "Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.",
        "operationId": "DeleteThing",
        "parameters": [
          {
            "description": "The name of the thing to delete.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>DeleteThing</code> request is rejected with a <code>VersionConflictException</code>.",
            "in": "query",
            "name": "expectedVersion",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteThingResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "486": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "get": {
        "description": "Gets information about the specified thing.",
        "operationId": "DescribeThing",
        "parameters": [
          {
            "description": "The name of the thing.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeThingResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "Updates the data for a thing.",
        "operationId": "UpdateThing",
        "parameters": [
          {
            "description": "The name of the thing to update.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "attributePayload": {
                    "description": "The attribute payload.",
                    "properties": {
                      "attributes": { "$ref": "#/components/schemas/Attributes" },
                      "merge": { "$ref": "#/components/schemas/Flag" }
                    },
                    "type": "object"
                  },
                  "expectedVersion": {
                    "description": "The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.",
                    "type": "integer"
                  },
                  "removeThingType": {
                    "description": "Remove a thing type association. If <b>true</b>, the association is removed.",
                    "type": "boolean"
                  },
                  "thingTypeName": {
                    "description": "The name of the thing type.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateThingResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "post": {
        "description": "<p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html\">Authorization</a> for information about authorizing control plane actions.</p> </note>",
        "operationId": "CreateThing",
        "parameters": [
          {
            "description": "The name of the thing to create.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "attributePayload": {
                    "description": "The attribute payload.",
                    "properties": {
                      "attributes": { "$ref": "#/components/schemas/Attributes" },
                      "merge": { "$ref": "#/components/schemas/Flag" }
                    },
                    "type": "object"
                  },
                  "billingGroupName": {
                    "description": "The name of the billing group the thing will be added to.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  },
                  "thingTypeName": {
                    "description": "The name of the thing type associated with the new thing.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9:_-]+",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateThingResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/things/{thingName}/jobs": {
      "get": {
        "description": "Lists the job executions for the specified thing.",
        "operationId": "ListJobExecutionsForThing",
        "parameters": [
          {
            "description": "The thing name.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "An optional filter that lets you search for jobs that have the specified status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["QUEUED", "IN_PROGRESS", "SUCCEEDED", "FAILED", "TIMED_OUT", "REJECTED", "REMOVED", "CANCELED"]
            }
          },
          {
            "description": "The maximum number of results to be returned per request.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListJobExecutionsForThingResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/things/{thingName}/jobs/{jobId}": {
      "get": {
        "description": "Describes a job execution.",
        "operationId": "DescribeJobExecution",
        "parameters": [
          {
            "description": "The unique identifier you assigned to this job when it was created.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "The name of the thing on which the job execution is running.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "A string (consisting of the digits \"0\" through \"9\" which is used to specify a particular job execution on a particular device.",
            "in": "query",
            "name": "executionNumber",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeJobExecutionResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/things/{thingName}/jobs/{jobId}/cancel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Cancels the execution of a job for a given thing.",
        "operationId": "CancelJobExecution",
        "parameters": [
          {
            "description": "The ID of the job to be canceled.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "The name of the thing whose execution of the job will be canceled.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "<p>(Optional) If <code>true</code> the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code> will be thrown. The default is <code>false</code>.</p> <p>Canceling a job execution which is \"IN_PROGRESS\", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p>",
            "in": "query",
            "name": "force",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expectedVersion": {
                    "description": "(Optional) The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)",
                    "type": "integer"
                  },
                  "statusDetails": {
                    "additionalProperties": { "$ref": "#/components/schemas/DetailsValue" },
                    "description": "A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InvalidStateTransitionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidStateTransitionException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "VersionConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VersionConflictException" } } }
          }
        }
      }
    },
    "/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}": {
      "delete": {
        "description": "Deletes a job execution.",
        "operationId": "DeleteJobExecution",
        "parameters": [
          {
            "description": "The ID of the job whose execution on a particular device will be deleted.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 64, "pattern": "[a-zA-Z0-9_-]+" }
          },
          {
            "description": "The name of the thing whose job execution will be deleted.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "<p>The ID of the job execution to be deleted. The <code>executionNumber</code> refers to the execution of a particular job on a particular device.</p> <p>Note that once a job execution is deleted, the <code>executionNumber</code> may be reused by IoT, so be sure you get and use the correct value here.</p>",
            "in": "path",
            "name": "executionNumber",
            "required": true,
            "schema": { "type": "integer" }
          },
          {
            "description": "<p>(Optional) When true, you can delete a job execution which is \"IN_PROGRESS\". Otherwise, you can only delete a job execution which is in a terminal state (\"SUCCEEDED\", \"FAILED\", \"REJECTED\", \"REMOVED\" or \"CANCELED\") or an exception will occur. The default is false.</p> <note> <p>Deleting a job execution which is \"IN_PROGRESS\", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p> </note>",
            "in": "query",
            "name": "force",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InvalidStateTransitionException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidStateTransitionException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/things/{thingName}/principals": {
      "get": {
        "description": "Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.",
        "operationId": "ListThingPrincipals",
        "parameters": [
          {
            "description": "The name of the thing.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListThingPrincipalsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/things/{thingName}/principals#x-amzn-principal": {
      "delete": {
        "description": "<p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>",
        "operationId": "DetachThingPrincipal",
        "parameters": [
          {
            "description": "The name of the thing.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "If the principal is a certificate, this value must be ARN of the certificate. If the principal is an Amazon Cognito identity, this value must be the ID of the Amazon Cognito identity.",
            "in": "header",
            "name": "x-amzn-principal",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DetachThingPrincipalResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.",
        "operationId": "AttachThingPrincipal",
        "parameters": [
          {
            "description": "The name of the thing.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The principal, such as a certificate or other credential.",
            "in": "header",
            "name": "x-amzn-principal",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AttachThingPrincipalResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/things/{thingName}/thing-groups": {
      "get": {
        "description": "List the thing groups to which the specified thing belongs.",
        "operationId": "ListThingGroupsForThing",
        "parameters": [
          {
            "description": "The thing name.",
            "in": "path",
            "name": "thingName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The token to retrieve the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListThingGroupsForThingResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/transfer-certificate/{certificateId}#targetAwsAccount": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "patch": {
        "description": "<p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>",
        "operationId": "TransferCertificate",
        "parameters": [
          {
            "description": "The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)",
            "in": "path",
            "name": "certificateId",
            "required": true,
            "schema": { "type": "string", "minLength": 64, "maxLength": 64, "pattern": "(0x)?[a-fA-F0-9]+" }
          },
          {
            "description": "The AWS account.",
            "in": "query",
            "name": "targetAwsAccount",
            "required": true,
            "schema": { "type": "string", "minLength": 12, "maxLength": 12, "pattern": "[0-9]+" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transferMessage": { "description": "The transfer message.", "maxLength": 128, "type": "string" }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TransferCertificateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "CertificateStateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CertificateStateException" } }
            }
          },
          "483": {
            "description": "TransferConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TransferConflictException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "486": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "487": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/untag": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes the given tags (metadata) from the resource.",
        "operationId": "UntagResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "resourceArn": { "description": "The ARN of the resource.", "type": "string" },
                  "tagKeys": {
                    "description": "A list of the keys of the tags to be removed from the resource.",
                    "items": { "$ref": "#/components/schemas/TagKey" },
                    "type": "array"
                  }
                },
                "required": ["resourceArn", "tagKeys"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/v2LoggingLevel": {
      "get": {
        "description": "Lists logging levels.",
        "operationId": "ListV2LoggingLevels",
        "parameters": [
          {
            "description": "The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.",
            "in": "query",
            "name": "targetType",
            "required": false,
            "schema": { "type": "string", "enum": ["DEFAULT", "THING_GROUP"] }
          },
          {
            "description": "The token used to get the next set of results, or <b>null</b> if there are no additional results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListV2LoggingLevelsResponse" } }
            }
          },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "NotConfiguredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotConfiguredException" } } }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sets the logging level.",
        "operationId": "SetV2LoggingLevel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "logLevel": {
                    "description": "The log level.",
                    "enum": ["DEBUG", "INFO", "ERROR", "WARN", "DISABLED"],
                    "type": "string"
                  },
                  "logTarget": {
                    "description": "A log target.",
                    "properties": {
                      "targetName": { "$ref": "#/components/schemas/LogTargetName" },
                      "targetType": { "$ref": "#/components/schemas/LogTargetType" }
                    },
                    "type": "object"
                  }
                },
                "required": ["logTarget", "logLevel"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "NotConfiguredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotConfiguredException" } } }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/v2LoggingLevel#targetType&targetName": {
      "delete": {
        "description": "Deletes a logging level.",
        "operationId": "DeleteV2LoggingLevel",
        "parameters": [
          {
            "description": "The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.",
            "in": "query",
            "name": "targetType",
            "required": true,
            "schema": { "type": "string", "enum": ["DEFAULT", "THING_GROUP"] }
          },
          {
            "description": "The name of the resource for which you are configuring logging.",
            "in": "query",
            "name": "targetName",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v2LoggingOptions": {
      "get": {
        "description": "Gets the fine grained logging options.",
        "operationId": "GetV2LoggingOptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetV2LoggingOptionsResponse" } }
            }
          },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "NotConfiguredException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotConfiguredException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sets the logging options for the V2 logging service.",
        "operationId": "SetV2LoggingOptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "defaultLogLevel": {
                    "description": "The default logging level.",
                    "enum": ["DEBUG", "INFO", "ERROR", "WARN", "DISABLED"],
                    "type": "string"
                  },
                  "disableAllLogs": {
                    "description": "If true all logs are disabled. The default is false.",
                    "type": "boolean"
                  },
                  "roleArn": {
                    "description": "The ARN of the role that allows IoT to write to Cloudwatch logs.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/violation-events#startTime&endTime": {
      "get": {
        "description": "Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).",
        "operationId": "ListViolationEvents",
        "parameters": [
          {
            "description": "The start time for the alerts to be listed.",
            "in": "query",
            "name": "startTime",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "The end time for the alerts to be listed.",
            "in": "query",
            "name": "endTime",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "A filter to limit results to those alerts caused by the specified thing.",
            "in": "query",
            "name": "thingName",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128 }
          },
          {
            "description": "A filter to limit results to those alerts generated by the specified security profile.",
            "in": "query",
            "name": "securityProfileName",
            "required": false,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "[a-zA-Z0-9:_-]+" }
          },
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return at one time.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListViolationEventsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    }
  },
  "servers": [
    {
      "description": "The AWS IoT multi-region endpoint",
      "url": "http://iot.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS IoT multi-region endpoint",
      "url": "https://iot.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS IoT endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://iot.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The AWS IoT endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://iot.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "requestBodies": {
      "ReplaceTopicRuleBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "topicRulePayload": {
                  "description": "Describes a rule.",
                  "properties": {
                    "actions": { "$ref": "#/components/schemas/ActionList" },
                    "awsIotSqlVersion": { "$ref": "#/components/schemas/AwsIotSqlVersion" },
                    "description": { "$ref": "#/components/schemas/Description" },
                    "errorAction": { "$ref": "#/components/schemas/Action" },
                    "ruleDisabled": { "$ref": "#/components/schemas/IsDisabled" },
                    "sql": { "$ref": "#/components/schemas/SQL" }
                  },
                  "type": "object"
                }
              },
              "required": ["topicRulePayload"],
              "type": "object"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AbortAction": { "enum": ["CANCEL"], "type": "string" },
      "AbortConfig": {
        "description": "Details of abort criteria to abort the job.",
        "properties": { "criteriaList": { "$ref": "#/components/schemas/AbortCriteriaList" } },
        "required": ["criteriaList"],
        "type": "object"
      },
      "AbortCriteria": {
        "description": "Details of abort criteria to define rules to abort the job.",
        "properties": {
          "action": { "$ref": "#/components/schemas/AbortAction" },
          "failureType": { "$ref": "#/components/schemas/JobExecutionFailureType" },
          "minNumberOfExecutedThings": { "$ref": "#/components/schemas/MinimumNumberOfExecutedThings" },
          "thresholdPercentage": { "$ref": "#/components/schemas/AbortThresholdPercentage" }
        },
        "required": ["failureType", "action", "thresholdPercentage", "minNumberOfExecutedThings"],
        "type": "object"
      },
      "AbortCriteriaList": {
        "items": { "$ref": "#/components/schemas/AbortCriteria" },
        "minItems": 1,
        "type": "array"
      },
      "AbortThresholdPercentage": { "format": "double", "maximum": 100, "type": "number" },
      "AcceptCertificateTransferRequest": {
        "description": "The input for the AcceptCertificateTransfer operation.",
        "properties": {},
        "type": "object"
      },
      "Action": {
        "description": "Describes the actions associated with a rule.",
        "properties": {
          "cloudwatchAlarm": { "$ref": "#/components/schemas/CloudwatchAlarmAction" },
          "cloudwatchMetric": { "$ref": "#/components/schemas/CloudwatchMetricAction" },
          "dynamoDB": { "$ref": "#/components/schemas/DynamoDBAction" },
          "dynamoDBv2": { "$ref": "#/components/schemas/DynamoDBv2Action" },
          "elasticsearch": { "$ref": "#/components/schemas/ElasticsearchAction" },
          "firehose": { "$ref": "#/components/schemas/FirehoseAction" },
          "iotAnalytics": { "$ref": "#/components/schemas/IotAnalyticsAction" },
          "iotEvents": { "$ref": "#/components/schemas/IotEventsAction" },
          "kinesis": { "$ref": "#/components/schemas/KinesisAction" },
          "lambda": { "$ref": "#/components/schemas/LambdaAction" },
          "republish": { "$ref": "#/components/schemas/RepublishAction" },
          "s3": { "$ref": "#/components/schemas/S3Action" },
          "salesforce": { "$ref": "#/components/schemas/SalesforceAction" },
          "sns": { "$ref": "#/components/schemas/SnsAction" },
          "sqs": { "$ref": "#/components/schemas/SqsAction" },
          "stepFunctions": { "$ref": "#/components/schemas/StepFunctionsAction" }
        },
        "type": "object"
      },
      "ActionList": {
        "items": { "$ref": "#/components/schemas/Action" },
        "maxItems": 10,
        "minItems": 0,
        "type": "array"
      },
      "ActionType": { "enum": ["PUBLISH", "SUBSCRIBE", "RECEIVE", "CONNECT"], "type": "string" },
      "ActiveViolation": {
        "description": "Information about an active Device Defender security profile behavior violation.",
        "properties": {
          "behavior": { "$ref": "#/components/schemas/Behavior" },
          "lastViolationTime": { "$ref": "#/components/schemas/Timestamp" },
          "lastViolationValue": { "$ref": "#/components/schemas/MetricValue" },
          "securityProfileName": { "$ref": "#/components/schemas/SecurityProfileName" },
          "thingName": { "$ref": "#/components/schemas/DeviceDefenderThingName" },
          "violationId": { "$ref": "#/components/schemas/ViolationId" },
          "violationStartTime": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "ActiveViolations": { "items": { "$ref": "#/components/schemas/ActiveViolation" }, "type": "array" },
      "AddThingToBillingGroupRequest": {
        "properties": {
          "billingGroupArn": { "$ref": "#/components/schemas/BillingGroupArn" },
          "billingGroupName": { "$ref": "#/components/schemas/BillingGroupName" },
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "type": "object"
      },
      "AddThingToBillingGroupResponse": { "properties": {}, "type": "object" },
      "AddThingToThingGroupRequest": {
        "properties": {
          "overrideDynamicGroups": { "$ref": "#/components/schemas/OverrideDynamicGroups" },
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "thingGroupArn": { "$ref": "#/components/schemas/ThingGroupArn" },
          "thingGroupName": { "$ref": "#/components/schemas/ThingGroupName" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "type": "object"
      },
      "AddThingToThingGroupResponse": { "properties": {}, "type": "object" },
      "AddThingsToThingGroupParams": {
        "description": "Parameters used when defining a mitigation action that move a set of things to a thing group.",
        "properties": {
          "overrideDynamicGroups": { "$ref": "#/components/schemas/OverrideDynamicGroups" },
          "thingGroupNames": { "$ref": "#/components/schemas/ThingGroupNames" }
        },
        "required": ["thingGroupNames"],
        "type": "object"
      },
      "AdditionalMetricsToRetainList": { "items": { "$ref": "#/components/schemas/BehaviorMetric" }, "type": "array" },
      "AdditionalParameterMap": { "additionalProperties": { "$ref": "#/components/schemas/Value" }, "type": "object" },
      "AggregationField": { "minLength": 1, "type": "string" },
      "AlarmName": { "type": "string" },
      "AlertTarget": {
        "description": "A structure containing the alert target ARN and the role ARN.",
        "properties": {
          "alertTargetArn": { "$ref": "#/components/schemas/AlertTargetArn" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "required": ["alertTargetArn", "roleArn"],
        "type": "object"
      },
      "AlertTargetArn": { "type": "string" },
      "AlertTargetType": {
        "description": "The type of alert target: one of \"SNS\".",
        "enum": ["SNS"],
        "type": "string"
      },
      "AlertTargets": { "additionalProperties": { "$ref": "#/components/schemas/AlertTarget" }, "type": "object" },
      "AllowAutoRegistration": { "type": "boolean" },
      "Allowed": {
        "description": "Contains information that allowed the authorization.",
        "properties": { "policies": { "$ref": "#/components/schemas/Policies" } },
        "type": "object"
      },
      "ApproximateSecondsBeforeTimedOut": { "type": "integer" },
      "AscendingOrder": { "type": "boolean" },
      "AssociateTargetsWithJobRequest": {
        "properties": {
          "comment": { "$ref": "#/components/schemas/Comment" },
          "targets": { "$ref": "#/components/schemas/JobTargets" }
        },
        "required": ["targets"],
        "type": "object"
      },
      "AssociateTargetsWithJobResponse": {
        "properties": {
          "description": { "$ref": "#/components/schemas/JobDescription" },
          "jobArn": { "$ref": "#/components/schemas/JobArn" },
          "jobId": { "$ref": "#/components/schemas/JobId" }
        },
        "type": "object"
      },
      "AttachPolicyRequest": {
        "properties": { "target": { "$ref": "#/components/schemas/PolicyTarget" } },
        "required": ["target"],
        "type": "object"
      },
      "AttachPrincipalPolicyRequest": {
        "description": "The input for the AttachPrincipalPolicy operation.",
        "properties": {},
        "type": "object"
      },
      "AttachSecurityProfileRequest": { "properties": {}, "type": "object" },
      "AttachSecurityProfileResponse": { "properties": {}, "type": "object" },
      "AttachThingPrincipalRequest": {
        "description": "The input for the AttachThingPrincipal operation.",
        "properties": {},
        "type": "object"
      },
      "AttachThingPrincipalResponse": {
        "description": "The output from the AttachThingPrincipal operation.",
        "properties": {},
        "type": "object"
      },
      "AttributeKey": { "type": "string" },
      "AttributeName": { "maxLength": 128, "pattern": "[a-zA-Z0-9_.,@/:#-]+", "type": "string" },
      "AttributePayload": {
        "description": "The attribute payload.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Attributes" },
          "merge": { "$ref": "#/components/schemas/Flag" }
        },
        "type": "object"
      },
      "AttributeValue": { "maxLength": 800, "pattern": "[a-zA-Z0-9_.,@/:#-]*", "type": "string" },
      "Attributes": { "additionalProperties": { "$ref": "#/components/schemas/AttributeValue" }, "type": "object" },
      "AttributesMap": { "additionalProperties": { "$ref": "#/components/schemas/Value" }, "type": "object" },
      "AuditCheckConfiguration": {
        "description": "Which audit checks are enabled and disabled for this account.",
        "properties": { "enabled": { "$ref": "#/components/schemas/Enabled" } },
        "type": "object"
      },
      "AuditCheckConfigurations": {
        "additionalProperties": { "$ref": "#/components/schemas/AuditCheckConfiguration" },
        "type": "object"
      },
      "AuditCheckDetails": {
        "description": "Information about the audit check.",
        "properties": {
          "checkCompliant": { "$ref": "#/components/schemas/CheckCompliant" },
          "checkRunStatus": { "$ref": "#/components/schemas/AuditCheckRunStatus" },
          "errorCode": { "$ref": "#/components/schemas/ErrorCode" },
          "message": { "$ref": "#/components/schemas/ErrorMessage" },
          "nonCompliantResourcesCount": { "$ref": "#/components/schemas/NonCompliantResourcesCount" },
          "totalResourcesCount": { "$ref": "#/components/schemas/TotalResourcesCount" }
        },
        "type": "object"
      },
      "AuditCheckName": {
        "description": "An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)",
        "type": "string"
      },
      "AuditCheckRunStatus": {
        "enum": [
          "IN_PROGRESS",
          "WAITING_FOR_DATA_COLLECTION",
          "CANCELED",
          "COMPLETED_COMPLIANT",
          "COMPLETED_NON_COMPLIANT",
          "FAILED"
        ],
        "type": "string"
      },
      "AuditCheckToActionsMapping": {
        "additionalProperties": { "$ref": "#/components/schemas/MitigationActionNameList" },
        "type": "object"
      },
      "AuditCheckToReasonCodeFilter": {
        "additionalProperties": { "$ref": "#/components/schemas/ReasonForNonComplianceCodes" },
        "type": "object"
      },
      "AuditDetails": {
        "additionalProperties": { "$ref": "#/components/schemas/AuditCheckDetails" },
        "type": "object"
      },
      "AuditFinding": {
        "description": "The findings (results) of the audit.",
        "properties": {
          "checkName": { "$ref": "#/components/schemas/AuditCheckName" },
          "findingId": { "$ref": "#/components/schemas/FindingId" },
          "findingTime": { "$ref": "#/components/schemas/Timestamp" },
          "nonCompliantResource": { "$ref": "#/components/schemas/NonCompliantResource" },
          "reasonForNonCompliance": { "$ref": "#/components/schemas/ReasonForNonCompliance" },
          "reasonForNonComplianceCode": { "$ref": "#/components/schemas/ReasonForNonComplianceCode" },
          "relatedResources": { "$ref": "#/components/schemas/RelatedResources" },
          "severity": { "$ref": "#/components/schemas/AuditFindingSeverity" },
          "taskId": { "$ref": "#/components/schemas/AuditTaskId" },
          "taskStartTime": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "AuditFindingSeverity": { "enum": ["CRITICAL", "HIGH", "MEDIUM", "LOW"], "type": "string" },
      "AuditFindings": { "items": { "$ref": "#/components/schemas/AuditFinding" }, "type": "array" },
      "AuditFrequency": { "enum": ["DAILY", "WEEKLY", "BIWEEKLY", "MONTHLY"], "type": "string" },
      "AuditMitigationActionExecutionMetadata": {
        "description": "Returned by ListAuditMitigationActionsTask, this object contains information that describes a mitigation action that has been started.",
        "properties": {
          "actionId": { "$ref": "#/components/schemas/MitigationActionId" },
          "actionName": { "$ref": "#/components/schemas/MitigationActionName" },
          "endTime": { "$ref": "#/components/schemas/Timestamp" },
          "errorCode": { "$ref": "#/components/schemas/ErrorCode" },
          "findingId": { "$ref": "#/components/schemas/FindingId" },
          "message": { "$ref": "#/components/schemas/ErrorMessage" },
          "startTime": { "$ref": "#/components/schemas/Timestamp" },
          "status": { "$ref": "#/components/schemas/AuditMitigationActionsExecutionStatus" },
          "taskId": { "$ref": "#/components/schemas/AuditMitigationActionsTaskId" }
        },
        "type": "object"
      },
      "AuditMitigationActionExecutionMetadataList": {
        "items": { "$ref": "#/components/schemas/AuditMitigationActionExecutionMetadata" },
        "type": "array"
      },
      "AuditMitigationActionsExecutionStatus": {
        "enum": ["IN_PROGRESS", "COMPLETED", "FAILED", "CANCELED", "SKIPPED", "PENDING"],
        "type": "string"
      },
      "AuditMitigationActionsTaskId": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "[a-zA-Z0-9_-]+",
        "type": "string"
      },
      "AuditMitigationActionsTaskMetadata": {
        "description": "Information about an audit mitigation actions task that is returned by <code>ListAuditMitigationActionsTasks</code>.",
        "properties": {
          "startTime": { "$ref": "#/components/schemas/Timestamp" },
          "taskId": { "$ref": "#/components/schemas/AuditMitigationActionsTaskId" },
          "taskStatus": { "$ref": "#/components/schemas/AuditMitigationActionsTaskStatus" }
        },
        "type": "object"
      },
      "AuditMitigationActionsTaskMetadataList": {
        "items": { "$ref": "#/components/schemas/AuditMitigationActionsTaskMetadata" },
        "type": "array"
      },
      "AuditMitigationActionsTaskStatistics": {
        "additionalProperties": { "$ref": "#/components/schemas/TaskStatisticsForAuditCheck" },
        "type": "object"
      },
      "AuditMitigationActionsTaskStatus": {
        "enum": ["IN_PROGRESS", "COMPLETED", "FAILED", "CANCELED"],
        "type": "string"
      },
      "AuditMitigationActionsTaskTarget": {
        "description": "Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.",
        "properties": {
          "auditCheckToReasonCodeFilter": { "$ref": "#/components/schemas/AuditCheckToReasonCodeFilter" },
          "auditTaskId": { "$ref": "#/components/schemas/AuditTaskId" },
          "findingIds": { "$ref": "#/components/schemas/FindingIds" }
        },
        "type": "object"
      },
      "AuditNotificationTarget": {
        "description": "Information about the targets to which audit notifications are sent.",
        "properties": {
          "enabled": { "$ref": "#/components/schemas/Enabled" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "targetArn": { "$ref": "#/components/schemas/TargetArn" }
        },
        "type": "object"
      },
      "AuditNotificationTargetConfigurations": {
        "additionalProperties": { "$ref": "#/components/schemas/AuditNotificationTarget" },
        "type": "object"
      },
      "AuditNotificationType": { "enum": ["SNS"], "type": "string" },
      "AuditTaskId": { "maxLength": 40, "minLength": 1, "pattern": "[a-zA-Z0-9\\-]+", "type": "string" },
      "AuditTaskMetadata": {
        "description": "The audits that were performed.",
        "properties": {
          "taskId": { "$ref": "#/components/schemas/AuditTaskId" },
          "taskStatus": { "$ref": "#/components/schemas/AuditTaskStatus" },
          "taskType": { "$ref": "#/components/schemas/AuditTaskType" }
        },
        "type": "object"
      },
      "AuditTaskMetadataList": { "items": { "$ref": "#/components/schemas/AuditTaskMetadata" }, "type": "array" },
      "AuditTaskStatus": { "enum": ["IN_PROGRESS", "COMPLETED", "FAILED", "CANCELED"], "type": "string" },
      "AuditTaskType": { "enum": ["ON_DEMAND_AUDIT_TASK", "SCHEDULED_AUDIT_TASK"], "type": "string" },
      "AuthDecision": { "enum": ["ALLOWED", "EXPLICIT_DENY", "IMPLICIT_DENY"], "type": "string" },
      "AuthInfo": {
        "description": "A collection of authorization information.",
        "properties": {
          "actionType": { "$ref": "#/components/schemas/ActionType" },
          "resources": { "$ref": "#/components/schemas/Resources" }
        },
        "type": "object"
      },
      "AuthInfos": {
        "items": { "$ref": "#/components/schemas/AuthInfo" },
        "maxItems": 10,
        "minItems": 1,
        "type": "array"
      },
      "AuthResult": {
        "description": "The authorizer result.",
        "properties": {
          "allowed": { "$ref": "#/components/schemas/Allowed" },
          "authDecision": { "$ref": "#/components/schemas/AuthDecision" },
          "authInfo": { "$ref": "#/components/schemas/AuthInfo" },
          "denied": { "$ref": "#/components/schemas/Denied" },
          "missingContextValues": { "$ref": "#/components/schemas/MissingContextValues" }
        },
        "type": "object"
      },
      "AuthResults": { "items": { "$ref": "#/components/schemas/AuthResult" }, "type": "array" },
      "AuthorizerArn": { "type": "string" },
      "AuthorizerDescription": {
        "description": "The authorizer description.",
        "properties": {
          "authorizerArn": { "$ref": "#/components/schemas/AuthorizerArn" },
          "authorizerFunctionArn": { "$ref": "#/components/schemas/AuthorizerFunctionArn" },
          "authorizerName": { "$ref": "#/components/schemas/AuthorizerName" },
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "lastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "status": { "$ref": "#/components/schemas/AuthorizerStatus" },
          "tokenKeyName": { "$ref": "#/components/schemas/TokenKeyName" },
          "tokenSigningPublicKeys": { "$ref": "#/components/schemas/PublicKeyMap" }
        },
        "type": "object"
      },
      "AuthorizerFunctionArn": { "type": "string" },
      "AuthorizerName": { "maxLength": 128, "minLength": 1, "pattern": "[\\w=,@-]+", "type": "string" },
      "AuthorizerStatus": { "enum": ["ACTIVE", "INACTIVE"], "type": "string" },
      "AuthorizerSummary": {
        "description": "The authorizer summary.",
        "properties": {
          "authorizerArn": { "$ref": "#/components/schemas/AuthorizerArn" },
          "authorizerName": { "$ref": "#/components/schemas/AuthorizerName" }
        },
        "type": "object"
      },
      "Authorizers": { "items": { "$ref": "#/components/schemas/AuthorizerSummary" }, "type": "array" },
      "AutoRegistrationStatus": { "enum": ["ENABLE", "DISABLE"], "type": "string" },
      "AwsAccountId": { "maxLength": 12, "minLength": 12, "pattern": "[0-9]+", "type": "string" },
      "AwsArn": { "type": "string" },
      "AwsIotJobArn": { "type": "string" },
      "AwsIotJobId": { "type": "string" },
      "AwsIotSqlVersion": { "type": "string" },
      "AwsJobExecutionsRolloutConfig": {
        "description": "Configuration for the rollout of OTA updates.",
        "properties": { "maximumPerMinute": { "$ref": "#/components/schemas/MaximumPerMinute" } },
        "type": "object"
      },
      "Behavior": {
        "description": "A Device Defender security profile behavior.",
        "properties": {
          "criteria": { "$ref": "#/components/schemas/BehaviorCriteria" },
          "metric": { "$ref": "#/components/schemas/BehaviorMetric" },
          "name": { "$ref": "#/components/schemas/BehaviorName" }
        },
        "required": ["name"],
        "type": "object"
      },
      "BehaviorCriteria": {
        "description": "The criteria by which the behavior is determined to be normal.",
        "properties": {
          "comparisonOperator": { "$ref": "#/components/schemas/ComparisonOperator" },
          "consecutiveDatapointsToAlarm": { "$ref": "#/components/schemas/ConsecutiveDatapointsToAlarm" },
          "consecutiveDatapointsToClear": { "$ref": "#/components/schemas/ConsecutiveDatapointsToClear" },
          "durationSeconds": { "$ref": "#/components/schemas/DurationSeconds" },
          "statisticalThreshold": { "$ref": "#/components/schemas/StatisticalThreshold" },
          "value": { "$ref": "#/components/schemas/MetricValue" }
        },
        "type": "object"
      },
      "BehaviorMetric": { "type": "string" },
      "BehaviorName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "Behaviors": { "items": { "$ref": "#/components/schemas/Behavior" }, "maxItems": 100, "type": "array" },
      "BillingGroupArn": { "type": "string" },
      "BillingGroupDescription": { "maxLength": 2028, "pattern": "[\\p{Graph}\\x20]*", "type": "string" },
      "BillingGroupId": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9\\-]+", "type": "string" },
      "BillingGroupMetadata": {
        "description": "Additional information about the billing group.",
        "properties": { "creationDate": { "$ref": "#/components/schemas/CreationDate" } },
        "type": "object"
      },
      "BillingGroupName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "BillingGroupNameAndArnList": { "items": { "$ref": "#/components/schemas/GroupNameAndArn" }, "type": "array" },
      "BillingGroupProperties": {
        "description": "The properties of a billing group.",
        "properties": { "billingGroupDescription": { "$ref": "#/components/schemas/BillingGroupDescription" } },
        "type": "object"
      },
      "Boolean": { "type": "boolean" },
      "BucketName": { "type": "string" },
      "CACertificate": {
        "description": "A CA certificate.",
        "properties": {
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" },
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "status": { "$ref": "#/components/schemas/CACertificateStatus" }
        },
        "type": "object"
      },
      "CACertificateDescription": {
        "description": "Describes a CA certificate.",
        "properties": {
          "autoRegistrationStatus": { "$ref": "#/components/schemas/AutoRegistrationStatus" },
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" },
          "certificatePem": { "$ref": "#/components/schemas/CertificatePem" },
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "customerVersion": { "$ref": "#/components/schemas/CustomerVersion" },
          "generationId": { "$ref": "#/components/schemas/GenerationId" },
          "lastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "ownedBy": { "$ref": "#/components/schemas/AwsAccountId" },
          "status": { "$ref": "#/components/schemas/CACertificateStatus" },
          "validity": { "$ref": "#/components/schemas/CertificateValidity" }
        },
        "type": "object"
      },
      "CACertificateStatus": { "enum": ["ACTIVE", "INACTIVE"], "type": "string" },
      "CACertificateUpdateAction": { "enum": ["DEACTIVATE"], "type": "string" },
      "CACertificates": { "items": { "$ref": "#/components/schemas/CACertificate" }, "type": "array" },
      "CancelAuditMitigationActionsTaskRequest": { "properties": {}, "type": "object" },
      "CancelAuditMitigationActionsTaskResponse": { "properties": {}, "type": "object" },
      "CancelAuditTaskRequest": { "properties": {}, "type": "object" },
      "CancelAuditTaskResponse": { "properties": {}, "type": "object" },
      "CancelCertificateTransferRequest": {
        "description": "The input for the CancelCertificateTransfer operation.",
        "properties": {},
        "type": "object"
      },
      "CancelJobExecutionRequest": {
        "properties": {
          "expectedVersion": { "$ref": "#/components/schemas/ExpectedVersion" },
          "statusDetails": { "$ref": "#/components/schemas/DetailsMap" }
        },
        "type": "object"
      },
      "CancelJobRequest": {
        "properties": {
          "comment": { "$ref": "#/components/schemas/Comment" },
          "reasonCode": { "$ref": "#/components/schemas/ReasonCode" }
        },
        "type": "object"
      },
      "CancelJobResponse": {
        "properties": {
          "description": { "$ref": "#/components/schemas/JobDescription" },
          "jobArn": { "$ref": "#/components/schemas/JobArn" },
          "jobId": { "$ref": "#/components/schemas/JobId" }
        },
        "type": "object"
      },
      "CanceledChecksCount": { "type": "integer" },
      "CanceledFindingsCount": { "type": "integer" },
      "CanceledThings": { "type": "integer" },
      "CannedAccessControlList": {
        "enum": [
          "private",
          "public-read",
          "public-read-write",
          "aws-exec-read",
          "authenticated-read",
          "bucket-owner-read",
          "bucket-owner-full-control",
          "log-delivery-write"
        ],
        "type": "string"
      },
      "Certificate": {
        "description": "Information about a certificate.",
        "properties": {
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" },
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "status": { "$ref": "#/components/schemas/CertificateStatus" }
        },
        "type": "object"
      },
      "CertificateArn": { "type": "string" },
      "CertificateConflictException": {},
      "CertificateDescription": {
        "description": "Describes a certificate.",
        "properties": {
          "caCertificateId": { "$ref": "#/components/schemas/CertificateId" },
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" },
          "certificatePem": { "$ref": "#/components/schemas/CertificatePem" },
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "customerVersion": { "$ref": "#/components/schemas/CustomerVersion" },
          "generationId": { "$ref": "#/components/schemas/GenerationId" },
          "lastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "ownedBy": { "$ref": "#/components/schemas/AwsAccountId" },
          "previousOwnedBy": { "$ref": "#/components/schemas/AwsAccountId" },
          "status": { "$ref": "#/components/schemas/CertificateStatus" },
          "transferData": { "$ref": "#/components/schemas/TransferData" },
          "validity": { "$ref": "#/components/schemas/CertificateValidity" }
        },
        "type": "object"
      },
      "CertificateId": { "maxLength": 64, "minLength": 64, "pattern": "(0x)?[a-fA-F0-9]+", "type": "string" },
      "CertificateName": { "type": "string" },
      "CertificatePathOnDevice": { "type": "string" },
      "CertificatePem": {
        "description": "The PEM of a certificate.",
        "maxLength": 65536,
        "minLength": 1,
        "type": "string"
      },
      "CertificateSigningRequest": { "minLength": 1, "type": "string" },
      "CertificateStateException": {},
      "CertificateStatus": {
        "enum": ["ACTIVE", "INACTIVE", "REVOKED", "PENDING_TRANSFER", "REGISTER_INACTIVE", "PENDING_ACTIVATION"],
        "type": "string"
      },
      "CertificateValidationException": {},
      "CertificateValidity": {
        "description": "When the certificate is valid.",
        "properties": {
          "notAfter": { "$ref": "#/components/schemas/DateType" },
          "notBefore": { "$ref": "#/components/schemas/DateType" }
        },
        "type": "object"
      },
      "Certificates": { "items": { "$ref": "#/components/schemas/Certificate" }, "type": "array" },
      "ChannelName": { "type": "string" },
      "CheckCompliant": { "type": "boolean" },
      "Cidr": { "maxLength": 43, "minLength": 2, "pattern": "[a-fA-F0-9:\\.\\/]+", "type": "string" },
      "Cidrs": { "items": { "$ref": "#/components/schemas/Cidr" }, "type": "array" },
      "ClearDefaultAuthorizerRequest": { "properties": {}, "type": "object" },
      "ClearDefaultAuthorizerResponse": { "properties": {}, "type": "object" },
      "ClientId": { "type": "string" },
      "ClientRequestToken": { "maxLength": 64, "minLength": 1, "pattern": "^[a-zA-Z0-9-_]+$", "type": "string" },
      "CloudwatchAlarmAction": {
        "description": "Describes an action that updates a CloudWatch alarm.",
        "properties": {
          "alarmName": { "$ref": "#/components/schemas/AlarmName" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "stateReason": { "$ref": "#/components/schemas/StateReason" },
          "stateValue": { "$ref": "#/components/schemas/StateValue" }
        },
        "required": ["roleArn", "alarmName", "stateReason", "stateValue"],
        "type": "object"
      },
      "CloudwatchMetricAction": {
        "description": "Describes an action that captures a CloudWatch metric.",
        "properties": {
          "metricName": { "$ref": "#/components/schemas/String" },
          "metricNamespace": { "$ref": "#/components/schemas/String" },
          "metricTimestamp": { "$ref": "#/components/schemas/String" },
          "metricUnit": { "$ref": "#/components/schemas/String" },
          "metricValue": { "$ref": "#/components/schemas/String" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "required": ["roleArn", "metricNamespace", "metricName", "metricValue", "metricUnit"],
        "type": "object"
      },
      "Code": { "type": "string" },
      "CodeSigning": {
        "description": "Describes the method to use when code signing a file.",
        "properties": {
          "awsSignerJobId": { "$ref": "#/components/schemas/SigningJobId" },
          "customCodeSigning": { "$ref": "#/components/schemas/CustomCodeSigning" },
          "startSigningJobParameter": { "$ref": "#/components/schemas/StartSigningJobParameter" }
        },
        "type": "object"
      },
      "CodeSigningCertificateChain": {
        "description": "Describes the certificate chain being used when code signing a file.",
        "properties": {
          "certificateName": { "$ref": "#/components/schemas/CertificateName" },
          "inlineDocument": { "$ref": "#/components/schemas/InlineDocument" }
        },
        "type": "object"
      },
      "CodeSigningSignature": {
        "description": "Describes the signature for a file.",
        "properties": { "inlineDocument": { "$ref": "#/components/schemas/Signature" } },
        "type": "object"
      },
      "CognitoIdentityPoolId": { "type": "string" },
      "Comment": { "maxLength": 2028, "pattern": "[^\\p{C}]+", "type": "string" },
      "ComparisonOperator": {
        "enum": [
          "less-than",
          "less-than-equals",
          "greater-than",
          "greater-than-equals",
          "in-cidr-set",
          "not-in-cidr-set",
          "in-port-set",
          "not-in-port-set"
        ],
        "type": "string"
      },
      "CompliantChecksCount": { "type": "integer" },
      "Configuration": {
        "description": "Configuration.",
        "properties": { "Enabled": { "$ref": "#/components/schemas/Enabled" } },
        "type": "object"
      },
      "ConflictingResourceUpdateException": {},
      "ConnectivityTimestamp": { "type": "integer" },
      "ConsecutiveDatapointsToAlarm": { "maximum": 10, "minimum": 1, "type": "integer" },
      "ConsecutiveDatapointsToClear": { "maximum": 10, "minimum": 1, "type": "integer" },
      "Count": { "type": "integer" },
      "CreateAuthorizerRequest": {
        "properties": {
          "authorizerFunctionArn": { "$ref": "#/components/schemas/AuthorizerFunctionArn" },
          "status": { "$ref": "#/components/schemas/AuthorizerStatus" },
          "tokenKeyName": { "$ref": "#/components/schemas/TokenKeyName" },
          "tokenSigningPublicKeys": { "$ref": "#/components/schemas/PublicKeyMap" }
        },
        "required": ["authorizerFunctionArn", "tokenKeyName", "tokenSigningPublicKeys"],
        "type": "object"
      },
      "CreateAuthorizerResponse": {
        "properties": {
          "authorizerArn": { "$ref": "#/components/schemas/AuthorizerArn" },
          "authorizerName": { "$ref": "#/components/schemas/AuthorizerName" }
        },
        "type": "object"
      },
      "CreateBillingGroupRequest": {
        "properties": {
          "billingGroupProperties": { "$ref": "#/components/schemas/BillingGroupProperties" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "type": "object"
      },
      "CreateBillingGroupResponse": {
        "properties": {
          "billingGroupArn": { "$ref": "#/components/schemas/BillingGroupArn" },
          "billingGroupId": { "$ref": "#/components/schemas/BillingGroupId" },
          "billingGroupName": { "$ref": "#/components/schemas/BillingGroupName" }
        },
        "type": "object"
      },
      "CreateCertificateFromCsrRequest": {
        "description": "The input for the CreateCertificateFromCsr operation.",
        "properties": { "certificateSigningRequest": { "$ref": "#/components/schemas/CertificateSigningRequest" } },
        "required": ["certificateSigningRequest"],
        "type": "object"
      },
      "CreateCertificateFromCsrResponse": {
        "description": "The output from the CreateCertificateFromCsr operation.",
        "properties": {
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" },
          "certificatePem": { "$ref": "#/components/schemas/CertificatePem" }
        },
        "type": "object"
      },
      "CreateDynamicThingGroupRequest": {
        "properties": {
          "indexName": { "$ref": "#/components/schemas/IndexName" },
          "queryString": { "$ref": "#/components/schemas/QueryString" },
          "queryVersion": { "$ref": "#/components/schemas/QueryVersion" },
          "tags": { "$ref": "#/components/schemas/TagList" },
          "thingGroupProperties": { "$ref": "#/components/schemas/ThingGroupProperties" }
        },
        "required": ["queryString"],
        "type": "object"
      },
      "CreateDynamicThingGroupResponse": {
        "properties": {
          "indexName": { "$ref": "#/components/schemas/IndexName" },
          "queryString": { "$ref": "#/components/schemas/QueryString" },
          "queryVersion": { "$ref": "#/components/schemas/QueryVersion" },
          "thingGroupArn": { "$ref": "#/components/schemas/ThingGroupArn" },
          "thingGroupId": { "$ref": "#/components/schemas/ThingGroupId" },
          "thingGroupName": { "$ref": "#/components/schemas/ThingGroupName" }
        },
        "type": "object"
      },
      "CreateJobRequest": {
        "properties": {
          "abortConfig": { "$ref": "#/components/schemas/AbortConfig" },
          "description": { "$ref": "#/components/schemas/JobDescription" },
          "document": { "$ref": "#/components/schemas/JobDocument" },
          "documentSource": { "$ref": "#/components/schemas/JobDocumentSource" },
          "jobExecutionsRolloutConfig": { "$ref": "#/components/schemas/JobExecutionsRolloutConfig" },
          "presignedUrlConfig": { "$ref": "#/components/schemas/PresignedUrlConfig" },
          "tags": { "$ref": "#/components/schemas/TagList" },
          "targetSelection": { "$ref": "#/components/schemas/TargetSelection" },
          "targets": { "$ref": "#/components/schemas/JobTargets" },
          "timeoutConfig": { "$ref": "#/components/schemas/TimeoutConfig" }
        },
        "required": ["targets"],
        "type": "object"
      },
      "CreateJobResponse": {
        "properties": {
          "description": { "$ref": "#/components/schemas/JobDescription" },
          "jobArn": { "$ref": "#/components/schemas/JobArn" },
          "jobId": { "$ref": "#/components/schemas/JobId" }
        },
        "type": "object"
      },
      "CreateKeysAndCertificateRequest": {
        "description": "The input for the CreateKeysAndCertificate operation.",
        "properties": {},
        "type": "object"
      },
      "CreateKeysAndCertificateResponse": {
        "description": "The output of the CreateKeysAndCertificate operation.",
        "properties": {
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" },
          "certificatePem": { "$ref": "#/components/schemas/CertificatePem" },
          "keyPair": { "$ref": "#/components/schemas/KeyPair" }
        },
        "type": "object"
      },
      "CreateMitigationActionRequest": {
        "properties": {
          "actionParams": { "$ref": "#/components/schemas/MitigationActionParams" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["roleArn", "actionParams"],
        "type": "object"
      },
      "CreateMitigationActionResponse": {
        "properties": {
          "actionArn": { "$ref": "#/components/schemas/MitigationActionArn" },
          "actionId": { "$ref": "#/components/schemas/MitigationActionId" }
        },
        "type": "object"
      },
      "CreateOTAUpdateRequest": {
        "properties": {
          "additionalParameters": { "$ref": "#/components/schemas/AdditionalParameterMap" },
          "awsJobExecutionsRolloutConfig": { "$ref": "#/components/schemas/AwsJobExecutionsRolloutConfig" },
          "description": { "$ref": "#/components/schemas/OTAUpdateDescription" },
          "files": { "$ref": "#/components/schemas/OTAUpdateFiles" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "tags": { "$ref": "#/components/schemas/TagList" },
          "targetSelection": { "$ref": "#/components/schemas/TargetSelection" },
          "targets": { "$ref": "#/components/schemas/Targets" }
        },
        "required": ["targets", "files", "roleArn"],
        "type": "object"
      },
      "CreateOTAUpdateResponse": {
        "properties": {
          "awsIotJobArn": { "$ref": "#/components/schemas/AwsIotJobArn" },
          "awsIotJobId": { "$ref": "#/components/schemas/AwsIotJobId" },
          "otaUpdateArn": { "$ref": "#/components/schemas/OTAUpdateArn" },
          "otaUpdateId": { "$ref": "#/components/schemas/OTAUpdateId" },
          "otaUpdateStatus": { "$ref": "#/components/schemas/OTAUpdateStatus" }
        },
        "type": "object"
      },
      "CreatePolicyRequest": {
        "description": "The input for the CreatePolicy operation.",
        "properties": { "policyDocument": { "$ref": "#/components/schemas/PolicyDocument" } },
        "required": ["policyDocument"],
        "type": "object"
      },
      "CreatePolicyResponse": {
        "description": "The output from the CreatePolicy operation.",
        "properties": {
          "policyArn": { "$ref": "#/components/schemas/PolicyArn" },
          "policyDocument": { "$ref": "#/components/schemas/PolicyDocument" },
          "policyName": { "$ref": "#/components/schemas/PolicyName" },
          "policyVersionId": { "$ref": "#/components/schemas/PolicyVersionId" }
        },
        "type": "object"
      },
      "CreatePolicyVersionRequest": {
        "description": "The input for the CreatePolicyVersion operation.",
        "properties": { "policyDocument": { "$ref": "#/components/schemas/PolicyDocument" } },
        "required": ["policyDocument"],
        "type": "object"
      },
      "CreatePolicyVersionResponse": {
        "description": "The output of the CreatePolicyVersion operation.",
        "properties": {
          "isDefaultVersion": { "$ref": "#/components/schemas/IsDefaultVersion" },
          "policyArn": { "$ref": "#/components/schemas/PolicyArn" },
          "policyDocument": { "$ref": "#/components/schemas/PolicyDocument" },
          "policyVersionId": { "$ref": "#/components/schemas/PolicyVersionId" }
        },
        "type": "object"
      },
      "CreateRoleAliasRequest": {
        "properties": {
          "credentialDurationSeconds": { "$ref": "#/components/schemas/CredentialDurationSeconds" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "required": ["roleArn"],
        "type": "object"
      },
      "CreateRoleAliasResponse": {
        "properties": {
          "roleAlias": { "$ref": "#/components/schemas/RoleAlias" },
          "roleAliasArn": { "$ref": "#/components/schemas/RoleAliasArn" }
        },
        "type": "object"
      },
      "CreateScheduledAuditRequest": {
        "properties": {
          "dayOfMonth": { "$ref": "#/components/schemas/DayOfMonth" },
          "dayOfWeek": { "$ref": "#/components/schemas/DayOfWeek" },
          "frequency": { "$ref": "#/components/schemas/AuditFrequency" },
          "tags": { "$ref": "#/components/schemas/TagList" },
          "targetCheckNames": { "$ref": "#/components/schemas/TargetAuditCheckNames" }
        },
        "required": ["frequency", "targetCheckNames"],
        "type": "object"
      },
      "CreateScheduledAuditResponse": {
        "properties": { "scheduledAuditArn": { "$ref": "#/components/schemas/ScheduledAuditArn" } },
        "type": "object"
      },
      "CreateSecurityProfileRequest": {
        "properties": {
          "additionalMetricsToRetain": { "$ref": "#/components/schemas/AdditionalMetricsToRetainList" },
          "alertTargets": { "$ref": "#/components/schemas/AlertTargets" },
          "behaviors": { "$ref": "#/components/schemas/Behaviors" },
          "securityProfileDescription": { "$ref": "#/components/schemas/SecurityProfileDescription" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "type": "object"
      },
      "CreateSecurityProfileResponse": {
        "properties": {
          "securityProfileArn": { "$ref": "#/components/schemas/SecurityProfileArn" },
          "securityProfileName": { "$ref": "#/components/schemas/SecurityProfileName" }
        },
        "type": "object"
      },
      "CreateStreamRequest": {
        "properties": {
          "description": { "$ref": "#/components/schemas/StreamDescription" },
          "files": { "$ref": "#/components/schemas/StreamFiles" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["files", "roleArn"],
        "type": "object"
      },
      "CreateStreamResponse": {
        "properties": {
          "description": { "$ref": "#/components/schemas/StreamDescription" },
          "streamArn": { "$ref": "#/components/schemas/StreamArn" },
          "streamId": { "$ref": "#/components/schemas/StreamId" },
          "streamVersion": { "$ref": "#/components/schemas/StreamVersion" }
        },
        "type": "object"
      },
      "CreateThingGroupRequest": {
        "properties": {
          "parentGroupName": { "$ref": "#/components/schemas/ThingGroupName" },
          "tags": { "$ref": "#/components/schemas/TagList" },
          "thingGroupProperties": { "$ref": "#/components/schemas/ThingGroupProperties" }
        },
        "type": "object"
      },
      "CreateThingGroupResponse": {
        "properties": {
          "thingGroupArn": { "$ref": "#/components/schemas/ThingGroupArn" },
          "thingGroupId": { "$ref": "#/components/schemas/ThingGroupId" },
          "thingGroupName": { "$ref": "#/components/schemas/ThingGroupName" }
        },
        "type": "object"
      },
      "CreateThingRequest": {
        "description": "The input for the CreateThing operation.",
        "properties": {
          "attributePayload": { "$ref": "#/components/schemas/AttributePayload" },
          "billingGroupName": { "$ref": "#/components/schemas/BillingGroupName" },
          "thingTypeName": { "$ref": "#/components/schemas/ThingTypeName" }
        },
        "type": "object"
      },
      "CreateThingResponse": {
        "description": "The output of the CreateThing operation.",
        "properties": {
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "thingId": { "$ref": "#/components/schemas/ThingId" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "type": "object"
      },
      "CreateThingTypeRequest": {
        "description": "The input for the CreateThingType operation.",
        "properties": {
          "tags": { "$ref": "#/components/schemas/TagList" },
          "thingTypeProperties": { "$ref": "#/components/schemas/ThingTypeProperties" }
        },
        "type": "object"
      },
      "CreateThingTypeResponse": {
        "description": "The output of the CreateThingType operation.",
        "properties": {
          "thingTypeArn": { "$ref": "#/components/schemas/ThingTypeArn" },
          "thingTypeId": { "$ref": "#/components/schemas/ThingTypeId" },
          "thingTypeName": { "$ref": "#/components/schemas/ThingTypeName" }
        },
        "type": "object"
      },
      "CreateTopicRuleRequest": {
        "description": "The input for the CreateTopicRule operation.",
        "properties": { "topicRulePayload": { "$ref": "#/components/schemas/TopicRulePayload" } },
        "required": ["topicRulePayload"],
        "type": "object"
      },
      "CreatedAtDate": { "format": "date-time", "type": "string" },
      "CreationDate": { "format": "date-time", "type": "string" },
      "CredentialDurationSeconds": { "maximum": 3600, "minimum": 900, "type": "integer" },
      "CustomCodeSigning": {
        "description": "Describes a custom method used to code sign a file.",
        "properties": {
          "certificateChain": { "$ref": "#/components/schemas/CodeSigningCertificateChain" },
          "hashAlgorithm": { "$ref": "#/components/schemas/HashAlgorithm" },
          "signature": { "$ref": "#/components/schemas/CodeSigningSignature" },
          "signatureAlgorithm": { "$ref": "#/components/schemas/SignatureAlgorithm" }
        },
        "type": "object"
      },
      "CustomerVersion": { "minimum": 1, "type": "integer" },
      "DateType": { "format": "date-time", "type": "string" },
      "DayOfMonth": { "pattern": "^([1-9]|[12][0-9]|3[01])$|^LAST$", "type": "string" },
      "DayOfWeek": { "enum": ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"], "type": "string" },
      "DeleteAccountAuditConfigurationRequest": { "properties": {}, "type": "object" },
      "DeleteAccountAuditConfigurationResponse": { "properties": {}, "type": "object" },
      "DeleteAdditionalMetricsToRetain": { "type": "boolean" },
      "DeleteAlertTargets": { "type": "boolean" },
      "DeleteAuthorizerRequest": { "properties": {}, "type": "object" },
      "DeleteAuthorizerResponse": { "properties": {}, "type": "object" },
      "DeleteBehaviors": { "type": "boolean" },
      "DeleteBillingGroupRequest": { "properties": {}, "type": "object" },
      "DeleteBillingGroupResponse": { "properties": {}, "type": "object" },
      "DeleteCACertificateRequest": {
        "description": "Input for the DeleteCACertificate operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteCACertificateResponse": {
        "description": "The output for the DeleteCACertificate operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteCertificateRequest": {
        "description": "The input for the DeleteCertificate operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteConflictException": {},
      "DeleteDynamicThingGroupRequest": { "properties": {}, "type": "object" },
      "DeleteDynamicThingGroupResponse": { "properties": {}, "type": "object" },
      "DeleteJobExecutionRequest": { "properties": {}, "type": "object" },
      "DeleteJobRequest": { "properties": {}, "type": "object" },
      "DeleteMitigationActionRequest": { "properties": {}, "type": "object" },
      "DeleteMitigationActionResponse": { "properties": {}, "type": "object" },
      "DeleteOTAUpdateRequest": { "properties": {}, "type": "object" },
      "DeleteOTAUpdateResponse": { "properties": {}, "type": "object" },
      "DeletePolicyRequest": {
        "description": "The input for the DeletePolicy operation.",
        "properties": {},
        "type": "object"
      },
      "DeletePolicyVersionRequest": {
        "description": "The input for the DeletePolicyVersion operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteRegistrationCodeRequest": {
        "description": "The input for the DeleteRegistrationCode operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteRegistrationCodeResponse": {
        "description": "The output for the DeleteRegistrationCode operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteRoleAliasRequest": { "properties": {}, "type": "object" },
      "DeleteRoleAliasResponse": { "properties": {}, "type": "object" },
      "DeleteScheduledAuditRequest": { "properties": {}, "type": "object" },
      "DeleteScheduledAuditResponse": { "properties": {}, "type": "object" },
      "DeleteScheduledAudits": { "type": "boolean" },
      "DeleteSecurityProfileRequest": { "properties": {}, "type": "object" },
      "DeleteSecurityProfileResponse": { "properties": {}, "type": "object" },
      "DeleteStream": { "type": "boolean" },
      "DeleteStreamRequest": { "properties": {}, "type": "object" },
      "DeleteStreamResponse": { "properties": {}, "type": "object" },
      "DeleteThingGroupRequest": { "properties": {}, "type": "object" },
      "DeleteThingGroupResponse": { "properties": {}, "type": "object" },
      "DeleteThingRequest": {
        "description": "The input for the DeleteThing operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteThingResponse": {
        "description": "The output of the DeleteThing operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteThingTypeRequest": {
        "description": "The input for the DeleteThingType operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteThingTypeResponse": {
        "description": "The output for the DeleteThingType operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteTopicRuleRequest": {
        "description": "The input for the DeleteTopicRule operation.",
        "properties": {},
        "type": "object"
      },
      "DeleteV2LoggingLevelRequest": { "properties": {}, "type": "object" },
      "DeliveryStreamName": { "type": "string" },
      "Denied": {
        "description": "Contains information that denied the authorization.",
        "properties": {
          "explicitDeny": { "$ref": "#/components/schemas/ExplicitDeny" },
          "implicitDeny": { "$ref": "#/components/schemas/ImplicitDeny" }
        },
        "type": "object"
      },
      "DeprecateThingTypeRequest": {
        "description": "The input for the DeprecateThingType operation.",
        "properties": { "undoDeprecate": { "$ref": "#/components/schemas/UndoDeprecate" } },
        "type": "object"
      },
      "DeprecateThingTypeResponse": {
        "description": "The output for the DeprecateThingType operation.",
        "properties": {},
        "type": "object"
      },
      "DeprecationDate": { "format": "date-time", "type": "string" },
      "DescribeAccountAuditConfigurationRequest": { "properties": {}, "type": "object" },
      "DescribeAccountAuditConfigurationResponse": {
        "properties": {
          "auditCheckConfigurations": { "$ref": "#/components/schemas/AuditCheckConfigurations" },
          "auditNotificationTargetConfigurations": {
            "$ref": "#/components/schemas/AuditNotificationTargetConfigurations"
          },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "DescribeAuditFindingRequest": { "properties": {}, "type": "object" },
      "DescribeAuditFindingResponse": {
        "properties": { "finding": { "$ref": "#/components/schemas/AuditFinding" } },
        "type": "object"
      },
      "DescribeAuditMitigationActionsTaskRequest": { "properties": {}, "type": "object" },
      "DescribeAuditMitigationActionsTaskResponse": {
        "properties": {
          "actionsDefinition": { "$ref": "#/components/schemas/MitigationActionList" },
          "auditCheckToActionsMapping": { "$ref": "#/components/schemas/AuditCheckToActionsMapping" },
          "endTime": { "$ref": "#/components/schemas/Timestamp" },
          "startTime": { "$ref": "#/components/schemas/Timestamp" },
          "target": { "$ref": "#/components/schemas/AuditMitigationActionsTaskTarget" },
          "taskStatistics": { "$ref": "#/components/schemas/AuditMitigationActionsTaskStatistics" },
          "taskStatus": { "$ref": "#/components/schemas/AuditMitigationActionsTaskStatus" }
        },
        "type": "object"
      },
      "DescribeAuditTaskRequest": { "properties": {}, "type": "object" },
      "DescribeAuditTaskResponse": {
        "properties": {
          "auditDetails": { "$ref": "#/components/schemas/AuditDetails" },
          "scheduledAuditName": { "$ref": "#/components/schemas/ScheduledAuditName" },
          "taskStartTime": { "$ref": "#/components/schemas/Timestamp" },
          "taskStatistics": { "$ref": "#/components/schemas/TaskStatistics" },
          "taskStatus": { "$ref": "#/components/schemas/AuditTaskStatus" },
          "taskType": { "$ref": "#/components/schemas/AuditTaskType" }
        },
        "type": "object"
      },
      "DescribeAuthorizerRequest": { "properties": {}, "type": "object" },
      "DescribeAuthorizerResponse": {
        "properties": { "authorizerDescription": { "$ref": "#/components/schemas/AuthorizerDescription" } },
        "type": "object"
      },
      "DescribeBillingGroupRequest": { "properties": {}, "type": "object" },
      "DescribeBillingGroupResponse": {
        "properties": {
          "billingGroupArn": { "$ref": "#/components/schemas/BillingGroupArn" },
          "billingGroupId": { "$ref": "#/components/schemas/BillingGroupId" },
          "billingGroupMetadata": { "$ref": "#/components/schemas/BillingGroupMetadata" },
          "billingGroupName": { "$ref": "#/components/schemas/BillingGroupName" },
          "billingGroupProperties": { "$ref": "#/components/schemas/BillingGroupProperties" },
          "version": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "DescribeCACertificateRequest": {
        "description": "The input for the DescribeCACertificate operation.",
        "properties": {},
        "type": "object"
      },
      "DescribeCACertificateResponse": {
        "description": "The output from the DescribeCACertificate operation.",
        "properties": {
          "certificateDescription": { "$ref": "#/components/schemas/CACertificateDescription" },
          "registrationConfig": { "$ref": "#/components/schemas/RegistrationConfig" }
        },
        "type": "object"
      },
      "DescribeCertificateRequest": {
        "description": "The input for the DescribeCertificate operation.",
        "properties": {},
        "type": "object"
      },
      "DescribeCertificateResponse": {
        "description": "The output of the DescribeCertificate operation.",
        "properties": { "certificateDescription": { "$ref": "#/components/schemas/CertificateDescription" } },
        "type": "object"
      },
      "DescribeDefaultAuthorizerRequest": { "properties": {}, "type": "object" },
      "DescribeDefaultAuthorizerResponse": {
        "properties": { "authorizerDescription": { "$ref": "#/components/schemas/AuthorizerDescription" } },
        "type": "object"
      },
      "DescribeEndpointRequest": {
        "description": "The input for the DescribeEndpoint operation.",
        "properties": {},
        "type": "object"
      },
      "DescribeEndpointResponse": {
        "description": "The output from the DescribeEndpoint operation.",
        "properties": { "endpointAddress": { "$ref": "#/components/schemas/EndpointAddress" } },
        "type": "object"
      },
      "DescribeEventConfigurationsRequest": { "properties": {}, "type": "object" },
      "DescribeEventConfigurationsResponse": {
        "properties": {
          "creationDate": { "$ref": "#/components/schemas/CreationDate" },
          "eventConfigurations": { "$ref": "#/components/schemas/EventConfigurations" },
          "lastModifiedDate": { "$ref": "#/components/schemas/LastModifiedDate" }
        },
        "type": "object"
      },
      "DescribeIndexRequest": { "properties": {}, "type": "object" },
      "DescribeIndexResponse": {
        "properties": {
          "indexName": { "$ref": "#/components/schemas/IndexName" },
          "indexStatus": { "$ref": "#/components/schemas/IndexStatus" },
          "schema": { "$ref": "#/components/schemas/IndexSchema" }
        },
        "type": "object"
      },
      "DescribeJobExecutionRequest": { "properties": {}, "type": "object" },
      "DescribeJobExecutionResponse": {
        "properties": { "execution": { "$ref": "#/components/schemas/JobExecution" } },
        "type": "object"
      },
      "DescribeJobRequest": { "properties": {}, "type": "object" },
      "DescribeJobResponse": {
        "properties": {
          "documentSource": { "$ref": "#/components/schemas/JobDocumentSource" },
          "job": { "$ref": "#/components/schemas/Job" }
        },
        "type": "object"
      },
      "DescribeMitigationActionRequest": { "properties": {}, "type": "object" },
      "DescribeMitigationActionResponse": {
        "properties": {
          "actionArn": { "$ref": "#/components/schemas/MitigationActionArn" },
          "actionId": { "$ref": "#/components/schemas/MitigationActionId" },
          "actionName": { "$ref": "#/components/schemas/MitigationActionName" },
          "actionParams": { "$ref": "#/components/schemas/MitigationActionParams" },
          "actionType": { "$ref": "#/components/schemas/MitigationActionType" },
          "creationDate": { "$ref": "#/components/schemas/Timestamp" },
          "lastModifiedDate": { "$ref": "#/components/schemas/Timestamp" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "DescribeRoleAliasRequest": { "properties": {}, "type": "object" },
      "DescribeRoleAliasResponse": {
        "properties": { "roleAliasDescription": { "$ref": "#/components/schemas/RoleAliasDescription" } },
        "type": "object"
      },
      "DescribeScheduledAuditRequest": { "properties": {}, "type": "object" },
      "DescribeScheduledAuditResponse": {
        "properties": {
          "dayOfMonth": { "$ref": "#/components/schemas/DayOfMonth" },
          "dayOfWeek": { "$ref": "#/components/schemas/DayOfWeek" },
          "frequency": { "$ref": "#/components/schemas/AuditFrequency" },
          "scheduledAuditArn": { "$ref": "#/components/schemas/ScheduledAuditArn" },
          "scheduledAuditName": { "$ref": "#/components/schemas/ScheduledAuditName" },
          "targetCheckNames": { "$ref": "#/components/schemas/TargetAuditCheckNames" }
        },
        "type": "object"
      },
      "DescribeSecurityProfileRequest": { "properties": {}, "type": "object" },
      "DescribeSecurityProfileResponse": {
        "properties": {
          "additionalMetricsToRetain": { "$ref": "#/components/schemas/AdditionalMetricsToRetainList" },
          "alertTargets": { "$ref": "#/components/schemas/AlertTargets" },
          "behaviors": { "$ref": "#/components/schemas/Behaviors" },
          "creationDate": { "$ref": "#/components/schemas/Timestamp" },
          "lastModifiedDate": { "$ref": "#/components/schemas/Timestamp" },
          "securityProfileArn": { "$ref": "#/components/schemas/SecurityProfileArn" },
          "securityProfileDescription": { "$ref": "#/components/schemas/SecurityProfileDescription" },
          "securityProfileName": { "$ref": "#/components/schemas/SecurityProfileName" },
          "version": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "DescribeStreamRequest": { "properties": {}, "type": "object" },
      "DescribeStreamResponse": {
        "properties": { "streamInfo": { "$ref": "#/components/schemas/StreamInfo" } },
        "type": "object"
      },
      "DescribeThingGroupRequest": { "properties": {}, "type": "object" },
      "DescribeThingGroupResponse": {
        "properties": {
          "indexName": { "$ref": "#/components/schemas/IndexName" },
          "queryString": { "$ref": "#/components/schemas/QueryString" },
          "queryVersion": { "$ref": "#/components/schemas/QueryVersion" },
          "status": { "$ref": "#/components/schemas/DynamicGroupStatus" },
          "thingGroupArn": { "$ref": "#/components/schemas/ThingGroupArn" },
          "thingGroupId": { "$ref": "#/components/schemas/ThingGroupId" },
          "thingGroupMetadata": { "$ref": "#/components/schemas/ThingGroupMetadata" },
          "thingGroupName": { "$ref": "#/components/schemas/ThingGroupName" },
          "thingGroupProperties": { "$ref": "#/components/schemas/ThingGroupProperties" },
          "version": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "DescribeThingRegistrationTaskRequest": { "properties": {}, "type": "object" },
      "DescribeThingRegistrationTaskResponse": {
        "properties": {
          "creationDate": { "$ref": "#/components/schemas/CreationDate" },
          "failureCount": { "$ref": "#/components/schemas/Count" },
          "inputFileBucket": { "$ref": "#/components/schemas/RegistryS3BucketName" },
          "inputFileKey": { "$ref": "#/components/schemas/RegistryS3KeyName" },
          "lastModifiedDate": { "$ref": "#/components/schemas/LastModifiedDate" },
          "message": { "$ref": "#/components/schemas/ErrorMessage" },
          "percentageProgress": { "$ref": "#/components/schemas/Percentage" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "status": { "$ref": "#/components/schemas/Status" },
          "successCount": { "$ref": "#/components/schemas/Count" },
          "taskId": { "$ref": "#/components/schemas/TaskId" },
          "templateBody": { "$ref": "#/components/schemas/TemplateBody" }
        },
        "type": "object"
      },
      "DescribeThingRequest": {
        "description": "The input for the DescribeThing operation.",
        "properties": {},
        "type": "object"
      },
      "DescribeThingResponse": {
        "description": "The output from the DescribeThing operation.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Attributes" },
          "billingGroupName": { "$ref": "#/components/schemas/BillingGroupName" },
          "defaultClientId": { "$ref": "#/components/schemas/ClientId" },
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "thingId": { "$ref": "#/components/schemas/ThingId" },
          "thingName": { "$ref": "#/components/schemas/ThingName" },
          "thingTypeName": { "$ref": "#/components/schemas/ThingTypeName" },
          "version": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "DescribeThingTypeRequest": {
        "description": "The input for the DescribeThingType operation.",
        "properties": {},
        "type": "object"
      },
      "DescribeThingTypeResponse": {
        "description": "The output for the DescribeThingType operation.",
        "properties": {
          "thingTypeArn": { "$ref": "#/components/schemas/ThingTypeArn" },
          "thingTypeId": { "$ref": "#/components/schemas/ThingTypeId" },
          "thingTypeMetadata": { "$ref": "#/components/schemas/ThingTypeMetadata" },
          "thingTypeName": { "$ref": "#/components/schemas/ThingTypeName" },
          "thingTypeProperties": { "$ref": "#/components/schemas/ThingTypeProperties" }
        },
        "type": "object"
      },
      "Description": { "type": "string" },
      "Destination": {
        "description": "Describes the location of the updated firmware.",
        "properties": { "s3Destination": { "$ref": "#/components/schemas/S3Destination" } },
        "type": "object"
      },
      "DetachPolicyRequest": {
        "properties": { "target": { "$ref": "#/components/schemas/PolicyTarget" } },
        "required": ["target"],
        "type": "object"
      },
      "DetachPrincipalPolicyRequest": {
        "description": "The input for the DetachPrincipalPolicy operation.",
        "properties": {},
        "type": "object"
      },
      "DetachSecurityProfileRequest": { "properties": {}, "type": "object" },
      "DetachSecurityProfileResponse": { "properties": {}, "type": "object" },
      "DetachThingPrincipalRequest": {
        "description": "The input for the DetachThingPrincipal operation.",
        "properties": {},
        "type": "object"
      },
      "DetachThingPrincipalResponse": {
        "description": "The output from the DetachThingPrincipal operation.",
        "properties": {},
        "type": "object"
      },
      "DetailsKey": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "DetailsMap": { "additionalProperties": { "$ref": "#/components/schemas/DetailsValue" }, "type": "object" },
      "DetailsValue": { "maxLength": 1024, "minLength": 1, "pattern": "[^\\p\\{C\\}]*\\+", "type": "string" },
      "DeviceCertificateUpdateAction": { "enum": ["DEACTIVATE"], "type": "string" },
      "DeviceDefenderThingName": { "maxLength": 128, "minLength": 1, "type": "string" },
      "DisableAllLogs": { "type": "boolean" },
      "DisableTopicRuleRequest": {
        "description": "The input for the DisableTopicRuleRequest operation.",
        "properties": {},
        "type": "object"
      },
      "DurationSeconds": { "type": "integer" },
      "DynamicGroupStatus": { "enum": ["ACTIVE", "BUILDING", "REBUILDING"], "type": "string" },
      "DynamoDBAction": {
        "description": "<p>Describes an action to write to a DynamoDB table.</p> <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code> values must match the values used when you created the table.</p> <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a substitution template syntax. These templates provide data at runtime. The syntax is as follows: ${<i>sql-expression</i>}.</p> <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON properties, comparisons, calculations, and functions. For example, the following field uses the third level of the topic:</p> <p> <code>\"hashKeyValue\": \"${topic(3)}\"</code> </p> <p>The following field uses the timestamp:</p> <p> <code>\"rangeKeyValue\": \"${timestamp()}\"</code> </p>",
        "properties": {
          "hashKeyField": { "$ref": "#/components/schemas/HashKeyField" },
          "hashKeyType": { "$ref": "#/components/schemas/DynamoKeyType" },
          "hashKeyValue": { "$ref": "#/components/schemas/HashKeyValue" },
          "operation": { "$ref": "#/components/schemas/DynamoOperation" },
          "payloadField": { "$ref": "#/components/schemas/PayloadField" },
          "rangeKeyField": { "$ref": "#/components/schemas/RangeKeyField" },
          "rangeKeyType": { "$ref": "#/components/schemas/DynamoKeyType" },
          "rangeKeyValue": { "$ref": "#/components/schemas/RangeKeyValue" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "tableName": { "$ref": "#/components/schemas/TableName" }
        },
        "required": ["tableName", "roleArn", "hashKeyField", "hashKeyValue"],
        "type": "object"
      },
      "DynamoDBv2Action": {
        "description": "<p>Describes an action to write to a DynamoDB table.</p> <p>This DynamoDB action writes each attribute in the message payload into it's own column in the DynamoDB table.</p>",
        "properties": {
          "putItem": { "$ref": "#/components/schemas/PutItemInput" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "required": ["roleArn", "putItem"],
        "type": "object"
      },
      "DynamoKeyType": { "enum": ["STRING", "NUMBER"], "type": "string" },
      "DynamoOperation": { "type": "string" },
      "EffectivePolicies": { "items": { "$ref": "#/components/schemas/EffectivePolicy" }, "type": "array" },
      "EffectivePolicy": {
        "description": "The policy that has the effect on the authorization results.",
        "properties": {
          "policyArn": { "$ref": "#/components/schemas/PolicyArn" },
          "policyDocument": { "$ref": "#/components/schemas/PolicyDocument" },
          "policyName": { "$ref": "#/components/schemas/PolicyName" }
        },
        "type": "object"
      },
      "ElasticsearchAction": {
        "description": "Describes an action that writes data to an Amazon Elasticsearch Service domain.",
        "properties": {
          "endpoint": { "$ref": "#/components/schemas/ElasticsearchEndpoint" },
          "id": { "$ref": "#/components/schemas/ElasticsearchId" },
          "index": { "$ref": "#/components/schemas/ElasticsearchIndex" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "type": { "$ref": "#/components/schemas/ElasticsearchType" }
        },
        "required": ["roleArn", "endpoint", "index", "type", "id"],
        "type": "object"
      },
      "ElasticsearchEndpoint": { "pattern": "https?://.*", "type": "string" },
      "ElasticsearchId": { "type": "string" },
      "ElasticsearchIndex": { "type": "string" },
      "ElasticsearchType": { "type": "string" },
      "EnableIoTLoggingParams": {
        "description": "Parameters used when defining a mitigation action that enable AWS IoT logging.",
        "properties": {
          "logLevel": { "$ref": "#/components/schemas/LogLevel" },
          "roleArnForLogging": { "$ref": "#/components/schemas/RoleArn" }
        },
        "required": ["roleArnForLogging", "logLevel"],
        "type": "object"
      },
      "EnableTopicRuleRequest": {
        "description": "The input for the EnableTopicRuleRequest operation.",
        "properties": {},
        "type": "object"
      },
      "Enabled": { "type": "boolean" },
      "EndpointAddress": { "type": "string" },
      "EndpointType": { "type": "string" },
      "ErrorCode": { "type": "string" },
      "ErrorInfo": {
        "description": "Error information.",
        "properties": {
          "code": { "$ref": "#/components/schemas/Code" },
          "message": { "$ref": "#/components/schemas/OTAUpdateErrorMessage" }
        },
        "type": "object"
      },
      "ErrorMessage": { "maxLength": 2048, "type": "string" },
      "EvaluationStatistic": {
        "pattern": "(p0|p0\\.1|p0\\.01|p1|p10|p50|p90|p99|p99\\.9|p99\\.99|p100)",
        "type": "string"
      },
      "EventConfigurations": {
        "additionalProperties": { "$ref": "#/components/schemas/Configuration" },
        "type": "object"
      },
      "EventType": {
        "enum": [
          "THING",
          "THING_GROUP",
          "THING_TYPE",
          "THING_GROUP_MEMBERSHIP",
          "THING_GROUP_HIERARCHY",
          "THING_TYPE_ASSOCIATION",
          "JOB",
          "JOB_EXECUTION",
          "POLICY",
          "CERTIFICATE",
          "CA_CERTIFICATE"
        ],
        "type": "string"
      },
      "ExecutionNamePrefix": { "type": "string" },
      "ExecutionNumber": { "type": "integer" },
      "ExpectedVersion": { "type": "integer" },
      "ExpiresInSec": { "maximum": 3600, "minimum": 60, "type": "integer" },
      "ExplicitDeny": {
        "description": "Information that explicitly denies authorization.",
        "properties": { "policies": { "$ref": "#/components/schemas/Policies" } },
        "type": "object"
      },
      "ExponentialRolloutRate": {
        "description": "Allows you to create an exponential rate of rollout for a job.",
        "properties": {
          "baseRatePerMinute": { "$ref": "#/components/schemas/RolloutRatePerMinute" },
          "incrementFactor": { "$ref": "#/components/schemas/IncrementFactor" },
          "rateIncreaseCriteria": { "$ref": "#/components/schemas/RateIncreaseCriteria" }
        },
        "required": ["baseRatePerMinute", "incrementFactor", "rateIncreaseCriteria"],
        "type": "object"
      },
      "FailedChecksCount": { "type": "integer" },
      "FailedFindingsCount": { "type": "integer" },
      "FailedThings": { "type": "integer" },
      "FileId": { "maximum": 255, "minimum": 0, "type": "integer" },
      "FileLocation": {
        "description": "The location of the OTA update.",
        "properties": {
          "s3Location": { "$ref": "#/components/schemas/S3Location" },
          "stream": { "$ref": "#/components/schemas/Stream" }
        },
        "type": "object"
      },
      "FileName": { "type": "string" },
      "FindingId": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9_-]+", "type": "string" },
      "FindingIds": {
        "items": { "$ref": "#/components/schemas/FindingId" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "FirehoseAction": {
        "description": "Describes an action that writes data to an Amazon Kinesis Firehose stream.",
        "properties": {
          "deliveryStreamName": { "$ref": "#/components/schemas/DeliveryStreamName" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "separator": { "$ref": "#/components/schemas/FirehoseSeparator" }
        },
        "required": ["roleArn", "deliveryStreamName"],
        "type": "object"
      },
      "FirehoseSeparator": { "pattern": "([\\n\\t])|(\\r\\n)|(,)", "type": "string" },
      "Flag": { "type": "boolean" },
      "ForceDelete": { "type": "boolean" },
      "ForceDeleteAWSJob": { "type": "boolean" },
      "ForceFlag": { "type": "boolean" },
      "Forced": { "type": "boolean" },
      "FunctionArn": { "type": "string" },
      "GEMaxResults": { "maximum": 10000, "minimum": 1, "type": "integer" },
      "GenerationId": { "type": "string" },
      "GetEffectivePoliciesRequest": {
        "properties": {
          "cognitoIdentityPoolId": { "$ref": "#/components/schemas/CognitoIdentityPoolId" },
          "principal": { "$ref": "#/components/schemas/Principal" }
        },
        "type": "object"
      },
      "GetEffectivePoliciesResponse": {
        "properties": { "effectivePolicies": { "$ref": "#/components/schemas/EffectivePolicies" } },
        "type": "object"
      },
      "GetIndexingConfigurationRequest": { "properties": {}, "type": "object" },
      "GetIndexingConfigurationResponse": {
        "properties": {
          "thingGroupIndexingConfiguration": { "$ref": "#/components/schemas/ThingGroupIndexingConfiguration" },
          "thingIndexingConfiguration": { "$ref": "#/components/schemas/ThingIndexingConfiguration" }
        },
        "type": "object"
      },
      "GetJobDocumentRequest": { "properties": {}, "type": "object" },
      "GetJobDocumentResponse": {
        "properties": { "document": { "$ref": "#/components/schemas/JobDocument" } },
        "type": "object"
      },
      "GetLoggingOptionsRequest": {
        "description": "The input for the GetLoggingOptions operation.",
        "properties": {},
        "type": "object"
      },
      "GetLoggingOptionsResponse": {
        "description": "The output from the GetLoggingOptions operation.",
        "properties": {
          "logLevel": { "$ref": "#/components/schemas/LogLevel" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "type": "object"
      },
      "GetOTAUpdateRequest": { "properties": {}, "type": "object" },
      "GetOTAUpdateResponse": {
        "properties": { "otaUpdateInfo": { "$ref": "#/components/schemas/OTAUpdateInfo" } },
        "type": "object"
      },
      "GetPolicyRequest": {
        "description": "The input for the GetPolicy operation.",
        "properties": {},
        "type": "object"
      },
      "GetPolicyResponse": {
        "description": "The output from the GetPolicy operation.",
        "properties": {
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "defaultVersionId": { "$ref": "#/components/schemas/PolicyVersionId" },
          "generationId": { "$ref": "#/components/schemas/GenerationId" },
          "lastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "policyArn": { "$ref": "#/components/schemas/PolicyArn" },
          "policyDocument": { "$ref": "#/components/schemas/PolicyDocument" },
          "policyName": { "$ref": "#/components/schemas/PolicyName" }
        },
        "type": "object"
      },
      "GetPolicyVersionRequest": {
        "description": "The input for the GetPolicyVersion operation.",
        "properties": {},
        "type": "object"
      },
      "GetPolicyVersionResponse": {
        "description": "The output from the GetPolicyVersion operation.",
        "properties": {
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "generationId": { "$ref": "#/components/schemas/GenerationId" },
          "isDefaultVersion": { "$ref": "#/components/schemas/IsDefaultVersion" },
          "lastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "policyArn": { "$ref": "#/components/schemas/PolicyArn" },
          "policyDocument": { "$ref": "#/components/schemas/PolicyDocument" },
          "policyName": { "$ref": "#/components/schemas/PolicyName" },
          "policyVersionId": { "$ref": "#/components/schemas/PolicyVersionId" }
        },
        "type": "object"
      },
      "GetRegistrationCodeRequest": {
        "description": "The input to the GetRegistrationCode operation.",
        "properties": {},
        "type": "object"
      },
      "GetRegistrationCodeResponse": {
        "description": "The output from the GetRegistrationCode operation.",
        "properties": { "registrationCode": { "$ref": "#/components/schemas/RegistrationCode" } },
        "type": "object"
      },
      "GetStatisticsRequest": {
        "properties": {
          "aggregationField": { "$ref": "#/components/schemas/AggregationField" },
          "indexName": { "$ref": "#/components/schemas/IndexName" },
          "queryString": { "$ref": "#/components/schemas/QueryString" },
          "queryVersion": { "$ref": "#/components/schemas/QueryVersion" }
        },
        "required": ["queryString"],
        "type": "object"
      },
      "GetStatisticsResponse": {
        "properties": { "statistics": { "$ref": "#/components/schemas/Statistics" } },
        "type": "object"
      },
      "GetTopicRuleRequest": {
        "description": "The input for the GetTopicRule operation.",
        "properties": {},
        "type": "object"
      },
      "GetTopicRuleResponse": {
        "description": "The output from the GetTopicRule operation.",
        "properties": {
          "rule": { "$ref": "#/components/schemas/TopicRule" },
          "ruleArn": { "$ref": "#/components/schemas/RuleArn" }
        },
        "type": "object"
      },
      "GetV2LoggingOptionsRequest": { "properties": {}, "type": "object" },
      "GetV2LoggingOptionsResponse": {
        "properties": {
          "defaultLogLevel": { "$ref": "#/components/schemas/LogLevel" },
          "disableAllLogs": { "$ref": "#/components/schemas/DisableAllLogs" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "type": "object"
      },
      "GroupNameAndArn": {
        "description": "The name and ARN of a group.",
        "properties": {
          "groupArn": { "$ref": "#/components/schemas/ThingGroupArn" },
          "groupName": { "$ref": "#/components/schemas/ThingGroupName" }
        },
        "type": "object"
      },
      "HashAlgorithm": { "type": "string" },
      "HashKeyField": { "type": "string" },
      "HashKeyValue": { "type": "string" },
      "ImplicitDeny": {
        "description": "Information that implicitly denies authorization. When policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny.",
        "properties": { "policies": { "$ref": "#/components/schemas/Policies" } },
        "type": "object"
      },
      "InProgressChecksCount": { "type": "integer" },
      "InProgressThings": { "type": "integer" },
      "InProgressTimeoutInMinutes": { "type": "integer" },
      "IncrementFactor": { "format": "double", "maximum": 5, "minimum": 1, "type": "number" },
      "IndexName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "IndexNamesList": { "items": { "$ref": "#/components/schemas/IndexName" }, "type": "array" },
      "IndexNotReadyException": {},
      "IndexSchema": { "type": "string" },
      "IndexStatus": { "enum": ["ACTIVE", "BUILDING", "REBUILDING"], "type": "string" },
      "InlineDocument": { "type": "string" },
      "InputName": { "maxLength": 128, "minLength": 1, "type": "string" },
      "InternalException": {},
      "InternalFailureException": {},
      "InvalidAggregationException": {},
      "InvalidQueryException": {},
      "InvalidRequestException": {},
      "InvalidResponseException": {},
      "InvalidStateTransitionException": {},
      "IotAnalyticsAction": {
        "description": "Sends message data to an AWS IoT Analytics channel.",
        "properties": {
          "channelArn": { "$ref": "#/components/schemas/AwsArn" },
          "channelName": { "$ref": "#/components/schemas/ChannelName" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "type": "object"
      },
      "IotEventsAction": {
        "description": "Sends an input to an AWS IoT Events detector.",
        "properties": {
          "inputName": { "$ref": "#/components/schemas/InputName" },
          "messageId": { "$ref": "#/components/schemas/MessageId" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "required": ["inputName", "roleArn"],
        "type": "object"
      },
      "IsAuthenticated": { "type": "boolean" },
      "IsDefaultVersion": { "type": "boolean" },
      "IsDisabled": { "type": "boolean" },
      "Job": {
        "description": "The <code>Job</code> object contains details about a job.",
        "properties": {
          "abortConfig": { "$ref": "#/components/schemas/AbortConfig" },
          "comment": { "$ref": "#/components/schemas/Comment" },
          "completedAt": { "$ref": "#/components/schemas/DateType" },
          "createdAt": { "$ref": "#/components/schemas/DateType" },
          "description": { "$ref": "#/components/schemas/JobDescription" },
          "forceCanceled": { "$ref": "#/components/schemas/Forced" },
          "jobArn": { "$ref": "#/components/schemas/JobArn" },
          "jobExecutionsRolloutConfig": { "$ref": "#/components/schemas/JobExecutionsRolloutConfig" },
          "jobId": { "$ref": "#/components/schemas/JobId" },
          "jobProcessDetails": { "$ref": "#/components/schemas/JobProcessDetails" },
          "lastUpdatedAt": { "$ref": "#/components/schemas/DateType" },
          "presignedUrlConfig": { "$ref": "#/components/schemas/PresignedUrlConfig" },
          "reasonCode": { "$ref": "#/components/schemas/ReasonCode" },
          "status": { "$ref": "#/components/schemas/JobStatus" },
          "targetSelection": { "$ref": "#/components/schemas/TargetSelection" },
          "targets": { "$ref": "#/components/schemas/JobTargets" },
          "timeoutConfig": { "$ref": "#/components/schemas/TimeoutConfig" }
        },
        "type": "object"
      },
      "JobArn": { "type": "string" },
      "JobDescription": { "maxLength": 2028, "pattern": "[^\\p{C}]+", "type": "string" },
      "JobDocument": { "maxLength": 32768, "type": "string" },
      "JobDocumentSource": { "maxLength": 1350, "minLength": 1, "type": "string" },
      "JobExecution": {
        "description": "The job execution object represents the execution of a job on a particular device.",
        "properties": {
          "approximateSecondsBeforeTimedOut": { "$ref": "#/components/schemas/ApproximateSecondsBeforeTimedOut" },
          "executionNumber": { "$ref": "#/components/schemas/ExecutionNumber" },
          "forceCanceled": { "$ref": "#/components/schemas/Forced" },
          "jobId": { "$ref": "#/components/schemas/JobId" },
          "lastUpdatedAt": { "$ref": "#/components/schemas/DateType" },
          "queuedAt": { "$ref": "#/components/schemas/DateType" },
          "startedAt": { "$ref": "#/components/schemas/DateType" },
          "status": { "$ref": "#/components/schemas/JobExecutionStatus" },
          "statusDetails": { "$ref": "#/components/schemas/JobExecutionStatusDetails" },
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "versionNumber": { "$ref": "#/components/schemas/VersionNumber" }
        },
        "type": "object"
      },
      "JobExecutionFailureType": { "enum": ["FAILED", "REJECTED", "TIMED_OUT", "ALL"], "type": "string" },
      "JobExecutionStatus": {
        "enum": ["QUEUED", "IN_PROGRESS", "SUCCEEDED", "FAILED", "TIMED_OUT", "REJECTED", "REMOVED", "CANCELED"],
        "type": "string"
      },
      "JobExecutionStatusDetails": {
        "description": "Details of the job execution status.",
        "properties": { "detailsMap": { "$ref": "#/components/schemas/DetailsMap" } },
        "type": "object"
      },
      "JobExecutionSummary": {
        "description": "The job execution summary.",
        "properties": {
          "executionNumber": { "$ref": "#/components/schemas/ExecutionNumber" },
          "lastUpdatedAt": { "$ref": "#/components/schemas/DateType" },
          "queuedAt": { "$ref": "#/components/schemas/DateType" },
          "startedAt": { "$ref": "#/components/schemas/DateType" },
          "status": { "$ref": "#/components/schemas/JobExecutionStatus" }
        },
        "type": "object"
      },
      "JobExecutionSummaryForJob": {
        "description": "Contains a summary of information about job executions for a specific job.",
        "properties": {
          "jobExecutionSummary": { "$ref": "#/components/schemas/JobExecutionSummary" },
          "thingArn": { "$ref": "#/components/schemas/ThingArn" }
        },
        "type": "object"
      },
      "JobExecutionSummaryForJobList": {
        "items": { "$ref": "#/components/schemas/JobExecutionSummaryForJob" },
        "type": "array"
      },
      "JobExecutionSummaryForThing": {
        "description": "The job execution summary for a thing.",
        "properties": {
          "jobExecutionSummary": { "$ref": "#/components/schemas/JobExecutionSummary" },
          "jobId": { "$ref": "#/components/schemas/JobId" }
        },
        "type": "object"
      },
      "JobExecutionSummaryForThingList": {
        "items": { "$ref": "#/components/schemas/JobExecutionSummaryForThing" },
        "type": "array"
      },
      "JobExecutionsRolloutConfig": {
        "description": "Allows you to create a staged rollout of a job.",
        "properties": {
          "exponentialRate": { "$ref": "#/components/schemas/ExponentialRolloutRate" },
          "maximumPerMinute": { "$ref": "#/components/schemas/MaxJobExecutionsPerMin" }
        },
        "type": "object"
      },
      "JobId": { "maxLength": 64, "minLength": 1, "pattern": "[a-zA-Z0-9_-]+", "type": "string" },
      "JobProcessDetails": {
        "description": "The job process details.",
        "properties": {
          "numberOfCanceledThings": { "$ref": "#/components/schemas/CanceledThings" },
          "numberOfFailedThings": { "$ref": "#/components/schemas/FailedThings" },
          "numberOfInProgressThings": { "$ref": "#/components/schemas/InProgressThings" },
          "numberOfQueuedThings": { "$ref": "#/components/schemas/QueuedThings" },
          "numberOfRejectedThings": { "$ref": "#/components/schemas/RejectedThings" },
          "numberOfRemovedThings": { "$ref": "#/components/schemas/RemovedThings" },
          "numberOfSucceededThings": { "$ref": "#/components/schemas/SucceededThings" },
          "numberOfTimedOutThings": { "$ref": "#/components/schemas/TimedOutThings" },
          "processingTargets": { "$ref": "#/components/schemas/ProcessingTargetNameList" }
        },
        "type": "object"
      },
      "JobStatus": { "enum": ["IN_PROGRESS", "CANCELED", "COMPLETED", "DELETION_IN_PROGRESS"], "type": "string" },
      "JobSummary": {
        "description": "The job summary.",
        "properties": {
          "completedAt": { "$ref": "#/components/schemas/DateType" },
          "createdAt": { "$ref": "#/components/schemas/DateType" },
          "jobArn": { "$ref": "#/components/schemas/JobArn" },
          "jobId": { "$ref": "#/components/schemas/JobId" },
          "lastUpdatedAt": { "$ref": "#/components/schemas/DateType" },
          "status": { "$ref": "#/components/schemas/JobStatus" },
          "targetSelection": { "$ref": "#/components/schemas/TargetSelection" },
          "thingGroupId": { "$ref": "#/components/schemas/ThingGroupId" }
        },
        "type": "object"
      },
      "JobSummaryList": { "items": { "$ref": "#/components/schemas/JobSummary" }, "type": "array" },
      "JobTargets": { "items": { "$ref": "#/components/schemas/TargetArn" }, "minItems": 1, "type": "array" },
      "JsonDocument": { "type": "string" },
      "Key": { "type": "string" },
      "KeyName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "KeyPair": {
        "description": "Describes a key pair.",
        "properties": {
          "PrivateKey": { "$ref": "#/components/schemas/PrivateKey" },
          "PublicKey": { "$ref": "#/components/schemas/PublicKey" }
        },
        "type": "object"
      },
      "KeyValue": { "maxLength": 5120, "type": "string" },
      "KinesisAction": {
        "description": "Describes an action to write data to an Amazon Kinesis stream.",
        "properties": {
          "partitionKey": { "$ref": "#/components/schemas/PartitionKey" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "streamName": { "$ref": "#/components/schemas/StreamName" }
        },
        "required": ["roleArn", "streamName"],
        "type": "object"
      },
      "LambdaAction": {
        "description": "Describes an action to invoke a Lambda function.",
        "properties": { "functionArn": { "$ref": "#/components/schemas/FunctionArn" } },
        "required": ["functionArn"],
        "type": "object"
      },
      "LaserMaxResults": { "maximum": 250, "minimum": 1, "type": "integer" },
      "LastModifiedDate": { "format": "date-time", "type": "string" },
      "LimitExceededException": {},
      "ListActiveViolationsRequest": { "properties": {}, "type": "object" },
      "ListActiveViolationsResponse": {
        "properties": {
          "activeViolations": { "$ref": "#/components/schemas/ActiveViolations" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListAttachedPoliciesRequest": { "properties": {}, "type": "object" },
      "ListAttachedPoliciesResponse": {
        "properties": {
          "nextMarker": { "$ref": "#/components/schemas/Marker" },
          "policies": { "$ref": "#/components/schemas/Policies" }
        },
        "type": "object"
      },
      "ListAuditFindingsRequest": {
        "properties": {
          "checkName": { "$ref": "#/components/schemas/AuditCheckName" },
          "endTime": { "$ref": "#/components/schemas/Timestamp" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "resourceIdentifier": { "$ref": "#/components/schemas/ResourceIdentifier" },
          "startTime": { "$ref": "#/components/schemas/Timestamp" },
          "taskId": { "$ref": "#/components/schemas/AuditTaskId" }
        },
        "type": "object"
      },
      "ListAuditFindingsResponse": {
        "properties": {
          "findings": { "$ref": "#/components/schemas/AuditFindings" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListAuditMitigationActionsExecutionsRequest": { "properties": {}, "type": "object" },
      "ListAuditMitigationActionsExecutionsResponse": {
        "properties": {
          "actionsExecutions": { "$ref": "#/components/schemas/AuditMitigationActionExecutionMetadataList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListAuditMitigationActionsTasksRequest": { "properties": {}, "type": "object" },
      "ListAuditMitigationActionsTasksResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "tasks": { "$ref": "#/components/schemas/AuditMitigationActionsTaskMetadataList" }
        },
        "type": "object"
      },
      "ListAuditTasksRequest": { "properties": {}, "type": "object" },
      "ListAuditTasksResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "tasks": { "$ref": "#/components/schemas/AuditTaskMetadataList" }
        },
        "type": "object"
      },
      "ListAuthorizersRequest": { "properties": {}, "type": "object" },
      "ListAuthorizersResponse": {
        "properties": {
          "authorizers": { "$ref": "#/components/schemas/Authorizers" },
          "nextMarker": { "$ref": "#/components/schemas/Marker" }
        },
        "type": "object"
      },
      "ListBillingGroupsRequest": { "properties": {}, "type": "object" },
      "ListBillingGroupsResponse": {
        "properties": {
          "billingGroups": { "$ref": "#/components/schemas/BillingGroupNameAndArnList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListCACertificatesRequest": {
        "description": "Input for the ListCACertificates operation.",
        "properties": {},
        "type": "object"
      },
      "ListCACertificatesResponse": {
        "description": "The output from the ListCACertificates operation.",
        "properties": {
          "certificates": { "$ref": "#/components/schemas/CACertificates" },
          "nextMarker": { "$ref": "#/components/schemas/Marker" }
        },
        "type": "object"
      },
      "ListCertificatesByCARequest": {
        "description": "The input to the ListCertificatesByCA operation.",
        "properties": {},
        "type": "object"
      },
      "ListCertificatesByCAResponse": {
        "description": "The output of the ListCertificatesByCA operation.",
        "properties": {
          "certificates": { "$ref": "#/components/schemas/Certificates" },
          "nextMarker": { "$ref": "#/components/schemas/Marker" }
        },
        "type": "object"
      },
      "ListCertificatesRequest": {
        "description": "The input for the ListCertificates operation.",
        "properties": {},
        "type": "object"
      },
      "ListCertificatesResponse": {
        "description": "The output of the ListCertificates operation.",
        "properties": {
          "certificates": { "$ref": "#/components/schemas/Certificates" },
          "nextMarker": { "$ref": "#/components/schemas/Marker" }
        },
        "type": "object"
      },
      "ListIndicesRequest": { "properties": {}, "type": "object" },
      "ListIndicesResponse": {
        "properties": {
          "indexNames": { "$ref": "#/components/schemas/IndexNamesList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListJobExecutionsForJobRequest": { "properties": {}, "type": "object" },
      "ListJobExecutionsForJobResponse": {
        "properties": {
          "executionSummaries": { "$ref": "#/components/schemas/JobExecutionSummaryForJobList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListJobExecutionsForThingRequest": { "properties": {}, "type": "object" },
      "ListJobExecutionsForThingResponse": {
        "properties": {
          "executionSummaries": { "$ref": "#/components/schemas/JobExecutionSummaryForThingList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListJobsRequest": { "properties": {}, "type": "object" },
      "ListJobsResponse": {
        "properties": {
          "jobs": { "$ref": "#/components/schemas/JobSummaryList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListMitigationActionsRequest": { "properties": {}, "type": "object" },
      "ListMitigationActionsResponse": {
        "properties": {
          "actionIdentifiers": { "$ref": "#/components/schemas/MitigationActionIdentifierList" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListOTAUpdatesRequest": { "properties": {}, "type": "object" },
      "ListOTAUpdatesResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "otaUpdates": { "$ref": "#/components/schemas/OTAUpdatesSummary" }
        },
        "type": "object"
      },
      "ListOutgoingCertificatesRequest": {
        "description": "The input to the ListOutgoingCertificates operation.",
        "properties": {},
        "type": "object"
      },
      "ListOutgoingCertificatesResponse": {
        "description": "The output from the ListOutgoingCertificates operation.",
        "properties": {
          "nextMarker": { "$ref": "#/components/schemas/Marker" },
          "outgoingCertificates": { "$ref": "#/components/schemas/OutgoingCertificates" }
        },
        "type": "object"
      },
      "ListPoliciesRequest": {
        "description": "The input for the ListPolicies operation.",
        "properties": {},
        "type": "object"
      },
      "ListPoliciesResponse": {
        "description": "The output from the ListPolicies operation.",
        "properties": {
          "nextMarker": { "$ref": "#/components/schemas/Marker" },
          "policies": { "$ref": "#/components/schemas/Policies" }
        },
        "type": "object"
      },
      "ListPolicyPrincipalsRequest": {
        "description": "The input for the ListPolicyPrincipals operation.",
        "properties": {},
        "type": "object"
      },
      "ListPolicyPrincipalsResponse": {
        "description": "The output from the ListPolicyPrincipals operation.",
        "properties": {
          "nextMarker": { "$ref": "#/components/schemas/Marker" },
          "principals": { "$ref": "#/components/schemas/Principals" }
        },
        "type": "object"
      },
      "ListPolicyVersionsRequest": {
        "description": "The input for the ListPolicyVersions operation.",
        "properties": {},
        "type": "object"
      },
      "ListPolicyVersionsResponse": {
        "description": "The output from the ListPolicyVersions operation.",
        "properties": { "policyVersions": { "$ref": "#/components/schemas/PolicyVersions" } },
        "type": "object"
      },
      "ListPrincipalPoliciesRequest": {
        "description": "The input for the ListPrincipalPolicies operation.",
        "properties": {},
        "type": "object"
      },
      "ListPrincipalPoliciesResponse": {
        "description": "The output from the ListPrincipalPolicies operation.",
        "properties": {
          "nextMarker": { "$ref": "#/components/schemas/Marker" },
          "policies": { "$ref": "#/components/schemas/Policies" }
        },
        "type": "object"
      },
      "ListPrincipalThingsRequest": {
        "description": "The input for the ListPrincipalThings operation.",
        "properties": {},
        "type": "object"
      },
      "ListPrincipalThingsResponse": {
        "description": "The output from the ListPrincipalThings operation.",
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "things": { "$ref": "#/components/schemas/ThingNameList" }
        },
        "type": "object"
      },
      "ListRoleAliasesRequest": { "properties": {}, "type": "object" },
      "ListRoleAliasesResponse": {
        "properties": {
          "nextMarker": { "$ref": "#/components/schemas/Marker" },
          "roleAliases": { "$ref": "#/components/schemas/RoleAliases" }
        },
        "type": "object"
      },
      "ListScheduledAuditsRequest": { "properties": {}, "type": "object" },
      "ListScheduledAuditsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "scheduledAudits": { "$ref": "#/components/schemas/ScheduledAuditMetadataList" }
        },
        "type": "object"
      },
      "ListSecurityProfilesForTargetRequest": { "properties": {}, "type": "object" },
      "ListSecurityProfilesForTargetResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "securityProfileTargetMappings": { "$ref": "#/components/schemas/SecurityProfileTargetMappings" }
        },
        "type": "object"
      },
      "ListSecurityProfilesRequest": { "properties": {}, "type": "object" },
      "ListSecurityProfilesResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "securityProfileIdentifiers": { "$ref": "#/components/schemas/SecurityProfileIdentifiers" }
        },
        "type": "object"
      },
      "ListStreamsRequest": { "properties": {}, "type": "object" },
      "ListStreamsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "streams": { "$ref": "#/components/schemas/StreamsSummary" }
        },
        "type": "object"
      },
      "ListTagsForResourceRequest": { "properties": {}, "type": "object" },
      "ListTagsForResourceResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "type": "object"
      },
      "ListTargetsForPolicyRequest": { "properties": {}, "type": "object" },
      "ListTargetsForPolicyResponse": {
        "properties": {
          "nextMarker": { "$ref": "#/components/schemas/Marker" },
          "targets": { "$ref": "#/components/schemas/PolicyTargets" }
        },
        "type": "object"
      },
      "ListTargetsForSecurityProfileRequest": { "properties": {}, "type": "object" },
      "ListTargetsForSecurityProfileResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "securityProfileTargets": { "$ref": "#/components/schemas/SecurityProfileTargets" }
        },
        "type": "object"
      },
      "ListThingGroupsForThingRequest": { "properties": {}, "type": "object" },
      "ListThingGroupsForThingResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "thingGroups": { "$ref": "#/components/schemas/ThingGroupNameAndArnList" }
        },
        "type": "object"
      },
      "ListThingGroupsRequest": { "properties": {}, "type": "object" },
      "ListThingGroupsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "thingGroups": { "$ref": "#/components/schemas/ThingGroupNameAndArnList" }
        },
        "type": "object"
      },
      "ListThingPrincipalsRequest": {
        "description": "The input for the ListThingPrincipal operation.",
        "properties": {},
        "type": "object"
      },
      "ListThingPrincipalsResponse": {
        "description": "The output from the ListThingPrincipals operation.",
        "properties": { "principals": { "$ref": "#/components/schemas/Principals" } },
        "type": "object"
      },
      "ListThingRegistrationTaskReportsRequest": { "properties": {}, "type": "object" },
      "ListThingRegistrationTaskReportsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "reportType": { "$ref": "#/components/schemas/ReportType" },
          "resourceLinks": { "$ref": "#/components/schemas/S3FileUrlList" }
        },
        "type": "object"
      },
      "ListThingRegistrationTasksRequest": { "properties": {}, "type": "object" },
      "ListThingRegistrationTasksResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "taskIds": { "$ref": "#/components/schemas/TaskIdList" }
        },
        "type": "object"
      },
      "ListThingTypesRequest": {
        "description": "The input for the ListThingTypes operation.",
        "properties": {},
        "type": "object"
      },
      "ListThingTypesResponse": {
        "description": "The output for the ListThingTypes operation.",
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "thingTypes": { "$ref": "#/components/schemas/ThingTypeList" }
        },
        "type": "object"
      },
      "ListThingsInBillingGroupRequest": { "properties": {}, "type": "object" },
      "ListThingsInBillingGroupResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "things": { "$ref": "#/components/schemas/ThingNameList" }
        },
        "type": "object"
      },
      "ListThingsInThingGroupRequest": { "properties": {}, "type": "object" },
      "ListThingsInThingGroupResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "things": { "$ref": "#/components/schemas/ThingNameList" }
        },
        "type": "object"
      },
      "ListThingsRequest": {
        "description": "The input for the ListThings operation.",
        "properties": {},
        "type": "object"
      },
      "ListThingsResponse": {
        "description": "The output from the ListThings operation.",
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "things": { "$ref": "#/components/schemas/ThingAttributeList" }
        },
        "type": "object"
      },
      "ListTopicRulesRequest": {
        "description": "The input for the ListTopicRules operation.",
        "properties": {},
        "type": "object"
      },
      "ListTopicRulesResponse": {
        "description": "The output from the ListTopicRules operation.",
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "rules": { "$ref": "#/components/schemas/TopicRuleList" }
        },
        "type": "object"
      },
      "ListV2LoggingLevelsRequest": { "properties": {}, "type": "object" },
      "ListV2LoggingLevelsResponse": {
        "properties": {
          "logTargetConfigurations": { "$ref": "#/components/schemas/LogTargetConfigurations" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListViolationEventsRequest": { "properties": {}, "type": "object" },
      "ListViolationEventsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "violationEvents": { "$ref": "#/components/schemas/ViolationEvents" }
        },
        "type": "object"
      },
      "LogLevel": { "enum": ["DEBUG", "INFO", "ERROR", "WARN", "DISABLED"], "type": "string" },
      "LogTarget": {
        "description": "A log target.",
        "properties": {
          "targetName": { "$ref": "#/components/schemas/LogTargetName" },
          "targetType": { "$ref": "#/components/schemas/LogTargetType" }
        },
        "required": ["targetType"],
        "type": "object"
      },
      "LogTargetConfiguration": {
        "description": "The target configuration.",
        "properties": {
          "logLevel": { "$ref": "#/components/schemas/LogLevel" },
          "logTarget": { "$ref": "#/components/schemas/LogTarget" }
        },
        "type": "object"
      },
      "LogTargetConfigurations": {
        "items": { "$ref": "#/components/schemas/LogTargetConfiguration" },
        "type": "array"
      },
      "LogTargetName": { "type": "string" },
      "LogTargetType": { "enum": ["DEFAULT", "THING_GROUP"], "type": "string" },
      "LoggingOptionsPayload": {
        "description": "Describes the logging options payload.",
        "properties": {
          "logLevel": { "$ref": "#/components/schemas/LogLevel" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "required": ["roleArn"],
        "type": "object"
      },
      "MalformedPolicyException": {},
      "Marker": { "pattern": "[A-Za-z0-9+/]+={0,2}", "type": "string" },
      "MaxJobExecutionsPerMin": { "minimum": 1, "type": "integer" },
      "MaxResults": { "maximum": 250, "minimum": 1, "type": "integer" },
      "MaximumPerMinute": { "maximum": 1000, "minimum": 1, "type": "integer" },
      "Message": { "maxLength": 128, "type": "string" },
      "MessageFormat": { "enum": ["RAW", "JSON"], "type": "string" },
      "MessageId": { "maxLength": 128, "type": "string" },
      "MetricValue": {
        "description": "The value to be compared with the <code>metric</code>.",
        "properties": {
          "cidrs": { "$ref": "#/components/schemas/Cidrs" },
          "count": { "$ref": "#/components/schemas/UnsignedLong" },
          "ports": { "$ref": "#/components/schemas/Ports" }
        },
        "type": "object"
      },
      "MinimumNumberOfExecutedThings": { "minimum": 1, "type": "integer" },
      "MissingContextValue": { "type": "string" },
      "MissingContextValues": { "items": { "$ref": "#/components/schemas/MissingContextValue" }, "type": "array" },
      "MitigationAction": {
        "description": "Describes which changes should be applied as part of a mitigation action.",
        "properties": {
          "actionParams": { "$ref": "#/components/schemas/MitigationActionParams" },
          "id": { "$ref": "#/components/schemas/MitigationActionId" },
          "name": { "$ref": "#/components/schemas/MitigationActionName" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "MitigationActionArn": { "type": "string" },
      "MitigationActionId": { "type": "string" },
      "MitigationActionIdentifier": {
        "description": "Information that identifies a mitigation action. This information is returned by ListMitigationActions.",
        "properties": {
          "actionArn": { "$ref": "#/components/schemas/MitigationActionArn" },
          "actionName": { "$ref": "#/components/schemas/MitigationActionName" },
          "creationDate": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "MitigationActionIdentifierList": {
        "items": { "$ref": "#/components/schemas/MitigationActionIdentifier" },
        "type": "array"
      },
      "MitigationActionList": { "items": { "$ref": "#/components/schemas/MitigationAction" }, "type": "array" },
      "MitigationActionName": { "maxLength": 128, "pattern": "[a-zA-Z0-9_-]+", "type": "string" },
      "MitigationActionNameList": {
        "items": { "$ref": "#/components/schemas/MitigationActionName" },
        "maxItems": 5,
        "minItems": 1,
        "type": "array"
      },
      "MitigationActionParams": {
        "description": "The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).",
        "properties": {
          "addThingsToThingGroupParams": { "$ref": "#/components/schemas/AddThingsToThingGroupParams" },
          "enableIoTLoggingParams": { "$ref": "#/components/schemas/EnableIoTLoggingParams" },
          "publishFindingToSnsParams": { "$ref": "#/components/schemas/PublishFindingToSnsParams" },
          "replaceDefaultPolicyVersionParams": { "$ref": "#/components/schemas/ReplaceDefaultPolicyVersionParams" },
          "updateCACertificateParams": { "$ref": "#/components/schemas/UpdateCACertificateParams" },
          "updateDeviceCertificateParams": { "$ref": "#/components/schemas/UpdateDeviceCertificateParams" }
        },
        "type": "object"
      },
      "MitigationActionType": {
        "enum": [
          "UPDATE_DEVICE_CERTIFICATE",
          "UPDATE_CA_CERTIFICATE",
          "ADD_THINGS_TO_THING_GROUP",
          "REPLACE_DEFAULT_POLICY_VERSION",
          "ENABLE_IOT_LOGGING",
          "PUBLISH_FINDING_TO_SNS"
        ],
        "type": "string"
      },
      "NextToken": { "type": "string" },
      "NonCompliantChecksCount": { "type": "integer" },
      "NonCompliantResource": {
        "description": "Information about the resource that was noncompliant with the audit check.",
        "properties": {
          "additionalInfo": { "$ref": "#/components/schemas/StringMap" },
          "resourceIdentifier": { "$ref": "#/components/schemas/ResourceIdentifier" },
          "resourceType": { "$ref": "#/components/schemas/ResourceType" }
        },
        "type": "object"
      },
      "NonCompliantResourcesCount": { "type": "integer" },
      "NotConfiguredException": {},
      "NumberOfThings": { "minimum": 1, "type": "integer" },
      "OTAUpdateArn": { "type": "string" },
      "OTAUpdateDescription": { "maxLength": 2028, "pattern": "[^\\p{C}]+", "type": "string" },
      "OTAUpdateErrorMessage": { "type": "string" },
      "OTAUpdateFile": {
        "description": "Describes a file to be associated with an OTA update.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/AttributesMap" },
          "codeSigning": { "$ref": "#/components/schemas/CodeSigning" },
          "fileLocation": { "$ref": "#/components/schemas/FileLocation" },
          "fileName": { "$ref": "#/components/schemas/FileName" },
          "fileVersion": { "$ref": "#/components/schemas/OTAUpdateFileVersion" }
        },
        "type": "object"
      },
      "OTAUpdateFileVersion": { "type": "string" },
      "OTAUpdateFiles": {
        "items": { "$ref": "#/components/schemas/OTAUpdateFile" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "OTAUpdateId": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9_-]+", "type": "string" },
      "OTAUpdateInfo": {
        "description": "Information about an OTA update.",
        "properties": {
          "additionalParameters": { "$ref": "#/components/schemas/AdditionalParameterMap" },
          "awsIotJobArn": { "$ref": "#/components/schemas/AwsIotJobArn" },
          "awsIotJobId": { "$ref": "#/components/schemas/AwsIotJobId" },
          "awsJobExecutionsRolloutConfig": { "$ref": "#/components/schemas/AwsJobExecutionsRolloutConfig" },
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "description": { "$ref": "#/components/schemas/OTAUpdateDescription" },
          "errorInfo": { "$ref": "#/components/schemas/ErrorInfo" },
          "lastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "otaUpdateArn": { "$ref": "#/components/schemas/OTAUpdateArn" },
          "otaUpdateFiles": { "$ref": "#/components/schemas/OTAUpdateFiles" },
          "otaUpdateId": { "$ref": "#/components/schemas/OTAUpdateId" },
          "otaUpdateStatus": { "$ref": "#/components/schemas/OTAUpdateStatus" },
          "targetSelection": { "$ref": "#/components/schemas/TargetSelection" },
          "targets": { "$ref": "#/components/schemas/Targets" }
        },
        "type": "object"
      },
      "OTAUpdateStatus": {
        "enum": ["CREATE_PENDING", "CREATE_IN_PROGRESS", "CREATE_COMPLETE", "CREATE_FAILED"],
        "type": "string"
      },
      "OTAUpdateSummary": {
        "description": "An OTA update summary.",
        "properties": {
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "otaUpdateArn": { "$ref": "#/components/schemas/OTAUpdateArn" },
          "otaUpdateId": { "$ref": "#/components/schemas/OTAUpdateId" }
        },
        "type": "object"
      },
      "OTAUpdatesSummary": { "items": { "$ref": "#/components/schemas/OTAUpdateSummary" }, "type": "array" },
      "OptionalVersion": { "type": "integer" },
      "OutgoingCertificate": {
        "description": "A certificate that has been transferred but not yet accepted.",
        "properties": {
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" },
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "transferDate": { "$ref": "#/components/schemas/DateType" },
          "transferMessage": { "$ref": "#/components/schemas/Message" },
          "transferredTo": { "$ref": "#/components/schemas/AwsAccountId" }
        },
        "type": "object"
      },
      "OutgoingCertificates": { "items": { "$ref": "#/components/schemas/OutgoingCertificate" }, "type": "array" },
      "OverrideDynamicGroups": { "type": "boolean" },
      "PageSize": { "maximum": 250, "minimum": 1, "type": "integer" },
      "Parameter": { "type": "string" },
      "Parameters": { "additionalProperties": { "$ref": "#/components/schemas/Value" }, "type": "object" },
      "PartitionKey": { "type": "string" },
      "PayloadField": { "type": "string" },
      "Percentage": { "maximum": 100, "minimum": 0, "type": "integer" },
      "Platform": { "type": "string" },
      "Policies": { "items": { "$ref": "#/components/schemas/Policy" }, "type": "array" },
      "Policy": {
        "description": "Describes an AWS IoT policy.",
        "properties": {
          "policyArn": { "$ref": "#/components/schemas/PolicyArn" },
          "policyName": { "$ref": "#/components/schemas/PolicyName" }
        },
        "type": "object"
      },
      "PolicyArn": { "type": "string" },
      "PolicyDocument": { "type": "string" },
      "PolicyDocuments": { "items": { "$ref": "#/components/schemas/PolicyDocument" }, "type": "array" },
      "PolicyName": { "maxLength": 128, "minLength": 1, "pattern": "[\\w+=,.@-]+", "type": "string" },
      "PolicyNames": { "items": { "$ref": "#/components/schemas/PolicyName" }, "type": "array" },
      "PolicyTarget": { "type": "string" },
      "PolicyTargets": { "items": { "$ref": "#/components/schemas/PolicyTarget" }, "type": "array" },
      "PolicyTemplateName": { "enum": ["BLANK_POLICY"], "type": "string" },
      "PolicyVersion": {
        "description": "Describes a policy version.",
        "properties": {
          "createDate": { "$ref": "#/components/schemas/DateType" },
          "isDefaultVersion": { "$ref": "#/components/schemas/IsDefaultVersion" },
          "versionId": { "$ref": "#/components/schemas/PolicyVersionId" }
        },
        "type": "object"
      },
      "PolicyVersionId": { "pattern": "[0-9]+", "type": "string" },
      "PolicyVersionIdentifier": {
        "description": "Information about the version of the policy associated with the resource.",
        "properties": {
          "policyName": { "$ref": "#/components/schemas/PolicyName" },
          "policyVersionId": { "$ref": "#/components/schemas/PolicyVersionId" }
        },
        "type": "object"
      },
      "PolicyVersions": { "items": { "$ref": "#/components/schemas/PolicyVersion" }, "type": "array" },
      "Port": { "maximum": 65535, "minimum": 0, "type": "integer" },
      "Ports": { "items": { "$ref": "#/components/schemas/Port" }, "type": "array" },
      "Prefix": { "type": "string" },
      "PresignedUrlConfig": {
        "description": "Configuration for pre-signed S3 URLs.",
        "properties": {
          "expiresInSec": { "$ref": "#/components/schemas/ExpiresInSec" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "Principal": { "type": "string" },
      "PrincipalArn": { "type": "string" },
      "PrincipalId": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9]+", "type": "string" },
      "Principals": { "items": { "$ref": "#/components/schemas/PrincipalArn" }, "type": "array" },
      "PrivateKey": { "format": "password", "minLength": 1, "type": "string" },
      "ProcessingTargetName": { "type": "string" },
      "ProcessingTargetNameList": { "items": { "$ref": "#/components/schemas/ProcessingTargetName" }, "type": "array" },
      "PublicKey": { "minLength": 1, "type": "string" },
      "PublicKeyMap": { "additionalProperties": { "$ref": "#/components/schemas/KeyValue" }, "type": "object" },
      "PublishFindingToSnsParams": {
        "description": "Parameters to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.",
        "properties": { "topicArn": { "$ref": "#/components/schemas/SnsTopicArn" } },
        "required": ["topicArn"],
        "type": "object"
      },
      "PutItemInput": {
        "description": "The input for the DynamoActionVS action that specifies the DynamoDB table to which the message data will be written.",
        "properties": { "tableName": { "$ref": "#/components/schemas/TableName" } },
        "required": ["tableName"],
        "type": "object"
      },
      "Qos": { "maximum": 1, "minimum": 0, "type": "integer" },
      "QueryMaxResults": { "maximum": 500, "minimum": 1, "type": "integer" },
      "QueryString": { "minLength": 1, "type": "string" },
      "QueryVersion": { "type": "string" },
      "QueueUrl": { "type": "string" },
      "QueuedThings": { "type": "integer" },
      "RangeKeyField": { "type": "string" },
      "RangeKeyValue": { "type": "string" },
      "RateIncreaseCriteria": {
        "description": "Allows you to define a criteria to initiate the increase in rate of rollout for a job.",
        "properties": {
          "numberOfNotifiedThings": { "$ref": "#/components/schemas/NumberOfThings" },
          "numberOfSucceededThings": { "$ref": "#/components/schemas/NumberOfThings" }
        },
        "type": "object"
      },
      "ReasonCode": { "maxLength": 128, "pattern": "[\\p{Upper}\\p{Digit}_]+", "type": "string" },
      "ReasonForNonCompliance": { "type": "string" },
      "ReasonForNonComplianceCode": { "type": "string" },
      "ReasonForNonComplianceCodes": {
        "items": { "$ref": "#/components/schemas/ReasonForNonComplianceCode" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "Recursive": { "type": "boolean" },
      "RecursiveWithoutDefault": { "type": "boolean" },
      "RegisterCACertificateRequest": {
        "description": "The input to the RegisterCACertificate operation.",
        "properties": {
          "caCertificate": { "$ref": "#/components/schemas/CertificatePem" },
          "registrationConfig": { "$ref": "#/components/schemas/RegistrationConfig" },
          "verificationCertificate": { "$ref": "#/components/schemas/CertificatePem" }
        },
        "required": ["caCertificate", "verificationCertificate"],
        "type": "object"
      },
      "RegisterCACertificateResponse": {
        "description": "The output from the RegisterCACertificateResponse operation.",
        "properties": {
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" }
        },
        "type": "object"
      },
      "RegisterCertificateRequest": {
        "description": "The input to the RegisterCertificate operation.",
        "properties": {
          "caCertificatePem": { "$ref": "#/components/schemas/CertificatePem" },
          "certificatePem": { "$ref": "#/components/schemas/CertificatePem" },
          "status": { "$ref": "#/components/schemas/CertificateStatus" }
        },
        "required": ["certificatePem"],
        "type": "object"
      },
      "RegisterCertificateResponse": {
        "description": "The output from the RegisterCertificate operation.",
        "properties": {
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificateId": { "$ref": "#/components/schemas/CertificateId" }
        },
        "type": "object"
      },
      "RegisterThingRequest": {
        "properties": {
          "parameters": { "$ref": "#/components/schemas/Parameters" },
          "templateBody": { "$ref": "#/components/schemas/TemplateBody" }
        },
        "required": ["templateBody"],
        "type": "object"
      },
      "RegisterThingResponse": {
        "properties": {
          "certificatePem": { "$ref": "#/components/schemas/CertificatePem" },
          "resourceArns": { "$ref": "#/components/schemas/ResourceArns" }
        },
        "type": "object"
      },
      "RegistrationCode": { "maxLength": 64, "minLength": 64, "pattern": "(0x)?[a-fA-F0-9]+", "type": "string" },
      "RegistrationCodeValidationException": {},
      "RegistrationConfig": {
        "description": "The registration configuration.",
        "properties": {
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "templateBody": { "$ref": "#/components/schemas/TemplateBody" }
        },
        "type": "object"
      },
      "RegistryMaxResults": { "maximum": 250, "minimum": 1, "type": "integer" },
      "RegistryS3BucketName": { "maxLength": 256, "minLength": 3, "pattern": "[a-zA-Z0-9._-]+", "type": "string" },
      "RegistryS3KeyName": {
        "maxLength": 1024,
        "minLength": 1,
        "pattern": "[a-zA-Z0-9!_.*'()-\\/]+",
        "type": "string"
      },
      "RejectCertificateTransferRequest": {
        "description": "The input for the RejectCertificateTransfer operation.",
        "properties": { "rejectReason": { "$ref": "#/components/schemas/Message" } },
        "type": "object"
      },
      "RejectedThings": { "type": "integer" },
      "RelatedResource": {
        "description": "Information about a related resource.",
        "properties": {
          "additionalInfo": { "$ref": "#/components/schemas/StringMap" },
          "resourceIdentifier": { "$ref": "#/components/schemas/ResourceIdentifier" },
          "resourceType": { "$ref": "#/components/schemas/ResourceType" }
        },
        "type": "object"
      },
      "RelatedResources": { "items": { "$ref": "#/components/schemas/RelatedResource" }, "type": "array" },
      "RemoveAutoRegistration": { "type": "boolean" },
      "RemoveThingFromBillingGroupRequest": {
        "properties": {
          "billingGroupArn": { "$ref": "#/components/schemas/BillingGroupArn" },
          "billingGroupName": { "$ref": "#/components/schemas/BillingGroupName" },
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "type": "object"
      },
      "RemoveThingFromBillingGroupResponse": { "properties": {}, "type": "object" },
      "RemoveThingFromThingGroupRequest": {
        "properties": {
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "thingGroupArn": { "$ref": "#/components/schemas/ThingGroupArn" },
          "thingGroupName": { "$ref": "#/components/schemas/ThingGroupName" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "type": "object"
      },
      "RemoveThingFromThingGroupResponse": { "properties": {}, "type": "object" },
      "RemoveThingType": { "type": "boolean" },
      "RemovedThings": { "type": "integer" },
      "ReplaceDefaultPolicyVersionParams": {
        "description": "Parameters to define a mitigation action that adds a blank policy to restrict permissions.",
        "properties": { "templateName": { "$ref": "#/components/schemas/PolicyTemplateName" } },
        "required": ["templateName"],
        "type": "object"
      },
      "ReplaceTopicRuleRequest": {
        "description": "The input for the ReplaceTopicRule operation.",
        "properties": { "topicRulePayload": { "$ref": "#/components/schemas/TopicRulePayload" } },
        "required": ["topicRulePayload"],
        "type": "object"
      },
      "ReportType": { "enum": ["ERRORS", "RESULTS"], "type": "string" },
      "RepublishAction": {
        "description": "Describes an action to republish to another topic.",
        "properties": {
          "qos": { "$ref": "#/components/schemas/Qos" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "topic": { "$ref": "#/components/schemas/TopicPattern" }
        },
        "required": ["roleArn", "topic"],
        "type": "object"
      },
      "Resource": { "type": "string" },
      "ResourceAlreadyExistsException": {},
      "ResourceArn": { "type": "string" },
      "ResourceArns": { "additionalProperties": { "$ref": "#/components/schemas/ResourceArn" }, "type": "object" },
      "ResourceIdentifier": {
        "description": "Information that identifies the noncompliant resource.",
        "properties": {
          "account": { "$ref": "#/components/schemas/AwsAccountId" },
          "caCertificateId": { "$ref": "#/components/schemas/CertificateId" },
          "clientId": { "$ref": "#/components/schemas/ClientId" },
          "cognitoIdentityPoolId": { "$ref": "#/components/schemas/CognitoIdentityPoolId" },
          "deviceCertificateId": { "$ref": "#/components/schemas/CertificateId" },
          "policyVersionIdentifier": { "$ref": "#/components/schemas/PolicyVersionIdentifier" }
        },
        "type": "object"
      },
      "ResourceLogicalId": { "type": "string" },
      "ResourceNotFoundException": {},
      "ResourceRegistrationFailureException": {},
      "ResourceType": {
        "enum": [
          "DEVICE_CERTIFICATE",
          "CA_CERTIFICATE",
          "IOT_POLICY",
          "COGNITO_IDENTITY_POOL",
          "CLIENT_ID",
          "ACCOUNT_SETTINGS"
        ],
        "type": "string"
      },
      "Resources": { "items": { "$ref": "#/components/schemas/Resource" }, "type": "array" },
      "RoleAlias": { "maxLength": 128, "minLength": 1, "pattern": "[\\w=,@-]+", "type": "string" },
      "RoleAliasArn": { "type": "string" },
      "RoleAliasDescription": {
        "description": "Role alias description.",
        "properties": {
          "creationDate": { "$ref": "#/components/schemas/DateType" },
          "credentialDurationSeconds": { "$ref": "#/components/schemas/CredentialDurationSeconds" },
          "lastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "owner": { "$ref": "#/components/schemas/AwsAccountId" },
          "roleAlias": { "$ref": "#/components/schemas/RoleAlias" },
          "roleAliasArn": { "$ref": "#/components/schemas/RoleAliasArn" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "RoleAliases": { "items": { "$ref": "#/components/schemas/RoleAlias" }, "type": "array" },
      "RoleArn": { "maxLength": 2048, "minLength": 20, "type": "string" },
      "RolloutRatePerMinute": { "maximum": 1000, "minimum": 1, "type": "integer" },
      "RuleArn": { "type": "string" },
      "RuleName": { "maxLength": 128, "minLength": 1, "pattern": "^[a-zA-Z0-9_]+$", "type": "string" },
      "S3Action": {
        "description": "Describes an action to write data to an Amazon S3 bucket.",
        "properties": {
          "bucketName": { "$ref": "#/components/schemas/BucketName" },
          "cannedAcl": { "$ref": "#/components/schemas/CannedAccessControlList" },
          "key": { "$ref": "#/components/schemas/Key" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "required": ["roleArn", "bucketName", "key"],
        "type": "object"
      },
      "S3Bucket": { "minLength": 1, "type": "string" },
      "S3Destination": {
        "description": "Describes the location of updated firmware in S3.",
        "properties": {
          "bucket": { "$ref": "#/components/schemas/S3Bucket" },
          "prefix": { "$ref": "#/components/schemas/Prefix" }
        },
        "type": "object"
      },
      "S3FileUrl": { "maxLength": 65535, "type": "string" },
      "S3FileUrlList": { "items": { "$ref": "#/components/schemas/S3FileUrl" }, "type": "array" },
      "S3Key": { "minLength": 1, "type": "string" },
      "S3Location": {
        "description": "The S3 location.",
        "properties": {
          "bucket": { "$ref": "#/components/schemas/S3Bucket" },
          "key": { "$ref": "#/components/schemas/S3Key" },
          "version": { "$ref": "#/components/schemas/S3Version" }
        },
        "type": "object"
      },
      "S3Version": { "type": "string" },
      "SQL": { "type": "string" },
      "SalesforceAction": {
        "description": "Describes an action to write a message to a Salesforce IoT Cloud Input Stream.",
        "properties": {
          "token": { "$ref": "#/components/schemas/SalesforceToken" },
          "url": { "$ref": "#/components/schemas/SalesforceEndpoint" }
        },
        "required": ["token", "url"],
        "type": "object"
      },
      "SalesforceEndpoint": {
        "maxLength": 2000,
        "pattern": "https://ingestion-[a-zA-Z0-9]{1,12}\\.[a-zA-Z0-9]+\\.((sfdc-matrix\\.net)|(sfdcnow\\.com))/streams/\\w{1,20}/\\w{1,20}/event",
        "type": "string"
      },
      "SalesforceToken": { "minLength": 40, "type": "string" },
      "ScheduledAuditArn": { "type": "string" },
      "ScheduledAuditMetadata": {
        "description": "Information about the scheduled audit.",
        "properties": {
          "dayOfMonth": { "$ref": "#/components/schemas/DayOfMonth" },
          "dayOfWeek": { "$ref": "#/components/schemas/DayOfWeek" },
          "frequency": { "$ref": "#/components/schemas/AuditFrequency" },
          "scheduledAuditArn": { "$ref": "#/components/schemas/ScheduledAuditArn" },
          "scheduledAuditName": { "$ref": "#/components/schemas/ScheduledAuditName" }
        },
        "type": "object"
      },
      "ScheduledAuditMetadataList": {
        "items": { "$ref": "#/components/schemas/ScheduledAuditMetadata" },
        "type": "array"
      },
      "ScheduledAuditName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9_-]+", "type": "string" },
      "SearchIndexRequest": {
        "properties": {
          "indexName": { "$ref": "#/components/schemas/IndexName" },
          "maxResults": { "$ref": "#/components/schemas/QueryMaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "queryString": { "$ref": "#/components/schemas/QueryString" },
          "queryVersion": { "$ref": "#/components/schemas/QueryVersion" }
        },
        "required": ["queryString"],
        "type": "object"
      },
      "SearchIndexResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "thingGroups": { "$ref": "#/components/schemas/ThingGroupDocumentList" },
          "things": { "$ref": "#/components/schemas/ThingDocumentList" }
        },
        "type": "object"
      },
      "SearchableAttributes": { "items": { "$ref": "#/components/schemas/AttributeName" }, "type": "array" },
      "Seconds": { "type": "integer" },
      "SecurityProfileArn": { "type": "string" },
      "SecurityProfileDescription": { "maxLength": 1000, "pattern": "[\\p{Graph}\\x20]*", "type": "string" },
      "SecurityProfileIdentifier": {
        "description": "Identifying information for a Device Defender security profile.",
        "properties": {
          "arn": { "$ref": "#/components/schemas/SecurityProfileArn" },
          "name": { "$ref": "#/components/schemas/SecurityProfileName" }
        },
        "required": ["name", "arn"],
        "type": "object"
      },
      "SecurityProfileIdentifiers": {
        "items": { "$ref": "#/components/schemas/SecurityProfileIdentifier" },
        "type": "array"
      },
      "SecurityProfileName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "SecurityProfileTarget": {
        "description": "A target to which an alert is sent when a security profile behavior is violated.",
        "properties": { "arn": { "$ref": "#/components/schemas/SecurityProfileTargetArn" } },
        "required": ["arn"],
        "type": "object"
      },
      "SecurityProfileTargetArn": { "type": "string" },
      "SecurityProfileTargetMapping": {
        "description": "Information about a security profile and the target associated with it.",
        "properties": {
          "securityProfileIdentifier": { "$ref": "#/components/schemas/SecurityProfileIdentifier" },
          "target": { "$ref": "#/components/schemas/SecurityProfileTarget" }
        },
        "type": "object"
      },
      "SecurityProfileTargetMappings": {
        "items": { "$ref": "#/components/schemas/SecurityProfileTargetMapping" },
        "type": "array"
      },
      "SecurityProfileTargets": { "items": { "$ref": "#/components/schemas/SecurityProfileTarget" }, "type": "array" },
      "ServiceUnavailableException": {},
      "SetAsActive": { "type": "boolean" },
      "SetAsActiveFlag": { "type": "boolean" },
      "SetAsDefault": { "type": "boolean" },
      "SetDefaultAuthorizerRequest": {
        "properties": { "authorizerName": { "$ref": "#/components/schemas/AuthorizerName" } },
        "required": ["authorizerName"],
        "type": "object"
      },
      "SetDefaultAuthorizerResponse": {
        "properties": {
          "authorizerArn": { "$ref": "#/components/schemas/AuthorizerArn" },
          "authorizerName": { "$ref": "#/components/schemas/AuthorizerName" }
        },
        "type": "object"
      },
      "SetDefaultPolicyVersionRequest": {
        "description": "The input for the SetDefaultPolicyVersion operation.",
        "properties": {},
        "type": "object"
      },
      "SetLoggingOptionsRequest": {
        "description": "The input for the SetLoggingOptions operation.",
        "properties": { "loggingOptionsPayload": { "$ref": "#/components/schemas/LoggingOptionsPayload" } },
        "required": ["loggingOptionsPayload"],
        "type": "object"
      },
      "SetV2LoggingLevelRequest": {
        "properties": {
          "logLevel": { "$ref": "#/components/schemas/LogLevel" },
          "logTarget": { "$ref": "#/components/schemas/LogTarget" }
        },
        "required": ["logTarget", "logLevel"],
        "type": "object"
      },
      "SetV2LoggingOptionsRequest": {
        "properties": {
          "defaultLogLevel": { "$ref": "#/components/schemas/LogLevel" },
          "disableAllLogs": { "$ref": "#/components/schemas/DisableAllLogs" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "type": "object"
      },
      "Signature": { "type": "string" },
      "SignatureAlgorithm": { "type": "string" },
      "SigningJobId": { "type": "string" },
      "SigningProfileName": { "type": "string" },
      "SigningProfileParameter": {
        "description": "Describes the code-signing profile.",
        "properties": {
          "certificateArn": { "$ref": "#/components/schemas/CertificateArn" },
          "certificatePathOnDevice": { "$ref": "#/components/schemas/CertificatePathOnDevice" },
          "platform": { "$ref": "#/components/schemas/Platform" }
        },
        "type": "object"
      },
      "SkippedFindingsCount": { "type": "integer" },
      "SkyfallMaxResults": { "maximum": 250, "minimum": 1, "type": "integer" },
      "SnsAction": {
        "description": "Describes an action to publish to an Amazon SNS topic.",
        "properties": {
          "messageFormat": { "$ref": "#/components/schemas/MessageFormat" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "targetArn": { "$ref": "#/components/schemas/AwsArn" }
        },
        "required": ["targetArn", "roleArn"],
        "type": "object"
      },
      "SnsTopicArn": { "maxLength": 350, "type": "string" },
      "SqlParseException": {},
      "SqsAction": {
        "description": "Describes an action to publish data to an Amazon SQS queue.",
        "properties": {
          "queueUrl": { "$ref": "#/components/schemas/QueueUrl" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "useBase64": { "$ref": "#/components/schemas/UseBase64" }
        },
        "required": ["roleArn", "queueUrl"],
        "type": "object"
      },
      "StartAuditMitigationActionsTaskRequest": {
        "properties": {
          "auditCheckToActionsMapping": { "$ref": "#/components/schemas/AuditCheckToActionsMapping" },
          "clientRequestToken": { "$ref": "#/components/schemas/ClientRequestToken" },
          "target": { "$ref": "#/components/schemas/AuditMitigationActionsTaskTarget" }
        },
        "required": ["target", "auditCheckToActionsMapping", "clientRequestToken"],
        "type": "object"
      },
      "StartAuditMitigationActionsTaskResponse": {
        "properties": { "taskId": { "$ref": "#/components/schemas/AuditMitigationActionsTaskId" } },
        "type": "object"
      },
      "StartOnDemandAuditTaskRequest": {
        "properties": { "targetCheckNames": { "$ref": "#/components/schemas/TargetAuditCheckNames" } },
        "required": ["targetCheckNames"],
        "type": "object"
      },
      "StartOnDemandAuditTaskResponse": {
        "properties": { "taskId": { "$ref": "#/components/schemas/AuditTaskId" } },
        "type": "object"
      },
      "StartSigningJobParameter": {
        "description": "Information required to start a signing job.",
        "properties": {
          "destination": { "$ref": "#/components/schemas/Destination" },
          "signingProfileName": { "$ref": "#/components/schemas/SigningProfileName" },
          "signingProfileParameter": { "$ref": "#/components/schemas/SigningProfileParameter" }
        },
        "type": "object"
      },
      "StartThingRegistrationTaskRequest": {
        "properties": {
          "inputFileBucket": { "$ref": "#/components/schemas/RegistryS3BucketName" },
          "inputFileKey": { "$ref": "#/components/schemas/RegistryS3KeyName" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "templateBody": { "$ref": "#/components/schemas/TemplateBody" }
        },
        "required": ["templateBody", "inputFileBucket", "inputFileKey", "roleArn"],
        "type": "object"
      },
      "StartThingRegistrationTaskResponse": {
        "properties": { "taskId": { "$ref": "#/components/schemas/TaskId" } },
        "type": "object"
      },
      "StateMachineName": { "type": "string" },
      "StateReason": { "type": "string" },
      "StateValue": { "type": "string" },
      "StatisticalThreshold": {
        "description": "A statistical ranking (percentile) which indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.",
        "properties": { "statistic": { "$ref": "#/components/schemas/EvaluationStatistic" } },
        "type": "object"
      },
      "Statistics": {
        "description": "A map of key-value pairs for all supported statistics. Currently, only count is supported.",
        "properties": { "count": { "$ref": "#/components/schemas/Count" } },
        "type": "object"
      },
      "Status": { "enum": ["InProgress", "Completed", "Failed", "Cancelled", "Cancelling"], "type": "string" },
      "StepFunctionsAction": {
        "description": "Starts execution of a Step Functions state machine.",
        "properties": {
          "executionNamePrefix": { "$ref": "#/components/schemas/ExecutionNamePrefix" },
          "roleArn": { "$ref": "#/components/schemas/AwsArn" },
          "stateMachineName": { "$ref": "#/components/schemas/StateMachineName" }
        },
        "required": ["stateMachineName", "roleArn"],
        "type": "object"
      },
      "StopThingRegistrationTaskRequest": { "properties": {}, "type": "object" },
      "StopThingRegistrationTaskResponse": { "properties": {}, "type": "object" },
      "Stream": {
        "description": "Describes a group of files that can be streamed.",
        "properties": {
          "fileId": { "$ref": "#/components/schemas/FileId" },
          "streamId": { "$ref": "#/components/schemas/StreamId" }
        },
        "type": "object"
      },
      "StreamArn": { "type": "string" },
      "StreamDescription": { "maxLength": 2028, "pattern": "[^\\p{C}]+", "type": "string" },
      "StreamFile": {
        "description": "Represents a file to stream.",
        "properties": {
          "fileId": { "$ref": "#/components/schemas/FileId" },
          "s3Location": { "$ref": "#/components/schemas/S3Location" }
        },
        "type": "object"
      },
      "StreamFiles": {
        "items": { "$ref": "#/components/schemas/StreamFile" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "StreamId": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9_-]+", "type": "string" },
      "StreamInfo": {
        "description": "Information about a stream.",
        "properties": {
          "createdAt": { "$ref": "#/components/schemas/DateType" },
          "description": { "$ref": "#/components/schemas/StreamDescription" },
          "files": { "$ref": "#/components/schemas/StreamFiles" },
          "lastUpdatedAt": { "$ref": "#/components/schemas/DateType" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "streamArn": { "$ref": "#/components/schemas/StreamArn" },
          "streamId": { "$ref": "#/components/schemas/StreamId" },
          "streamVersion": { "$ref": "#/components/schemas/StreamVersion" }
        },
        "type": "object"
      },
      "StreamName": { "type": "string" },
      "StreamSummary": {
        "description": "A summary of a stream.",
        "properties": {
          "description": { "$ref": "#/components/schemas/StreamDescription" },
          "streamArn": { "$ref": "#/components/schemas/StreamArn" },
          "streamId": { "$ref": "#/components/schemas/StreamId" },
          "streamVersion": { "$ref": "#/components/schemas/StreamVersion" }
        },
        "type": "object"
      },
      "StreamVersion": { "maximum": 65535, "minimum": 0, "type": "integer" },
      "StreamsSummary": { "items": { "$ref": "#/components/schemas/StreamSummary" }, "type": "array" },
      "String": { "type": "string" },
      "StringMap": { "additionalProperties": { "$ref": "#/components/schemas/String" }, "type": "object" },
      "SucceededFindingsCount": { "type": "integer" },
      "SucceededThings": { "type": "integer" },
      "TableName": { "type": "string" },
      "Tag": {
        "description": "A set of key/value pairs that are used to manage the resource.",
        "properties": {
          "Key": { "$ref": "#/components/schemas/TagKey" },
          "Value": { "$ref": "#/components/schemas/TagValue" }
        },
        "type": "object"
      },
      "TagKey": { "type": "string" },
      "TagKeyList": { "items": { "$ref": "#/components/schemas/TagKey" }, "type": "array" },
      "TagList": { "items": { "$ref": "#/components/schemas/Tag" }, "type": "array" },
      "TagResourceRequest": {
        "properties": {
          "resourceArn": { "$ref": "#/components/schemas/ResourceArn" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["resourceArn", "tags"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValue": { "type": "string" },
      "Target": { "type": "string" },
      "TargetArn": { "type": "string" },
      "TargetAuditCheckNames": { "items": { "$ref": "#/components/schemas/AuditCheckName" }, "type": "array" },
      "TargetSelection": { "enum": ["CONTINUOUS", "SNAPSHOT"], "type": "string" },
      "Targets": { "items": { "$ref": "#/components/schemas/Target" }, "minItems": 1, "type": "array" },
      "TaskAlreadyExistsException": {},
      "TaskId": { "maxLength": 40, "type": "string" },
      "TaskIdList": { "items": { "$ref": "#/components/schemas/TaskId" }, "type": "array" },
      "TaskStatistics": {
        "description": "Statistics for the checks performed during the audit.",
        "properties": {
          "canceledChecks": { "$ref": "#/components/schemas/CanceledChecksCount" },
          "compliantChecks": { "$ref": "#/components/schemas/CompliantChecksCount" },
          "failedChecks": { "$ref": "#/components/schemas/FailedChecksCount" },
          "inProgressChecks": { "$ref": "#/components/schemas/InProgressChecksCount" },
          "nonCompliantChecks": { "$ref": "#/components/schemas/NonCompliantChecksCount" },
          "totalChecks": { "$ref": "#/components/schemas/TotalChecksCount" },
          "waitingForDataCollectionChecks": { "$ref": "#/components/schemas/WaitingForDataCollectionChecksCount" }
        },
        "type": "object"
      },
      "TaskStatisticsForAuditCheck": {
        "description": "Provides summary counts of how many tasks for findings are in a particular state. This information is included in the response from DescribeAuditMitigationActionsTask.",
        "properties": {
          "canceledFindingsCount": { "$ref": "#/components/schemas/CanceledFindingsCount" },
          "failedFindingsCount": { "$ref": "#/components/schemas/FailedFindingsCount" },
          "skippedFindingsCount": { "$ref": "#/components/schemas/SkippedFindingsCount" },
          "succeededFindingsCount": { "$ref": "#/components/schemas/SucceededFindingsCount" },
          "totalFindingsCount": { "$ref": "#/components/schemas/TotalFindingsCount" }
        },
        "type": "object"
      },
      "TemplateBody": { "type": "string" },
      "TestAuthorizationRequest": {
        "properties": {
          "authInfos": { "$ref": "#/components/schemas/AuthInfos" },
          "cognitoIdentityPoolId": { "$ref": "#/components/schemas/CognitoIdentityPoolId" },
          "policyNamesToAdd": { "$ref": "#/components/schemas/PolicyNames" },
          "policyNamesToSkip": { "$ref": "#/components/schemas/PolicyNames" },
          "principal": { "$ref": "#/components/schemas/Principal" }
        },
        "required": ["authInfos"],
        "type": "object"
      },
      "TestAuthorizationResponse": {
        "properties": { "authResults": { "$ref": "#/components/schemas/AuthResults" } },
        "type": "object"
      },
      "TestInvokeAuthorizerRequest": {
        "properties": {
          "token": { "$ref": "#/components/schemas/Token" },
          "tokenSignature": { "$ref": "#/components/schemas/TokenSignature" }
        },
        "required": ["token", "tokenSignature"],
        "type": "object"
      },
      "TestInvokeAuthorizerResponse": {
        "properties": {
          "disconnectAfterInSeconds": { "$ref": "#/components/schemas/Seconds" },
          "isAuthenticated": { "$ref": "#/components/schemas/IsAuthenticated" },
          "policyDocuments": { "$ref": "#/components/schemas/PolicyDocuments" },
          "principalId": { "$ref": "#/components/schemas/PrincipalId" },
          "refreshAfterInSeconds": { "$ref": "#/components/schemas/Seconds" }
        },
        "type": "object"
      },
      "ThingArn": { "type": "string" },
      "ThingAttribute": {
        "description": "The properties of the thing, including thing name, thing type name, and a list of thing attributes.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Attributes" },
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "thingName": { "$ref": "#/components/schemas/ThingName" },
          "thingTypeName": { "$ref": "#/components/schemas/ThingTypeName" },
          "version": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "ThingAttributeList": { "items": { "$ref": "#/components/schemas/ThingAttribute" }, "type": "array" },
      "ThingConnectivity": {
        "description": "The connectivity status of the thing.",
        "properties": {
          "connected": { "$ref": "#/components/schemas/Boolean" },
          "timestamp": { "$ref": "#/components/schemas/ConnectivityTimestamp" }
        },
        "type": "object"
      },
      "ThingConnectivityIndexingMode": { "enum": ["OFF", "STATUS"], "type": "string" },
      "ThingDocument": {
        "description": "The thing search index document.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Attributes" },
          "connectivity": { "$ref": "#/components/schemas/ThingConnectivity" },
          "shadow": { "$ref": "#/components/schemas/JsonDocument" },
          "thingGroupNames": { "$ref": "#/components/schemas/ThingGroupNameList" },
          "thingId": { "$ref": "#/components/schemas/ThingId" },
          "thingName": { "$ref": "#/components/schemas/ThingName" },
          "thingTypeName": { "$ref": "#/components/schemas/ThingTypeName" }
        },
        "type": "object"
      },
      "ThingDocumentList": { "items": { "$ref": "#/components/schemas/ThingDocument" }, "type": "array" },
      "ThingGroupArn": { "type": "string" },
      "ThingGroupDescription": { "maxLength": 2028, "pattern": "[\\p{Graph}\\x20]*", "type": "string" },
      "ThingGroupDocument": {
        "description": "The thing group search index document.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Attributes" },
          "parentGroupNames": { "$ref": "#/components/schemas/ThingGroupNameList" },
          "thingGroupDescription": { "$ref": "#/components/schemas/ThingGroupDescription" },
          "thingGroupId": { "$ref": "#/components/schemas/ThingGroupId" },
          "thingGroupName": { "$ref": "#/components/schemas/ThingGroupName" }
        },
        "type": "object"
      },
      "ThingGroupDocumentList": { "items": { "$ref": "#/components/schemas/ThingGroupDocument" }, "type": "array" },
      "ThingGroupId": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9\\-]+", "type": "string" },
      "ThingGroupIndexingConfiguration": {
        "description": "Thing group indexing configuration.",
        "properties": { "thingGroupIndexingMode": { "$ref": "#/components/schemas/ThingGroupIndexingMode" } },
        "required": ["thingGroupIndexingMode"],
        "type": "object"
      },
      "ThingGroupIndexingMode": { "enum": ["OFF", "ON"], "type": "string" },
      "ThingGroupList": { "items": { "$ref": "#/components/schemas/ThingGroupName" }, "type": "array" },
      "ThingGroupMetadata": {
        "description": "Thing group metadata.",
        "properties": {
          "creationDate": { "$ref": "#/components/schemas/CreationDate" },
          "parentGroupName": { "$ref": "#/components/schemas/ThingGroupName" },
          "rootToParentThingGroups": { "$ref": "#/components/schemas/ThingGroupNameAndArnList" }
        },
        "type": "object"
      },
      "ThingGroupName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "ThingGroupNameAndArnList": { "items": { "$ref": "#/components/schemas/GroupNameAndArn" }, "type": "array" },
      "ThingGroupNameList": { "items": { "$ref": "#/components/schemas/ThingGroupName" }, "type": "array" },
      "ThingGroupNames": {
        "items": { "$ref": "#/components/schemas/ThingGroupName" },
        "maxItems": 10,
        "minItems": 1,
        "type": "array"
      },
      "ThingGroupProperties": {
        "description": "Thing group properties.",
        "properties": {
          "attributePayload": { "$ref": "#/components/schemas/AttributePayload" },
          "thingGroupDescription": { "$ref": "#/components/schemas/ThingGroupDescription" }
        },
        "type": "object"
      },
      "ThingId": { "type": "string" },
      "ThingIndexingConfiguration": {
        "description": "The thing indexing configuration. For more information, see <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html\">Managing Thing Indexing</a>.",
        "properties": {
          "thingConnectivityIndexingMode": { "$ref": "#/components/schemas/ThingConnectivityIndexingMode" },
          "thingIndexingMode": { "$ref": "#/components/schemas/ThingIndexingMode" }
        },
        "required": ["thingIndexingMode"],
        "type": "object"
      },
      "ThingIndexingMode": { "enum": ["OFF", "REGISTRY", "REGISTRY_AND_SHADOW"], "type": "string" },
      "ThingName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "ThingNameList": { "items": { "$ref": "#/components/schemas/ThingName" }, "type": "array" },
      "ThingTypeArn": { "type": "string" },
      "ThingTypeDefinition": {
        "description": "The definition of the thing type, including thing type name and description.",
        "properties": {
          "thingTypeArn": { "$ref": "#/components/schemas/ThingTypeArn" },
          "thingTypeMetadata": { "$ref": "#/components/schemas/ThingTypeMetadata" },
          "thingTypeName": { "$ref": "#/components/schemas/ThingTypeName" },
          "thingTypeProperties": { "$ref": "#/components/schemas/ThingTypeProperties" }
        },
        "type": "object"
      },
      "ThingTypeDescription": { "maxLength": 2028, "pattern": "[\\p{Graph}\\x20]*", "type": "string" },
      "ThingTypeId": { "type": "string" },
      "ThingTypeList": { "items": { "$ref": "#/components/schemas/ThingTypeDefinition" }, "type": "array" },
      "ThingTypeMetadata": {
        "description": "The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when time was deprecated.",
        "properties": {
          "creationDate": { "$ref": "#/components/schemas/CreationDate" },
          "deprecationDate": { "$ref": "#/components/schemas/DeprecationDate" }
        },
        "type": "object"
      },
      "ThingTypeName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "ThingTypeProperties": {
        "description": "The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.",
        "properties": {
          "searchableAttributes": { "$ref": "#/components/schemas/SearchableAttributes" },
          "thingTypeDescription": { "$ref": "#/components/schemas/ThingTypeDescription" }
        },
        "type": "object"
      },
      "ThrottlingException": {},
      "TimedOutThings": { "type": "integer" },
      "TimeoutConfig": {
        "description": "Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.",
        "properties": { "inProgressTimeoutInMinutes": { "$ref": "#/components/schemas/InProgressTimeoutInMinutes" } },
        "type": "object"
      },
      "Timestamp": { "format": "date-time", "type": "string" },
      "Token": { "maxLength": 6144, "minLength": 1, "type": "string" },
      "TokenKeyName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9_-]+", "type": "string" },
      "TokenSignature": { "maxLength": 2560, "minLength": 1, "pattern": "[A-Za-z0-9+/]+={0,2}", "type": "string" },
      "Topic": { "type": "string" },
      "TopicPattern": { "type": "string" },
      "TopicRule": {
        "description": "Describes a rule.",
        "properties": {
          "actions": { "$ref": "#/components/schemas/ActionList" },
          "awsIotSqlVersion": { "$ref": "#/components/schemas/AwsIotSqlVersion" },
          "createdAt": { "$ref": "#/components/schemas/CreatedAtDate" },
          "description": { "$ref": "#/components/schemas/Description" },
          "errorAction": { "$ref": "#/components/schemas/Action" },
          "ruleDisabled": { "$ref": "#/components/schemas/IsDisabled" },
          "ruleName": { "$ref": "#/components/schemas/RuleName" },
          "sql": { "$ref": "#/components/schemas/SQL" }
        },
        "type": "object"
      },
      "TopicRuleList": { "items": { "$ref": "#/components/schemas/TopicRuleListItem" }, "type": "array" },
      "TopicRuleListItem": {
        "description": "Describes a rule.",
        "properties": {
          "createdAt": { "$ref": "#/components/schemas/CreatedAtDate" },
          "ruleArn": { "$ref": "#/components/schemas/RuleArn" },
          "ruleDisabled": { "$ref": "#/components/schemas/IsDisabled" },
          "ruleName": { "$ref": "#/components/schemas/RuleName" },
          "topicPattern": { "$ref": "#/components/schemas/TopicPattern" }
        },
        "type": "object"
      },
      "TopicRulePayload": {
        "description": "Describes a rule.",
        "properties": {
          "actions": { "$ref": "#/components/schemas/ActionList" },
          "awsIotSqlVersion": { "$ref": "#/components/schemas/AwsIotSqlVersion" },
          "description": { "$ref": "#/components/schemas/Description" },
          "errorAction": { "$ref": "#/components/schemas/Action" },
          "ruleDisabled": { "$ref": "#/components/schemas/IsDisabled" },
          "sql": { "$ref": "#/components/schemas/SQL" }
        },
        "required": ["sql", "actions"],
        "type": "object"
      },
      "TotalChecksCount": { "type": "integer" },
      "TotalFindingsCount": { "type": "integer" },
      "TotalResourcesCount": { "type": "integer" },
      "TransferAlreadyCompletedException": {},
      "TransferCertificateRequest": {
        "description": "The input for the TransferCertificate operation.",
        "properties": { "transferMessage": { "$ref": "#/components/schemas/Message" } },
        "type": "object"
      },
      "TransferCertificateResponse": {
        "description": "The output from the TransferCertificate operation.",
        "properties": { "transferredCertificateArn": { "$ref": "#/components/schemas/CertificateArn" } },
        "type": "object"
      },
      "TransferConflictException": {},
      "TransferData": {
        "description": "Data used to transfer a certificate to an AWS account.",
        "properties": {
          "acceptDate": { "$ref": "#/components/schemas/DateType" },
          "rejectDate": { "$ref": "#/components/schemas/DateType" },
          "rejectReason": { "$ref": "#/components/schemas/Message" },
          "transferDate": { "$ref": "#/components/schemas/DateType" },
          "transferMessage": { "$ref": "#/components/schemas/Message" }
        },
        "type": "object"
      },
      "UnauthorizedException": {},
      "UndoDeprecate": { "type": "boolean" },
      "UnsignedLong": { "minimum": 0, "type": "integer" },
      "UntagResourceRequest": {
        "properties": {
          "resourceArn": { "$ref": "#/components/schemas/ResourceArn" },
          "tagKeys": { "$ref": "#/components/schemas/TagKeyList" }
        },
        "required": ["resourceArn", "tagKeys"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UpdateAccountAuditConfigurationRequest": {
        "properties": {
          "auditCheckConfigurations": { "$ref": "#/components/schemas/AuditCheckConfigurations" },
          "auditNotificationTargetConfigurations": {
            "$ref": "#/components/schemas/AuditNotificationTargetConfigurations"
          },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "UpdateAccountAuditConfigurationResponse": { "properties": {}, "type": "object" },
      "UpdateAuthorizerRequest": {
        "properties": {
          "authorizerFunctionArn": { "$ref": "#/components/schemas/AuthorizerFunctionArn" },
          "status": { "$ref": "#/components/schemas/AuthorizerStatus" },
          "tokenKeyName": { "$ref": "#/components/schemas/TokenKeyName" },
          "tokenSigningPublicKeys": { "$ref": "#/components/schemas/PublicKeyMap" }
        },
        "type": "object"
      },
      "UpdateAuthorizerResponse": {
        "properties": {
          "authorizerArn": { "$ref": "#/components/schemas/AuthorizerArn" },
          "authorizerName": { "$ref": "#/components/schemas/AuthorizerName" }
        },
        "type": "object"
      },
      "UpdateBillingGroupRequest": {
        "properties": {
          "billingGroupProperties": { "$ref": "#/components/schemas/BillingGroupProperties" },
          "expectedVersion": { "$ref": "#/components/schemas/OptionalVersion" }
        },
        "required": ["billingGroupProperties"],
        "type": "object"
      },
      "UpdateBillingGroupResponse": {
        "properties": { "version": { "$ref": "#/components/schemas/Version" } },
        "type": "object"
      },
      "UpdateCACertificateParams": {
        "description": "Parameters to define a mitigation action that changes the state of the CA certificate to inactive.",
        "properties": { "action": { "$ref": "#/components/schemas/CACertificateUpdateAction" } },
        "required": ["action"],
        "type": "object"
      },
      "UpdateCACertificateRequest": {
        "description": "The input to the UpdateCACertificate operation.",
        "properties": {
          "registrationConfig": { "$ref": "#/components/schemas/RegistrationConfig" },
          "removeAutoRegistration": { "$ref": "#/components/schemas/RemoveAutoRegistration" }
        },
        "type": "object"
      },
      "UpdateCertificateRequest": {
        "description": "The input for the UpdateCertificate operation.",
        "properties": {},
        "type": "object"
      },
      "UpdateDeviceCertificateParams": {
        "description": "Parameters to define a mitigation action that changes the state of the device certificate to inactive.",
        "properties": { "action": { "$ref": "#/components/schemas/DeviceCertificateUpdateAction" } },
        "required": ["action"],
        "type": "object"
      },
      "UpdateDynamicThingGroupRequest": {
        "properties": {
          "expectedVersion": { "$ref": "#/components/schemas/OptionalVersion" },
          "indexName": { "$ref": "#/components/schemas/IndexName" },
          "queryString": { "$ref": "#/components/schemas/QueryString" },
          "queryVersion": { "$ref": "#/components/schemas/QueryVersion" },
          "thingGroupProperties": { "$ref": "#/components/schemas/ThingGroupProperties" }
        },
        "required": ["thingGroupProperties"],
        "type": "object"
      },
      "UpdateDynamicThingGroupResponse": {
        "properties": { "version": { "$ref": "#/components/schemas/Version" } },
        "type": "object"
      },
      "UpdateEventConfigurationsRequest": {
        "properties": { "eventConfigurations": { "$ref": "#/components/schemas/EventConfigurations" } },
        "type": "object"
      },
      "UpdateEventConfigurationsResponse": { "properties": {}, "type": "object" },
      "UpdateIndexingConfigurationRequest": {
        "properties": {
          "thingGroupIndexingConfiguration": { "$ref": "#/components/schemas/ThingGroupIndexingConfiguration" },
          "thingIndexingConfiguration": { "$ref": "#/components/schemas/ThingIndexingConfiguration" }
        },
        "type": "object"
      },
      "UpdateIndexingConfigurationResponse": { "properties": {}, "type": "object" },
      "UpdateJobRequest": {
        "properties": {
          "abortConfig": { "$ref": "#/components/schemas/AbortConfig" },
          "description": { "$ref": "#/components/schemas/JobDescription" },
          "jobExecutionsRolloutConfig": { "$ref": "#/components/schemas/JobExecutionsRolloutConfig" },
          "presignedUrlConfig": { "$ref": "#/components/schemas/PresignedUrlConfig" },
          "timeoutConfig": { "$ref": "#/components/schemas/TimeoutConfig" }
        },
        "type": "object"
      },
      "UpdateMitigationActionRequest": {
        "properties": {
          "actionParams": { "$ref": "#/components/schemas/MitigationActionParams" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "UpdateMitigationActionResponse": {
        "properties": {
          "actionArn": { "$ref": "#/components/schemas/MitigationActionArn" },
          "actionId": { "$ref": "#/components/schemas/MitigationActionId" }
        },
        "type": "object"
      },
      "UpdateRoleAliasRequest": {
        "properties": {
          "credentialDurationSeconds": { "$ref": "#/components/schemas/CredentialDurationSeconds" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "UpdateRoleAliasResponse": {
        "properties": {
          "roleAlias": { "$ref": "#/components/schemas/RoleAlias" },
          "roleAliasArn": { "$ref": "#/components/schemas/RoleAliasArn" }
        },
        "type": "object"
      },
      "UpdateScheduledAuditRequest": {
        "properties": {
          "dayOfMonth": { "$ref": "#/components/schemas/DayOfMonth" },
          "dayOfWeek": { "$ref": "#/components/schemas/DayOfWeek" },
          "frequency": { "$ref": "#/components/schemas/AuditFrequency" },
          "targetCheckNames": { "$ref": "#/components/schemas/TargetAuditCheckNames" }
        },
        "type": "object"
      },
      "UpdateScheduledAuditResponse": {
        "properties": { "scheduledAuditArn": { "$ref": "#/components/schemas/ScheduledAuditArn" } },
        "type": "object"
      },
      "UpdateSecurityProfileRequest": {
        "properties": {
          "additionalMetricsToRetain": { "$ref": "#/components/schemas/AdditionalMetricsToRetainList" },
          "alertTargets": { "$ref": "#/components/schemas/AlertTargets" },
          "behaviors": { "$ref": "#/components/schemas/Behaviors" },
          "deleteAdditionalMetricsToRetain": { "$ref": "#/components/schemas/DeleteAdditionalMetricsToRetain" },
          "deleteAlertTargets": { "$ref": "#/components/schemas/DeleteAlertTargets" },
          "deleteBehaviors": { "$ref": "#/components/schemas/DeleteBehaviors" },
          "securityProfileDescription": { "$ref": "#/components/schemas/SecurityProfileDescription" }
        },
        "type": "object"
      },
      "UpdateSecurityProfileResponse": {
        "properties": {
          "additionalMetricsToRetain": { "$ref": "#/components/schemas/AdditionalMetricsToRetainList" },
          "alertTargets": { "$ref": "#/components/schemas/AlertTargets" },
          "behaviors": { "$ref": "#/components/schemas/Behaviors" },
          "creationDate": { "$ref": "#/components/schemas/Timestamp" },
          "lastModifiedDate": { "$ref": "#/components/schemas/Timestamp" },
          "securityProfileArn": { "$ref": "#/components/schemas/SecurityProfileArn" },
          "securityProfileDescription": { "$ref": "#/components/schemas/SecurityProfileDescription" },
          "securityProfileName": { "$ref": "#/components/schemas/SecurityProfileName" },
          "version": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "UpdateStreamRequest": {
        "properties": {
          "description": { "$ref": "#/components/schemas/StreamDescription" },
          "files": { "$ref": "#/components/schemas/StreamFiles" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "UpdateStreamResponse": {
        "properties": {
          "description": { "$ref": "#/components/schemas/StreamDescription" },
          "streamArn": { "$ref": "#/components/schemas/StreamArn" },
          "streamId": { "$ref": "#/components/schemas/StreamId" },
          "streamVersion": { "$ref": "#/components/schemas/StreamVersion" }
        },
        "type": "object"
      },
      "UpdateThingGroupRequest": {
        "properties": {
          "expectedVersion": { "$ref": "#/components/schemas/OptionalVersion" },
          "thingGroupProperties": { "$ref": "#/components/schemas/ThingGroupProperties" }
        },
        "required": ["thingGroupProperties"],
        "type": "object"
      },
      "UpdateThingGroupResponse": {
        "properties": { "version": { "$ref": "#/components/schemas/Version" } },
        "type": "object"
      },
      "UpdateThingGroupsForThingRequest": {
        "properties": {
          "overrideDynamicGroups": { "$ref": "#/components/schemas/OverrideDynamicGroups" },
          "thingGroupsToAdd": { "$ref": "#/components/schemas/ThingGroupList" },
          "thingGroupsToRemove": { "$ref": "#/components/schemas/ThingGroupList" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "type": "object"
      },
      "UpdateThingGroupsForThingResponse": { "properties": {}, "type": "object" },
      "UpdateThingRequest": {
        "description": "The input for the UpdateThing operation.",
        "properties": {
          "attributePayload": { "$ref": "#/components/schemas/AttributePayload" },
          "expectedVersion": { "$ref": "#/components/schemas/OptionalVersion" },
          "removeThingType": { "$ref": "#/components/schemas/RemoveThingType" },
          "thingTypeName": { "$ref": "#/components/schemas/ThingTypeName" }
        },
        "type": "object"
      },
      "UpdateThingResponse": {
        "description": "The output from the UpdateThing operation.",
        "properties": {},
        "type": "object"
      },
      "UseBase64": { "type": "boolean" },
      "Valid": { "type": "boolean" },
      "ValidateSecurityProfileBehaviorsRequest": {
        "properties": { "behaviors": { "$ref": "#/components/schemas/Behaviors" } },
        "required": ["behaviors"],
        "type": "object"
      },
      "ValidateSecurityProfileBehaviorsResponse": {
        "properties": {
          "valid": { "$ref": "#/components/schemas/Valid" },
          "validationErrors": { "$ref": "#/components/schemas/ValidationErrors" }
        },
        "type": "object"
      },
      "ValidationError": {
        "description": "Information about an error found in a behavior specification.",
        "properties": { "errorMessage": { "$ref": "#/components/schemas/ErrorMessage" } },
        "type": "object"
      },
      "ValidationErrors": { "items": { "$ref": "#/components/schemas/ValidationError" }, "type": "array" },
      "Value": { "type": "string" },
      "Version": { "type": "integer" },
      "VersionConflictException": {},
      "VersionNumber": { "type": "integer" },
      "VersionsLimitExceededException": {},
      "ViolationEvent": {
        "description": "Information about a Device Defender security profile behavior violation.",
        "properties": {
          "behavior": { "$ref": "#/components/schemas/Behavior" },
          "metricValue": { "$ref": "#/components/schemas/MetricValue" },
          "securityProfileName": { "$ref": "#/components/schemas/SecurityProfileName" },
          "thingName": { "$ref": "#/components/schemas/DeviceDefenderThingName" },
          "violationEventTime": { "$ref": "#/components/schemas/Timestamp" },
          "violationEventType": { "$ref": "#/components/schemas/ViolationEventType" },
          "violationId": { "$ref": "#/components/schemas/ViolationId" }
        },
        "type": "object"
      },
      "ViolationEventType": { "enum": ["in-alarm", "alarm-cleared", "alarm-invalidated"], "type": "string" },
      "ViolationEvents": { "items": { "$ref": "#/components/schemas/ViolationEvent" }, "type": "array" },
      "ViolationId": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9\\-]+", "type": "string" },
      "WaitingForDataCollectionChecksCount": { "type": "integer" }
    }
  }
}
