{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Backup</fullname> <p>AWS Backup is a unified backup service designed to protect AWS services and their associated data. AWS Backup simplifies the creation, migration, restoration, and deletion of backups, while also providing reporting and auditing.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Backup",
    "version": "2018-11-15",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/backup-2018-11-15.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "backup"
  },
  "externalDocs": { "description": "Amazon Web Services documentation", "url": "https://docs.aws.amazon.com/backup/" },
  "security": [{ "hmac": [] }],
  "paths": {
    "/backup-jobs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Starts a job to create a one-time backup of the specified resource.",
        "operationId": "StartBackupJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "BackupVaultName": {
                    "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
                    "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$",
                    "type": "string"
                  },
                  "CompleteWindowMinutes": {
                    "description": "The amount of time AWS Backup attempts a backup before canceling the job and returning an error.",
                    "type": "integer"
                  },
                  "IamRoleArn": {
                    "description": "Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.",
                    "type": "string"
                  },
                  "IdempotencyToken": {
                    "description": "A customer chosen string that can be used to distinguish between calls to <code>StartBackupJob</code>. Idempotency tokens time out after one hour. Therefore, if you call <code>StartBackupJob</code> multiple times with the same idempotency token within one hour, AWS Backup recognizes that you are requesting only one backup job and initiates only one. If you change the idempotency token for each call, AWS Backup recognizes that you are requesting to start multiple backups.",
                    "type": "string"
                  },
                  "Lifecycle": {
                    "description": "Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.",
                    "properties": {
                      "DeleteAfterDays": { "$ref": "#/components/schemas/Long" },
                      "MoveToColdStorageAfterDays": { "$ref": "#/components/schemas/Long" }
                    },
                    "type": "object"
                  },
                  "RecoveryPointTags": {
                    "additionalProperties": { "$ref": "#/components/schemas/TagValue" },
                    "description": "To help organize your resources, you can assign your own metadata to the resources that you create. Each tag is a key-value pair.",
                    "type": "object"
                  },
                  "ResourceArn": {
                    "description": "An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.",
                    "type": "string"
                  },
                  "StartWindowMinutes": {
                    "description": "The amount of time in minutes before beginning a backup.",
                    "type": "integer"
                  }
                },
                "required": ["BackupVaultName", "ResourceArn", "IamRoleArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartBackupJobOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/backup-jobs/": {
      "get": {
        "description": "Returns metadata about your backup jobs.",
        "operationId": "ListBackupJobs",
        "parameters": [
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Returns only backup jobs that match the specified resource Amazon Resource Name (ARN).",
            "in": "query",
            "name": "resourceArn",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Returns only backup jobs that are in the specified state.",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["CREATED", "PENDING", "RUNNING", "ABORTING", "ABORTED", "COMPLETED", "FAILED", "EXPIRED"]
            }
          },
          {
            "description": "Returns only backup jobs that will be stored in the specified backup vault. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "query",
            "name": "backupVaultName",
            "required": false,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          },
          {
            "description": "Returns only backup jobs that were created before the specified date.",
            "in": "query",
            "name": "createdBefore",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "Returns only backup jobs that were created after the specified date.",
            "in": "query",
            "name": "createdAfter",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "<p>Returns only backup jobs for the specified resources:</p> <ul> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>SGW</code> for AWS Storage Gateway</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>DDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> </ul>",
            "in": "query",
            "name": "resourceType",
            "required": false,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListBackupJobsOutput" } } }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "481": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup-jobs/{backupJobId}": {
      "get": {
        "description": "Returns metadata associated with creating a backup of a resource.",
        "operationId": "DescribeBackupJob",
        "parameters": [
          {
            "description": "Uniquely identifies a request to AWS Backup to back up a resource.",
            "in": "path",
            "name": "backupJobId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeBackupJobOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "DependencyFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DependencyFailureException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Attempts to cancel a job to create a one-time backup of a resource.",
        "operationId": "StopBackupJob",
        "parameters": [
          {
            "description": "Uniquely identifies a request to AWS Backup to back up a resource.",
            "in": "path",
            "name": "backupJobId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "483": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/backup-vaults/": {
      "get": {
        "description": "Returns a list of recovery point storage containers along with information about them.",
        "operationId": "ListBackupVaults",
        "parameters": [
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListBackupVaultsOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup-vaults/{backupVaultName}": {
      "delete": {
        "description": "Deletes the backup vault identified by its name. A vault can be deleted only if it is empty.",
        "operationId": "DeleteBackupVault",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and theAWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          }
        }
      },
      "get": {
        "description": "Returns metadata about a backup vault specified by its name.",
        "operationId": "DescribeBackupVault",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeBackupVaultOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Creates a logical container where backups are stored. A <code>CreateBackupVault</code> request includes a name, optionally one or more resource tags, an encryption key, and a request ID.</p> <note> <p>Sensitive data, such as passport numbers, should not be included the name of a backup vault.</p> </note>",
        "operationId": "CreateBackupVault",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "BackupVaultTags": {
                    "additionalProperties": { "$ref": "#/components/schemas/TagValue" },
                    "description": "Metadata that you can assign to help organize the resources that you create. Each tag is a key-value pair.",
                    "type": "object"
                  },
                  "CreatorRequestId": {
                    "description": "A unique string that identifies the request and allows failed requests to be retried without the risk of executing the operation twice.",
                    "type": "string"
                  },
                  "EncryptionKeyArn": {
                    "description": "The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateBackupVaultOutput" } } }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "481": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          }
        }
      }
    },
    "/backup-vaults/{backupVaultName}/access-policy": {
      "delete": {
        "description": "Deletes the policy document that manages permissions on a backup vault.",
        "operationId": "DeleteBackupVaultAccessPolicy",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "get": {
        "description": "Returns the access policy document that is associated with the named backup vault.",
        "operationId": "GetBackupVaultAccessPolicy",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetBackupVaultAccessPolicyOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Sets a resource-based policy that is used to manage access permissions on the target backup vault. Requires a backup vault name and an access policy document in JSON format.",
        "operationId": "PutBackupVaultAccessPolicy",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Policy": {
                    "description": "The backup vault access policy document in JSON format.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/backup-vaults/{backupVaultName}/notification-configuration": {
      "delete": {
        "description": "Deletes event notifications for the specified backup vault.",
        "operationId": "DeleteBackupVaultNotifications",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "get": {
        "description": "Returns event notifications for the specified backup vault.",
        "operationId": "GetBackupVaultNotifications",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetBackupVaultNotificationsOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Turns on notifications on a backup vault for the specified topic and events.",
        "operationId": "PutBackupVaultNotifications",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "BackupVaultEvents": {
                    "description": "An array of events that indicate the status of jobs to back up resources to the backup vault.",
                    "items": { "$ref": "#/components/schemas/BackupVaultEvent" },
                    "type": "array"
                  },
                  "SNSTopicArn": {
                    "description": "The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events; for example, <code>arn:aws:sns:us-west-2:111122223333:MyVaultTopic</code>.",
                    "type": "string"
                  }
                },
                "required": ["SNSTopicArn", "BackupVaultEvents"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/backup-vaults/{backupVaultName}/recovery-points/": {
      "get": {
        "description": "Returns detailed information about the recovery points stored in a backup vault.",
        "operationId": "ListRecoveryPointsByBackupVault",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          },
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Returns only recovery points that match the specified resource Amazon Resource Name (ARN).",
            "in": "query",
            "name": "resourceArn",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Returns only recovery points that match the specified resource type.",
            "in": "query",
            "name": "resourceType",
            "required": false,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          },
          {
            "description": "Returns only recovery points that match the specified backup plan ID.",
            "in": "query",
            "name": "backupPlanId",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Returns only recovery points that were created before the specified timestamp.",
            "in": "query",
            "name": "createdBefore",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "Returns only recovery points that were created after the specified timestamp.",
            "in": "query",
            "name": "createdAfter",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListRecoveryPointsByBackupVaultOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}": {
      "delete": {
        "description": "Deletes the recovery point specified by a recovery point ID.",
        "operationId": "DeleteRecoveryPoint",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          },
          {
            "description": "An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.",
            "in": "path",
            "name": "recoveryPointArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          }
        }
      },
      "get": {
        "description": "Returns metadata associated with a recovery point, including ID, status, encryption, and lifecycle.",
        "operationId": "DescribeRecoveryPoint",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          },
          {
            "description": "An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.",
            "in": "path",
            "name": "recoveryPointArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeRecoveryPointOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Sets the transition lifecycle of a recovery point.</p> <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. AWS Backup transitions and expires backups automatically according to the lifecycle that you define. </p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “expire after days” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold. </p>",
        "operationId": "UpdateRecoveryPointLifecycle",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          },
          {
            "description": "An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.",
            "in": "path",
            "name": "recoveryPointArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Lifecycle": {
                    "description": "Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.",
                    "properties": {
                      "DeleteAfterDays": { "$ref": "#/components/schemas/Long" },
                      "MoveToColdStorageAfterDays": { "$ref": "#/components/schemas/Long" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateRecoveryPointLifecycleOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/restore-metadata": {
      "get": {
        "description": "<p>Returns two sets of metadata key-value pairs. The first set lists the metadata that the recovery point was created with. The second set lists the metadata key-value pairs that are required to restore the recovery point.</p> <p>These sets can be the same, or the restore metadata set can contain different values if the target service to be restored has changed since the recovery point was created and now requires additional or different information in order to be restored.</p>",
        "operationId": "GetRecoveryPointRestoreMetadata",
        "parameters": [
          {
            "description": "The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.",
            "in": "path",
            "name": "backupVaultName",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$" }
          },
          {
            "description": "An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.",
            "in": "path",
            "name": "recoveryPointArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetRecoveryPointRestoreMetadataOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup/plans/": {
      "get": {
        "description": "Returns metadata of your saved backup plans, including Amazon Resource Names (ARNs), plan IDs, creation and deletion dates, version IDs, plan names, and creator request IDs.",
        "operationId": "ListBackupPlans",
        "parameters": [
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "A Boolean value with a default value of <code>FALSE</code> that returns deleted backup plans when set to <code>TRUE</code>.",
            "in": "query",
            "name": "includeDeleted",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListBackupPlansOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Backup plans are documents that contain information that AWS Backup uses to schedule tasks that create recovery points of resources.</p> <p>If you call <code>CreateBackupPlan</code> with a plan that already exists, the existing <code>backupPlanId</code> is returned.</p>",
        "operationId": "CreateBackupPlan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "BackupPlan": {
                    "description": "Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task and can back up a different selection of AWS resources.",
                    "properties": {
                      "BackupPlanName": { "$ref": "#/components/schemas/BackupPlanName" },
                      "Rules": { "$ref": "#/components/schemas/BackupRulesInput" }
                    },
                    "type": "object"
                  },
                  "BackupPlanTags": {
                    "additionalProperties": { "$ref": "#/components/schemas/TagValue" },
                    "description": "To help organize your resources, you can assign your own metadata to the resources that you create. Each tag is a key-value pair. The specified tags are assigned to all backups created with this plan.",
                    "type": "object"
                  },
                  "CreatorRequestId": {
                    "description": "Identifies the request and allows failed requests to be retried without the risk of executing the operation twice. If the request includes a <code>CreatorRequestId</code> that matches an existing backup plan, that plan is returned. This parameter is optional.",
                    "type": "string"
                  }
                },
                "required": ["BackupPlan"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateBackupPlanOutput" } } }
          },
          "480": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "481": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "483": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/backup/plans/{backupPlanId}": {
      "delete": {
        "description": "Deletes a backup plan. A backup plan can only be deleted after all associated selections of resources have been deleted. Deleting a backup plan deletes the current version of a backup plan. Previous versions, if any, will still exist.",
        "operationId": "DeleteBackupPlan",
        "parameters": [
          {
            "description": "Uniquely identifies a backup plan.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteBackupPlanOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Replaces the body of a saved backup plan identified by its <code>backupPlanId</code> with the input document in JSON format. The new version is uniquely identified by a <code>VersionId</code>.",
        "operationId": "UpdateBackupPlan",
        "parameters": [
          {
            "description": "Uniquely identifies a backup plan.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "BackupPlan": {
                    "description": "Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task and can back up a different selection of AWS resources.",
                    "properties": {
                      "BackupPlanName": { "$ref": "#/components/schemas/BackupPlanName" },
                      "Rules": { "$ref": "#/components/schemas/BackupRulesInput" }
                    },
                    "type": "object"
                  }
                },
                "required": ["BackupPlan"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateBackupPlanOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/backup/plans/{backupPlanId}/": {
      "get": {
        "description": "Returns the body of a backup plan in JSON format, in addition to plan metadata.",
        "operationId": "GetBackupPlan",
        "parameters": [
          {
            "description": "Uniquely identifies a backup plan.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Unique, randomly generated, Unicode, UTF-8 encoded strings that are at most 1,024 bytes long. Version IDs cannot be edited.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetBackupPlanOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup/plans/{backupPlanId}/selections/": {
      "get": {
        "description": "Returns an array containing metadata of the resources associated with the target backup plan.",
        "operationId": "ListBackupSelections",
        "parameters": [
          {
            "description": "Uniquely identifies a backup plan.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListBackupSelectionsOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Creates a JSON document that specifies a set of resources to assign to a backup plan. Resources can be included by specifying patterns for a <code>ListOfTags</code> and selected <code>Resources</code>. </p> <p>For example, consider the following patterns:</p> <ul> <li> <p> <code>Resources: \"arn:aws:ec2:region:account-id:volume/volume-id\"</code> </p> </li> <li> <p> <code>ConditionKey:\"department\"</code> </p> <p> <code>ConditionValue:\"finance\"</code> </p> <p> <code>ConditionType:\"StringEquals\"</code> </p> </li> <li> <p> <code>ConditionKey:\"importance\"</code> </p> <p> <code>ConditionValue:\"critical\"</code> </p> <p> <code>ConditionType:\"StringEquals\"</code> </p> </li> </ul> <p>Using these patterns would back up all Amazon Elastic Block Store (Amazon EBS) volumes that are tagged as <code>\"department=finance\"</code>, <code>\"importance=critical\"</code>, in addition to an EBS volume with the specified volume Id.</p> <p>Resources and conditions are additive in that all resources that match the pattern are selected. This shouldn't be confused with a logical AND, where all conditions must match. The matching patterns are logically 'put together using the OR operator. In other words, all patterns that match are selected for backup.</p>",
        "operationId": "CreateBackupSelection",
        "parameters": [
          {
            "description": "Uniquely identifies the backup plan to be associated with the selection of resources.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "BackupSelection": {
                    "description": "Used to specify a set of resources to a backup plan.",
                    "properties": {
                      "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
                      "ListOfTags": { "$ref": "#/components/schemas/ListOfTags" },
                      "Resources": { "$ref": "#/components/schemas/ResourceArns" },
                      "SelectionName": { "$ref": "#/components/schemas/BackupSelectionName" }
                    },
                    "type": "object"
                  },
                  "CreatorRequestId": {
                    "description": "A unique string that identifies the request and allows failed requests to be retried without the risk of executing the operation twice.",
                    "type": "string"
                  }
                },
                "required": ["BackupSelection"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateBackupSelectionOutput" } }
            }
          },
          "480": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "481": {
            "description": "AlreadyExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlreadyExistsException" } } }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "483": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/backup/plans/{backupPlanId}/selections/{selectionId}": {
      "delete": {
        "description": "Deletes the resource selection associated with a backup plan that is specified by the <code>SelectionId</code>.",
        "operationId": "DeleteBackupSelection",
        "parameters": [
          {
            "description": "Uniquely identifies a backup plan.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Uniquely identifies the body of a request to assign a set of resources to a backup plan.",
            "in": "path",
            "name": "selectionId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "get": {
        "description": "Returns selection metadata and a document in JSON format that specifies a list of resources that are associated with a backup plan.",
        "operationId": "GetBackupSelection",
        "parameters": [
          {
            "description": "Uniquely identifies a backup plan.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Uniquely identifies the body of a request to assign a set of resources to a backup plan.",
            "in": "path",
            "name": "selectionId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetBackupSelectionOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup/plans/{backupPlanId}/toTemplate/": {
      "get": {
        "description": "Returns the backup plan that is specified by the plan ID as a backup template.",
        "operationId": "ExportBackupPlanTemplate",
        "parameters": [
          {
            "description": "Uniquely identifies a backup plan.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ExportBackupPlanTemplateOutput" } }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "481": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup/plans/{backupPlanId}/versions/": {
      "get": {
        "description": "Returns version metadata of your backup plans, including Amazon Resource Names (ARNs), backup plan IDs, creation and deletion dates, plan names, and version IDs.",
        "operationId": "ListBackupPlanVersions",
        "parameters": [
          {
            "description": "Uniquely identifies a backup plan.",
            "in": "path",
            "name": "backupPlanId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListBackupPlanVersionsOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup/template/json/toPlan": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a valid JSON document specifying a backup plan or an error.",
        "operationId": "GetBackupPlanFromJSON",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "BackupPlanTemplateJson": {
                    "description": "A customer-supplied backup plan document in JSON format.",
                    "type": "string"
                  }
                },
                "required": ["BackupPlanTemplateJson"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetBackupPlanFromJSONOutput" } }
            }
          },
          "480": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          }
        }
      }
    },
    "/backup/template/plans": {
      "get": {
        "description": "Returns metadata of your saved backup plan templates, including the template ID, name, and the creation and deletion dates.",
        "operationId": "ListBackupPlanTemplates",
        "parameters": [
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListBackupPlanTemplatesOutput" } }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "481": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/backup/template/plans/{templateId}/toPlan": {
      "get": {
        "description": "Returns the template specified by its <code>templateId</code> as a backup plan.",
        "operationId": "GetBackupPlanFromTemplate",
        "parameters": [
          {
            "description": "Uniquely identifies a stored backup plan template.",
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetBackupPlanFromTemplateOutput" } }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "481": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/resources/": {
      "get": {
        "description": "Returns an array of resources successfully backed up by AWS Backup, including the time the resource was saved, an Amazon Resource Name (ARN) of the resource, and a resource type.",
        "operationId": "ListProtectedResources",
        "parameters": [
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListProtectedResourcesOutput" } }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "481": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/resources/{resourceArn}": {
      "get": {
        "description": "Returns information about a saved resource, including the last time it was backed-up, its Amazon Resource Name (ARN), and the AWS service type of the saved resource.",
        "operationId": "DescribeProtectedResource",
        "parameters": [
          {
            "description": "An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.",
            "in": "path",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeProtectedResourceOutput" } }
            }
          },
          "480": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/resources/{resourceArn}/recovery-points/": {
      "get": {
        "description": "Returns detailed information about recovery points of the type specified by a resource Amazon Resource Name (ARN).",
        "operationId": "ListRecoveryPointsByResource",
        "parameters": [
          {
            "description": "An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.",
            "in": "path",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListRecoveryPointsByResourceOutput" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/restore-jobs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Recovers the saved resource identified by an Amazon Resource Name (ARN). </p> <p>If the resource ARN is included in the request, then the last complete backup of that resource is recovered. If the ARN of a recovery point is supplied, then that recovery point is restored.</p>",
        "operationId": "StartRestoreJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "IamRoleArn": {
                    "description": "The Amazon Resource Name (ARN) of the IAM role that AWS Backup uses to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.",
                    "type": "string"
                  },
                  "IdempotencyToken": {
                    "description": "A customer chosen string that can be used to distinguish between calls to <code>StartRestoreJob</code>. Idempotency tokens time out after one hour. Therefore, if you call <code>StartRestoreJob</code> multiple times with the same idempotency token within one hour, AWS Backup recognizes that you are requesting only one restore job and initiates only one. If you change the idempotency token for each call, AWS Backup recognizes that you are requesting to start multiple restores. ",
                    "type": "string"
                  },
                  "Metadata": {
                    "additionalProperties": { "$ref": "#/components/schemas/MetadataValue" },
                    "description": "A set of metadata key-value pairs. Lists the metadata that the recovery point was created with.",
                    "type": "object"
                  },
                  "RecoveryPointArn": {
                    "description": "An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.",
                    "type": "string"
                  },
                  "ResourceType": {
                    "description": "<p>Starts a job to restore a recovery point for one of the following resources:</p> <ul> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>SGW</code> for AWS Storage Gateway</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>DDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> </ul>",
                    "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$",
                    "type": "string"
                  }
                },
                "required": ["RecoveryPointArn", "Metadata", "IamRoleArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartRestoreJobOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/restore-jobs/": {
      "get": {
        "description": "Returns a list of jobs that AWS Backup initiated to restore a saved resource, including metadata about the recovery process.",
        "operationId": "ListRestoreJobs",
        "parameters": [
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListRestoreJobsOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/restore-jobs/{restoreJobId}": {
      "get": {
        "description": "Returns metadata associated with a restore job that is specified by a job ID.",
        "operationId": "DescribeRestoreJob",
        "parameters": [
          {
            "description": "Uniquely identifies the job that restores a recovery point.",
            "in": "path",
            "name": "restoreJobId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeRestoreJobOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "DependencyFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DependencyFailureException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/supported-resource-types": {
      "get": {
        "description": "Returns the AWS resource types supported by AWS Backup.",
        "operationId": "GetSupportedResourceTypes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetSupportedResourceTypesOutput" } }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/tags/{resourceArn}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Assigns a set of key-value pairs to a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN).",
        "operationId": "TagResource",
        "parameters": [
          {
            "description": "An ARN that uniquely identifies a resource. The format of the ARN depends on the type of the tagged resource.",
            "in": "path",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Tags": {
                    "additionalProperties": { "$ref": "#/components/schemas/TagValue" },
                    "description": "Key-value pairs that are used to help organize your resources. You can assign your own metadata to the resources you create. ",
                    "type": "object"
                  }
                },
                "required": ["Tags"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/tags/{resourceArn}/": {
      "get": {
        "description": "Returns a list of key-value pairs assigned to a target recovery point, backup plan, or backup vault.",
        "operationId": "ListTags",
        "parameters": [
          {
            "description": "An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the type of resource. Valid targets for <code>ListTags</code> are recovery points, backup plans, and backup vaults.",
            "in": "path",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of items to be returned.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsOutput" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/untag/{resourceArn}": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes a set of key-value pairs from a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN)",
        "operationId": "UntagResource",
        "parameters": [
          {
            "description": "An ARN that uniquely identifies a resource. The format of the ARN depends on the type of the tagged resource.",
            "in": "path",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "TagKeyList": {
                    "description": "A list of keys to identify which key-value tags to remove from a resource.",
                    "items": { "$ref": "#/components/schemas/string" },
                    "type": "array"
                  }
                },
                "required": ["TagKeyList"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterValueException" } }
            }
          },
          "482": {
            "description": "MissingParameterValueException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MissingParameterValueException" } }
            }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The AWS Backup multi-region endpoint",
      "url": "http://backup.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS Backup multi-region endpoint",
      "url": "https://backup.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS Backup endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://backup.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The AWS Backup endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://backup.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "ARN": { "type": "string" },
      "AlreadyExistsException": {},
      "BackupJob": {
        "description": "Contains detailed information about a backup job.",
        "properties": {
          "BackupJobId": { "$ref": "#/components/schemas/string" },
          "BackupSizeInBytes": { "$ref": "#/components/schemas/Long" },
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "BytesTransferred": { "$ref": "#/components/schemas/Long" },
          "CompletionDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatedBy": { "$ref": "#/components/schemas/RecoveryPointCreator" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "ExpectedCompletionDate": { "$ref": "#/components/schemas/timestamp" },
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "PercentDone": { "$ref": "#/components/schemas/string" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" },
          "StartBy": { "$ref": "#/components/schemas/timestamp" },
          "State": { "$ref": "#/components/schemas/BackupJobState" },
          "StatusMessage": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "BackupJobState": {
        "enum": ["CREATED", "PENDING", "RUNNING", "ABORTING", "ABORTED", "COMPLETED", "FAILED", "EXPIRED"],
        "type": "string"
      },
      "BackupJobsList": { "items": { "$ref": "#/components/schemas/BackupJob" }, "type": "array" },
      "BackupPlan": {
        "description": "Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task and can back up a different selection of AWS resources.",
        "properties": {
          "BackupPlanName": { "$ref": "#/components/schemas/BackupPlanName" },
          "Rules": { "$ref": "#/components/schemas/BackupRules" }
        },
        "required": ["BackupPlanName", "Rules"],
        "type": "object"
      },
      "BackupPlanInput": {
        "description": "Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task and can back up a different selection of AWS resources.",
        "properties": {
          "BackupPlanName": { "$ref": "#/components/schemas/BackupPlanName" },
          "Rules": { "$ref": "#/components/schemas/BackupRulesInput" }
        },
        "required": ["BackupPlanName", "Rules"],
        "type": "object"
      },
      "BackupPlanName": { "type": "string" },
      "BackupPlanTemplatesList": {
        "items": { "$ref": "#/components/schemas/BackupPlanTemplatesListMember" },
        "type": "array"
      },
      "BackupPlanTemplatesListMember": {
        "description": "An object specifying metadata associated with a backup plan template.",
        "properties": {
          "BackupPlanTemplateId": { "$ref": "#/components/schemas/string" },
          "BackupPlanTemplateName": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "BackupPlanVersionsList": { "items": { "$ref": "#/components/schemas/BackupPlansListMember" }, "type": "array" },
      "BackupPlansList": { "items": { "$ref": "#/components/schemas/BackupPlansListMember" }, "type": "array" },
      "BackupPlansListMember": {
        "description": "Contains metadata about a backup plan.",
        "properties": {
          "BackupPlanArn": { "$ref": "#/components/schemas/ARN" },
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "BackupPlanName": { "$ref": "#/components/schemas/BackupPlanName" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" },
          "DeletionDate": { "$ref": "#/components/schemas/timestamp" },
          "LastExecutionDate": { "$ref": "#/components/schemas/timestamp" },
          "VersionId": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "BackupRule": {
        "description": "Specifies a scheduled task used to back up a selection of resources.",
        "properties": {
          "CompletionWindowMinutes": { "$ref": "#/components/schemas/WindowMinutes" },
          "Lifecycle": { "$ref": "#/components/schemas/Lifecycle" },
          "RecoveryPointTags": { "$ref": "#/components/schemas/Tags" },
          "RuleId": { "$ref": "#/components/schemas/string" },
          "RuleName": { "$ref": "#/components/schemas/BackupRuleName" },
          "ScheduleExpression": { "$ref": "#/components/schemas/CronExpression" },
          "StartWindowMinutes": { "$ref": "#/components/schemas/WindowMinutes" },
          "TargetBackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" }
        },
        "required": ["RuleName", "TargetBackupVaultName"],
        "type": "object"
      },
      "BackupRuleInput": {
        "description": "Specifies a scheduled task used to back up a selection of resources.",
        "properties": {
          "CompletionWindowMinutes": { "$ref": "#/components/schemas/WindowMinutes" },
          "Lifecycle": { "$ref": "#/components/schemas/Lifecycle" },
          "RecoveryPointTags": { "$ref": "#/components/schemas/Tags" },
          "RuleName": { "$ref": "#/components/schemas/BackupRuleName" },
          "ScheduleExpression": { "$ref": "#/components/schemas/CronExpression" },
          "StartWindowMinutes": { "$ref": "#/components/schemas/WindowMinutes" },
          "TargetBackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" }
        },
        "required": ["RuleName", "TargetBackupVaultName"],
        "type": "object"
      },
      "BackupRuleName": { "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$", "type": "string" },
      "BackupRules": { "items": { "$ref": "#/components/schemas/BackupRule" }, "type": "array" },
      "BackupRulesInput": { "items": { "$ref": "#/components/schemas/BackupRuleInput" }, "type": "array" },
      "BackupSelection": {
        "description": "Used to specify a set of resources to a backup plan.",
        "properties": {
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "ListOfTags": { "$ref": "#/components/schemas/ListOfTags" },
          "Resources": { "$ref": "#/components/schemas/ResourceArns" },
          "SelectionName": { "$ref": "#/components/schemas/BackupSelectionName" }
        },
        "required": ["SelectionName", "IamRoleArn"],
        "type": "object"
      },
      "BackupSelectionName": { "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$", "type": "string" },
      "BackupSelectionsList": {
        "items": { "$ref": "#/components/schemas/BackupSelectionsListMember" },
        "type": "array"
      },
      "BackupSelectionsListMember": {
        "description": "Contains metadata about a <code>BackupSelection</code> object.",
        "properties": {
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" },
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "SelectionId": { "$ref": "#/components/schemas/string" },
          "SelectionName": { "$ref": "#/components/schemas/BackupSelectionName" }
        },
        "type": "object"
      },
      "BackupVaultEvent": {
        "enum": [
          "BACKUP_JOB_STARTED",
          "BACKUP_JOB_COMPLETED",
          "RESTORE_JOB_STARTED",
          "RESTORE_JOB_COMPLETED",
          "RECOVERY_POINT_MODIFIED",
          "BACKUP_PLAN_CREATED",
          "BACKUP_PLAN_MODIFIED"
        ],
        "type": "string"
      },
      "BackupVaultEvents": { "items": { "$ref": "#/components/schemas/BackupVaultEvent" }, "type": "array" },
      "BackupVaultList": { "items": { "$ref": "#/components/schemas/BackupVaultListMember" }, "type": "array" },
      "BackupVaultListMember": {
        "description": "Contains metadata about a backup vault.",
        "properties": {
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" },
          "EncryptionKeyArn": { "$ref": "#/components/schemas/ARN" },
          "NumberOfRecoveryPoints": { "$ref": "#/components/schemas/long" }
        },
        "type": "object"
      },
      "BackupVaultName": { "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$", "type": "string" },
      "Boolean": { "type": "boolean" },
      "CalculatedLifecycle": {
        "description": "<p>Contains <code>DeleteAt</code> and <code>MoveToColdStorageAt</code> timestamps, which are used to specify a lifecycle for a recovery point.</p> <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. AWS Backup transitions and expires backups automatically according to the lifecycle that you define. </p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “expire after days” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold. </p>",
        "properties": {
          "DeleteAt": { "$ref": "#/components/schemas/timestamp" },
          "MoveToColdStorageAt": { "$ref": "#/components/schemas/timestamp" }
        },
        "type": "object"
      },
      "Condition": {
        "description": "Contains an array of triplets made up of a condition type (such as <code>StringEquals</code>), a key, and a value. Conditions are used to filter resources in a selection that is assigned to a backup plan.",
        "properties": {
          "ConditionKey": { "$ref": "#/components/schemas/ConditionKey" },
          "ConditionType": { "$ref": "#/components/schemas/ConditionType" },
          "ConditionValue": { "$ref": "#/components/schemas/ConditionValue" }
        },
        "required": ["ConditionType", "ConditionKey", "ConditionValue"],
        "type": "object"
      },
      "ConditionKey": { "type": "string" },
      "ConditionType": { "enum": ["STRINGEQUALS"], "type": "string" },
      "ConditionValue": { "type": "string" },
      "CreateBackupPlanInput": {
        "properties": {
          "BackupPlan": { "$ref": "#/components/schemas/BackupPlanInput" },
          "BackupPlanTags": { "$ref": "#/components/schemas/Tags" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" }
        },
        "required": ["BackupPlan"],
        "type": "object"
      },
      "CreateBackupPlanOutput": {
        "properties": {
          "BackupPlanArn": { "$ref": "#/components/schemas/ARN" },
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "VersionId": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "CreateBackupSelectionInput": {
        "properties": {
          "BackupSelection": { "$ref": "#/components/schemas/BackupSelection" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" }
        },
        "required": ["BackupSelection"],
        "type": "object"
      },
      "CreateBackupSelectionOutput": {
        "properties": {
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "SelectionId": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "CreateBackupVaultInput": {
        "properties": {
          "BackupVaultTags": { "$ref": "#/components/schemas/Tags" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" },
          "EncryptionKeyArn": { "$ref": "#/components/schemas/ARN" }
        },
        "type": "object"
      },
      "CreateBackupVaultOutput": {
        "properties": {
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" }
        },
        "type": "object"
      },
      "CronExpression": { "type": "string" },
      "DeleteBackupPlanInput": { "properties": {}, "type": "object" },
      "DeleteBackupPlanOutput": {
        "properties": {
          "BackupPlanArn": { "$ref": "#/components/schemas/ARN" },
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "DeletionDate": { "$ref": "#/components/schemas/timestamp" },
          "VersionId": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "DeleteBackupSelectionInput": { "properties": {}, "type": "object" },
      "DeleteBackupVaultAccessPolicyInput": { "properties": {}, "type": "object" },
      "DeleteBackupVaultInput": { "properties": {}, "type": "object" },
      "DeleteBackupVaultNotificationsInput": { "properties": {}, "type": "object" },
      "DeleteRecoveryPointInput": { "properties": {}, "type": "object" },
      "DependencyFailureException": {},
      "DescribeBackupJobInput": { "properties": {}, "type": "object" },
      "DescribeBackupJobOutput": {
        "properties": {
          "BackupJobId": { "$ref": "#/components/schemas/string" },
          "BackupSizeInBytes": { "$ref": "#/components/schemas/Long" },
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "BytesTransferred": { "$ref": "#/components/schemas/Long" },
          "CompletionDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatedBy": { "$ref": "#/components/schemas/RecoveryPointCreator" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "ExpectedCompletionDate": { "$ref": "#/components/schemas/timestamp" },
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "PercentDone": { "$ref": "#/components/schemas/string" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" },
          "StartBy": { "$ref": "#/components/schemas/timestamp" },
          "State": { "$ref": "#/components/schemas/BackupJobState" },
          "StatusMessage": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "DescribeBackupVaultInput": { "properties": {}, "type": "object" },
      "DescribeBackupVaultOutput": {
        "properties": {
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultName": { "$ref": "#/components/schemas/string" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" },
          "EncryptionKeyArn": { "$ref": "#/components/schemas/ARN" },
          "NumberOfRecoveryPoints": { "$ref": "#/components/schemas/long" }
        },
        "type": "object"
      },
      "DescribeProtectedResourceInput": { "properties": {}, "type": "object" },
      "DescribeProtectedResourceOutput": {
        "properties": {
          "LastBackupTime": { "$ref": "#/components/schemas/timestamp" },
          "ResourceArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" }
        },
        "type": "object"
      },
      "DescribeRecoveryPointInput": { "properties": {}, "type": "object" },
      "DescribeRecoveryPointOutput": {
        "properties": {
          "BackupSizeInBytes": { "$ref": "#/components/schemas/Long" },
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "CalculatedLifecycle": { "$ref": "#/components/schemas/CalculatedLifecycle" },
          "CompletionDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatedBy": { "$ref": "#/components/schemas/RecoveryPointCreator" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "EncryptionKeyArn": { "$ref": "#/components/schemas/ARN" },
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "IsEncrypted": { "$ref": "#/components/schemas/boolean" },
          "LastRestoreTime": { "$ref": "#/components/schemas/timestamp" },
          "Lifecycle": { "$ref": "#/components/schemas/Lifecycle" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" },
          "Status": { "$ref": "#/components/schemas/RecoveryPointStatus" },
          "StorageClass": { "$ref": "#/components/schemas/StorageClass" }
        },
        "type": "object"
      },
      "DescribeRestoreJobInput": { "properties": {}, "type": "object" },
      "DescribeRestoreJobOutput": {
        "properties": {
          "BackupSizeInBytes": { "$ref": "#/components/schemas/Long" },
          "CompletionDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatedResourceArn": { "$ref": "#/components/schemas/ARN" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "ExpectedCompletionTimeMinutes": { "$ref": "#/components/schemas/Long" },
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "PercentDone": { "$ref": "#/components/schemas/string" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "RestoreJobId": { "$ref": "#/components/schemas/string" },
          "Status": { "$ref": "#/components/schemas/RestoreJobStatus" },
          "StatusMessage": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "ExportBackupPlanTemplateInput": { "properties": {}, "type": "object" },
      "ExportBackupPlanTemplateOutput": {
        "properties": { "BackupPlanTemplateJson": { "$ref": "#/components/schemas/string" } },
        "type": "object"
      },
      "GetBackupPlanFromJSONInput": {
        "properties": { "BackupPlanTemplateJson": { "$ref": "#/components/schemas/string" } },
        "required": ["BackupPlanTemplateJson"],
        "type": "object"
      },
      "GetBackupPlanFromJSONOutput": {
        "properties": { "BackupPlan": { "$ref": "#/components/schemas/BackupPlan" } },
        "type": "object"
      },
      "GetBackupPlanFromTemplateInput": { "properties": {}, "type": "object" },
      "GetBackupPlanFromTemplateOutput": {
        "properties": { "BackupPlanDocument": { "$ref": "#/components/schemas/BackupPlan" } },
        "type": "object"
      },
      "GetBackupPlanInput": { "properties": {}, "type": "object" },
      "GetBackupPlanOutput": {
        "properties": {
          "BackupPlan": { "$ref": "#/components/schemas/BackupPlan" },
          "BackupPlanArn": { "$ref": "#/components/schemas/ARN" },
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" },
          "DeletionDate": { "$ref": "#/components/schemas/timestamp" },
          "LastExecutionDate": { "$ref": "#/components/schemas/timestamp" },
          "VersionId": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "GetBackupSelectionInput": { "properties": {}, "type": "object" },
      "GetBackupSelectionOutput": {
        "properties": {
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "BackupSelection": { "$ref": "#/components/schemas/BackupSelection" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatorRequestId": { "$ref": "#/components/schemas/string" },
          "SelectionId": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "GetBackupVaultAccessPolicyInput": { "properties": {}, "type": "object" },
      "GetBackupVaultAccessPolicyOutput": {
        "properties": {
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "Policy": { "$ref": "#/components/schemas/IAMPolicy" }
        },
        "type": "object"
      },
      "GetBackupVaultNotificationsInput": { "properties": {}, "type": "object" },
      "GetBackupVaultNotificationsOutput": {
        "properties": {
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultEvents": { "$ref": "#/components/schemas/BackupVaultEvents" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "SNSTopicArn": { "$ref": "#/components/schemas/ARN" }
        },
        "type": "object"
      },
      "GetRecoveryPointRestoreMetadataInput": { "properties": {}, "type": "object" },
      "GetRecoveryPointRestoreMetadataOutput": {
        "properties": {
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "RestoreMetadata": { "$ref": "#/components/schemas/Metadata" }
        },
        "type": "object"
      },
      "GetSupportedResourceTypesOutput": {
        "properties": { "ResourceTypes": { "$ref": "#/components/schemas/ResourceTypes" } },
        "type": "object"
      },
      "IAMPolicy": { "type": "string" },
      "IAMRoleArn": { "type": "string" },
      "InvalidParameterValueException": {},
      "InvalidRequestException": {},
      "Lifecycle": {
        "description": "Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.",
        "properties": {
          "DeleteAfterDays": { "$ref": "#/components/schemas/Long" },
          "MoveToColdStorageAfterDays": { "$ref": "#/components/schemas/Long" }
        },
        "type": "object"
      },
      "LimitExceededException": {},
      "ListBackupJobsInput": { "properties": {}, "type": "object" },
      "ListBackupJobsOutput": {
        "properties": {
          "BackupJobs": { "$ref": "#/components/schemas/BackupJobsList" },
          "NextToken": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "ListBackupPlanTemplatesInput": { "properties": {}, "type": "object" },
      "ListBackupPlanTemplatesOutput": {
        "properties": {
          "BackupPlanTemplatesList": { "$ref": "#/components/schemas/BackupPlanTemplatesList" },
          "NextToken": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "ListBackupPlanVersionsInput": { "properties": {}, "type": "object" },
      "ListBackupPlanVersionsOutput": {
        "properties": {
          "BackupPlanVersionsList": { "$ref": "#/components/schemas/BackupPlanVersionsList" },
          "NextToken": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "ListBackupPlansInput": { "properties": {}, "type": "object" },
      "ListBackupPlansOutput": {
        "properties": {
          "BackupPlansList": { "$ref": "#/components/schemas/BackupPlansList" },
          "NextToken": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "ListBackupSelectionsInput": { "properties": {}, "type": "object" },
      "ListBackupSelectionsOutput": {
        "properties": {
          "BackupSelectionsList": { "$ref": "#/components/schemas/BackupSelectionsList" },
          "NextToken": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "ListBackupVaultsInput": { "properties": {}, "type": "object" },
      "ListBackupVaultsOutput": {
        "properties": {
          "BackupVaultList": { "$ref": "#/components/schemas/BackupVaultList" },
          "NextToken": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "ListOfTags": { "items": { "$ref": "#/components/schemas/Condition" }, "type": "array" },
      "ListProtectedResourcesInput": { "properties": {}, "type": "object" },
      "ListProtectedResourcesOutput": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/string" },
          "Results": { "$ref": "#/components/schemas/ProtectedResourcesList" }
        },
        "type": "object"
      },
      "ListRecoveryPointsByBackupVaultInput": { "properties": {}, "type": "object" },
      "ListRecoveryPointsByBackupVaultOutput": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/string" },
          "RecoveryPoints": { "$ref": "#/components/schemas/RecoveryPointByBackupVaultList" }
        },
        "type": "object"
      },
      "ListRecoveryPointsByResourceInput": { "properties": {}, "type": "object" },
      "ListRecoveryPointsByResourceOutput": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/string" },
          "RecoveryPoints": { "$ref": "#/components/schemas/RecoveryPointByResourceList" }
        },
        "type": "object"
      },
      "ListRestoreJobsInput": { "properties": {}, "type": "object" },
      "ListRestoreJobsOutput": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/string" },
          "RestoreJobs": { "$ref": "#/components/schemas/RestoreJobsList" }
        },
        "type": "object"
      },
      "ListTagsInput": { "properties": {}, "type": "object" },
      "ListTagsOutput": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/string" },
          "Tags": { "$ref": "#/components/schemas/Tags" }
        },
        "type": "object"
      },
      "Long": { "type": "integer" },
      "MaxResults": { "maximum": 1000, "minimum": 1, "type": "integer" },
      "Metadata": { "additionalProperties": { "$ref": "#/components/schemas/MetadataValue" }, "type": "object" },
      "MetadataKey": { "type": "string" },
      "MetadataValue": { "type": "string" },
      "MissingParameterValueException": {},
      "ProtectedResource": {
        "description": "A structure that contains information about a backed-up resource.",
        "properties": {
          "LastBackupTime": { "$ref": "#/components/schemas/timestamp" },
          "ResourceArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" }
        },
        "type": "object"
      },
      "ProtectedResourcesList": { "items": { "$ref": "#/components/schemas/ProtectedResource" }, "type": "array" },
      "PutBackupVaultAccessPolicyInput": {
        "properties": { "Policy": { "$ref": "#/components/schemas/IAMPolicy" } },
        "type": "object"
      },
      "PutBackupVaultNotificationsInput": {
        "properties": {
          "BackupVaultEvents": { "$ref": "#/components/schemas/BackupVaultEvents" },
          "SNSTopicArn": { "$ref": "#/components/schemas/ARN" }
        },
        "required": ["SNSTopicArn", "BackupVaultEvents"],
        "type": "object"
      },
      "RecoveryPointByBackupVault": {
        "description": "Contains detailed information about the recovery points stored in a backup vault.",
        "properties": {
          "BackupSizeInBytes": { "$ref": "#/components/schemas/Long" },
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "CalculatedLifecycle": { "$ref": "#/components/schemas/CalculatedLifecycle" },
          "CompletionDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatedBy": { "$ref": "#/components/schemas/RecoveryPointCreator" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "EncryptionKeyArn": { "$ref": "#/components/schemas/ARN" },
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "IsEncrypted": { "$ref": "#/components/schemas/boolean" },
          "LastRestoreTime": { "$ref": "#/components/schemas/timestamp" },
          "Lifecycle": { "$ref": "#/components/schemas/Lifecycle" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" },
          "Status": { "$ref": "#/components/schemas/RecoveryPointStatus" }
        },
        "type": "object"
      },
      "RecoveryPointByBackupVaultList": {
        "items": { "$ref": "#/components/schemas/RecoveryPointByBackupVault" },
        "type": "array"
      },
      "RecoveryPointByResource": {
        "description": "Contains detailed information about a saved recovery point.",
        "properties": {
          "BackupSizeBytes": { "$ref": "#/components/schemas/Long" },
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "EncryptionKeyArn": { "$ref": "#/components/schemas/ARN" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "Status": { "$ref": "#/components/schemas/RecoveryPointStatus" }
        },
        "type": "object"
      },
      "RecoveryPointByResourceList": {
        "items": { "$ref": "#/components/schemas/RecoveryPointByResource" },
        "type": "array"
      },
      "RecoveryPointCreator": {
        "description": "Contains information about the backup plan and rule that AWS Backup used to initiate the recovery point backup.",
        "properties": {
          "BackupPlanArn": { "$ref": "#/components/schemas/ARN" },
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "BackupPlanVersion": { "$ref": "#/components/schemas/string" },
          "BackupRuleId": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "RecoveryPointStatus": { "enum": ["COMPLETED", "PARTIAL", "DELETING", "EXPIRED"], "type": "string" },
      "ResourceArns": { "items": { "$ref": "#/components/schemas/ARN" }, "type": "array" },
      "ResourceNotFoundException": {},
      "ResourceType": { "pattern": "^[a-zA-Z0-9\\-\\_\\.]{1,50}$", "type": "string" },
      "ResourceTypes": { "items": { "$ref": "#/components/schemas/ResourceType" }, "type": "array" },
      "RestoreJobId": { "type": "string" },
      "RestoreJobStatus": { "enum": ["PENDING", "RUNNING", "COMPLETED", "ABORTED", "FAILED"], "type": "string" },
      "RestoreJobsList": { "items": { "$ref": "#/components/schemas/RestoreJobsListMember" }, "type": "array" },
      "RestoreJobsListMember": {
        "description": "Contains metadata about a restore job.",
        "properties": {
          "BackupSizeInBytes": { "$ref": "#/components/schemas/Long" },
          "CompletionDate": { "$ref": "#/components/schemas/timestamp" },
          "CreatedResourceArn": { "$ref": "#/components/schemas/ARN" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "ExpectedCompletionTimeMinutes": { "$ref": "#/components/schemas/Long" },
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "PercentDone": { "$ref": "#/components/schemas/string" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "RestoreJobId": { "$ref": "#/components/schemas/string" },
          "Status": { "$ref": "#/components/schemas/RestoreJobStatus" },
          "StatusMessage": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "ServiceUnavailableException": {},
      "StartBackupJobInput": {
        "properties": {
          "BackupVaultName": { "$ref": "#/components/schemas/BackupVaultName" },
          "CompleteWindowMinutes": { "$ref": "#/components/schemas/WindowMinutes" },
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "IdempotencyToken": { "$ref": "#/components/schemas/string" },
          "Lifecycle": { "$ref": "#/components/schemas/Lifecycle" },
          "RecoveryPointTags": { "$ref": "#/components/schemas/Tags" },
          "ResourceArn": { "$ref": "#/components/schemas/ARN" },
          "StartWindowMinutes": { "$ref": "#/components/schemas/WindowMinutes" }
        },
        "required": ["BackupVaultName", "ResourceArn", "IamRoleArn"],
        "type": "object"
      },
      "StartBackupJobOutput": {
        "properties": {
          "BackupJobId": { "$ref": "#/components/schemas/string" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" }
        },
        "type": "object"
      },
      "StartRestoreJobInput": {
        "properties": {
          "IamRoleArn": { "$ref": "#/components/schemas/IAMRoleArn" },
          "IdempotencyToken": { "$ref": "#/components/schemas/string" },
          "Metadata": { "$ref": "#/components/schemas/Metadata" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" },
          "ResourceType": { "$ref": "#/components/schemas/ResourceType" }
        },
        "required": ["RecoveryPointArn", "Metadata", "IamRoleArn"],
        "type": "object"
      },
      "StartRestoreJobOutput": {
        "properties": { "RestoreJobId": { "$ref": "#/components/schemas/RestoreJobId" } },
        "type": "object"
      },
      "StopBackupJobInput": { "properties": {}, "type": "object" },
      "StorageClass": { "enum": ["WARM", "COLD", "DELETED"], "type": "string" },
      "TagKey": { "type": "string" },
      "TagKeyList": { "items": { "$ref": "#/components/schemas/string" }, "type": "array" },
      "TagResourceInput": {
        "properties": { "Tags": { "$ref": "#/components/schemas/Tags" } },
        "required": ["Tags"],
        "type": "object"
      },
      "TagValue": { "type": "string" },
      "Tags": { "additionalProperties": { "$ref": "#/components/schemas/TagValue" }, "type": "object" },
      "UntagResourceInput": {
        "properties": { "TagKeyList": { "$ref": "#/components/schemas/TagKeyList" } },
        "required": ["TagKeyList"],
        "type": "object"
      },
      "UpdateBackupPlanInput": {
        "properties": { "BackupPlan": { "$ref": "#/components/schemas/BackupPlanInput" } },
        "required": ["BackupPlan"],
        "type": "object"
      },
      "UpdateBackupPlanOutput": {
        "properties": {
          "BackupPlanArn": { "$ref": "#/components/schemas/ARN" },
          "BackupPlanId": { "$ref": "#/components/schemas/string" },
          "CreationDate": { "$ref": "#/components/schemas/timestamp" },
          "VersionId": { "$ref": "#/components/schemas/string" }
        },
        "type": "object"
      },
      "UpdateRecoveryPointLifecycleInput": {
        "properties": { "Lifecycle": { "$ref": "#/components/schemas/Lifecycle" } },
        "type": "object"
      },
      "UpdateRecoveryPointLifecycleOutput": {
        "properties": {
          "BackupVaultArn": { "$ref": "#/components/schemas/ARN" },
          "CalculatedLifecycle": { "$ref": "#/components/schemas/CalculatedLifecycle" },
          "Lifecycle": { "$ref": "#/components/schemas/Lifecycle" },
          "RecoveryPointArn": { "$ref": "#/components/schemas/ARN" }
        },
        "type": "object"
      },
      "WindowMinutes": { "type": "integer" },
      "boolean": { "type": "boolean" },
      "long": { "type": "integer" },
      "string": { "type": "string" },
      "timestamp": { "format": "date-time", "type": "string" }
    }
  }
}
