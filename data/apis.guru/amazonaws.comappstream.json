{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand.</p> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon AppStream",
    "version": "2016-12-01",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appstream-2016-12-01.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "appstream"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/appstream2/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=PhotonAdminProxyService.AssociateFleet": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Associates the specified fleet with the specified stack.",
        "operationId": "AssociateFleet",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.AssociateFleet"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AssociateFleetRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AssociateFleetResult" } } }
          },
          "480": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "481": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "484": {
            "description": "IncompatibleImageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleImageException" } }
            }
          },
          "485": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.BatchAssociateUserStack": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.",
        "operationId": "BatchAssociateUserStack",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.BatchAssociateUserStack"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchAssociateUserStackRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchAssociateUserStackResult" } }
            }
          },
          "480": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.BatchDisassociateUserStack": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Disassociates the specified users from the specified stacks.",
        "operationId": "BatchDisassociateUserStack",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.BatchDisassociateUserStack"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchDisassociateUserStackRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BatchDisassociateUserStackResult" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CopyImage": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.",
        "operationId": "CopyImage",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CopyImage"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CopyImageRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CopyImageResponse" } } }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "485": {
            "description": "IncompatibleImageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleImageException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CreateDirectoryConfig": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.",
        "operationId": "CreateDirectoryConfig",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CreateDirectoryConfig"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateDirectoryConfigRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateDirectoryConfigResult" } }
            }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "482": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CreateFleet": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a fleet. A fleet consists of streaming instances that run a specified image.",
        "operationId": "CreateFleet",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CreateFleet"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateFleetRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateFleetResult" } } }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "485": {
            "description": "InvalidRoleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRoleException" } } }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "487": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          },
          "488": {
            "description": "IncompatibleImageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleImageException" } }
            }
          },
          "489": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CreateImageBuilder": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates an image builder. An image builder is a virtual machine that is used to create an image.</p> <p>The initial state of the builder is <code>PENDING</code>. When it is ready, the state is <code>RUNNING</code>.</p>",
        "operationId": "CreateImageBuilder",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CreateImageBuilder"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateImageBuilderRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateImageBuilderResult" } } }
          },
          "480": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "481": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "482": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "483": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "485": {
            "description": "InvalidRoleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRoleException" } } }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "487": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          },
          "488": {
            "description": "IncompatibleImageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleImageException" } }
            }
          },
          "489": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CreateImageBuilderStreamingURL": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a URL to start an image builder streaming session.",
        "operationId": "CreateImageBuilderStreamingURL",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CreateImageBuilderStreamingURL"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateImageBuilderStreamingURLRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateImageBuilderStreamingURLResult" } }
            }
          },
          "480": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CreateStack": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations. ",
        "operationId": "CreateStack",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CreateStack"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateStackRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateStackResult" } } }
          },
          "480": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "481": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "482": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "484": {
            "description": "InvalidRoleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRoleException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "486": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CreateStreamingURL": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup. ",
        "operationId": "CreateStreamingURL",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CreateStreamingURL"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateStreamingURLRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateStreamingURLResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          },
          "482": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          },
          "483": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CreateUsageReportSubscription": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a usage report subscription. Usage reports are generated daily.",
        "operationId": "CreateUsageReportSubscription",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CreateUsageReportSubscription"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateUsageReportSubscriptionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateUsageReportSubscriptionResult" } }
            }
          },
          "480": {
            "description": "InvalidRoleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRoleException" } } }
          },
          "481": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.CreateUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new user in the user pool.",
        "operationId": "CreateUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.CreateUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserResult" } } }
          },
          "480": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "481": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "482": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DeleteDirectoryConfig": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.",
        "operationId": "DeleteDirectoryConfig",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DeleteDirectoryConfig"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDirectoryConfigRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDirectoryConfigResult" } }
            }
          },
          "480": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DeleteFleet": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified fleet.",
        "operationId": "DeleteFleet",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DeleteFleet"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteFleetRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteFleetResult" } } }
          },
          "480": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DeleteImage": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified image. You cannot delete an image when it is in use. After you delete an image, you cannot provision new capacity using the image.",
        "operationId": "DeleteImage",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DeleteImage"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteImageRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteImageResult" } } }
          },
          "480": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DeleteImageBuilder": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified image builder and releases the capacity.",
        "operationId": "DeleteImageBuilder",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DeleteImageBuilder"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteImageBuilderRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteImageBuilderResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DeleteImagePermissions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.",
        "operationId": "DeleteImagePermissions",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DeleteImagePermissions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteImagePermissionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteImagePermissionsResult" } }
            }
          },
          "480": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DeleteStack": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.",
        "operationId": "DeleteStack",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DeleteStack"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteStackRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteStackResult" } } }
          },
          "480": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DeleteUsageReportSubscription": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Disables usage report generation.",
        "operationId": "DeleteUsageReportSubscription",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DeleteUsageReportSubscription"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUsageReportSubscriptionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUsageReportSubscriptionResult" } }
            }
          },
          "480": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DeleteUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a user from the user pool.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DeleteUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeDirectoryConfigs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains. </p> <p>Although the response syntax in this topic includes the account password, this password is not returned in the actual response.</p>",
        "operationId": "DescribeDirectoryConfigs",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeDirectoryConfigs"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeDirectoryConfigsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeDirectoryConfigsResult" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeFleets": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.",
        "operationId": "DescribeFleets",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeFleets"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeFleetsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeFleetsResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeImageBuilders": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.",
        "operationId": "DescribeImageBuilders",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeImageBuilders"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeImageBuildersRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeImageBuildersResult" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeImagePermissions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own. ",
        "operationId": "DescribeImagePermissions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeImagePermissions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeImagePermissionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeImagePermissionsResult" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeImages": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.",
        "operationId": "DescribeImages",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeImages"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeImagesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeImagesResult" } } }
          },
          "480": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeSessions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet, only streaming sessions for that user are described. If an authentication type is not provided, the default is to authenticate users using a streaming URL.",
        "operationId": "DescribeSessions",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeSessions"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeSessionsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeSessionsResult" } } }
          },
          "480": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeStacks": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.",
        "operationId": "DescribeStacks",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeStacks"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeStacksRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeStacksResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeUsageReportSubscriptions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list that describes one or more usage report subscriptions.",
        "operationId": "DescribeUsageReportSubscriptions",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeUsageReportSubscriptions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUsageReportSubscriptionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DescribeUsageReportSubscriptionsResult" }
              }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeUserStackAssociations": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:</p> <ul> <li> <p>The stack name</p> </li> <li> <p>The user name (email address of the user associated with the stack) and the authentication type for the user</p> </li> </ul>",
        "operationId": "DescribeUserStackAssociations",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeUserStackAssociations"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserStackAssociationsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserStackAssociationsResult" } }
            }
          },
          "480": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DescribeUsers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a list that describes one or more specified users in the user pool.",
        "operationId": "DescribeUsers",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DescribeUsers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUsersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUsersResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DisableUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Disables the specified user in the user pool. Users can't sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user. ",
        "operationId": "DisableUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DisableUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DisableUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DisableUserResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.DisassociateFleet": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Disassociates the specified fleet from the specified stack.",
        "operationId": "DisassociateFleet",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.DisassociateFleet"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DisassociateFleetRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DisassociateFleetResult" } } }
          },
          "480": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.EnableUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.",
        "operationId": "EnableUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.EnableUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EnableUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EnableUserResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.ExpireSession": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Immediately stops the specified streaming session.",
        "operationId": "ExpireSession",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.ExpireSession"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExpireSessionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExpireSessionResult" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.ListAssociatedFleets": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the name of the fleet that is associated with the specified stack.",
        "operationId": "ListAssociatedFleets",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.ListAssociatedFleets"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListAssociatedFleetsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListAssociatedFleetsResult" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.ListAssociatedStacks": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the name of the stack with which the specified fleet is associated.",
        "operationId": "ListAssociatedStacks",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.ListAssociatedStacks"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListAssociatedStacksRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListAssociatedStacksResult" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.ListTagsForResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.ListTagsForResource"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.StartFleet": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts the specified fleet.",
        "operationId": "StartFleet",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.StartFleet"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartFleetRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartFleetResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "485": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.StartImageBuilder": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts the specified image builder.",
        "operationId": "StartImageBuilder",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.StartImageBuilder"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartImageBuilderRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartImageBuilderResult" } } }
          },
          "480": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "483": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "484": {
            "description": "IncompatibleImageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleImageException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.StopFleet": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Stops the specified fleet.",
        "operationId": "StopFleet",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.StopFleet"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopFleetRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopFleetResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.StopImageBuilder": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Stops the specified image builder.",
        "operationId": "StopImageBuilder",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.StopImageBuilder"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopImageBuilderRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopImageBuilderResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p> <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.</p> <p>To list the current tags for your resources, use <a>ListTagsForResource</a>. To disassociate tags from your resources, use <a>UntagResource</a>.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "481": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Disassociates one or more specified tags from the specified AppStream 2.0 resource.</p> <p>To list the current tags for your resources, use <a>ListTagsForResource</a>.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.UpdateDirectoryConfig": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.",
        "operationId": "UpdateDirectoryConfig",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.UpdateDirectoryConfig"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDirectoryConfigRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDirectoryConfigResult" } }
            }
          },
          "480": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.UpdateFleet": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the specified fleet.</p> <p>If the fleet is in the <code>STOPPED</code> state, you can update any attribute except the fleet name. If the fleet is in the <code>RUNNING</code> state, you can update the <code>DisplayName</code>, <code>ComputeCapacity</code>, <code>ImageARN</code>, <code>ImageName</code>, and <code>DisconnectTimeoutInSeconds</code> attributes. If the fleet is in the <code>STARTING</code> or <code>STOPPING</code> state, you can't update it.</p>",
        "operationId": "UpdateFleet",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.UpdateFleet"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateFleetRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateFleetResult" } } }
          },
          "480": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          },
          "481": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "482": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "483": {
            "description": "InvalidRoleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRoleException" } } }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "485": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          },
          "486": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          },
          "487": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "488": {
            "description": "IncompatibleImageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleImageException" } }
            }
          },
          "489": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.UpdateImagePermissions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds or updates permissions for the specified private image. ",
        "operationId": "UpdateImagePermissions",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.UpdateImagePermissions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateImagePermissionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateImagePermissionsResult" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "ResourceNotAvailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotAvailableException" } }
            }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=PhotonAdminProxyService.UpdateStack": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the specified fields for the specified stack.",
        "operationId": "UpdateStack",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["PhotonAdminProxyService.UpdateStack"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateStackRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateStackResult" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          },
          "482": {
            "description": "InvalidRoleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRoleException" } } }
          },
          "483": {
            "description": "InvalidParameterCombinationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterCombinationException" } }
            }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "InvalidAccountStatusException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAccountStatusException" } }
            }
          },
          "486": {
            "description": "IncompatibleImageException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleImageException" } }
            }
          },
          "487": {
            "description": "OperationNotPermittedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/OperationNotPermittedException" } }
            }
          },
          "488": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The Amazon AppStream multi-region endpoint",
      "url": "http://appstream2.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon AppStream multi-region endpoint",
      "url": "https://appstream2.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon AppStream endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://appstream2.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Amazon AppStream endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://appstream2.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AccessEndpoint": {
        "description": "Describes a virtual private cloud (VPC) interface endpoint that lets you create a private connection between the VPC that you specify and AppStream 2.0. When you specify a VPC interface endpoint for a stack, users of the stack can connect to AppStream 2.0 only through that endpoint. When you specify a VPC interface endpoint for an image builder, administrators can connect to the image builder only through that endpoint.",
        "properties": {
          "EndpointType": { "$ref": "#/components/schemas/AccessEndpointType" },
          "VpceId": { "$ref": "#/components/schemas/String" }
        },
        "required": ["EndpointType"],
        "type": "object"
      },
      "AccessEndpointList": {
        "items": { "$ref": "#/components/schemas/AccessEndpoint" },
        "maxItems": 4,
        "minItems": 1,
        "type": "array"
      },
      "AccessEndpointType": { "enum": ["STREAMING"], "type": "string" },
      "AccountName": { "format": "password", "minLength": 1, "type": "string" },
      "AccountPassword": { "format": "password", "maxLength": 127, "minLength": 1, "type": "string" },
      "Action": {
        "enum": [
          "CLIPBOARD_COPY_FROM_LOCAL_DEVICE",
          "CLIPBOARD_COPY_TO_LOCAL_DEVICE",
          "FILE_UPLOAD",
          "FILE_DOWNLOAD",
          "PRINTING_TO_LOCAL_DEVICE"
        ],
        "type": "string"
      },
      "Application": {
        "description": "Describes an application in the application catalog.",
        "properties": {
          "DisplayName": { "$ref": "#/components/schemas/String" },
          "Enabled": { "$ref": "#/components/schemas/Boolean" },
          "IconURL": { "$ref": "#/components/schemas/String" },
          "LaunchParameters": { "$ref": "#/components/schemas/String" },
          "LaunchPath": { "$ref": "#/components/schemas/String" },
          "Metadata": { "$ref": "#/components/schemas/Metadata" },
          "Name": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ApplicationSettings": {
        "description": "The persistent application settings for users of a stack.",
        "properties": {
          "Enabled": { "$ref": "#/components/schemas/Boolean" },
          "SettingsGroup": { "$ref": "#/components/schemas/SettingsGroup" }
        },
        "required": ["Enabled"],
        "type": "object"
      },
      "ApplicationSettingsResponse": {
        "description": "Describes the persistent application settings for users of a stack.",
        "properties": {
          "Enabled": { "$ref": "#/components/schemas/Boolean" },
          "S3BucketName": { "$ref": "#/components/schemas/String" },
          "SettingsGroup": { "$ref": "#/components/schemas/SettingsGroup" }
        },
        "type": "object"
      },
      "Applications": { "items": { "$ref": "#/components/schemas/Application" }, "type": "array" },
      "AppstreamAgentVersion": { "maxLength": 100, "minLength": 1, "type": "string" },
      "Arn": {
        "pattern": "^arn:aws:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$",
        "type": "string"
      },
      "ArnList": { "items": { "$ref": "#/components/schemas/Arn" }, "type": "array" },
      "AssociateFleetRequest": {
        "properties": {
          "FleetName": { "$ref": "#/components/schemas/String" },
          "StackName": { "$ref": "#/components/schemas/String" }
        },
        "required": ["FleetName", "StackName"],
        "type": "object"
      },
      "AssociateFleetResult": { "properties": {}, "type": "object" },
      "AuthenticationType": { "enum": ["API", "SAML", "USERPOOL"], "type": "string" },
      "AwsAccountId": { "pattern": "^\\d+$", "type": "string" },
      "AwsAccountIdList": {
        "items": { "$ref": "#/components/schemas/AwsAccountId" },
        "maxItems": 5,
        "minItems": 1,
        "type": "array"
      },
      "BatchAssociateUserStackRequest": {
        "properties": { "UserStackAssociations": { "$ref": "#/components/schemas/UserStackAssociationList" } },
        "required": ["UserStackAssociations"],
        "type": "object"
      },
      "BatchAssociateUserStackResult": {
        "properties": { "errors": { "$ref": "#/components/schemas/UserStackAssociationErrorList" } },
        "type": "object"
      },
      "BatchDisassociateUserStackRequest": {
        "properties": { "UserStackAssociations": { "$ref": "#/components/schemas/UserStackAssociationList" } },
        "required": ["UserStackAssociations"],
        "type": "object"
      },
      "BatchDisassociateUserStackResult": {
        "properties": { "errors": { "$ref": "#/components/schemas/UserStackAssociationErrorList" } },
        "type": "object"
      },
      "Boolean": { "type": "boolean" },
      "BooleanObject": { "type": "boolean" },
      "ComputeCapacity": {
        "description": "Describes the capacity for a fleet.",
        "properties": { "DesiredInstances": { "$ref": "#/components/schemas/Integer" } },
        "required": ["DesiredInstances"],
        "type": "object"
      },
      "ComputeCapacityStatus": {
        "description": "Describes the capacity status for a fleet.",
        "properties": {
          "Available": { "$ref": "#/components/schemas/Integer" },
          "Desired": { "$ref": "#/components/schemas/Integer" },
          "InUse": { "$ref": "#/components/schemas/Integer" },
          "Running": { "$ref": "#/components/schemas/Integer" }
        },
        "required": ["Desired"],
        "type": "object"
      },
      "ConcurrentModificationException": {},
      "CopyImageRequest": {
        "properties": {
          "DestinationImageDescription": { "$ref": "#/components/schemas/Description" },
          "DestinationImageName": { "$ref": "#/components/schemas/Name" },
          "DestinationRegion": { "$ref": "#/components/schemas/RegionName" },
          "SourceImageName": { "$ref": "#/components/schemas/Name" }
        },
        "required": ["SourceImageName", "DestinationImageName", "DestinationRegion"],
        "type": "object"
      },
      "CopyImageResponse": {
        "properties": { "DestinationImageName": { "$ref": "#/components/schemas/Name" } },
        "type": "object"
      },
      "CreateDirectoryConfigRequest": {
        "properties": {
          "DirectoryName": { "$ref": "#/components/schemas/DirectoryName" },
          "OrganizationalUnitDistinguishedNames": {
            "$ref": "#/components/schemas/OrganizationalUnitDistinguishedNamesList"
          },
          "ServiceAccountCredentials": { "$ref": "#/components/schemas/ServiceAccountCredentials" }
        },
        "required": ["DirectoryName", "OrganizationalUnitDistinguishedNames", "ServiceAccountCredentials"],
        "type": "object"
      },
      "CreateDirectoryConfigResult": {
        "properties": { "DirectoryConfig": { "$ref": "#/components/schemas/DirectoryConfig" } },
        "type": "object"
      },
      "CreateFleetRequest": {
        "properties": {
          "ComputeCapacity": { "$ref": "#/components/schemas/ComputeCapacity" },
          "Description": { "$ref": "#/components/schemas/Description" },
          "DisconnectTimeoutInSeconds": { "$ref": "#/components/schemas/Integer" },
          "DisplayName": { "$ref": "#/components/schemas/DisplayName" },
          "DomainJoinInfo": { "$ref": "#/components/schemas/DomainJoinInfo" },
          "EnableDefaultInternetAccess": { "$ref": "#/components/schemas/BooleanObject" },
          "FleetType": { "$ref": "#/components/schemas/FleetType" },
          "IdleDisconnectTimeoutInSeconds": { "$ref": "#/components/schemas/Integer" },
          "ImageArn": { "$ref": "#/components/schemas/Arn" },
          "ImageName": { "$ref": "#/components/schemas/String" },
          "InstanceType": { "$ref": "#/components/schemas/String" },
          "MaxUserDurationInSeconds": { "$ref": "#/components/schemas/Integer" },
          "Name": { "$ref": "#/components/schemas/Name" },
          "Tags": { "$ref": "#/components/schemas/Tags" },
          "VpcConfig": { "$ref": "#/components/schemas/VpcConfig" }
        },
        "required": ["Name", "InstanceType", "ComputeCapacity"],
        "type": "object"
      },
      "CreateFleetResult": { "properties": { "Fleet": { "$ref": "#/components/schemas/Fleet" } }, "type": "object" },
      "CreateImageBuilderRequest": {
        "properties": {
          "AccessEndpoints": { "$ref": "#/components/schemas/AccessEndpointList" },
          "AppstreamAgentVersion": { "$ref": "#/components/schemas/AppstreamAgentVersion" },
          "Description": { "$ref": "#/components/schemas/Description" },
          "DisplayName": { "$ref": "#/components/schemas/DisplayName" },
          "DomainJoinInfo": { "$ref": "#/components/schemas/DomainJoinInfo" },
          "EnableDefaultInternetAccess": { "$ref": "#/components/schemas/BooleanObject" },
          "ImageArn": { "$ref": "#/components/schemas/Arn" },
          "ImageName": { "$ref": "#/components/schemas/String" },
          "InstanceType": { "$ref": "#/components/schemas/String" },
          "Name": { "$ref": "#/components/schemas/Name" },
          "Tags": { "$ref": "#/components/schemas/Tags" },
          "VpcConfig": { "$ref": "#/components/schemas/VpcConfig" }
        },
        "required": ["Name", "InstanceType"],
        "type": "object"
      },
      "CreateImageBuilderResult": {
        "properties": { "ImageBuilder": { "$ref": "#/components/schemas/ImageBuilder" } },
        "type": "object"
      },
      "CreateImageBuilderStreamingURLRequest": {
        "properties": {
          "Name": { "$ref": "#/components/schemas/String" },
          "Validity": { "$ref": "#/components/schemas/Long" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "CreateImageBuilderStreamingURLResult": {
        "properties": {
          "Expires": { "$ref": "#/components/schemas/Timestamp" },
          "StreamingURL": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "CreateStackRequest": {
        "properties": {
          "AccessEndpoints": { "$ref": "#/components/schemas/AccessEndpointList" },
          "ApplicationSettings": { "$ref": "#/components/schemas/ApplicationSettings" },
          "Description": { "$ref": "#/components/schemas/Description" },
          "DisplayName": { "$ref": "#/components/schemas/DisplayName" },
          "FeedbackURL": { "$ref": "#/components/schemas/FeedbackURL" },
          "Name": { "$ref": "#/components/schemas/Name" },
          "RedirectURL": { "$ref": "#/components/schemas/RedirectURL" },
          "StorageConnectors": { "$ref": "#/components/schemas/StorageConnectorList" },
          "Tags": { "$ref": "#/components/schemas/Tags" },
          "UserSettings": { "$ref": "#/components/schemas/UserSettingList" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "CreateStackResult": { "properties": { "Stack": { "$ref": "#/components/schemas/Stack" } }, "type": "object" },
      "CreateStreamingURLRequest": {
        "properties": {
          "ApplicationId": { "$ref": "#/components/schemas/String" },
          "FleetName": { "$ref": "#/components/schemas/String" },
          "SessionContext": { "$ref": "#/components/schemas/String" },
          "StackName": { "$ref": "#/components/schemas/String" },
          "UserId": { "$ref": "#/components/schemas/StreamingUrlUserId" },
          "Validity": { "$ref": "#/components/schemas/Long" }
        },
        "required": ["StackName", "FleetName", "UserId"],
        "type": "object"
      },
      "CreateStreamingURLResult": {
        "properties": {
          "Expires": { "$ref": "#/components/schemas/Timestamp" },
          "StreamingURL": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "CreateUsageReportSubscriptionRequest": { "properties": {}, "type": "object" },
      "CreateUsageReportSubscriptionResult": {
        "properties": {
          "S3BucketName": { "$ref": "#/components/schemas/String" },
          "Schedule": { "$ref": "#/components/schemas/UsageReportSchedule" }
        },
        "type": "object"
      },
      "CreateUserRequest": {
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "FirstName": { "$ref": "#/components/schemas/UserAttributeValue" },
          "LastName": { "$ref": "#/components/schemas/UserAttributeValue" },
          "MessageAction": { "$ref": "#/components/schemas/MessageAction" },
          "UserName": { "$ref": "#/components/schemas/Username" }
        },
        "required": ["UserName", "AuthenticationType"],
        "type": "object"
      },
      "CreateUserResult": { "properties": {}, "type": "object" },
      "DeleteDirectoryConfigRequest": {
        "properties": { "DirectoryName": { "$ref": "#/components/schemas/DirectoryName" } },
        "required": ["DirectoryName"],
        "type": "object"
      },
      "DeleteDirectoryConfigResult": { "properties": {}, "type": "object" },
      "DeleteFleetRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/String" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteFleetResult": { "properties": {}, "type": "object" },
      "DeleteImageBuilderRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/Name" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteImageBuilderResult": {
        "properties": { "ImageBuilder": { "$ref": "#/components/schemas/ImageBuilder" } },
        "type": "object"
      },
      "DeleteImagePermissionsRequest": {
        "properties": {
          "Name": { "$ref": "#/components/schemas/Name" },
          "SharedAccountId": { "$ref": "#/components/schemas/AwsAccountId" }
        },
        "required": ["Name", "SharedAccountId"],
        "type": "object"
      },
      "DeleteImagePermissionsResult": { "properties": {}, "type": "object" },
      "DeleteImageRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/Name" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteImageResult": { "properties": { "Image": { "$ref": "#/components/schemas/Image" } }, "type": "object" },
      "DeleteStackRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/String" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteStackResult": { "properties": {}, "type": "object" },
      "DeleteUsageReportSubscriptionRequest": { "properties": {}, "type": "object" },
      "DeleteUsageReportSubscriptionResult": { "properties": {}, "type": "object" },
      "DeleteUserRequest": {
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "UserName": { "$ref": "#/components/schemas/Username" }
        },
        "required": ["UserName", "AuthenticationType"],
        "type": "object"
      },
      "DeleteUserResult": { "properties": {}, "type": "object" },
      "DescribeDirectoryConfigsRequest": {
        "properties": {
          "DirectoryNames": { "$ref": "#/components/schemas/DirectoryNameList" },
          "MaxResults": { "$ref": "#/components/schemas/Integer" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeDirectoryConfigsResult": {
        "properties": {
          "DirectoryConfigs": { "$ref": "#/components/schemas/DirectoryConfigList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeFleetsRequest": {
        "properties": {
          "Names": { "$ref": "#/components/schemas/StringList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeFleetsResult": {
        "properties": {
          "Fleets": { "$ref": "#/components/schemas/FleetList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeImageBuildersRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/Integer" },
          "Names": { "$ref": "#/components/schemas/StringList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeImageBuildersResult": {
        "properties": {
          "ImageBuilders": { "$ref": "#/components/schemas/ImageBuilderList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeImagePermissionsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/MaxResults" },
          "Name": { "$ref": "#/components/schemas/Name" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "SharedAwsAccountIds": { "$ref": "#/components/schemas/AwsAccountIdList" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "DescribeImagePermissionsResult": {
        "properties": {
          "Name": { "$ref": "#/components/schemas/Name" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "SharedImagePermissionsList": { "$ref": "#/components/schemas/SharedImagePermissionsList" }
        },
        "type": "object"
      },
      "DescribeImagesMaxResults": { "maximum": 25, "minimum": 0, "type": "integer" },
      "DescribeImagesRequest": {
        "properties": {
          "Arns": { "$ref": "#/components/schemas/ArnList" },
          "MaxResults": { "$ref": "#/components/schemas/DescribeImagesMaxResults" },
          "Names": { "$ref": "#/components/schemas/StringList" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Type": { "$ref": "#/components/schemas/VisibilityType" }
        },
        "type": "object"
      },
      "DescribeImagesResult": {
        "properties": {
          "Images": { "$ref": "#/components/schemas/ImageList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeSessionsRequest": {
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "FleetName": { "$ref": "#/components/schemas/String" },
          "Limit": { "$ref": "#/components/schemas/Integer" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "StackName": { "$ref": "#/components/schemas/String" },
          "UserId": { "$ref": "#/components/schemas/UserId" }
        },
        "required": ["StackName", "FleetName"],
        "type": "object"
      },
      "DescribeSessionsResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Sessions": { "$ref": "#/components/schemas/SessionList" }
        },
        "type": "object"
      },
      "DescribeStacksRequest": {
        "properties": {
          "Names": { "$ref": "#/components/schemas/StringList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeStacksResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Stacks": { "$ref": "#/components/schemas/StackList" }
        },
        "type": "object"
      },
      "DescribeUsageReportSubscriptionsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/Integer" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "DescribeUsageReportSubscriptionsResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "UsageReportSubscriptions": { "$ref": "#/components/schemas/UsageReportSubscriptionList" }
        },
        "type": "object"
      },
      "DescribeUserStackAssociationsRequest": {
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "MaxResults": { "$ref": "#/components/schemas/MaxResults" },
          "NextToken": { "$ref": "#/components/schemas/String" },
          "StackName": { "$ref": "#/components/schemas/String" },
          "UserName": { "$ref": "#/components/schemas/Username" }
        },
        "type": "object"
      },
      "DescribeUserStackAssociationsResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "UserStackAssociations": { "$ref": "#/components/schemas/UserStackAssociationList" }
        },
        "type": "object"
      },
      "DescribeUsersRequest": {
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "MaxResults": { "$ref": "#/components/schemas/Integer" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "required": ["AuthenticationType"],
        "type": "object"
      },
      "DescribeUsersResult": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "Users": { "$ref": "#/components/schemas/UserList" }
        },
        "type": "object"
      },
      "Description": { "maxLength": 256, "type": "string" },
      "DirectoryConfig": {
        "description": "Describes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.",
        "properties": {
          "CreatedTime": { "$ref": "#/components/schemas/Timestamp" },
          "DirectoryName": { "$ref": "#/components/schemas/DirectoryName" },
          "OrganizationalUnitDistinguishedNames": {
            "$ref": "#/components/schemas/OrganizationalUnitDistinguishedNamesList"
          },
          "ServiceAccountCredentials": { "$ref": "#/components/schemas/ServiceAccountCredentials" }
        },
        "required": ["DirectoryName"],
        "type": "object"
      },
      "DirectoryConfigList": { "items": { "$ref": "#/components/schemas/DirectoryConfig" }, "type": "array" },
      "DirectoryName": { "type": "string" },
      "DirectoryNameList": { "items": { "$ref": "#/components/schemas/DirectoryName" }, "type": "array" },
      "DisableUserRequest": {
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "UserName": { "$ref": "#/components/schemas/Username" }
        },
        "required": ["UserName", "AuthenticationType"],
        "type": "object"
      },
      "DisableUserResult": { "properties": {}, "type": "object" },
      "DisassociateFleetRequest": {
        "properties": {
          "FleetName": { "$ref": "#/components/schemas/String" },
          "StackName": { "$ref": "#/components/schemas/String" }
        },
        "required": ["FleetName", "StackName"],
        "type": "object"
      },
      "DisassociateFleetResult": { "properties": {}, "type": "object" },
      "DisplayName": { "maxLength": 100, "type": "string" },
      "Domain": { "description": "GSuite domain for GDrive integration.", "maxLength": 64, "type": "string" },
      "DomainJoinInfo": {
        "description": "Describes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.",
        "properties": {
          "DirectoryName": { "$ref": "#/components/schemas/DirectoryName" },
          "OrganizationalUnitDistinguishedName": { "$ref": "#/components/schemas/OrganizationalUnitDistinguishedName" }
        },
        "type": "object"
      },
      "DomainList": { "items": { "$ref": "#/components/schemas/Domain" }, "maxItems": 10, "type": "array" },
      "EnableUserRequest": {
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "UserName": { "$ref": "#/components/schemas/Username" }
        },
        "required": ["UserName", "AuthenticationType"],
        "type": "object"
      },
      "EnableUserResult": { "properties": {}, "type": "object" },
      "ExpireSessionRequest": {
        "properties": { "SessionId": { "$ref": "#/components/schemas/String" } },
        "required": ["SessionId"],
        "type": "object"
      },
      "ExpireSessionResult": { "properties": {}, "type": "object" },
      "FeedbackURL": { "maxLength": 1000, "type": "string" },
      "Fleet": {
        "description": "Describes a fleet.",
        "properties": {
          "Arn": { "$ref": "#/components/schemas/Arn" },
          "ComputeCapacityStatus": { "$ref": "#/components/schemas/ComputeCapacityStatus" },
          "CreatedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/String" },
          "DisconnectTimeoutInSeconds": { "$ref": "#/components/schemas/Integer" },
          "DisplayName": { "$ref": "#/components/schemas/String" },
          "DomainJoinInfo": { "$ref": "#/components/schemas/DomainJoinInfo" },
          "EnableDefaultInternetAccess": { "$ref": "#/components/schemas/BooleanObject" },
          "FleetErrors": { "$ref": "#/components/schemas/FleetErrors" },
          "FleetType": { "$ref": "#/components/schemas/FleetType" },
          "IdleDisconnectTimeoutInSeconds": { "$ref": "#/components/schemas/Integer" },
          "ImageArn": { "$ref": "#/components/schemas/Arn" },
          "ImageName": { "$ref": "#/components/schemas/String" },
          "InstanceType": { "$ref": "#/components/schemas/String" },
          "MaxUserDurationInSeconds": { "$ref": "#/components/schemas/Integer" },
          "Name": { "$ref": "#/components/schemas/String" },
          "State": { "$ref": "#/components/schemas/FleetState" },
          "VpcConfig": { "$ref": "#/components/schemas/VpcConfig" }
        },
        "required": ["Arn", "Name", "InstanceType", "ComputeCapacityStatus", "State"],
        "type": "object"
      },
      "FleetAttribute": {
        "description": "The fleet attribute.",
        "enum": ["VPC_CONFIGURATION", "VPC_CONFIGURATION_SECURITY_GROUP_IDS", "DOMAIN_JOIN_INFO"],
        "type": "string"
      },
      "FleetAttributes": {
        "description": "The fleet attributes.",
        "items": { "$ref": "#/components/schemas/FleetAttribute" },
        "type": "array"
      },
      "FleetError": {
        "description": "Describes a fleet error.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/FleetErrorCode" },
          "ErrorMessage": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "FleetErrorCode": {
        "enum": [
          "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION",
          "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION",
          "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION",
          "NETWORK_INTERFACE_LIMIT_EXCEEDED",
          "INTERNAL_SERVICE_ERROR",
          "IAM_SERVICE_ROLE_IS_MISSING",
          "STS_DISABLED_IN_REGION",
          "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES",
          "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION",
          "SUBNET_NOT_FOUND",
          "IMAGE_NOT_FOUND",
          "INVALID_SUBNET_CONFIGURATION",
          "SECURITY_GROUPS_NOT_FOUND",
          "IGW_NOT_ATTACHED",
          "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION",
          "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND",
          "DOMAIN_JOIN_ERROR_ACCESS_DENIED",
          "DOMAIN_JOIN_ERROR_LOGON_FAILURE",
          "DOMAIN_JOIN_ERROR_INVALID_PARAMETER",
          "DOMAIN_JOIN_ERROR_MORE_DATA",
          "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN",
          "DOMAIN_JOIN_ERROR_NOT_SUPPORTED",
          "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME",
          "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED",
          "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED",
          "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED",
          "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"
        ],
        "type": "string"
      },
      "FleetErrors": { "items": { "$ref": "#/components/schemas/FleetError" }, "type": "array" },
      "FleetList": { "description": "The fleets.", "items": { "$ref": "#/components/schemas/Fleet" }, "type": "array" },
      "FleetState": { "enum": ["STARTING", "RUNNING", "STOPPING", "STOPPED"], "type": "string" },
      "FleetType": { "enum": ["ALWAYS_ON", "ON_DEMAND"], "type": "string" },
      "Image": {
        "description": "Describes an image.",
        "properties": {
          "Applications": { "$ref": "#/components/schemas/Applications" },
          "AppstreamAgentVersion": { "$ref": "#/components/schemas/AppstreamAgentVersion" },
          "Arn": { "$ref": "#/components/schemas/Arn" },
          "BaseImageArn": { "$ref": "#/components/schemas/Arn" },
          "CreatedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/String" },
          "DisplayName": { "$ref": "#/components/schemas/String" },
          "ImageBuilderName": { "$ref": "#/components/schemas/String" },
          "ImageBuilderSupported": { "$ref": "#/components/schemas/Boolean" },
          "ImagePermissions": { "$ref": "#/components/schemas/ImagePermissions" },
          "Name": { "$ref": "#/components/schemas/String" },
          "Platform": { "$ref": "#/components/schemas/PlatformType" },
          "PublicBaseImageReleasedDate": { "$ref": "#/components/schemas/Timestamp" },
          "State": { "$ref": "#/components/schemas/ImageState" },
          "StateChangeReason": { "$ref": "#/components/schemas/ImageStateChangeReason" },
          "Visibility": { "$ref": "#/components/schemas/VisibilityType" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "ImageBuilder": {
        "description": "Describes a virtual machine that is used to create an image. ",
        "properties": {
          "AccessEndpoints": { "$ref": "#/components/schemas/AccessEndpointList" },
          "AppstreamAgentVersion": { "$ref": "#/components/schemas/AppstreamAgentVersion" },
          "Arn": { "$ref": "#/components/schemas/Arn" },
          "CreatedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/String" },
          "DisplayName": { "$ref": "#/components/schemas/String" },
          "DomainJoinInfo": { "$ref": "#/components/schemas/DomainJoinInfo" },
          "EnableDefaultInternetAccess": { "$ref": "#/components/schemas/BooleanObject" },
          "ImageArn": { "$ref": "#/components/schemas/Arn" },
          "ImageBuilderErrors": { "$ref": "#/components/schemas/ResourceErrors" },
          "InstanceType": { "$ref": "#/components/schemas/String" },
          "Name": { "$ref": "#/components/schemas/String" },
          "NetworkAccessConfiguration": { "$ref": "#/components/schemas/NetworkAccessConfiguration" },
          "Platform": { "$ref": "#/components/schemas/PlatformType" },
          "State": { "$ref": "#/components/schemas/ImageBuilderState" },
          "StateChangeReason": { "$ref": "#/components/schemas/ImageBuilderStateChangeReason" },
          "VpcConfig": { "$ref": "#/components/schemas/VpcConfig" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "ImageBuilderList": { "items": { "$ref": "#/components/schemas/ImageBuilder" }, "type": "array" },
      "ImageBuilderState": {
        "enum": [
          "PENDING",
          "UPDATING_AGENT",
          "RUNNING",
          "STOPPING",
          "STOPPED",
          "REBOOTING",
          "SNAPSHOTTING",
          "DELETING",
          "FAILED"
        ],
        "type": "string"
      },
      "ImageBuilderStateChangeReason": {
        "description": "Describes the reason why the last image builder state change occurred.",
        "properties": {
          "Code": { "$ref": "#/components/schemas/ImageBuilderStateChangeReasonCode" },
          "Message": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ImageBuilderStateChangeReasonCode": { "enum": ["INTERNAL_ERROR", "IMAGE_UNAVAILABLE"], "type": "string" },
      "ImageList": { "items": { "$ref": "#/components/schemas/Image" }, "type": "array" },
      "ImagePermissions": {
        "description": "Describes the permissions for an image. ",
        "properties": {
          "allowFleet": { "$ref": "#/components/schemas/BooleanObject" },
          "allowImageBuilder": { "$ref": "#/components/schemas/BooleanObject" }
        },
        "type": "object"
      },
      "ImageState": { "enum": ["PENDING", "AVAILABLE", "FAILED", "COPYING", "DELETING"], "type": "string" },
      "ImageStateChangeReason": {
        "description": "Describes the reason why the last image state change occurred.",
        "properties": {
          "Code": { "$ref": "#/components/schemas/ImageStateChangeReasonCode" },
          "Message": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ImageStateChangeReasonCode": {
        "enum": ["INTERNAL_ERROR", "IMAGE_BUILDER_NOT_AVAILABLE", "IMAGE_COPY_FAILURE"],
        "type": "string"
      },
      "IncompatibleImageException": {},
      "Integer": { "type": "integer" },
      "InvalidAccountStatusException": {},
      "InvalidParameterCombinationException": {},
      "InvalidRoleException": {},
      "LastReportGenerationExecutionError": {
        "description": "Describes the error that is returned when a usage report can't be generated.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/UsageReportExecutionErrorCode" },
          "ErrorMessage": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "LastReportGenerationExecutionErrors": {
        "items": { "$ref": "#/components/schemas/LastReportGenerationExecutionError" },
        "type": "array"
      },
      "LimitExceededException": {},
      "ListAssociatedFleetsRequest": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/String" },
          "StackName": { "$ref": "#/components/schemas/String" }
        },
        "required": ["StackName"],
        "type": "object"
      },
      "ListAssociatedFleetsResult": {
        "properties": {
          "Names": { "$ref": "#/components/schemas/StringList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ListAssociatedStacksRequest": {
        "properties": {
          "FleetName": { "$ref": "#/components/schemas/String" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "required": ["FleetName"],
        "type": "object"
      },
      "ListAssociatedStacksResult": {
        "properties": {
          "Names": { "$ref": "#/components/schemas/StringList" },
          "NextToken": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "ListTagsForResourceRequest": {
        "properties": { "ResourceArn": { "$ref": "#/components/schemas/Arn" } },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "ListTagsForResourceResponse": {
        "properties": { "Tags": { "$ref": "#/components/schemas/Tags" } },
        "type": "object"
      },
      "Long": { "type": "integer" },
      "MaxResults": { "maximum": 500, "minimum": 0, "type": "integer" },
      "MessageAction": { "enum": ["SUPPRESS", "RESEND"], "type": "string" },
      "Metadata": { "additionalProperties": { "$ref": "#/components/schemas/String" }, "type": "object" },
      "Name": { "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,100}$", "type": "string" },
      "NetworkAccessConfiguration": {
        "description": "Describes the network details of the fleet or image builder instance.",
        "properties": {
          "EniId": { "$ref": "#/components/schemas/String" },
          "EniPrivateIpAddress": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "OperationNotPermittedException": {},
      "OrganizationalUnitDistinguishedName": { "maxLength": 2000, "type": "string" },
      "OrganizationalUnitDistinguishedNamesList": {
        "items": { "$ref": "#/components/schemas/OrganizationalUnitDistinguishedName" },
        "type": "array"
      },
      "Permission": { "enum": ["ENABLED", "DISABLED"], "type": "string" },
      "PlatformType": { "enum": ["WINDOWS", "WINDOWS_SERVER_2016", "WINDOWS_SERVER_2019"], "type": "string" },
      "RedirectURL": { "maxLength": 1000, "type": "string" },
      "RegionName": { "maxLength": 32, "minLength": 1, "type": "string" },
      "ResourceAlreadyExistsException": {},
      "ResourceError": {
        "description": "Describes a resource error.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/FleetErrorCode" },
          "ErrorMessage": { "$ref": "#/components/schemas/String" },
          "ErrorTimestamp": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "ResourceErrors": { "items": { "$ref": "#/components/schemas/ResourceError" }, "type": "array" },
      "ResourceIdentifier": { "description": "The ARN of the resource.", "minLength": 1, "type": "string" },
      "ResourceInUseException": {},
      "ResourceNotAvailableException": {},
      "ResourceNotFoundException": {},
      "SecurityGroupIdList": {
        "description": "The security group identifiers.",
        "items": { "$ref": "#/components/schemas/String" },
        "maxItems": 5,
        "type": "array"
      },
      "ServiceAccountCredentials": {
        "description": "Describes the credentials for the service account used by the fleet or image builder to connect to the directory.",
        "properties": {
          "AccountName": { "$ref": "#/components/schemas/AccountName" },
          "AccountPassword": { "$ref": "#/components/schemas/AccountPassword" }
        },
        "required": ["AccountName", "AccountPassword"],
        "type": "object"
      },
      "Session": {
        "description": "Describes a streaming session.",
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "ConnectionState": { "$ref": "#/components/schemas/SessionConnectionState" },
          "FleetName": { "$ref": "#/components/schemas/String" },
          "Id": { "$ref": "#/components/schemas/String" },
          "MaxExpirationTime": { "$ref": "#/components/schemas/Timestamp" },
          "NetworkAccessConfiguration": { "$ref": "#/components/schemas/NetworkAccessConfiguration" },
          "StackName": { "$ref": "#/components/schemas/String" },
          "StartTime": { "$ref": "#/components/schemas/Timestamp" },
          "State": { "$ref": "#/components/schemas/SessionState" },
          "UserId": { "$ref": "#/components/schemas/UserId" }
        },
        "required": ["Id", "UserId", "StackName", "FleetName", "State"],
        "type": "object"
      },
      "SessionConnectionState": { "enum": ["CONNECTED", "NOT_CONNECTED"], "type": "string" },
      "SessionList": {
        "description": "List of sessions.",
        "items": { "$ref": "#/components/schemas/Session" },
        "type": "array"
      },
      "SessionState": {
        "description": "Possible values for the state of a streaming session.",
        "enum": ["ACTIVE", "PENDING", "EXPIRED"],
        "type": "string"
      },
      "SettingsGroup": { "maxLength": 100, "type": "string" },
      "SharedImagePermissions": {
        "description": "Describes the permissions that are available to the specified AWS account for a shared image.",
        "properties": {
          "imagePermissions": { "$ref": "#/components/schemas/ImagePermissions" },
          "sharedAccountId": { "$ref": "#/components/schemas/AwsAccountId" }
        },
        "required": ["sharedAccountId", "imagePermissions"],
        "type": "object"
      },
      "SharedImagePermissionsList": {
        "items": { "$ref": "#/components/schemas/SharedImagePermissions" },
        "type": "array"
      },
      "Stack": {
        "description": "Describes a stack.",
        "properties": {
          "AccessEndpoints": { "$ref": "#/components/schemas/AccessEndpointList" },
          "ApplicationSettings": { "$ref": "#/components/schemas/ApplicationSettingsResponse" },
          "Arn": { "$ref": "#/components/schemas/Arn" },
          "CreatedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Description": { "$ref": "#/components/schemas/String" },
          "DisplayName": { "$ref": "#/components/schemas/String" },
          "FeedbackURL": { "$ref": "#/components/schemas/FeedbackURL" },
          "Name": { "$ref": "#/components/schemas/String" },
          "RedirectURL": { "$ref": "#/components/schemas/RedirectURL" },
          "StackErrors": { "$ref": "#/components/schemas/StackErrors" },
          "StorageConnectors": { "$ref": "#/components/schemas/StorageConnectorList" },
          "UserSettings": { "$ref": "#/components/schemas/UserSettingList" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "StackAttribute": {
        "enum": [
          "STORAGE_CONNECTORS",
          "STORAGE_CONNECTOR_HOMEFOLDERS",
          "STORAGE_CONNECTOR_GOOGLE_DRIVE",
          "STORAGE_CONNECTOR_ONE_DRIVE",
          "REDIRECT_URL",
          "FEEDBACK_URL",
          "THEME_NAME",
          "USER_SETTINGS",
          "ACCESS_ENDPOINTS"
        ],
        "type": "string"
      },
      "StackAttributes": { "items": { "$ref": "#/components/schemas/StackAttribute" }, "type": "array" },
      "StackError": {
        "description": "Describes a stack error.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/StackErrorCode" },
          "ErrorMessage": { "$ref": "#/components/schemas/String" }
        },
        "type": "object"
      },
      "StackErrorCode": { "enum": ["STORAGE_CONNECTOR_ERROR", "INTERNAL_SERVICE_ERROR"], "type": "string" },
      "StackErrors": {
        "description": "The stack errors.",
        "items": { "$ref": "#/components/schemas/StackError" },
        "type": "array"
      },
      "StackList": { "description": "The stacks.", "items": { "$ref": "#/components/schemas/Stack" }, "type": "array" },
      "StartFleetRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/String" } },
        "required": ["Name"],
        "type": "object"
      },
      "StartFleetResult": { "properties": {}, "type": "object" },
      "StartImageBuilderRequest": {
        "properties": {
          "AppstreamAgentVersion": { "$ref": "#/components/schemas/AppstreamAgentVersion" },
          "Name": { "$ref": "#/components/schemas/String" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "StartImageBuilderResult": {
        "properties": { "ImageBuilder": { "$ref": "#/components/schemas/ImageBuilder" } },
        "type": "object"
      },
      "StopFleetRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/String" } },
        "required": ["Name"],
        "type": "object"
      },
      "StopFleetResult": { "properties": {}, "type": "object" },
      "StopImageBuilderRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/String" } },
        "required": ["Name"],
        "type": "object"
      },
      "StopImageBuilderResult": {
        "properties": { "ImageBuilder": { "$ref": "#/components/schemas/ImageBuilder" } },
        "type": "object"
      },
      "StorageConnector": {
        "description": "Describes a connector that enables persistent storage for users.",
        "properties": {
          "ConnectorType": { "$ref": "#/components/schemas/StorageConnectorType" },
          "Domains": { "$ref": "#/components/schemas/DomainList" },
          "ResourceIdentifier": { "$ref": "#/components/schemas/ResourceIdentifier" }
        },
        "required": ["ConnectorType"],
        "type": "object"
      },
      "StorageConnectorList": {
        "description": "The storage connectors.",
        "items": { "$ref": "#/components/schemas/StorageConnector" },
        "type": "array"
      },
      "StorageConnectorType": {
        "description": "The type of storage connector.",
        "enum": ["HOMEFOLDERS", "GOOGLE_DRIVE", "ONE_DRIVE"],
        "type": "string"
      },
      "StreamingUrlUserId": { "maxLength": 32, "minLength": 2, "pattern": "[\\w+=,.@-]*", "type": "string" },
      "String": { "minLength": 1, "type": "string" },
      "StringList": { "items": { "$ref": "#/components/schemas/String" }, "type": "array" },
      "SubnetIdList": {
        "description": "The subnet identifiers.",
        "items": { "$ref": "#/components/schemas/String" },
        "type": "array"
      },
      "TagKey": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "^(^(?!aws:).[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "type": "string"
      },
      "TagKeyList": {
        "items": { "$ref": "#/components/schemas/TagKey" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "TagResourceRequest": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/Arn" },
          "Tags": { "$ref": "#/components/schemas/Tags" }
        },
        "required": ["ResourceArn", "Tags"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValue": {
        "maxLength": 256,
        "minLength": 0,
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "type": "string"
      },
      "Tags": {
        "additionalProperties": { "$ref": "#/components/schemas/TagValue" },
        "maxProperties": 50,
        "minProperties": 1,
        "type": "object"
      },
      "Timestamp": { "format": "date-time", "type": "string" },
      "UntagResourceRequest": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/Arn" },
          "TagKeys": { "$ref": "#/components/schemas/TagKeyList" }
        },
        "required": ["ResourceArn", "TagKeys"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UpdateDirectoryConfigRequest": {
        "properties": {
          "DirectoryName": { "$ref": "#/components/schemas/DirectoryName" },
          "OrganizationalUnitDistinguishedNames": {
            "$ref": "#/components/schemas/OrganizationalUnitDistinguishedNamesList"
          },
          "ServiceAccountCredentials": { "$ref": "#/components/schemas/ServiceAccountCredentials" }
        },
        "required": ["DirectoryName"],
        "type": "object"
      },
      "UpdateDirectoryConfigResult": {
        "properties": { "DirectoryConfig": { "$ref": "#/components/schemas/DirectoryConfig" } },
        "type": "object"
      },
      "UpdateFleetRequest": {
        "properties": {
          "AttributesToDelete": { "$ref": "#/components/schemas/FleetAttributes" },
          "ComputeCapacity": { "$ref": "#/components/schemas/ComputeCapacity" },
          "DeleteVpcConfig": { "$ref": "#/components/schemas/Boolean" },
          "Description": { "$ref": "#/components/schemas/Description" },
          "DisconnectTimeoutInSeconds": { "$ref": "#/components/schemas/Integer" },
          "DisplayName": { "$ref": "#/components/schemas/DisplayName" },
          "DomainJoinInfo": { "$ref": "#/components/schemas/DomainJoinInfo" },
          "EnableDefaultInternetAccess": { "$ref": "#/components/schemas/BooleanObject" },
          "IdleDisconnectTimeoutInSeconds": { "$ref": "#/components/schemas/Integer" },
          "ImageArn": { "$ref": "#/components/schemas/Arn" },
          "ImageName": { "$ref": "#/components/schemas/String" },
          "InstanceType": { "$ref": "#/components/schemas/String" },
          "MaxUserDurationInSeconds": { "$ref": "#/components/schemas/Integer" },
          "Name": { "$ref": "#/components/schemas/String" },
          "VpcConfig": { "$ref": "#/components/schemas/VpcConfig" }
        },
        "type": "object"
      },
      "UpdateFleetResult": { "properties": { "Fleet": { "$ref": "#/components/schemas/Fleet" } }, "type": "object" },
      "UpdateImagePermissionsRequest": {
        "properties": {
          "ImagePermissions": { "$ref": "#/components/schemas/ImagePermissions" },
          "Name": { "$ref": "#/components/schemas/Name" },
          "SharedAccountId": { "$ref": "#/components/schemas/AwsAccountId" }
        },
        "required": ["Name", "SharedAccountId", "ImagePermissions"],
        "type": "object"
      },
      "UpdateImagePermissionsResult": { "properties": {}, "type": "object" },
      "UpdateStackRequest": {
        "properties": {
          "AccessEndpoints": { "$ref": "#/components/schemas/AccessEndpointList" },
          "ApplicationSettings": { "$ref": "#/components/schemas/ApplicationSettings" },
          "AttributesToDelete": { "$ref": "#/components/schemas/StackAttributes" },
          "DeleteStorageConnectors": { "$ref": "#/components/schemas/Boolean" },
          "Description": { "$ref": "#/components/schemas/Description" },
          "DisplayName": { "$ref": "#/components/schemas/DisplayName" },
          "FeedbackURL": { "$ref": "#/components/schemas/FeedbackURL" },
          "Name": { "$ref": "#/components/schemas/String" },
          "RedirectURL": { "$ref": "#/components/schemas/RedirectURL" },
          "StorageConnectors": { "$ref": "#/components/schemas/StorageConnectorList" },
          "UserSettings": { "$ref": "#/components/schemas/UserSettingList" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "UpdateStackResult": { "properties": { "Stack": { "$ref": "#/components/schemas/Stack" } }, "type": "object" },
      "UsageReportExecutionErrorCode": {
        "enum": ["RESOURCE_NOT_FOUND", "ACCESS_DENIED", "INTERNAL_SERVICE_ERROR"],
        "type": "string"
      },
      "UsageReportSchedule": { "enum": ["DAILY"], "type": "string" },
      "UsageReportSubscription": {
        "description": "Describes information about the usage report subscription.",
        "properties": {
          "LastGeneratedReportDate": { "$ref": "#/components/schemas/Timestamp" },
          "S3BucketName": { "$ref": "#/components/schemas/String" },
          "Schedule": { "$ref": "#/components/schemas/UsageReportSchedule" },
          "SubscriptionErrors": { "$ref": "#/components/schemas/LastReportGenerationExecutionErrors" }
        },
        "type": "object"
      },
      "UsageReportSubscriptionList": {
        "items": { "$ref": "#/components/schemas/UsageReportSubscription" },
        "type": "array"
      },
      "User": {
        "description": "Describes a user in the user pool.",
        "properties": {
          "Arn": { "$ref": "#/components/schemas/Arn" },
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "CreatedTime": { "$ref": "#/components/schemas/Timestamp" },
          "Enabled": { "$ref": "#/components/schemas/Boolean" },
          "FirstName": { "$ref": "#/components/schemas/UserAttributeValue" },
          "LastName": { "$ref": "#/components/schemas/UserAttributeValue" },
          "Status": { "$ref": "#/components/schemas/String" },
          "UserName": { "$ref": "#/components/schemas/Username" }
        },
        "required": ["AuthenticationType"],
        "type": "object"
      },
      "UserAttributeValue": {
        "format": "password",
        "maxLength": 2048,
        "pattern": "^[A-Za-z0-9_\\-\\s]+$",
        "type": "string"
      },
      "UserId": { "maxLength": 32, "minLength": 2, "type": "string" },
      "UserList": { "items": { "$ref": "#/components/schemas/User" }, "type": "array" },
      "UserSetting": {
        "description": "Describes an action and whether the action is enabled or disabled for users during their streaming sessions.",
        "properties": {
          "Action": { "$ref": "#/components/schemas/Action" },
          "Permission": { "$ref": "#/components/schemas/Permission" }
        },
        "required": ["Action", "Permission"],
        "type": "object"
      },
      "UserSettingList": { "items": { "$ref": "#/components/schemas/UserSetting" }, "minItems": 1, "type": "array" },
      "UserStackAssociation": {
        "description": "Describes a user in the user pool and the associated stack.",
        "properties": {
          "AuthenticationType": { "$ref": "#/components/schemas/AuthenticationType" },
          "SendEmailNotification": { "$ref": "#/components/schemas/Boolean" },
          "StackName": { "$ref": "#/components/schemas/String" },
          "UserName": { "$ref": "#/components/schemas/Username" }
        },
        "required": ["StackName", "UserName", "AuthenticationType"],
        "type": "object"
      },
      "UserStackAssociationError": {
        "description": "Describes the error that is returned when a user can’t be associated with or disassociated from a stack. ",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/UserStackAssociationErrorCode" },
          "ErrorMessage": { "$ref": "#/components/schemas/String" },
          "UserStackAssociation": { "$ref": "#/components/schemas/UserStackAssociation" }
        },
        "type": "object"
      },
      "UserStackAssociationErrorCode": {
        "enum": ["STACK_NOT_FOUND", "USER_NAME_NOT_FOUND", "INTERNAL_ERROR"],
        "type": "string"
      },
      "UserStackAssociationErrorList": {
        "items": { "$ref": "#/components/schemas/UserStackAssociationError" },
        "type": "array"
      },
      "UserStackAssociationList": {
        "items": { "$ref": "#/components/schemas/UserStackAssociation" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "Username": {
        "format": "password",
        "maxLength": 128,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "VisibilityType": { "enum": ["PUBLIC", "PRIVATE", "SHARED"], "type": "string" },
      "VpcConfig": {
        "description": "Describes VPC configuration information for fleets and image builders.",
        "properties": {
          "SecurityGroupIds": { "$ref": "#/components/schemas/SecurityGroupIdList" },
          "SubnetIds": { "$ref": "#/components/schemas/SubnetIdList" }
        },
        "type": "object"
      }
    }
  }
}
