{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "\n               <p>The operations for managing an Amazon MSK cluster.</p>\n            ",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Managed Streaming for Kafka",
    "version": "2018-11-14",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kafka-2018-11-14.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "kafka"
  },
  "externalDocs": { "description": "Amazon Web Services documentation", "url": "https://docs.aws.amazon.com/kafka/" },
  "security": [{ "hmac": [] }],
  "paths": {
    "/v1/clusters": {
      "get": {
        "description": "\n            <p>Returns a list of all the MSK clusters in the current Region.</p>\n         ",
        "operationId": "ListClusters",
        "parameters": [
          {
            "description": "\n            <p>Specify a prefix of the name of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>\n         ",
            "in": "query",
            "name": "clusterNameFilter",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "\n            <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>\n         ",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "\n            <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. \n            To get the next batch, provide this token in your next request.</p>\n         ",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListClustersResponse" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "\n            <p>Creates a new MSK cluster.</p>\n         ",
        "operationId": "CreateCluster",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "brokerNodeGroupInfo": {
                    "description": "\n            <p>Describes the setup to be used for Kafka broker nodes in the cluster.</p>\n         ",
                    "properties": {
                      "BrokerAZDistribution": { "$ref": "#/components/schemas/BrokerAZDistribution" },
                      "ClientSubnets": { "$ref": "#/components/schemas/__listOf__string" },
                      "InstanceType": { "$ref": "#/components/schemas/__stringMin5Max32" },
                      "SecurityGroups": { "$ref": "#/components/schemas/__listOf__string" },
                      "StorageInfo": { "$ref": "#/components/schemas/StorageInfo" }
                    },
                    "type": "object"
                  },
                  "clientAuthentication": {
                    "description": "\n            <p>Includes all client authentication information.</p>\n         ",
                    "properties": { "Tls": { "$ref": "#/components/schemas/Tls" } },
                    "type": "object"
                  },
                  "clusterName": {
                    "description": "\n            <p>The name of the cluster.</p>\n         ",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string"
                  },
                  "configurationInfo": {
                    "description": "\n            <p>Specifies the configuration to use for the brokers.</p>\n         ",
                    "properties": {
                      "Arn": { "$ref": "#/components/schemas/__string" },
                      "Revision": { "$ref": "#/components/schemas/__long" }
                    },
                    "type": "object"
                  },
                  "encryptionInfo": {
                    "description": "\n            <p>Includes encryption-related information, such as the AWS KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.</p>\n         ",
                    "properties": {
                      "EncryptionAtRest": { "$ref": "#/components/schemas/EncryptionAtRest" },
                      "EncryptionInTransit": { "$ref": "#/components/schemas/EncryptionInTransit" }
                    },
                    "type": "object"
                  },
                  "enhancedMonitoring": {
                    "description": "\n            <p>Specifies which metrics are gathered for the MSK cluster. This property has three possible values: DEFAULT, PER_BROKER, and PER_TOPIC_PER_BROKER. For a list of the metrics associated with each of these three levels of monitoring, see <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html\">Monitoring</a>.</p>\n         ",
                    "enum": ["DEFAULT", "PER_BROKER", "PER_TOPIC_PER_BROKER"],
                    "type": "string"
                  },
                  "kafkaVersion": {
                    "description": "\n            <p>The version of Apache Kafka.</p>\n         ",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                  },
                  "numberOfBrokerNodes": {
                    "description": "\n            <p>The number of broker nodes in the cluster.</p>\n         ",
                    "maximum": 15,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "tags": {
                    "additionalProperties": { "$ref": "#/components/schemas/__string" },
                    "description": "\n            <p>Create tags when creating the cluster.</p>\n         ",
                    "type": "object"
                  }
                },
                "required": [
                  "brokerNodeGroupInfo",
                  "clusterName",
                  "configurationInfo",
                  "kafkaVersion",
                  "numberOfBrokerNodes"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateClusterResponse" } } }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "486": {
            "description": "ConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConflictException" } } }
          }
        }
      }
    },
    "/v1/clusters/{clusterArn}": {
      "delete": {
        "description": "\n            <p>Deletes the MSK cluster specified by the Amazon Resource Name (ARN) in the request.</p>\n         ",
        "operationId": "DeleteCluster",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>\n         ",
            "in": "path",
            "name": "clusterArn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "\n            <p>The current version of the MSK cluster.</p>\n         ",
            "in": "query",
            "name": "currentVersion",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteClusterResponse" } } }
          },
          "480": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      },
      "get": {
        "description": "\n            <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>\n         ",
        "operationId": "DescribeCluster",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>\n         ",
            "in": "path",
            "name": "clusterArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeClusterResponse" } } }
          },
          "480": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v1/clusters/{clusterArn}/bootstrap-brokers": {
      "get": {
        "description": "\n            <p>A list of brokers that a client application can use to bootstrap.</p>\n         ",
        "operationId": "GetBootstrapBrokers",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>\n         ",
            "in": "path",
            "name": "clusterArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetBootstrapBrokersResponse" } }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "483": {
            "description": "ConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConflictException" } } }
          },
          "484": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v1/clusters/{clusterArn}/configuration": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "\n            <p>Updates the cluster with the configuration that is specified in the request body.</p>\n         ",
        "operationId": "UpdateClusterConfiguration",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>\n         ",
            "in": "path",
            "name": "clusterArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "configurationInfo": {
                    "description": "\n            <p>Specifies the configuration to use for the brokers.</p>\n         ",
                    "properties": {
                      "Arn": { "$ref": "#/components/schemas/__string" },
                      "Revision": { "$ref": "#/components/schemas/__long" }
                    },
                    "type": "object"
                  },
                  "currentVersion": {
                    "description": "\n            <p>The version of the cluster that needs to be updated.</p>\n         ",
                    "type": "string"
                  }
                },
                "required": ["configurationInfo", "currentVersion"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateClusterConfigurationResponse" } }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "484": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      }
    },
    "/v1/clusters/{clusterArn}/nodes": {
      "get": {
        "description": "\n            <p>Returns a list of the broker nodes in the cluster.</p>\n         ",
        "operationId": "ListNodes",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>\n         ",
            "in": "path",
            "name": "clusterArn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "\n            <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>\n         ",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "\n            <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. \n            To get the next batch, provide this token in your next request.</p>\n         ",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListNodesResponse" } } }
          },
          "480": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v1/clusters/{clusterArn}/nodes/storage": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "\n            <p>Updates the EBS storage associated with MSK brokers.</p>\n         ",
        "operationId": "UpdateBrokerStorage",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>\n         ",
            "in": "path",
            "name": "clusterArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "currentVersion": {
                    "description": "\n            <p>The version of cluster to update from. A successful operation will then generate a new version.</p>\n         ",
                    "type": "string"
                  },
                  "targetBrokerEBSVolumeInfo": {
                    "description": "\n            <p>Describes the target volume size and the ID of the broker to apply the update to.</p>\n         ",
                    "items": { "$ref": "#/components/schemas/BrokerEBSVolumeInfo" },
                    "type": "array"
                  }
                },
                "required": ["currentVersion", "targetBrokerEBSVolumeInfo"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateBrokerStorageResponse" } }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      }
    },
    "/v1/clusters/{clusterArn}/operations": {
      "get": {
        "description": "\n            <p>Returns a list of all the operations that have been performed on the specified MSK cluster.</p>\n         ",
        "operationId": "ListClusterOperations",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>\n         ",
            "in": "path",
            "name": "clusterArn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "\n            <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>\n         ",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "\n            <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. \n            To get the next batch, provide this token in your next request.</p>\n         ",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListClusterOperationsResponse" } }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v1/configurations": {
      "get": {
        "description": "\n            <p>Returns a list of all the MSK configurations in this Region.</p>\n         ",
        "operationId": "ListConfigurations",
        "parameters": [
          {
            "description": "\n            <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>\n         ",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "\n            <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. \n            To get the next batch, provide this token in your next request.</p>\n         ",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListConfigurationsResponse" } }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "\n            <p>Creates a new MSK configuration.</p>\n         ",
        "operationId": "CreateConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "\n            <p>The description of the configuration.</p>\n         ",
                    "type": "string"
                  },
                  "kafkaVersions": {
                    "description": "\n            <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>\n         ",
                    "items": { "$ref": "#/components/schemas/__string" },
                    "type": "array"
                  },
                  "name": {
                    "description": "\n            <p>The name of the configuration.</p>\n         ",
                    "type": "string"
                  },
                  "serverProperties": {
                    "description": "\n            <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. \n               When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>\n         ",
                    "type": "string"
                  }
                },
                "required": ["kafkaVersions", "name", "serverProperties"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateConfigurationResponse" } }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "486": {
            "description": "ConflictException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConflictException" } } }
          }
        }
      }
    },
    "/v1/configurations/{arn}": {
      "get": {
        "description": "\n            <p>Returns a description of this MSK configuration.</p>\n         ",
        "operationId": "DescribeConfiguration",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>\n         ",
            "in": "path",
            "name": "arn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeConfigurationResponse" } }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "484": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v1/configurations/{arn}/revisions": {
      "get": {
        "description": "\n            <p>Returns a list of all the MSK configurations in this Region.</p>\n         ",
        "operationId": "ListConfigurationRevisions",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>\n         ",
            "in": "path",
            "name": "arn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "\n            <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>\n         ",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "\n            <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. \n            To get the next batch, provide this token in your next request.</p>\n         ",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListConfigurationRevisionsResponse" } }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "484": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v1/configurations/{arn}/revisions/{revision}": {
      "get": {
        "description": "\n            <p>Returns a description of this revision of the configuration.</p>\n         ",
        "operationId": "DescribeConfigurationRevision",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>\n         ",
            "in": "path",
            "name": "arn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "\n            <p>A string that uniquely identifies a revision of an MSK configuration.</p>\n         ",
            "in": "path",
            "name": "revision",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeConfigurationRevisionResponse" } }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          },
          "484": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v1/operations/{clusterOperationArn}": {
      "get": {
        "description": "\n            <p>Returns a description of the cluster operation specified by the ARN.</p>\n         ",
        "operationId": "DescribeClusterOperation",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the MSK cluster operation.</p>\n         ",
            "in": "path",
            "name": "clusterOperationArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeClusterOperationResponse" } }
            }
          },
          "480": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnauthorizedException" } } }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForbiddenException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/v1/tags/{resourceArn}": {
      "get": {
        "description": "\n            <p>Returns a list of the tags associated with the specified resource.</p>\n         ",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>\n         ",
            "in": "path",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "\n            <p>Adds tags to the specified MSK resource.</p>\n         ",
        "operationId": "TagResource",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>\n         ",
            "in": "path",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "additionalProperties": { "$ref": "#/components/schemas/__string" },
                    "description": "\n            <p>The key-value pair for the resource tag.</p>\n         ",
                    "type": "object"
                  }
                },
                "required": ["tags"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Success" },
          "480": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      }
    },
    "/v1/tags/{resourceArn}#tagKeys": {
      "delete": {
        "description": "\n            <p>Removes the tags associated with the keys that are provided in the query.</p>\n         ",
        "operationId": "UntagResource",
        "parameters": [
          {
            "description": "\n            <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>\n         ",
            "in": "path",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "\n            <p>Tag keys must be unique for a given cluster. In addition, the following restrictions apply:</p>\n            <ul>\n               <li>\n                  <p>Each tag key must be unique. If you add a tag with a key that's already in\n                  use, your new tag overwrites the existing key-value pair. </p>\n               </li>\n               <li>\n                  <p>You can't start a tag key with aws: because this prefix is reserved for use\n                  by  AWS.  AWS creates tags that begin with this prefix on your behalf, but\n                  you can't edit or delete them.</p>\n               </li>\n               <li>\n                  <p>Tag keys must be between 1 and 128 Unicode characters in length.</p>\n               </li>\n               <li>\n                  <p>Tag keys must consist of the following characters: Unicode letters, digits,\n                  white space, and the following special characters: _ . / = + -\n                     @.</p>\n               </li>\n            </ul>\n         ",
            "in": "query",
            "name": "tagKeys",
            "required": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "480": {
            "description": "NotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } } }
          },
          "481": {
            "description": "BadRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BadRequestException" } } }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerErrorException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    }
  },
  "servers": [
    {
      "description": "The Kafka multi-region endpoint",
      "url": "http://kafka.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Kafka multi-region endpoint",
      "url": "https://kafka.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Kafka endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://kafka.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Kafka endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://kafka.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "BadRequestException": {},
      "BrokerAZDistribution": {
        "description": "\n            <p>The distribution of broker nodes across Availability Zones. By default, broker nodes are distributed among three Availability Zones. Currently, the only supported value is DEFAULT. You can either specify this value explicitly or leave it out.</p>\n         ",
        "enum": ["DEFAULT"],
        "type": "string"
      },
      "BrokerEBSVolumeInfo": {
        "description": "\n            <p>Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.</p>\n         ",
        "properties": {
          "KafkaBrokerNodeId": { "$ref": "#/components/schemas/__string" },
          "VolumeSizeGB": { "$ref": "#/components/schemas/__integer" }
        },
        "required": ["VolumeSizeGB", "KafkaBrokerNodeId"],
        "type": "object"
      },
      "BrokerNodeGroupInfo": {
        "description": "\n            <p>Describes the setup to be used for Kafka broker nodes in the cluster.</p>\n         ",
        "properties": {
          "BrokerAZDistribution": { "$ref": "#/components/schemas/BrokerAZDistribution" },
          "ClientSubnets": { "$ref": "#/components/schemas/__listOf__string" },
          "InstanceType": { "$ref": "#/components/schemas/__stringMin5Max32" },
          "SecurityGroups": { "$ref": "#/components/schemas/__listOf__string" },
          "StorageInfo": { "$ref": "#/components/schemas/StorageInfo" }
        },
        "required": ["ClientSubnets", "InstanceType"],
        "type": "object"
      },
      "BrokerNodeInfo": {
        "description": "\n            <p>BrokerNodeInfo</p>\n         ",
        "properties": {
          "AttachedENIId": { "$ref": "#/components/schemas/__string" },
          "BrokerId": { "$ref": "#/components/schemas/__double" },
          "ClientSubnet": { "$ref": "#/components/schemas/__string" },
          "ClientVpcIpAddress": { "$ref": "#/components/schemas/__string" },
          "CurrentBrokerSoftwareInfo": { "$ref": "#/components/schemas/BrokerSoftwareInfo" },
          "Endpoints": { "$ref": "#/components/schemas/__listOf__string" }
        },
        "type": "object"
      },
      "BrokerSoftwareInfo": {
        "description": "\n            <p>Information about the current software installed on the cluster.</p>\n         ",
        "properties": {
          "ConfigurationArn": { "$ref": "#/components/schemas/__string" },
          "ConfigurationRevision": { "$ref": "#/components/schemas/__long" },
          "KafkaVersion": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "ClientAuthentication": {
        "description": "\n            <p>Includes all client authentication information.</p>\n         ",
        "properties": { "Tls": { "$ref": "#/components/schemas/Tls" } },
        "type": "object"
      },
      "ClientBroker": {
        "description": "\n            <p>Client-broker encryption in transit setting.</p>\n         ",
        "enum": ["TLS", "TLS_PLAINTEXT", "PLAINTEXT"],
        "type": "string"
      },
      "ClusterInfo": {
        "description": "\n            <p>Returns information about a cluster.</p>\n         ",
        "properties": {
          "ActiveOperationArn": { "$ref": "#/components/schemas/__string" },
          "BrokerNodeGroupInfo": { "$ref": "#/components/schemas/BrokerNodeGroupInfo" },
          "ClientAuthentication": { "$ref": "#/components/schemas/ClientAuthentication" },
          "ClusterArn": { "$ref": "#/components/schemas/__string" },
          "ClusterName": { "$ref": "#/components/schemas/__string" },
          "CreationTime": { "$ref": "#/components/schemas/__timestampIso8601" },
          "CurrentBrokerSoftwareInfo": { "$ref": "#/components/schemas/BrokerSoftwareInfo" },
          "CurrentVersion": { "$ref": "#/components/schemas/__string" },
          "EncryptionInfo": { "$ref": "#/components/schemas/EncryptionInfo" },
          "EnhancedMonitoring": { "$ref": "#/components/schemas/EnhancedMonitoring" },
          "NumberOfBrokerNodes": { "$ref": "#/components/schemas/__integer" },
          "State": { "$ref": "#/components/schemas/ClusterState" },
          "Tags": { "$ref": "#/components/schemas/__mapOf__string" },
          "ZookeeperConnectString": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "ClusterOperationInfo": {
        "description": "\n            <p>Returns information about a cluster operation.</p>\n         ",
        "properties": {
          "ClientRequestId": { "$ref": "#/components/schemas/__string" },
          "ClusterArn": { "$ref": "#/components/schemas/__string" },
          "CreationTime": { "$ref": "#/components/schemas/__timestampIso8601" },
          "EndTime": { "$ref": "#/components/schemas/__timestampIso8601" },
          "ErrorInfo": { "$ref": "#/components/schemas/ErrorInfo" },
          "OperationArn": { "$ref": "#/components/schemas/__string" },
          "OperationState": { "$ref": "#/components/schemas/__string" },
          "OperationType": { "$ref": "#/components/schemas/__string" },
          "SourceClusterInfo": { "$ref": "#/components/schemas/MutableClusterInfo" },
          "TargetClusterInfo": { "$ref": "#/components/schemas/MutableClusterInfo" }
        },
        "type": "object"
      },
      "ClusterState": {
        "description": "\n            <p>The state of a Kafka cluster.</p>\n         ",
        "enum": ["ACTIVE", "CREATING", "UPDATING", "DELETING", "FAILED"],
        "type": "string"
      },
      "Configuration": {
        "description": "\n            <p>Represents an MSK Configuration.</p>\n         ",
        "properties": {
          "Arn": { "$ref": "#/components/schemas/__string" },
          "CreationTime": { "$ref": "#/components/schemas/__timestampIso8601" },
          "Description": { "$ref": "#/components/schemas/__string" },
          "KafkaVersions": { "$ref": "#/components/schemas/__listOf__string" },
          "LatestRevision": { "$ref": "#/components/schemas/ConfigurationRevision" },
          "Name": { "$ref": "#/components/schemas/__string" }
        },
        "required": ["Description", "LatestRevision", "CreationTime", "KafkaVersions", "Arn", "Name"],
        "type": "object"
      },
      "ConfigurationInfo": {
        "description": "\n            <p>Specifies the configuration to use for the brokers.</p>\n         ",
        "properties": {
          "Arn": { "$ref": "#/components/schemas/__string" },
          "Revision": { "$ref": "#/components/schemas/__long" }
        },
        "required": ["Revision", "Arn"],
        "type": "object"
      },
      "ConfigurationRevision": {
        "description": "\n            <p>Describes a configuration revision.</p>\n         ",
        "properties": {
          "CreationTime": { "$ref": "#/components/schemas/__timestampIso8601" },
          "Description": { "$ref": "#/components/schemas/__string" },
          "Revision": { "$ref": "#/components/schemas/__long" }
        },
        "required": ["Revision", "CreationTime"],
        "type": "object"
      },
      "ConflictException": {},
      "CreateClusterRequest": {
        "properties": {
          "BrokerNodeGroupInfo": { "$ref": "#/components/schemas/BrokerNodeGroupInfo" },
          "ClientAuthentication": { "$ref": "#/components/schemas/ClientAuthentication" },
          "ClusterName": { "$ref": "#/components/schemas/__stringMin1Max64" },
          "ConfigurationInfo": { "$ref": "#/components/schemas/ConfigurationInfo" },
          "EncryptionInfo": { "$ref": "#/components/schemas/EncryptionInfo" },
          "EnhancedMonitoring": { "$ref": "#/components/schemas/EnhancedMonitoring" },
          "KafkaVersion": { "$ref": "#/components/schemas/__stringMin1Max128" },
          "NumberOfBrokerNodes": { "$ref": "#/components/schemas/__integerMin1Max15" },
          "Tags": { "$ref": "#/components/schemas/__mapOf__string" }
        },
        "required": ["BrokerNodeGroupInfo", "KafkaVersion", "NumberOfBrokerNodes", "ClusterName"],
        "type": "object"
      },
      "CreateClusterResponse": {
        "properties": {
          "ClusterArn": { "$ref": "#/components/schemas/__string" },
          "ClusterName": { "$ref": "#/components/schemas/__string" },
          "State": { "$ref": "#/components/schemas/ClusterState" }
        },
        "type": "object"
      },
      "CreateConfigurationRequest": {
        "properties": {
          "Description": { "$ref": "#/components/schemas/__string" },
          "KafkaVersions": { "$ref": "#/components/schemas/__listOf__string" },
          "Name": { "$ref": "#/components/schemas/__string" },
          "ServerProperties": { "$ref": "#/components/schemas/__blob" }
        },
        "required": ["ServerProperties", "KafkaVersions", "Name"],
        "type": "object"
      },
      "CreateConfigurationResponse": {
        "properties": {
          "Arn": { "$ref": "#/components/schemas/__string" },
          "CreationTime": { "$ref": "#/components/schemas/__timestampIso8601" },
          "LatestRevision": { "$ref": "#/components/schemas/ConfigurationRevision" },
          "Name": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "DeleteClusterRequest": { "properties": {}, "type": "object" },
      "DeleteClusterResponse": {
        "properties": {
          "ClusterArn": { "$ref": "#/components/schemas/__string" },
          "State": { "$ref": "#/components/schemas/ClusterState" }
        },
        "type": "object"
      },
      "DescribeClusterOperationRequest": { "properties": {}, "type": "object" },
      "DescribeClusterOperationResponse": {
        "properties": { "ClusterOperationInfo": { "$ref": "#/components/schemas/ClusterOperationInfo" } },
        "type": "object"
      },
      "DescribeClusterRequest": { "properties": {}, "type": "object" },
      "DescribeClusterResponse": {
        "properties": { "ClusterInfo": { "$ref": "#/components/schemas/ClusterInfo" } },
        "type": "object"
      },
      "DescribeConfigurationRequest": { "properties": {}, "type": "object" },
      "DescribeConfigurationResponse": {
        "properties": {
          "Arn": { "$ref": "#/components/schemas/__string" },
          "CreationTime": { "$ref": "#/components/schemas/__timestampIso8601" },
          "Description": { "$ref": "#/components/schemas/__string" },
          "KafkaVersions": { "$ref": "#/components/schemas/__listOf__string" },
          "LatestRevision": { "$ref": "#/components/schemas/ConfigurationRevision" },
          "Name": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "DescribeConfigurationRevisionRequest": { "properties": {}, "type": "object" },
      "DescribeConfigurationRevisionResponse": {
        "properties": {
          "Arn": { "$ref": "#/components/schemas/__string" },
          "CreationTime": { "$ref": "#/components/schemas/__timestampIso8601" },
          "Description": { "$ref": "#/components/schemas/__string" },
          "Revision": { "$ref": "#/components/schemas/__long" },
          "ServerProperties": { "$ref": "#/components/schemas/__blob" }
        },
        "type": "object"
      },
      "EBSStorageInfo": {
        "description": "\n            <p>Contains information about the EBS storage volumes attached to Kafka broker nodes.</p>\n         ",
        "properties": { "VolumeSize": { "$ref": "#/components/schemas/__integerMin1Max16384" } },
        "type": "object"
      },
      "EncryptionAtRest": {
        "description": "\n            <p>The data-volume encryption details.</p>\n         ",
        "properties": { "DataVolumeKMSKeyId": { "$ref": "#/components/schemas/__string" } },
        "required": ["DataVolumeKMSKeyId"],
        "type": "object"
      },
      "EncryptionInTransit": {
        "description": "\n            <p>The settings for encrypting data in transit.</p>\n         ",
        "properties": {
          "ClientBroker": { "$ref": "#/components/schemas/ClientBroker" },
          "InCluster": { "$ref": "#/components/schemas/__boolean" }
        },
        "type": "object"
      },
      "EncryptionInfo": {
        "description": "\n            <p>Includes encryption-related information, such as the AWS KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.</p>\n         ",
        "properties": {
          "EncryptionAtRest": { "$ref": "#/components/schemas/EncryptionAtRest" },
          "EncryptionInTransit": { "$ref": "#/components/schemas/EncryptionInTransit" }
        },
        "type": "object"
      },
      "EnhancedMonitoring": {
        "description": "\n            <p>Specifies which metrics are gathered for the MSK cluster. This property has three possible values: DEFAULT, PER_BROKER, and PER_TOPIC_PER_BROKER. For a list of the metrics associated with each of these three levels of monitoring, see <a href=\"https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html\">Monitoring</a>.</p>\n         ",
        "enum": ["DEFAULT", "PER_BROKER", "PER_TOPIC_PER_BROKER"],
        "type": "string"
      },
      "ErrorInfo": {
        "description": "\n            <p>Returns information about an error state of the cluster.</p>\n         ",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/__string" },
          "ErrorString": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "ForbiddenException": {},
      "GetBootstrapBrokersRequest": { "properties": {}, "type": "object" },
      "GetBootstrapBrokersResponse": {
        "properties": {
          "BootstrapBrokerString": { "$ref": "#/components/schemas/__string" },
          "BootstrapBrokerStringTls": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "InternalServerErrorException": {},
      "ListClusterOperationsRequest": { "properties": {}, "type": "object" },
      "ListClusterOperationsResponse": {
        "properties": {
          "ClusterOperationInfoList": { "$ref": "#/components/schemas/__listOfClusterOperationInfo" },
          "NextToken": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "ListClustersRequest": { "properties": {}, "type": "object" },
      "ListClustersResponse": {
        "properties": {
          "ClusterInfoList": { "$ref": "#/components/schemas/__listOfClusterInfo" },
          "NextToken": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "ListConfigurationRevisionsRequest": { "properties": {}, "type": "object" },
      "ListConfigurationRevisionsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/__string" },
          "Revisions": { "$ref": "#/components/schemas/__listOfConfigurationRevision" }
        },
        "type": "object"
      },
      "ListConfigurationsRequest": { "properties": {}, "type": "object" },
      "ListConfigurationsResponse": {
        "properties": {
          "Configurations": { "$ref": "#/components/schemas/__listOfConfiguration" },
          "NextToken": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "ListNodesRequest": { "properties": {}, "type": "object" },
      "ListNodesResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/__string" },
          "NodeInfoList": { "$ref": "#/components/schemas/__listOfNodeInfo" }
        },
        "type": "object"
      },
      "ListTagsForResourceRequest": { "properties": {}, "type": "object" },
      "ListTagsForResourceResponse": {
        "properties": { "Tags": { "$ref": "#/components/schemas/__mapOf__string" } },
        "type": "object"
      },
      "MaxResults": { "maximum": 100, "minimum": 1, "type": "integer" },
      "MutableClusterInfo": {
        "description": "\n            <p>Information about cluster attributes that can be updated via update APIs.</p>\n         ",
        "properties": {
          "BrokerEBSVolumeInfo": { "$ref": "#/components/schemas/__listOfBrokerEBSVolumeInfo" },
          "ConfigurationInfo": { "$ref": "#/components/schemas/ConfigurationInfo" },
          "NumberOfBrokerNodes": { "$ref": "#/components/schemas/__integer" }
        },
        "type": "object"
      },
      "NodeInfo": {
        "description": "\n            <p>The node information object.</p>\n         ",
        "properties": {
          "AddedToClusterTime": { "$ref": "#/components/schemas/__string" },
          "BrokerNodeInfo": { "$ref": "#/components/schemas/BrokerNodeInfo" },
          "InstanceType": { "$ref": "#/components/schemas/__string" },
          "NodeARN": { "$ref": "#/components/schemas/__string" },
          "NodeType": { "$ref": "#/components/schemas/NodeType" },
          "ZookeeperNodeInfo": { "$ref": "#/components/schemas/ZookeeperNodeInfo" }
        },
        "type": "object"
      },
      "NodeType": {
        "description": "\n            <p>The broker or Zookeeper node.</p>\n         ",
        "enum": ["BROKER"],
        "type": "string"
      },
      "NotFoundException": {},
      "ServiceUnavailableException": {},
      "StorageInfo": {
        "description": "\n            <p>Contains information about storage volumes attached to MSK broker nodes.</p>\n         ",
        "properties": { "EbsStorageInfo": { "$ref": "#/components/schemas/EBSStorageInfo" } },
        "type": "object"
      },
      "TagResourceRequest": {
        "properties": { "Tags": { "$ref": "#/components/schemas/__mapOf__string" } },
        "required": ["Tags"],
        "type": "object"
      },
      "Tls": {
        "description": "\n            <p>Details for client authentication using TLS.</p>\n         ",
        "properties": { "CertificateAuthorityArnList": { "$ref": "#/components/schemas/__listOf__string" } },
        "type": "object"
      },
      "TooManyRequestsException": {},
      "UnauthorizedException": {},
      "UntagResourceRequest": { "properties": {}, "type": "object" },
      "UpdateBrokerStorageRequest": {
        "properties": {
          "CurrentVersion": { "$ref": "#/components/schemas/__string" },
          "TargetBrokerEBSVolumeInfo": { "$ref": "#/components/schemas/__listOfBrokerEBSVolumeInfo" }
        },
        "required": ["TargetBrokerEBSVolumeInfo", "CurrentVersion"],
        "type": "object"
      },
      "UpdateBrokerStorageResponse": {
        "properties": {
          "ClusterArn": { "$ref": "#/components/schemas/__string" },
          "ClusterOperationArn": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "UpdateClusterConfigurationRequest": {
        "properties": {
          "ConfigurationInfo": { "$ref": "#/components/schemas/ConfigurationInfo" },
          "CurrentVersion": { "$ref": "#/components/schemas/__string" }
        },
        "required": ["CurrentVersion", "ConfigurationInfo"],
        "type": "object"
      },
      "UpdateClusterConfigurationResponse": {
        "properties": {
          "ClusterArn": { "$ref": "#/components/schemas/__string" },
          "ClusterOperationArn": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "ZookeeperNodeInfo": {
        "description": "\n            <p>Zookeeper node information.</p>\n         ",
        "properties": {
          "AttachedENIId": { "$ref": "#/components/schemas/__string" },
          "ClientVpcIpAddress": { "$ref": "#/components/schemas/__string" },
          "Endpoints": { "$ref": "#/components/schemas/__listOf__string" },
          "ZookeeperId": { "$ref": "#/components/schemas/__double" },
          "ZookeeperVersion": { "$ref": "#/components/schemas/__string" }
        },
        "type": "object"
      },
      "__blob": { "type": "string" },
      "__boolean": { "type": "boolean" },
      "__double": { "format": "double", "type": "number" },
      "__integer": { "type": "integer" },
      "__integerMin1Max15": { "maximum": 15, "minimum": 1, "type": "integer" },
      "__integerMin1Max16384": { "maximum": 16384, "minimum": 1, "type": "integer" },
      "__listOfBrokerEBSVolumeInfo": {
        "items": { "$ref": "#/components/schemas/BrokerEBSVolumeInfo" },
        "type": "array"
      },
      "__listOfClusterInfo": { "items": { "$ref": "#/components/schemas/ClusterInfo" }, "type": "array" },
      "__listOfClusterOperationInfo": {
        "items": { "$ref": "#/components/schemas/ClusterOperationInfo" },
        "type": "array"
      },
      "__listOfConfiguration": { "items": { "$ref": "#/components/schemas/Configuration" }, "type": "array" },
      "__listOfConfigurationRevision": {
        "items": { "$ref": "#/components/schemas/ConfigurationRevision" },
        "type": "array"
      },
      "__listOfNodeInfo": { "items": { "$ref": "#/components/schemas/NodeInfo" }, "type": "array" },
      "__listOf__string": { "items": { "$ref": "#/components/schemas/__string" }, "type": "array" },
      "__long": { "type": "integer" },
      "__mapOf__string": { "additionalProperties": { "$ref": "#/components/schemas/__string" }, "type": "object" },
      "__string": { "type": "string" },
      "__stringMin1Max128": { "maxLength": 128, "minLength": 1, "type": "string" },
      "__stringMin1Max64": { "maxLength": 64, "minLength": 1, "type": "string" },
      "__stringMin5Max32": { "maxLength": 32, "minLength": 5, "type": "string" },
      "__timestampIso8601": { "format": "date-time", "type": "string" }
    }
  }
}
