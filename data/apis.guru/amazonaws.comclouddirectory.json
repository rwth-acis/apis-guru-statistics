{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon CloudDirectory",
    "version": "2017-01-11",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/clouddirectory-2017-01-11.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "clouddirectory"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/clouddirectory/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/amazonclouddirectory/2017-01-11/batchread#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Performs all the read operations in a batch. ",
        "operationId": "BatchRead",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Operations": {
                    "description": "A list of operations that are part of the batch.",
                    "items": { "$ref": "#/components/schemas/BatchReadOperation" },
                    "type": "array"
                  }
                },
                "required": ["Operations"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchReadResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/batchwrite#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Performs all the write operations in a batch. Either all the operations succeed or none.",
        "operationId": "BatchWrite",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Operations": {
                    "description": "A list of operations that are part of the batch.",
                    "items": { "$ref": "#/components/schemas/BatchWriteOperation" },
                    "type": "array"
                  }
                },
                "required": ["Operations"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchWriteResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "BatchWriteException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchWriteException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/directory#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.",
        "operationId": "DeleteDirectory",
        "parameters": [
          {
            "description": "The ARN of the directory to delete.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDirectoryResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "DirectoryNotDisabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotDisabledException" } }
            }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryDeletedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryDeletedException" } }
            }
          },
          "487": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "488": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/directory/create#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Creates a <a>Directory</a> by copying the published schema into the directory. A directory cannot be created without a schema.</p> <p>You can also quickly create a directory using a managed schema, called the <code>QuickStartSchema</code>. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html\">Managed Schema</a> in the <i>Amazon Cloud Directory Developer Guide</i>.</p>",
        "operationId": "CreateDirectory",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the published schema that will be copied into the data <a>Directory</a>. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Name": {
                    "description": "The name of the <a>Directory</a>. Should be unique per account, per region.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDirectoryResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryAlreadyExistsException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/directory/disable#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.",
        "operationId": "DisableDirectory",
        "parameters": [
          {
            "description": "The ARN of the directory to disable.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DisableDirectoryResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "DirectoryDeletedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryDeletedException" } }
            }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "487": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/directory/enable#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.",
        "operationId": "EnableDirectory",
        "parameters": [
          {
            "description": "The ARN of the directory to enable.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EnableDirectoryResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "DirectoryDeletedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryDeletedException" } }
            }
          },
          "482": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "487": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/directory/get#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves metadata about a directory.",
        "operationId": "GetDirectory",
        "parameters": [
          {
            "description": "The ARN of the directory.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDirectoryResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/directory/list": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists directories created within an account.",
        "operationId": "ListDirectories",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of results to retrieve.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "state": {
                    "description": "The state of the directories in the list. Can be either Enabled, Disabled, or Deleted.",
                    "enum": ["ENABLED", "DISABLED", "DELETED"],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListDirectoriesResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets details of the <a>Facet</a>, such as facet name, attributes, <a>Rule</a>s, or <code>ObjectType</code>. You can call this on all kinds of schema facets -- published, development, or applied.",
        "operationId": "GetFacet",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Facet</a>. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Name": {
                    "description": "The name of the facet to retrieve.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetFacetResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "FacetNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetNotFoundException" } } }
          }
        }
      },
      "put": {
        "description": "<p>Does the following:</p> <ol> <li> <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> </ol>",
        "operationId": "UpdateFacet",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Facet</a>. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "AttributeUpdates": {
                    "description": "List of attributes that need to be updated in a given schema <a>Facet</a>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. ",
                    "items": { "$ref": "#/components/schemas/FacetAttributeUpdate" },
                    "type": "array"
                  },
                  "Name": {
                    "description": "The name of the facet.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  },
                  "ObjectType": {
                    "description": "The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.",
                    "enum": ["NODE", "LEAF_NODE", "POLICY", "INDEX"],
                    "type": "string"
                  }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateFacetResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "InvalidFacetUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFacetUpdateException" } }
            }
          },
          "487": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          },
          "488": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "489": {
            "description": "FacetNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetNotFoundException" } } }
          },
          "490": {
            "description": "InvalidRuleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRuleException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/facet/attributes#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves attributes attached to the facet.",
        "operationId": "ListFacetAttributes",
        "parameters": [
          {
            "description": "The ARN of the schema where the facet resides.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of results to retrieve.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "Name": {
                    "description": "The name of the facet whose attributes will be retrieved.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListFacetAttributesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "FacetNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetNotFoundException" } } }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/facet/create#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Creates a new <a>Facet</a> in a schema. Facet creation is allowed only in development or applied schemas.",
        "operationId": "CreateFacet",
        "parameters": [
          {
            "description": "The schema ARN in which the new <a>Facet</a> will be created. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Attributes": {
                    "description": "The attributes that are associated with the <a>Facet</a>.",
                    "items": { "$ref": "#/components/schemas/FacetAttribute" },
                    "type": "array"
                  },
                  "FacetStyle": {
                    "description": "There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.",
                    "enum": ["STATIC", "DYNAMIC"],
                    "type": "string"
                  },
                  "Name": {
                    "description": "The name of the <a>Facet</a>, which is unique for a given schema.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  },
                  "ObjectType": {
                    "description": "<p>Specifies whether a given object created from this facet is of type node, leaf node, policy or index.</p> <ul> <li> <p>Node: Can have multiple children but one parent.</p> </li> </ul> <ul> <li> <p>Leaf node: Cannot have children but can have multiple parents.</p> </li> </ul> <ul> <li> <p>Policy: Allows you to store a policy document and policy type. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies\">Policies</a>.</p> </li> </ul> <ul> <li> <p>Index: Can be created with the Index API.</p> </li> </ul>",
                    "enum": ["NODE", "LEAF_NODE", "POLICY", "INDEX"],
                    "type": "string"
                  }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateFacetResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "FacetAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FacetAlreadyExistsException" } }
            }
          },
          "488": {
            "description": "InvalidRuleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRuleException" } } }
          },
          "489": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/facet/delete#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.",
        "operationId": "DeleteFacet",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Facet</a>. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Name": {
                    "description": "The name of the facet to delete.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteFacetResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "FacetNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetNotFoundException" } } }
          },
          "488": {
            "description": "FacetInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetInUseException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/facet/list#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the names of facets that exist in a schema.",
        "operationId": "ListFacetNames",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) to retrieve facet names from.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ListFacetNamesBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListFacetNamesResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/index#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Creates an index object. See <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html\">Indexing and search</a> for more information.",
        "operationId": "CreateIndex",
        "parameters": [
          {
            "description": "The ARN of the directory where the index should be created.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "IsUnique": {
                    "description": "Indicates whether the attribute that is being indexed has unique values or not.",
                    "type": "boolean"
                  },
                  "LinkName": {
                    "description": "The name of the link between the parent object and the index object.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "[^\\/\\[\\]\\(\\):\\{\\}#@!?\\s\\\\;]+",
                    "type": "string"
                  },
                  "OrderedIndexedAttributeList": {
                    "description": "Specifies the attributes that should be indexed on. Currently only a single attribute is supported.",
                    "items": { "$ref": "#/components/schemas/AttributeKey" },
                    "type": "array"
                  },
                  "ParentReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["OrderedIndexedAttributeList", "IsUnique"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateIndexResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          },
          "489": {
            "description": "LinkNameAlreadyInUseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LinkNameAlreadyInUseException" } }
            }
          },
          "490": {
            "description": "UnsupportedIndexTypeException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnsupportedIndexTypeException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/index/attach#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Attaches the specified object to the specified index.",
        "operationId": "AttachToIndex",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the directory where the object and index exist.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/AttachToIndexBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttachToIndexResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "InvalidAttachmentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAttachmentException" } }
            }
          },
          "488": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "489": {
            "description": "LinkNameAlreadyInUseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LinkNameAlreadyInUseException" } }
            }
          },
          "490": {
            "description": "IndexedAttributeMissingException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IndexedAttributeMissingException" } }
            }
          },
          "491": {
            "description": "NotIndexException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotIndexException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/index/detach#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Detaches the specified object from the specified index.",
        "operationId": "DetachFromIndex",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the directory the index and object exist in.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/AttachToIndexBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DetachFromIndexResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "ObjectAlreadyDetachedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ObjectAlreadyDetachedException" } }
            }
          },
          "489": {
            "description": "NotIndexException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotIndexException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/index/targets#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists objects attached to the specified index.",
        "operationId": "ListIndex",
        "parameters": [
          {
            "description": "The ARN of the directory that the index exists in.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The consistency level to execute the request at.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "IndexReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  },
                  "MaxResults": {
                    "description": "The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href=\"http://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html\">Amazon Cloud Directory Limits</a>.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "RangesOnIndexedValues": {
                    "description": "Specifies the ranges of indexed values that you want to query.",
                    "items": { "$ref": "#/components/schemas/ObjectAttributeRange" },
                    "type": "array"
                  }
                },
                "required": ["IndexReference"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListIndexResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          },
          "484": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "486": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "487": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "489": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "490": {
            "description": "NotIndexException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotIndexException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Creates an object in a <a>Directory</a>. Additionally attaches the object to a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a collection of <a>Facet</a> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet. ",
        "operationId": "CreateObject",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> in which the object will be created. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "LinkName": {
                    "description": "The name of link that is used to attach this object to a parent.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "[^\\/\\[\\]\\(\\):\\{\\}#@!?\\s\\\\;]+",
                    "type": "string"
                  },
                  "ObjectAttributeList": {
                    "description": "The attribute map whose attribute ARN contains the key and attribute value as the map value.",
                    "items": { "$ref": "#/components/schemas/AttributeKeyAndValue" },
                    "type": "array"
                  },
                  "ParentReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  },
                  "SchemaFacets": {
                    "description": "A list of schema facets to be associated with the object. Do not provide minor version components. See <a>SchemaFacet</a> for details.",
                    "items": { "$ref": "#/components/schemas/SchemaFacet" },
                    "type": "array"
                  }
                },
                "required": ["SchemaFacets"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateObjectResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          },
          "489": {
            "description": "LinkNameAlreadyInUseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LinkNameAlreadyInUseException" } }
            }
          },
          "490": {
            "description": "UnsupportedIndexTypeException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnsupportedIndexTypeException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/attach#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Attaches an existing object to another object. An object can be accessed in two ways:</p> <ol> <li> <p>Using the path</p> </li> <li> <p>Using <code>ObjectIdentifier</code> </p> </li> </ol>",
        "operationId": "AttachObject",
        "parameters": [
          {
            "description": "Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where both objects reside. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ChildReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  },
                  "LinkName": {
                    "description": "The link name with which the child object is attached to the parent.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "[^\\/\\[\\]\\(\\):\\{\\}#@!?\\s\\\\;]+",
                    "type": "string"
                  },
                  "ParentReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["ParentReference", "ChildReference", "LinkName"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttachObjectResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "LinkNameAlreadyInUseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LinkNameAlreadyInUseException" } }
            }
          },
          "489": {
            "description": "InvalidAttachmentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAttachmentException" } }
            }
          },
          "490": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "491": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/attributes#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists all attributes that are associated with an object. ",
        "operationId": "ListObjectAttributes",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where the object resides. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "FacetFilter": {
                    "description": "A facet.",
                    "properties": {
                      "FacetName": { "$ref": "#/components/schemas/FacetName" },
                      "SchemaArn": { "$ref": "#/components/schemas/Arn" }
                    },
                    "type": "object"
                  },
                  "MaxResults": {
                    "description": "The maximum number of items to be retrieved in a single call. This is an approximate number.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "ObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["ObjectReference"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListObjectAttributesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "489": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/attributes/get#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves attributes within a facet that are associated with an object.",
        "operationId": "GetObjectAttributes",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where the object resides.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The consistency level at which to retrieve the attributes on an object.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "AttributeNames": {
                    "description": "List of attribute names whose values will be retrieved.",
                    "items": { "$ref": "#/components/schemas/AttributeName" },
                    "type": "array"
                  },
                  "ObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  },
                  "SchemaFacet": {
                    "description": "A facet.",
                    "properties": {
                      "FacetName": { "$ref": "#/components/schemas/FacetName" },
                      "SchemaArn": { "$ref": "#/components/schemas/Arn" }
                    },
                    "type": "object"
                  }
                },
                "required": ["ObjectReference", "SchemaFacet", "AttributeNames"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetObjectAttributesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/children#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a paginated list of child objects that are associated with a given object.",
        "operationId": "ListObjectChildren",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where the object resides. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ListObjectChildrenBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListObjectChildrenResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "489": {
            "description": "NotNodeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotNodeException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/delete#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html\">Amazon Cloud Directory Limits</a>.",
        "operationId": "DeleteObject",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where the object resides. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/DeleteObjectBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteObjectResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "ObjectNotDetachedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ObjectNotDetachedException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/detach#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.",
        "operationId": "DetachObject",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where objects reside. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "LinkName": {
                    "description": "The link name associated with the object that needs to be detached.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "[^\\/\\[\\]\\(\\):\\{\\}#@!?\\s\\\\;]+",
                    "type": "string"
                  },
                  "ParentReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["ParentReference", "LinkName"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DetachObjectResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "NotNodeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotNodeException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/facets#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Adds a new <a>Facet</a> to an object. An object can have more than one facet applied on it.",
        "operationId": "AddFacetToObject",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where the object resides. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ObjectAttributeList": {
                    "description": "Attributes on the facet that you are adding to the object.",
                    "items": { "$ref": "#/components/schemas/AttributeKeyAndValue" },
                    "type": "array"
                  },
                  "ObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  },
                  "SchemaFacet": {
                    "description": "A facet.",
                    "properties": {
                      "FacetName": { "$ref": "#/components/schemas/FacetName" },
                      "SchemaArn": { "$ref": "#/components/schemas/Arn" }
                    },
                    "type": "object"
                  }
                },
                "required": ["SchemaFacet", "ObjectReference"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddFacetToObjectResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/facets/delete#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Removes the specified facet from the specified object.",
        "operationId": "RemoveFacetFromObject",
        "parameters": [
          {
            "description": "The ARN of the directory in which the object resides.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  },
                  "SchemaFacet": {
                    "description": "A facet.",
                    "properties": {
                      "FacetName": { "$ref": "#/components/schemas/FacetName" },
                      "SchemaArn": { "$ref": "#/components/schemas/Arn" }
                    },
                    "type": "object"
                  }
                },
                "required": ["SchemaFacet", "ObjectReference"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RemoveFacetFromObjectResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/indices#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists indices attached to the specified object.",
        "operationId": "ListAttachedIndices",
        "parameters": [
          {
            "description": "The ARN of the directory.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The consistency level to use for this operation.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of results to retrieve.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "TargetReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["TargetReference"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListAttachedIndicesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/information#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves metadata about an object.",
        "operationId": "GetObjectInformation",
        "parameters": [
          {
            "description": "The ARN of the directory being retrieved.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The consistency level at which to retrieve the object information.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/DeleteObjectBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetObjectInformationResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/parent#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists parent objects that are associated with a given object in pagination fashion.",
        "operationId": "ListObjectParents",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where the object resides. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "IncludeAllLinksToEachParent": {
                    "description": "When set to True, returns all <a>ListObjectParentsResponse$ParentLinks</a>. There could be multiple links between a parent-child pair.",
                    "type": "boolean"
                  },
                  "MaxResults": {
                    "description": "The maximum number of items to be retrieved in a single call. This is an approximate number.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "ObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["ObjectReference"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListObjectParentsResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "489": {
            "description": "CannotListParentOfRootException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CannotListParentOfRootException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/parentpaths#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html\">Directory Structure</a>.</p> <p>Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.</p>",
        "operationId": "ListObjectParentPaths",
        "parameters": [
          {
            "description": "The ARN of the directory to which the parent path applies.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ListObjectChildrenBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListObjectParentPathsResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "488": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/policy#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns policies attached to an object in pagination fashion.",
        "operationId": "ListObjectPolicies",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where objects reside. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ListObjectChildrenBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListObjectPoliciesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/object/update#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates a given object's attributes.",
        "operationId": "UpdateObjectAttributes",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where the object resides. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "AttributeUpdates": {
                    "description": "The attributes update structure.",
                    "items": { "$ref": "#/components/schemas/ObjectAttributeUpdate" },
                    "type": "array"
                  },
                  "ObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["ObjectReference", "AttributeUpdates"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateObjectAttributesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "LinkNameAlreadyInUseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LinkNameAlreadyInUseException" } }
            }
          },
          "489": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/policy/attach#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Attaches a policy object to a regular object. An object can have a limited number of attached policies.",
        "operationId": "AttachPolicy",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where both objects reside. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/AttachPolicyBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttachPolicyResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "NotPolicyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotPolicyException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/policy/attachment#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.",
        "operationId": "ListPolicyAttachments",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where objects reside. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.",
            "in": "header",
            "name": "x-amz-consistency-level",
            "required": false,
            "schema": { "type": "string", "enum": ["SERIALIZABLE", "EVENTUAL"] }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of items to be retrieved in a single call. This is an approximate number.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "PolicyReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["PolicyReference"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListPolicyAttachmentsResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "488": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "489": {
            "description": "NotPolicyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotPolicyException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/policy/detach#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Detaches a policy from an object.",
        "operationId": "DetachPolicy",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> where both objects reside. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/AttachPolicyBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DetachPolicyResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "NotPolicyException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotPolicyException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/policy/lookup#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies\">Policies</a>.",
        "operationId": "LookupPolicy",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a>. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of items to be retrieved in a single call. This is an approximate number.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The token to request the next page of results.", "type": "string" },
                  "ObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  }
                },
                "required": ["ObjectReference"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LookupPolicyResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "488": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Deletes a given schema. Schemas in a development and published state can only be deleted. ",
        "operationId": "DeleteSchema",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the development schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSchemaResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "StillContainsLinksException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StillContainsLinksException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/applied": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists schema major versions applied to a directory. If <code>SchemaArn</code> is provided, lists the minor version.",
        "operationId": "ListAppliedSchemaArns",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "DirectoryArn": { "description": "The ARN of the directory you are listing.", "type": "string" },
                  "MaxResults": {
                    "description": "The maximum number of results to retrieve.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "SchemaArn": {
                    "description": "The response for <code>ListAppliedSchemaArns</code> when this parameter is used will list all minor version ARNs for a major version.",
                    "type": "string"
                  }
                },
                "required": ["DirectoryArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListAppliedSchemaArnsResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/apply#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Copies the input published schema, at the specified version, into the <a>Directory</a> with the same name and version as that of the published schema.",
        "operationId": "ApplySchema",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> into which the schema is copied. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "PublishedSchemaArn": {
                    "description": "Published schema Amazon Resource Name (ARN) that needs to be copied. For more information, see <a>arns</a>.",
                    "type": "string"
                  }
                },
                "required": ["PublishedSchemaArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApplySchemaResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "SchemaAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchemaAlreadyExistsException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "InvalidAttachmentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAttachmentException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/create": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Creates a new schema in a development state. A schema can exist in three phases:</p> <ul> <li> <p> <i>Development:</i> This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.</p> </li> <li> <p> <i>Published:</i> Published schemas are immutable and have a version associated with them.</p> </li> <li> <p> <i>Applied:</i> Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. </p> </li> </ul>",
        "operationId": "CreateSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Name": {
                    "description": "The name that is associated with the schema. This is unique to each account and in each region.",
                    "maxLength": 32,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateSchemaResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "SchemaAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchemaAlreadyExistsException" } }
            }
          },
          "487": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/development": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves each Amazon Resource Name (ARN) of schemas in the development state.",
        "operationId": "ListDevelopmentSchemaArns",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ListFacetNamesBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListDevelopmentSchemaArnsResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/getappliedschema": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns current applied schema version ARN, including the minor version in use.",
        "operationId": "GetAppliedSchemaVersion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "SchemaArn": { "description": "The ARN of the applied schema.", "type": "string" } },
                "required": ["SchemaArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetAppliedSchemaVersionResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves a JSON representation of the schema. See <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json\">JSON Schema Format</a> for more information.",
        "operationId": "GetSchemaAsJson",
        "parameters": [
          {
            "description": "The ARN of the schema to retrieve.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetSchemaAsJsonResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          }
        }
      },
      "put": {
        "description": "Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json\">JSON Schema Format</a> for more information.",
        "operationId": "PutSchemaFromJson",
        "parameters": [
          {
            "description": "The ARN of the schema to update.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "Document": { "description": "The replacement JSON schema.", "type": "string" } },
                "required": ["Document"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PutSchemaFromJsonResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "InvalidSchemaDocException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSchemaDocException" } }
            }
          },
          "487": {
            "description": "InvalidRuleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRuleException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/managed": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead.",
        "operationId": "ListManagedSchemaArns",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of results to retrieve.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "SchemaArn": {
                    "description": "The response for ListManagedSchemaArns. When this parameter is used, all minor version ARNs for a major version are listed.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListManagedSchemaArnsResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "483": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "485": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/publish#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Publishes a development schema with a major version and a recommended minor version.",
        "operationId": "PublishSchema",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the development schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MinorVersion": {
                    "description": "The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.",
                    "maxLength": 10,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  },
                  "Name": {
                    "description": "The new name under which the schema will be published. If this is not provided, the development schema is considered.",
                    "maxLength": 32,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  },
                  "Version": {
                    "description": "The major version under which the schema will be published. Schemas have both a major and minor version associated with them.",
                    "maxLength": 10,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  }
                },
                "required": ["Version"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PublishSchemaResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "SchemaAlreadyPublishedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchemaAlreadyPublishedException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/published": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the major version families of each published schema. If a major version ARN is provided as <code>SchemaArn</code>, the minor version revisions in that family are listed instead.",
        "operationId": "ListPublishedSchemaArns",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of results to retrieve.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" },
                  "SchemaArn": {
                    "description": "The response for <code>ListPublishedSchemaArns</code> when this parameter is used will list all minor version ARNs for a major version.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListPublishedSchemaArnsResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/update#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates the schema name with a new name. Only development schema names can be updated.",
        "operationId": "UpdateSchema",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the development schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Name": {
                    "description": "The name of the schema.",
                    "maxLength": 32,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateSchemaResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/upgradeapplied": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.",
        "operationId": "UpgradeAppliedSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "DirectoryArn": {
                    "description": "The ARN for the directory to which the upgraded schema will be applied.",
                    "type": "string"
                  },
                  "DryRun": {
                    "description": "Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.",
                    "type": "boolean"
                  },
                  "PublishedSchemaArn": {
                    "description": "The revision of the published schema to upgrade the directory to.",
                    "type": "string"
                  }
                },
                "required": ["PublishedSchemaArn", "DirectoryArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpgradeAppliedSchemaResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "IncompatibleSchemaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleSchemaException" } }
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidAttachmentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAttachmentException" } }
            }
          },
          "488": {
            "description": "SchemaAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SchemaAlreadyExistsException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/schema/upgradepublished": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Upgrades a published schema under a new minor version revision using the current contents of <code>DevelopmentSchemaArn</code>.",
        "operationId": "UpgradePublishedSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "DevelopmentSchemaArn": {
                    "description": "The ARN of the development schema with the changes used for the upgrade.",
                    "type": "string"
                  },
                  "DryRun": {
                    "description": "Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.",
                    "type": "boolean"
                  },
                  "MinorVersion": {
                    "description": "Identifies the minor version of the published schema that will be created. This parameter is NOT optional.",
                    "maxLength": 10,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  },
                  "PublishedSchemaArn": {
                    "description": "The ARN of the published schema to be upgraded.",
                    "type": "string"
                  }
                },
                "required": ["DevelopmentSchemaArn", "PublishedSchemaArn", "MinorVersion"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpgradePublishedSchemaResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "IncompatibleSchemaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IncompatibleSchemaException" } }
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidAttachmentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAttachmentException" } }
            }
          },
          "488": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/tags": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. This is for future use and is not supported currently.",
                    "minimum": 50,
                    "type": "integer"
                  },
                  "NextToken": {
                    "description": "The pagination token. This is for future use. Currently pagination is not supported for tagging.",
                    "type": "string"
                  },
                  "ResourceArn": {
                    "description": "The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.",
                    "type": "string"
                  }
                },
                "required": ["ResourceArn"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidTaggingRequestException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTaggingRequestException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/tags/add": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "An API operation for adding tags to a resource.",
        "operationId": "TagResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ResourceArn": {
                    "description": "The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.",
                    "type": "string"
                  },
                  "Tags": {
                    "description": "A list of tag key-value pairs.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "type": "array"
                  }
                },
                "required": ["ResourceArn", "Tags"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidTaggingRequestException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTaggingRequestException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/tags/remove": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "An API operation for removing tags from a resource.",
        "operationId": "UntagResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ResourceArn": {
                    "description": "The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.",
                    "type": "string"
                  },
                  "TagKeys": {
                    "description": "Keys of the tag that need to be removed from the resource.",
                    "items": { "$ref": "#/components/schemas/TagKey" },
                    "type": "array"
                  }
                },
                "required": ["ResourceArn", "TagKeys"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidTaggingRequestException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTaggingRequestException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/attach#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Attaches a typed link to a specified source and target object. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "AttachTypedLink",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Attributes": {
                    "description": "A set of attributes that are associated with the typed link.",
                    "items": { "$ref": "#/components/schemas/AttributeNameAndValue" },
                    "type": "array"
                  },
                  "SourceObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  },
                  "TargetObjectReference": {
                    "description": "The reference that identifies an object.",
                    "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                    "type": "object"
                  },
                  "TypedLinkFacet": {
                    "description": "Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.",
                    "properties": {
                      "SchemaArn": { "$ref": "#/components/schemas/Arn" },
                      "TypedLinkName": { "$ref": "#/components/schemas/TypedLinkName" }
                    },
                    "type": "object"
                  }
                },
                "required": ["SourceObjectReference", "TargetObjectReference", "TypedLinkFacet", "Attributes"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttachTypedLinkResponse" } } }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "InvalidAttachmentException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidAttachmentException" } }
            }
          },
          "489": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "490": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/attributes/get#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves attributes that are associated with a typed link.",
        "operationId": "GetLinkAttributes",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see <a>arns</a> or <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "AttributeNames": {
                    "description": "A list of attribute names whose values will be retrieved.",
                    "items": { "$ref": "#/components/schemas/AttributeName" },
                    "type": "array"
                  },
                  "ConsistencyLevel": {
                    "description": "The consistency level at which to retrieve the attributes on a typed link.",
                    "enum": ["SERIALIZABLE", "EVENTUAL"],
                    "type": "string"
                  },
                  "TypedLinkSpecifier": {
                    "description": "Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.",
                    "properties": {
                      "IdentityAttributeValues": { "$ref": "#/components/schemas/AttributeNameAndValueList" },
                      "SourceObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
                      "TargetObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
                      "TypedLinkFacet": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" }
                    },
                    "type": "object"
                  }
                },
                "required": ["TypedLinkSpecifier", "AttributeNames"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetLinkAttributesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/attributes/update#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>.",
        "operationId": "UpdateLinkAttributes",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see <a>arns</a> or <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "AttributeUpdates": {
                    "description": "The attributes update structure.",
                    "items": { "$ref": "#/components/schemas/LinkAttributeUpdate" },
                    "type": "array"
                  },
                  "TypedLinkSpecifier": {
                    "description": "Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.",
                    "properties": {
                      "IdentityAttributeValues": { "$ref": "#/components/schemas/AttributeNameAndValueList" },
                      "SourceObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
                      "TargetObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
                      "TypedLinkFacet": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" }
                    },
                    "type": "object"
                  }
                },
                "required": ["TypedLinkSpecifier", "AttributeUpdates"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateLinkAttributesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/detach#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Detaches a typed link from a specified source and target object. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "DetachTypedLink",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the directory where you want to detach the typed link.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "TypedLinkSpecifier": {
                    "description": "Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.",
                    "properties": {
                      "IdentityAttributeValues": { "$ref": "#/components/schemas/AttributeNameAndValueList" },
                      "SourceObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
                      "TargetObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
                      "TypedLinkFacet": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" }
                    },
                    "type": "object"
                  }
                },
                "required": ["TypedLinkSpecifier"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/facet#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates a <a>TypedLinkFacet</a>. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "UpdateTypedLinkFacet",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "AttributeUpdates": {
                    "description": "Attributes update structure.",
                    "items": { "$ref": "#/components/schemas/TypedLinkFacetAttributeUpdate" },
                    "type": "array"
                  },
                  "IdentityAttributeOrder": {
                    "description": "The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
                    "items": { "$ref": "#/components/schemas/AttributeName" },
                    "type": "array"
                  },
                  "Name": {
                    "description": "The unique name of the typed link facet.",
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  }
                },
                "required": ["Name", "AttributeUpdates", "IdentityAttributeOrder"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTypedLinkFacetResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          },
          "487": {
            "description": "InvalidFacetUpdateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidFacetUpdateException" } }
            }
          },
          "488": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "489": {
            "description": "FacetNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetNotFoundException" } } }
          },
          "490": {
            "description": "InvalidRuleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRuleException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "ListTypedLinkFacetAttributes",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "MaxResults": {
                    "description": "The maximum number of results to retrieve.",
                    "minimum": 1,
                    "type": "integer"
                  },
                  "Name": {
                    "description": "The unique name of the typed link facet.",
                    "pattern": "^[a-zA-Z0-9._-]*$",
                    "type": "string"
                  },
                  "NextToken": { "description": "The pagination token.", "type": "string" }
                },
                "required": ["Name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTypedLinkFacetAttributesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "FacetNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetNotFoundException" } } }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/facet/create#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Creates a <a>TypedLinkFacet</a>. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "CreateTypedLinkFacet",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Facet": {
                    "description": "Defines the typed links structure and its attributes. To create a typed link facet, use the <a>CreateTypedLinkFacet</a> API.",
                    "properties": {
                      "Attributes": { "$ref": "#/components/schemas/TypedLinkAttributeDefinitionList" },
                      "IdentityAttributeOrder": { "$ref": "#/components/schemas/AttributeNameList" },
                      "Name": { "$ref": "#/components/schemas/TypedLinkName" }
                    },
                    "type": "object"
                  }
                },
                "required": ["Facet"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateTypedLinkFacetResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "FacetAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FacetAlreadyExistsException" } }
            }
          },
          "488": {
            "description": "InvalidRuleException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRuleException" } } }
          },
          "489": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/facet/delete#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Deletes a <a>TypedLinkFacet</a>. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "DeleteTypedLinkFacet",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/DeleteTypedLinkFacetBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTypedLinkFacetResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "FacetNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetNotFoundException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/facet/get#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "GetTypedLinkFacetInformation",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/DeleteTypedLinkFacetBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetTypedLinkFacetInformationResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "488": {
            "description": "FacetNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetNotFoundException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/facet/list#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a paginated list of <code>TypedLink</code> facet names for a particular schema. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "ListTypedLinkFacetNames",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <a>arns</a>.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ListFacetNamesBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTypedLinkFacetNamesResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "487": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/incoming#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "ListIncomingTypedLinks",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the directory where you want to list the typed links.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ListIncomingTypedLinksBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListIncomingTypedLinksResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "489": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    },
    "/amazonclouddirectory/2017-01-11/typedlink/outgoing#x-amz-data-partition": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\">Typed Links</a>.",
        "operationId": "ListOutgoingTypedLinks",
        "parameters": [
          {
            "description": "The Amazon Resource Name (ARN) of the directory where you want to list the typed links.",
            "in": "header",
            "name": "x-amz-data-partition",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/ListIncomingTypedLinksBody" },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListOutgoingTypedLinksResponse" } }
            }
          },
          "480": {
            "description": "InternalServiceException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServiceException" } } }
          },
          "481": {
            "description": "InvalidArnException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidArnException" } } }
          },
          "482": {
            "description": "RetryableConflictException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RetryableConflictException" } }
            }
          },
          "483": {
            "description": "ValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ValidationException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "AccessDeniedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AccessDeniedException" } } }
          },
          "486": {
            "description": "DirectoryNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DirectoryNotEnabledException" } }
            }
          },
          "487": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidNextTokenException" } }
            }
          },
          "489": {
            "description": "FacetValidationException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FacetValidationException" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The Amazon CloudDirectory multi-region endpoint",
      "url": "http://clouddirectory.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon CloudDirectory multi-region endpoint",
      "url": "https://clouddirectory.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon CloudDirectory endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://clouddirectory.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Amazon CloudDirectory endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://clouddirectory.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "requestBodies": {
      "AttachToIndexBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "IndexReference": {
                  "description": "The reference that identifies an object.",
                  "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                  "type": "object"
                },
                "TargetReference": {
                  "description": "The reference that identifies an object.",
                  "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                  "type": "object"
                }
              },
              "required": ["IndexReference", "TargetReference"],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "AttachPolicyBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "ObjectReference": {
                  "description": "The reference that identifies an object.",
                  "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                  "type": "object"
                },
                "PolicyReference": {
                  "description": "The reference that identifies an object.",
                  "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                  "type": "object"
                }
              },
              "required": ["PolicyReference", "ObjectReference"],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "DeleteTypedLinkFacetBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "Name": {
                  "description": "The unique name of the typed link facet.",
                  "pattern": "^[a-zA-Z0-9._-]*$",
                  "type": "string"
                }
              },
              "required": ["Name"],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "DeleteObjectBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "ObjectReference": {
                  "description": "The reference that identifies an object.",
                  "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                  "type": "object"
                }
              },
              "required": ["ObjectReference"],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "ListFacetNamesBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "The maximum number of results to retrieve.",
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": { "description": "The pagination token.", "type": "string" }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "ListObjectChildrenBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "The maximum number of items to be retrieved in a single call. This is an approximate number.",
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": { "description": "The pagination token.", "type": "string" },
                "ObjectReference": {
                  "description": "The reference that identifies an object.",
                  "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                  "type": "object"
                }
              },
              "required": ["ObjectReference"],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "ListIncomingTypedLinksBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "ConsistencyLevel": {
                  "description": "The consistency level to execute the request at.",
                  "enum": ["SERIALIZABLE", "EVENTUAL"],
                  "type": "string"
                },
                "FilterAttributeRanges": {
                  "description": "Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.",
                  "items": { "$ref": "#/components/schemas/TypedLinkAttributeRange" },
                  "type": "array"
                },
                "FilterTypedLink": {
                  "description": "Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.",
                  "properties": {
                    "SchemaArn": { "$ref": "#/components/schemas/Arn" },
                    "TypedLinkName": { "$ref": "#/components/schemas/TypedLinkName" }
                  },
                  "type": "object"
                },
                "MaxResults": {
                  "description": "The maximum number of results to retrieve.",
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": { "description": "The pagination token.", "type": "string" },
                "ObjectReference": {
                  "description": "The reference that identifies an object.",
                  "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
                  "type": "object"
                }
              },
              "required": ["ObjectReference", "FilterTypedLink"],
              "type": "object"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AccessDeniedException": {},
      "AddFacetToObjectRequest": {
        "properties": {
          "ObjectAttributeList": { "$ref": "#/components/schemas/AttributeKeyAndValueList" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "SchemaFacet": { "$ref": "#/components/schemas/SchemaFacet" }
        },
        "required": ["SchemaFacet", "ObjectReference"],
        "type": "object"
      },
      "AddFacetToObjectResponse": { "properties": {}, "type": "object" },
      "ApplySchemaRequest": {
        "properties": { "PublishedSchemaArn": { "$ref": "#/components/schemas/Arn" } },
        "required": ["PublishedSchemaArn"],
        "type": "object"
      },
      "ApplySchemaResponse": {
        "properties": {
          "AppliedSchemaArn": { "$ref": "#/components/schemas/Arn" },
          "DirectoryArn": { "$ref": "#/components/schemas/Arn" }
        },
        "type": "object"
      },
      "Arn": { "type": "string" },
      "Arns": { "items": { "$ref": "#/components/schemas/Arn" }, "type": "array" },
      "AttachObjectRequest": {
        "properties": {
          "ChildReference": { "$ref": "#/components/schemas/ObjectReference" },
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "ParentReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ParentReference", "ChildReference", "LinkName"],
        "type": "object"
      },
      "AttachObjectResponse": {
        "properties": { "AttachedObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "AttachPolicyRequest": {
        "properties": {
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "PolicyReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["PolicyReference", "ObjectReference"],
        "type": "object"
      },
      "AttachPolicyResponse": { "properties": {}, "type": "object" },
      "AttachToIndexRequest": {
        "properties": {
          "IndexReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TargetReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["IndexReference", "TargetReference"],
        "type": "object"
      },
      "AttachToIndexResponse": {
        "properties": { "AttachedObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "AttachTypedLinkRequest": {
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/AttributeNameAndValueList" },
          "SourceObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TargetObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TypedLinkFacet": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" }
        },
        "required": ["SourceObjectReference", "TargetObjectReference", "TypedLinkFacet", "Attributes"],
        "type": "object"
      },
      "AttachTypedLinkResponse": {
        "properties": { "TypedLinkSpecifier": { "$ref": "#/components/schemas/TypedLinkSpecifier" } },
        "type": "object"
      },
      "AttributeKey": {
        "description": "A unique identifier for an attribute.",
        "properties": {
          "FacetName": { "$ref": "#/components/schemas/FacetName" },
          "Name": { "$ref": "#/components/schemas/AttributeName" },
          "SchemaArn": { "$ref": "#/components/schemas/Arn" }
        },
        "required": ["SchemaArn", "FacetName", "Name"],
        "type": "object"
      },
      "AttributeKeyAndValue": {
        "description": "The combination of an attribute key and an attribute value.",
        "properties": {
          "Key": { "$ref": "#/components/schemas/AttributeKey" },
          "Value": { "$ref": "#/components/schemas/TypedAttributeValue" }
        },
        "required": ["Key", "Value"],
        "type": "object"
      },
      "AttributeKeyAndValueList": { "items": { "$ref": "#/components/schemas/AttributeKeyAndValue" }, "type": "array" },
      "AttributeKeyList": { "items": { "$ref": "#/components/schemas/AttributeKey" }, "type": "array" },
      "AttributeName": { "maxLength": 230, "minLength": 1, "pattern": "^[a-zA-Z0-9._:-]*$", "type": "string" },
      "AttributeNameAndValue": {
        "description": "Identifies the attribute name and value for a typed link.",
        "properties": {
          "AttributeName": { "$ref": "#/components/schemas/AttributeName" },
          "Value": { "$ref": "#/components/schemas/TypedAttributeValue" }
        },
        "required": ["AttributeName", "Value"],
        "type": "object"
      },
      "AttributeNameAndValueList": {
        "items": { "$ref": "#/components/schemas/AttributeNameAndValue" },
        "type": "array"
      },
      "AttributeNameList": { "items": { "$ref": "#/components/schemas/AttributeName" }, "type": "array" },
      "BatchAddFacetToObject": {
        "description": "Represents the output of a batch add facet to object operation.",
        "properties": {
          "ObjectAttributeList": { "$ref": "#/components/schemas/AttributeKeyAndValueList" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "SchemaFacet": { "$ref": "#/components/schemas/SchemaFacet" }
        },
        "required": ["SchemaFacet", "ObjectAttributeList", "ObjectReference"],
        "type": "object"
      },
      "BatchAddFacetToObjectResponse": {
        "description": "The result of a batch add facet to object operation.",
        "properties": {},
        "type": "object"
      },
      "BatchAttachObject": {
        "description": "Represents the output of an <a>AttachObject</a> operation.",
        "properties": {
          "ChildReference": { "$ref": "#/components/schemas/ObjectReference" },
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "ParentReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ParentReference", "ChildReference", "LinkName"],
        "type": "object"
      },
      "BatchAttachObjectResponse": {
        "description": "Represents the output batch <a>AttachObject</a> response operation.",
        "properties": { "attachedObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "BatchAttachPolicy": {
        "description": "Attaches a policy object to a regular object inside a <a>BatchRead</a> operation. For more information, see <a>AttachPolicy</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "PolicyReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["PolicyReference", "ObjectReference"],
        "type": "object"
      },
      "BatchAttachPolicyResponse": {
        "description": "Represents the output of an <a>AttachPolicy</a> response operation.",
        "properties": {},
        "type": "object"
      },
      "BatchAttachToIndex": {
        "description": "Attaches the specified object to the specified index inside a <a>BatchRead</a> operation. For more information, see <a>AttachToIndex</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "IndexReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TargetReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["IndexReference", "TargetReference"],
        "type": "object"
      },
      "BatchAttachToIndexResponse": {
        "description": "Represents the output of a <a>AttachToIndex</a> response operation.",
        "properties": { "AttachedObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "BatchAttachTypedLink": {
        "description": "Attaches a typed link to a specified source and target object inside a <a>BatchRead</a> operation. For more information, see <a>AttachTypedLink</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/AttributeNameAndValueList" },
          "SourceObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TargetObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TypedLinkFacet": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" }
        },
        "required": ["SourceObjectReference", "TargetObjectReference", "TypedLinkFacet", "Attributes"],
        "type": "object"
      },
      "BatchAttachTypedLinkResponse": {
        "description": "Represents the output of a <a>AttachTypedLink</a> response operation.",
        "properties": { "TypedLinkSpecifier": { "$ref": "#/components/schemas/TypedLinkSpecifier" } },
        "type": "object"
      },
      "BatchCreateIndex": {
        "description": "Creates an index object inside of a <a>BatchRead</a> operation. For more information, see <a>CreateIndex</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "BatchReferenceName": { "$ref": "#/components/schemas/BatchReferenceName" },
          "IsUnique": { "$ref": "#/components/schemas/Bool" },
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "OrderedIndexedAttributeList": { "$ref": "#/components/schemas/AttributeKeyList" },
          "ParentReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["OrderedIndexedAttributeList", "IsUnique"],
        "type": "object"
      },
      "BatchCreateIndexResponse": {
        "description": "Represents the output of a <a>CreateIndex</a> response operation.",
        "properties": { "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "BatchCreateObject": {
        "description": "Represents the output of a <a>CreateObject</a> operation.",
        "properties": {
          "BatchReferenceName": { "$ref": "#/components/schemas/BatchReferenceName" },
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "ObjectAttributeList": { "$ref": "#/components/schemas/AttributeKeyAndValueList" },
          "ParentReference": { "$ref": "#/components/schemas/ObjectReference" },
          "SchemaFacet": { "$ref": "#/components/schemas/SchemaFacetList" }
        },
        "required": ["SchemaFacet", "ObjectAttributeList"],
        "type": "object"
      },
      "BatchCreateObjectResponse": {
        "description": "Represents the output of a <a>CreateObject</a> response operation.",
        "properties": { "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "BatchDeleteObject": {
        "description": "Represents the output of a <a>DeleteObject</a> operation.",
        "properties": { "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" } },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchDeleteObjectResponse": {
        "description": "Represents the output of a <a>DeleteObject</a> response operation.",
        "properties": {},
        "type": "object"
      },
      "BatchDetachFromIndex": {
        "description": "Detaches the specified object from the specified index inside a <a>BatchRead</a> operation. For more information, see <a>DetachFromIndex</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "IndexReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TargetReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["IndexReference", "TargetReference"],
        "type": "object"
      },
      "BatchDetachFromIndexResponse": {
        "description": "Represents the output of a <a>DetachFromIndex</a> response operation.",
        "properties": { "DetachedObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "BatchDetachObject": {
        "description": "Represents the output of a <a>DetachObject</a> operation.",
        "properties": {
          "BatchReferenceName": { "$ref": "#/components/schemas/BatchReferenceName" },
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "ParentReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ParentReference", "LinkName"],
        "type": "object"
      },
      "BatchDetachObjectResponse": {
        "description": "Represents the output of a <a>DetachObject</a> response operation.",
        "properties": { "detachedObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "BatchDetachPolicy": {
        "description": "Detaches the specified policy from the specified directory inside a <a>BatchWrite</a> operation. For more information, see <a>DetachPolicy</a> and <a>BatchWriteRequest$Operations</a>.",
        "properties": {
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "PolicyReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["PolicyReference", "ObjectReference"],
        "type": "object"
      },
      "BatchDetachPolicyResponse": {
        "description": "Represents the output of a <a>DetachPolicy</a> response operation.",
        "properties": {},
        "type": "object"
      },
      "BatchDetachTypedLink": {
        "description": "Detaches a typed link from a specified source and target object inside a <a>BatchRead</a> operation. For more information, see <a>DetachTypedLink</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": { "TypedLinkSpecifier": { "$ref": "#/components/schemas/TypedLinkSpecifier" } },
        "required": ["TypedLinkSpecifier"],
        "type": "object"
      },
      "BatchDetachTypedLinkResponse": {
        "description": "Represents the output of a <a>DetachTypedLink</a> response operation.",
        "properties": {},
        "type": "object"
      },
      "BatchGetLinkAttributes": {
        "description": "Retrieves attributes that are associated with a typed link inside a <a>BatchRead</a> operation. For more information, see <a>GetLinkAttributes</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "AttributeNames": { "$ref": "#/components/schemas/AttributeNameList" },
          "TypedLinkSpecifier": { "$ref": "#/components/schemas/TypedLinkSpecifier" }
        },
        "required": ["TypedLinkSpecifier", "AttributeNames"],
        "type": "object"
      },
      "BatchGetLinkAttributesResponse": {
        "description": "Represents the output of a <a>GetLinkAttributes</a> response operation.",
        "properties": { "Attributes": { "$ref": "#/components/schemas/AttributeKeyAndValueList" } },
        "type": "object"
      },
      "BatchGetObjectAttributes": {
        "description": "Retrieves attributes within a facet that are associated with an object inside an <a>BatchRead</a> operation. For more information, see <a>GetObjectAttributes</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "AttributeNames": { "$ref": "#/components/schemas/AttributeNameList" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "SchemaFacet": { "$ref": "#/components/schemas/SchemaFacet" }
        },
        "required": ["ObjectReference", "SchemaFacet", "AttributeNames"],
        "type": "object"
      },
      "BatchGetObjectAttributesResponse": {
        "description": "Represents the output of a <a>GetObjectAttributes</a> response operation.",
        "properties": { "Attributes": { "$ref": "#/components/schemas/AttributeKeyAndValueList" } },
        "type": "object"
      },
      "BatchGetObjectInformation": {
        "description": "Retrieves metadata about an object inside a <a>BatchRead</a> operation. For more information, see <a>GetObjectInformation</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": { "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" } },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchGetObjectInformationResponse": {
        "description": "Represents the output of a <a>GetObjectInformation</a> response operation.",
        "properties": {
          "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" },
          "SchemaFacets": { "$ref": "#/components/schemas/SchemaFacetList" }
        },
        "type": "object"
      },
      "BatchListAttachedIndices": {
        "description": "Lists indices attached to an object inside a <a>BatchRead</a> operation. For more information, see <a>ListAttachedIndices</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "TargetReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["TargetReference"],
        "type": "object"
      },
      "BatchListAttachedIndicesResponse": {
        "description": "Represents the output of a <a>ListAttachedIndices</a> response operation.",
        "properties": {
          "IndexAttachments": { "$ref": "#/components/schemas/IndexAttachmentList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "BatchListIncomingTypedLinks": {
        "description": "Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object inside a <a>BatchRead</a> operation. For more information, see <a>ListIncomingTypedLinks</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "FilterAttributeRanges": { "$ref": "#/components/schemas/TypedLinkAttributeRangeList" },
          "FilterTypedLink": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchListIncomingTypedLinksResponse": {
        "description": "Represents the output of a <a>ListIncomingTypedLinks</a> response operation.",
        "properties": {
          "LinkSpecifiers": { "$ref": "#/components/schemas/TypedLinkSpecifierList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "BatchListIndex": {
        "description": "Lists objects attached to the specified index inside a <a>BatchRead</a> operation. For more information, see <a>ListIndex</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "IndexReference": { "$ref": "#/components/schemas/ObjectReference" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "RangesOnIndexedValues": { "$ref": "#/components/schemas/ObjectAttributeRangeList" }
        },
        "required": ["IndexReference"],
        "type": "object"
      },
      "BatchListIndexResponse": {
        "description": "Represents the output of a <a>ListIndex</a> response operation.",
        "properties": {
          "IndexAttachments": { "$ref": "#/components/schemas/IndexAttachmentList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "BatchListObjectAttributes": {
        "description": "Represents the output of a <a>ListObjectAttributes</a> operation.",
        "properties": {
          "FacetFilter": { "$ref": "#/components/schemas/SchemaFacet" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchListObjectAttributesResponse": {
        "description": "Represents the output of a <a>ListObjectAttributes</a> response operation.",
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/AttributeKeyAndValueList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "BatchListObjectChildren": {
        "description": "Represents the output of a <a>ListObjectChildren</a> operation.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchListObjectChildrenResponse": {
        "description": "Represents the output of a <a>ListObjectChildren</a> response operation.",
        "properties": {
          "Children": { "$ref": "#/components/schemas/LinkNameToObjectIdentifierMap" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "BatchListObjectParentPaths": {
        "description": "Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects inside a <a>BatchRead</a> operation. For more information, see <a>ListObjectParentPaths</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchListObjectParentPathsResponse": {
        "description": "Represents the output of a <a>ListObjectParentPaths</a> response operation.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "PathToObjectIdentifiersList": { "$ref": "#/components/schemas/PathToObjectIdentifiersList" }
        },
        "type": "object"
      },
      "BatchListObjectParents": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchListObjectParentsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ParentLinks": { "$ref": "#/components/schemas/ObjectIdentifierAndLinkNameList" }
        },
        "type": "object"
      },
      "BatchListObjectPolicies": {
        "description": "Returns policies attached to an object in pagination fashion inside a <a>BatchRead</a> operation. For more information, see <a>ListObjectPolicies</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchListObjectPoliciesResponse": {
        "description": "Represents the output of a <a>ListObjectPolicies</a> response operation.",
        "properties": {
          "AttachedPolicyIds": { "$ref": "#/components/schemas/ObjectIdentifierList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "BatchListOutgoingTypedLinks": {
        "description": "Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object inside a <a>BatchRead</a> operation. For more information, see <a>ListOutgoingTypedLinks</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "FilterAttributeRanges": { "$ref": "#/components/schemas/TypedLinkAttributeRangeList" },
          "FilterTypedLink": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchListOutgoingTypedLinksResponse": {
        "description": "Represents the output of a <a>ListOutgoingTypedLinks</a> response operation.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "TypedLinkSpecifiers": { "$ref": "#/components/schemas/TypedLinkSpecifierList" }
        },
        "type": "object"
      },
      "BatchListPolicyAttachments": {
        "description": "Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached inside a <a>BatchRead</a> operation. For more information, see <a>ListPolicyAttachments</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "PolicyReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["PolicyReference"],
        "type": "object"
      },
      "BatchListPolicyAttachmentsResponse": {
        "description": "Represents the output of a <a>ListPolicyAttachments</a> response operation.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectIdentifiers": { "$ref": "#/components/schemas/ObjectIdentifierList" }
        },
        "type": "object"
      },
      "BatchLookupPolicy": {
        "description": "Lists all policies from the root of the Directory to the object specified inside a <a>BatchRead</a> operation. For more information, see <a>LookupPolicy</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "BatchLookupPolicyResponse": {
        "description": "Represents the output of a <a>LookupPolicy</a> response operation.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "PolicyToPathList": { "$ref": "#/components/schemas/PolicyToPathList" }
        },
        "type": "object"
      },
      "BatchReadException": {
        "description": "The batch read exception structure, which contains the exception type and message.",
        "properties": {
          "Message": { "$ref": "#/components/schemas/ExceptionMessage" },
          "Type": { "$ref": "#/components/schemas/BatchReadExceptionType" }
        },
        "type": "object"
      },
      "BatchReadExceptionType": {
        "enum": [
          "ValidationException",
          "InvalidArnException",
          "ResourceNotFoundException",
          "InvalidNextTokenException",
          "AccessDeniedException",
          "NotNodeException",
          "FacetValidationException",
          "CannotListParentOfRootException",
          "NotIndexException",
          "NotPolicyException",
          "DirectoryNotEnabledException",
          "LimitExceededException",
          "InternalServiceException"
        ],
        "type": "string"
      },
      "BatchReadOperation": {
        "description": "Represents the output of a <code>BatchRead</code> operation.",
        "properties": {
          "GetLinkAttributes": { "$ref": "#/components/schemas/BatchGetLinkAttributes" },
          "GetObjectAttributes": { "$ref": "#/components/schemas/BatchGetObjectAttributes" },
          "GetObjectInformation": { "$ref": "#/components/schemas/BatchGetObjectInformation" },
          "ListAttachedIndices": { "$ref": "#/components/schemas/BatchListAttachedIndices" },
          "ListIncomingTypedLinks": { "$ref": "#/components/schemas/BatchListIncomingTypedLinks" },
          "ListIndex": { "$ref": "#/components/schemas/BatchListIndex" },
          "ListObjectAttributes": { "$ref": "#/components/schemas/BatchListObjectAttributes" },
          "ListObjectChildren": { "$ref": "#/components/schemas/BatchListObjectChildren" },
          "ListObjectParentPaths": { "$ref": "#/components/schemas/BatchListObjectParentPaths" },
          "ListObjectParents": { "$ref": "#/components/schemas/BatchListObjectParents" },
          "ListObjectPolicies": { "$ref": "#/components/schemas/BatchListObjectPolicies" },
          "ListOutgoingTypedLinks": { "$ref": "#/components/schemas/BatchListOutgoingTypedLinks" },
          "ListPolicyAttachments": { "$ref": "#/components/schemas/BatchListPolicyAttachments" },
          "LookupPolicy": { "$ref": "#/components/schemas/BatchLookupPolicy" }
        },
        "type": "object"
      },
      "BatchReadOperationList": { "items": { "$ref": "#/components/schemas/BatchReadOperation" }, "type": "array" },
      "BatchReadOperationResponse": {
        "description": "Represents the output of a <code>BatchRead</code> response operation.",
        "properties": {
          "ExceptionResponse": { "$ref": "#/components/schemas/BatchReadException" },
          "SuccessfulResponse": { "$ref": "#/components/schemas/BatchReadSuccessfulResponse" }
        },
        "type": "object"
      },
      "BatchReadOperationResponseList": {
        "items": { "$ref": "#/components/schemas/BatchReadOperationResponse" },
        "type": "array"
      },
      "BatchReadRequest": {
        "properties": { "Operations": { "$ref": "#/components/schemas/BatchReadOperationList" } },
        "required": ["Operations"],
        "type": "object"
      },
      "BatchReadResponse": {
        "properties": { "Responses": { "$ref": "#/components/schemas/BatchReadOperationResponseList" } },
        "type": "object"
      },
      "BatchReadSuccessfulResponse": {
        "description": "Represents the output of a <code>BatchRead</code> success response operation.",
        "properties": {
          "GetLinkAttributes": { "$ref": "#/components/schemas/BatchGetLinkAttributesResponse" },
          "GetObjectAttributes": { "$ref": "#/components/schemas/BatchGetObjectAttributesResponse" },
          "GetObjectInformation": { "$ref": "#/components/schemas/BatchGetObjectInformationResponse" },
          "ListAttachedIndices": { "$ref": "#/components/schemas/BatchListAttachedIndicesResponse" },
          "ListIncomingTypedLinks": { "$ref": "#/components/schemas/BatchListIncomingTypedLinksResponse" },
          "ListIndex": { "$ref": "#/components/schemas/BatchListIndexResponse" },
          "ListObjectAttributes": { "$ref": "#/components/schemas/BatchListObjectAttributesResponse" },
          "ListObjectChildren": { "$ref": "#/components/schemas/BatchListObjectChildrenResponse" },
          "ListObjectParentPaths": { "$ref": "#/components/schemas/BatchListObjectParentPathsResponse" },
          "ListObjectParents": { "$ref": "#/components/schemas/BatchListObjectParentsResponse" },
          "ListObjectPolicies": { "$ref": "#/components/schemas/BatchListObjectPoliciesResponse" },
          "ListOutgoingTypedLinks": { "$ref": "#/components/schemas/BatchListOutgoingTypedLinksResponse" },
          "ListPolicyAttachments": { "$ref": "#/components/schemas/BatchListPolicyAttachmentsResponse" },
          "LookupPolicy": { "$ref": "#/components/schemas/BatchLookupPolicyResponse" }
        },
        "type": "object"
      },
      "BatchReferenceName": { "type": "string" },
      "BatchRemoveFacetFromObject": {
        "description": "A batch operation to remove a facet from an object.",
        "properties": {
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "SchemaFacet": { "$ref": "#/components/schemas/SchemaFacet" }
        },
        "required": ["SchemaFacet", "ObjectReference"],
        "type": "object"
      },
      "BatchRemoveFacetFromObjectResponse": {
        "description": "An empty result that represents success.",
        "properties": {},
        "type": "object"
      },
      "BatchUpdateLinkAttributes": {
        "description": "Updates a given typed link’s attributes inside a <a>BatchRead</a> operation. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>. For more information, see <a>UpdateLinkAttributes</a> and <a>BatchReadRequest$Operations</a>.",
        "properties": {
          "AttributeUpdates": { "$ref": "#/components/schemas/LinkAttributeUpdateList" },
          "TypedLinkSpecifier": { "$ref": "#/components/schemas/TypedLinkSpecifier" }
        },
        "required": ["TypedLinkSpecifier", "AttributeUpdates"],
        "type": "object"
      },
      "BatchUpdateLinkAttributesResponse": {
        "description": "Represents the output of a <a>UpdateLinkAttributes</a> response operation.",
        "properties": {},
        "type": "object"
      },
      "BatchUpdateObjectAttributes": {
        "description": "Represents the output of a <code>BatchUpdate</code> operation. ",
        "properties": {
          "AttributeUpdates": { "$ref": "#/components/schemas/ObjectAttributeUpdateList" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference", "AttributeUpdates"],
        "type": "object"
      },
      "BatchUpdateObjectAttributesResponse": {
        "description": "Represents the output of a <code>BatchUpdate</code> response operation.",
        "properties": { "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "BatchWriteException": {},
      "BatchWriteOperation": {
        "description": "Represents the output of a <code>BatchWrite</code> operation. ",
        "properties": {
          "AddFacetToObject": { "$ref": "#/components/schemas/BatchAddFacetToObject" },
          "AttachObject": { "$ref": "#/components/schemas/BatchAttachObject" },
          "AttachPolicy": { "$ref": "#/components/schemas/BatchAttachPolicy" },
          "AttachToIndex": { "$ref": "#/components/schemas/BatchAttachToIndex" },
          "AttachTypedLink": { "$ref": "#/components/schemas/BatchAttachTypedLink" },
          "CreateIndex": { "$ref": "#/components/schemas/BatchCreateIndex" },
          "CreateObject": { "$ref": "#/components/schemas/BatchCreateObject" },
          "DeleteObject": { "$ref": "#/components/schemas/BatchDeleteObject" },
          "DetachFromIndex": { "$ref": "#/components/schemas/BatchDetachFromIndex" },
          "DetachObject": { "$ref": "#/components/schemas/BatchDetachObject" },
          "DetachPolicy": { "$ref": "#/components/schemas/BatchDetachPolicy" },
          "DetachTypedLink": { "$ref": "#/components/schemas/BatchDetachTypedLink" },
          "RemoveFacetFromObject": { "$ref": "#/components/schemas/BatchRemoveFacetFromObject" },
          "UpdateLinkAttributes": { "$ref": "#/components/schemas/BatchUpdateLinkAttributes" },
          "UpdateObjectAttributes": { "$ref": "#/components/schemas/BatchUpdateObjectAttributes" }
        },
        "type": "object"
      },
      "BatchWriteOperationList": { "items": { "$ref": "#/components/schemas/BatchWriteOperation" }, "type": "array" },
      "BatchWriteOperationResponse": {
        "description": "Represents the output of a <code>BatchWrite</code> response operation.",
        "properties": {
          "AddFacetToObject": { "$ref": "#/components/schemas/BatchAddFacetToObjectResponse" },
          "AttachObject": { "$ref": "#/components/schemas/BatchAttachObjectResponse" },
          "AttachPolicy": { "$ref": "#/components/schemas/BatchAttachPolicyResponse" },
          "AttachToIndex": { "$ref": "#/components/schemas/BatchAttachToIndexResponse" },
          "AttachTypedLink": { "$ref": "#/components/schemas/BatchAttachTypedLinkResponse" },
          "CreateIndex": { "$ref": "#/components/schemas/BatchCreateIndexResponse" },
          "CreateObject": { "$ref": "#/components/schemas/BatchCreateObjectResponse" },
          "DeleteObject": { "$ref": "#/components/schemas/BatchDeleteObjectResponse" },
          "DetachFromIndex": { "$ref": "#/components/schemas/BatchDetachFromIndexResponse" },
          "DetachObject": { "$ref": "#/components/schemas/BatchDetachObjectResponse" },
          "DetachPolicy": { "$ref": "#/components/schemas/BatchDetachPolicyResponse" },
          "DetachTypedLink": { "$ref": "#/components/schemas/BatchDetachTypedLinkResponse" },
          "RemoveFacetFromObject": { "$ref": "#/components/schemas/BatchRemoveFacetFromObjectResponse" },
          "UpdateLinkAttributes": { "$ref": "#/components/schemas/BatchUpdateLinkAttributesResponse" },
          "UpdateObjectAttributes": { "$ref": "#/components/schemas/BatchUpdateObjectAttributesResponse" }
        },
        "type": "object"
      },
      "BatchWriteOperationResponseList": {
        "items": { "$ref": "#/components/schemas/BatchWriteOperationResponse" },
        "type": "array"
      },
      "BatchWriteRequest": {
        "properties": { "Operations": { "$ref": "#/components/schemas/BatchWriteOperationList" } },
        "required": ["Operations"],
        "type": "object"
      },
      "BatchWriteResponse": {
        "properties": { "Responses": { "$ref": "#/components/schemas/BatchWriteOperationResponseList" } },
        "type": "object"
      },
      "BinaryAttributeValue": { "type": "string" },
      "Bool": { "type": "boolean" },
      "BooleanAttributeValue": { "type": "boolean" },
      "CannotListParentOfRootException": {},
      "ConsistencyLevel": { "enum": ["SERIALIZABLE", "EVENTUAL"], "type": "string" },
      "CreateDirectoryRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/DirectoryName" } },
        "required": ["Name"],
        "type": "object"
      },
      "CreateDirectoryResponse": {
        "properties": {
          "AppliedSchemaArn": { "$ref": "#/components/schemas/Arn" },
          "DirectoryArn": { "$ref": "#/components/schemas/DirectoryArn" },
          "Name": { "$ref": "#/components/schemas/DirectoryName" },
          "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" }
        },
        "required": ["DirectoryArn", "Name", "ObjectIdentifier", "AppliedSchemaArn"],
        "type": "object"
      },
      "CreateFacetRequest": {
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/FacetAttributeList" },
          "FacetStyle": { "$ref": "#/components/schemas/FacetStyle" },
          "Name": { "$ref": "#/components/schemas/FacetName" },
          "ObjectType": { "$ref": "#/components/schemas/ObjectType" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "CreateFacetResponse": { "properties": {}, "type": "object" },
      "CreateIndexRequest": {
        "properties": {
          "IsUnique": { "$ref": "#/components/schemas/Bool" },
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "OrderedIndexedAttributeList": { "$ref": "#/components/schemas/AttributeKeyList" },
          "ParentReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["OrderedIndexedAttributeList", "IsUnique"],
        "type": "object"
      },
      "CreateIndexResponse": {
        "properties": { "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "CreateObjectRequest": {
        "properties": {
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "ObjectAttributeList": { "$ref": "#/components/schemas/AttributeKeyAndValueList" },
          "ParentReference": { "$ref": "#/components/schemas/ObjectReference" },
          "SchemaFacets": { "$ref": "#/components/schemas/SchemaFacetList" }
        },
        "required": ["SchemaFacets"],
        "type": "object"
      },
      "CreateObjectResponse": {
        "properties": { "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "CreateSchemaRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/SchemaName" } },
        "required": ["Name"],
        "type": "object"
      },
      "CreateSchemaResponse": {
        "properties": { "SchemaArn": { "$ref": "#/components/schemas/Arn" } },
        "type": "object"
      },
      "CreateTypedLinkFacetRequest": {
        "properties": { "Facet": { "$ref": "#/components/schemas/TypedLinkFacet" } },
        "required": ["Facet"],
        "type": "object"
      },
      "CreateTypedLinkFacetResponse": { "properties": {}, "type": "object" },
      "Date": { "format": "date-time", "type": "string" },
      "DatetimeAttributeValue": { "format": "date-time", "type": "string" },
      "DeleteDirectoryRequest": { "properties": {}, "type": "object" },
      "DeleteDirectoryResponse": {
        "properties": { "DirectoryArn": { "$ref": "#/components/schemas/Arn" } },
        "required": ["DirectoryArn"],
        "type": "object"
      },
      "DeleteFacetRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/FacetName" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteFacetResponse": { "properties": {}, "type": "object" },
      "DeleteObjectRequest": {
        "properties": { "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" } },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "DeleteObjectResponse": { "properties": {}, "type": "object" },
      "DeleteSchemaRequest": { "properties": {}, "type": "object" },
      "DeleteSchemaResponse": {
        "properties": { "SchemaArn": { "$ref": "#/components/schemas/Arn" } },
        "type": "object"
      },
      "DeleteTypedLinkFacetRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/TypedLinkName" } },
        "required": ["Name"],
        "type": "object"
      },
      "DeleteTypedLinkFacetResponse": { "properties": {}, "type": "object" },
      "DetachFromIndexRequest": {
        "properties": {
          "IndexReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TargetReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["IndexReference", "TargetReference"],
        "type": "object"
      },
      "DetachFromIndexResponse": {
        "properties": { "DetachedObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "DetachObjectRequest": {
        "properties": {
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "ParentReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ParentReference", "LinkName"],
        "type": "object"
      },
      "DetachObjectResponse": {
        "properties": { "DetachedObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "DetachPolicyRequest": {
        "properties": {
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "PolicyReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["PolicyReference", "ObjectReference"],
        "type": "object"
      },
      "DetachPolicyResponse": { "properties": {}, "type": "object" },
      "DetachTypedLinkRequest": {
        "properties": { "TypedLinkSpecifier": { "$ref": "#/components/schemas/TypedLinkSpecifier" } },
        "required": ["TypedLinkSpecifier"],
        "type": "object"
      },
      "Directory": {
        "description": "Directory structure that includes the directory name and directory ARN.",
        "properties": {
          "CreationDateTime": { "$ref": "#/components/schemas/Date" },
          "DirectoryArn": { "$ref": "#/components/schemas/DirectoryArn" },
          "Name": { "$ref": "#/components/schemas/DirectoryName" },
          "State": { "$ref": "#/components/schemas/DirectoryState" }
        },
        "type": "object"
      },
      "DirectoryAlreadyExistsException": {},
      "DirectoryArn": { "type": "string" },
      "DirectoryDeletedException": {},
      "DirectoryList": { "items": { "$ref": "#/components/schemas/Directory" }, "type": "array" },
      "DirectoryName": { "maxLength": 64, "minLength": 1, "pattern": "^[a-zA-Z0-9._-]*$", "type": "string" },
      "DirectoryNotDisabledException": {},
      "DirectoryNotEnabledException": {},
      "DirectoryState": { "enum": ["ENABLED", "DISABLED", "DELETED"], "type": "string" },
      "DisableDirectoryRequest": { "properties": {}, "type": "object" },
      "DisableDirectoryResponse": {
        "properties": { "DirectoryArn": { "$ref": "#/components/schemas/Arn" } },
        "required": ["DirectoryArn"],
        "type": "object"
      },
      "EnableDirectoryRequest": { "properties": {}, "type": "object" },
      "EnableDirectoryResponse": {
        "properties": { "DirectoryArn": { "$ref": "#/components/schemas/Arn" } },
        "required": ["DirectoryArn"],
        "type": "object"
      },
      "ExceptionMessage": { "type": "string" },
      "Facet": {
        "description": "A structure that contains <code>Name</code>, <code>ARN</code>, <code>Attributes</code>, <code> <a>Rule</a>s</code>, and <code>ObjectTypes</code>. See <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_whatarefacets.html\">Facets</a> for more information.",
        "properties": {
          "FacetStyle": { "$ref": "#/components/schemas/FacetStyle" },
          "Name": { "$ref": "#/components/schemas/FacetName" },
          "ObjectType": { "$ref": "#/components/schemas/ObjectType" }
        },
        "type": "object"
      },
      "FacetAlreadyExistsException": {},
      "FacetAttribute": {
        "description": "An attribute that is associated with the <a>Facet</a>.",
        "properties": {
          "AttributeDefinition": { "$ref": "#/components/schemas/FacetAttributeDefinition" },
          "AttributeReference": { "$ref": "#/components/schemas/FacetAttributeReference" },
          "Name": { "$ref": "#/components/schemas/AttributeName" },
          "RequiredBehavior": { "$ref": "#/components/schemas/RequiredAttributeBehavior" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "FacetAttributeDefinition": {
        "description": "A facet attribute definition. See <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html\">Attribute References</a> for more information.",
        "properties": {
          "DefaultValue": { "$ref": "#/components/schemas/TypedAttributeValue" },
          "IsImmutable": { "$ref": "#/components/schemas/Bool" },
          "Rules": { "$ref": "#/components/schemas/RuleMap" },
          "Type": { "$ref": "#/components/schemas/FacetAttributeType" }
        },
        "required": ["Type"],
        "type": "object"
      },
      "FacetAttributeList": { "items": { "$ref": "#/components/schemas/FacetAttribute" }, "type": "array" },
      "FacetAttributeReference": {
        "description": "The facet attribute reference that specifies the attribute definition that contains the attribute facet name and attribute name.",
        "properties": {
          "TargetAttributeName": { "$ref": "#/components/schemas/AttributeName" },
          "TargetFacetName": { "$ref": "#/components/schemas/FacetName" }
        },
        "required": ["TargetFacetName", "TargetAttributeName"],
        "type": "object"
      },
      "FacetAttributeType": {
        "enum": ["STRING", "BINARY", "BOOLEAN", "NUMBER", "DATETIME", "VARIANT"],
        "type": "string"
      },
      "FacetAttributeUpdate": {
        "description": "A structure that contains information used to update an attribute.",
        "properties": {
          "Action": { "$ref": "#/components/schemas/UpdateActionType" },
          "Attribute": { "$ref": "#/components/schemas/FacetAttribute" }
        },
        "type": "object"
      },
      "FacetAttributeUpdateList": { "items": { "$ref": "#/components/schemas/FacetAttributeUpdate" }, "type": "array" },
      "FacetInUseException": {},
      "FacetName": { "maxLength": 64, "minLength": 1, "pattern": "^[a-zA-Z0-9._-]*$", "type": "string" },
      "FacetNameList": { "items": { "$ref": "#/components/schemas/FacetName" }, "type": "array" },
      "FacetNotFoundException": {},
      "FacetStyle": { "enum": ["STATIC", "DYNAMIC"], "type": "string" },
      "FacetValidationException": {},
      "GetAppliedSchemaVersionRequest": {
        "properties": { "SchemaArn": { "$ref": "#/components/schemas/Arn" } },
        "required": ["SchemaArn"],
        "type": "object"
      },
      "GetAppliedSchemaVersionResponse": {
        "properties": { "AppliedSchemaArn": { "$ref": "#/components/schemas/Arn" } },
        "type": "object"
      },
      "GetDirectoryRequest": { "properties": {}, "type": "object" },
      "GetDirectoryResponse": {
        "properties": { "Directory": { "$ref": "#/components/schemas/Directory" } },
        "required": ["Directory"],
        "type": "object"
      },
      "GetFacetRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/FacetName" } },
        "required": ["Name"],
        "type": "object"
      },
      "GetFacetResponse": { "properties": { "Facet": { "$ref": "#/components/schemas/Facet" } }, "type": "object" },
      "GetLinkAttributesRequest": {
        "properties": {
          "AttributeNames": { "$ref": "#/components/schemas/AttributeNameList" },
          "ConsistencyLevel": { "$ref": "#/components/schemas/ConsistencyLevel" },
          "TypedLinkSpecifier": { "$ref": "#/components/schemas/TypedLinkSpecifier" }
        },
        "required": ["TypedLinkSpecifier", "AttributeNames"],
        "type": "object"
      },
      "GetLinkAttributesResponse": {
        "properties": { "Attributes": { "$ref": "#/components/schemas/AttributeKeyAndValueList" } },
        "type": "object"
      },
      "GetObjectAttributesRequest": {
        "properties": {
          "AttributeNames": { "$ref": "#/components/schemas/AttributeNameList" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "SchemaFacet": { "$ref": "#/components/schemas/SchemaFacet" }
        },
        "required": ["ObjectReference", "SchemaFacet", "AttributeNames"],
        "type": "object"
      },
      "GetObjectAttributesResponse": {
        "properties": { "Attributes": { "$ref": "#/components/schemas/AttributeKeyAndValueList" } },
        "type": "object"
      },
      "GetObjectInformationRequest": {
        "properties": { "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" } },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "GetObjectInformationResponse": {
        "properties": {
          "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" },
          "SchemaFacets": { "$ref": "#/components/schemas/SchemaFacetList" }
        },
        "type": "object"
      },
      "GetSchemaAsJsonRequest": { "properties": {}, "type": "object" },
      "GetSchemaAsJsonResponse": {
        "properties": {
          "Document": { "$ref": "#/components/schemas/SchemaJsonDocument" },
          "Name": { "$ref": "#/components/schemas/SchemaName" }
        },
        "type": "object"
      },
      "GetTypedLinkFacetInformationRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/TypedLinkName" } },
        "required": ["Name"],
        "type": "object"
      },
      "GetTypedLinkFacetInformationResponse": {
        "properties": { "IdentityAttributeOrder": { "$ref": "#/components/schemas/AttributeNameList" } },
        "type": "object"
      },
      "IncompatibleSchemaException": {},
      "IndexAttachment": {
        "description": "Represents an index and an attached object.",
        "properties": {
          "IndexedAttributes": { "$ref": "#/components/schemas/AttributeKeyAndValueList" },
          "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" }
        },
        "type": "object"
      },
      "IndexAttachmentList": { "items": { "$ref": "#/components/schemas/IndexAttachment" }, "type": "array" },
      "IndexedAttributeMissingException": {},
      "InternalServiceException": {},
      "InvalidArnException": {},
      "InvalidAttachmentException": {},
      "InvalidFacetUpdateException": {},
      "InvalidNextTokenException": {},
      "InvalidRuleException": {},
      "InvalidSchemaDocException": {},
      "InvalidTaggingRequestException": {},
      "LimitExceededException": {},
      "LinkAttributeAction": {
        "description": "The action to take on a typed link attribute value. Updates are only supported for attributes which don’t contribute to link identity.",
        "properties": {
          "AttributeActionType": { "$ref": "#/components/schemas/UpdateActionType" },
          "AttributeUpdateValue": { "$ref": "#/components/schemas/TypedAttributeValue" }
        },
        "type": "object"
      },
      "LinkAttributeUpdate": {
        "description": "Structure that contains attribute update information.",
        "properties": {
          "AttributeAction": { "$ref": "#/components/schemas/LinkAttributeAction" },
          "AttributeKey": { "$ref": "#/components/schemas/AttributeKey" }
        },
        "type": "object"
      },
      "LinkAttributeUpdateList": { "items": { "$ref": "#/components/schemas/LinkAttributeUpdate" }, "type": "array" },
      "LinkName": {
        "maxLength": 64,
        "minLength": 1,
        "pattern": "[^\\/\\[\\]\\(\\):\\{\\}#@!?\\s\\\\;]+",
        "type": "string"
      },
      "LinkNameAlreadyInUseException": {},
      "LinkNameToObjectIdentifierMap": {
        "additionalProperties": { "$ref": "#/components/schemas/ObjectIdentifier" },
        "type": "object"
      },
      "ListAppliedSchemaArnsRequest": {
        "properties": {
          "DirectoryArn": { "$ref": "#/components/schemas/Arn" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "SchemaArn": { "$ref": "#/components/schemas/Arn" }
        },
        "required": ["DirectoryArn"],
        "type": "object"
      },
      "ListAppliedSchemaArnsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "SchemaArns": { "$ref": "#/components/schemas/Arns" }
        },
        "type": "object"
      },
      "ListAttachedIndicesRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "TargetReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["TargetReference"],
        "type": "object"
      },
      "ListAttachedIndicesResponse": {
        "properties": {
          "IndexAttachments": { "$ref": "#/components/schemas/IndexAttachmentList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListDevelopmentSchemaArnsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListDevelopmentSchemaArnsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "SchemaArns": { "$ref": "#/components/schemas/Arns" }
        },
        "type": "object"
      },
      "ListDirectoriesRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "state": { "$ref": "#/components/schemas/DirectoryState" }
        },
        "type": "object"
      },
      "ListDirectoriesResponse": {
        "properties": {
          "Directories": { "$ref": "#/components/schemas/DirectoryList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "required": ["Directories"],
        "type": "object"
      },
      "ListFacetAttributesRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "Name": { "$ref": "#/components/schemas/FacetName" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "ListFacetAttributesResponse": {
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/FacetAttributeList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListFacetNamesRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListFacetNamesResponse": {
        "properties": {
          "FacetNames": { "$ref": "#/components/schemas/FacetNameList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListIncomingTypedLinksRequest": {
        "properties": {
          "ConsistencyLevel": { "$ref": "#/components/schemas/ConsistencyLevel" },
          "FilterAttributeRanges": { "$ref": "#/components/schemas/TypedLinkAttributeRangeList" },
          "FilterTypedLink": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "ListIncomingTypedLinksResponse": {
        "properties": {
          "LinkSpecifiers": { "$ref": "#/components/schemas/TypedLinkSpecifierList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListIndexRequest": {
        "properties": {
          "IndexReference": { "$ref": "#/components/schemas/ObjectReference" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "RangesOnIndexedValues": { "$ref": "#/components/schemas/ObjectAttributeRangeList" }
        },
        "required": ["IndexReference"],
        "type": "object"
      },
      "ListIndexResponse": {
        "properties": {
          "IndexAttachments": { "$ref": "#/components/schemas/IndexAttachmentList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListManagedSchemaArnsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "SchemaArn": { "$ref": "#/components/schemas/Arn" }
        },
        "type": "object"
      },
      "ListManagedSchemaArnsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "SchemaArns": { "$ref": "#/components/schemas/Arns" }
        },
        "type": "object"
      },
      "ListObjectAttributesRequest": {
        "properties": {
          "FacetFilter": { "$ref": "#/components/schemas/SchemaFacet" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "ListObjectAttributesResponse": {
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/AttributeKeyAndValueList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListObjectChildrenRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "ListObjectChildrenResponse": {
        "properties": {
          "Children": { "$ref": "#/components/schemas/LinkNameToObjectIdentifierMap" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListObjectParentPathsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "ListObjectParentPathsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "PathToObjectIdentifiersList": { "$ref": "#/components/schemas/PathToObjectIdentifiersList" }
        },
        "type": "object"
      },
      "ListObjectParentsRequest": {
        "properties": {
          "IncludeAllLinksToEachParent": { "$ref": "#/components/schemas/Bool" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "ListObjectParentsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ParentLinks": { "$ref": "#/components/schemas/ObjectIdentifierAndLinkNameList" },
          "Parents": { "$ref": "#/components/schemas/ObjectIdentifierToLinkNameMap" }
        },
        "type": "object"
      },
      "ListObjectPoliciesRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "ListObjectPoliciesResponse": {
        "properties": {
          "AttachedPolicyIds": { "$ref": "#/components/schemas/ObjectIdentifierList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListOutgoingTypedLinksRequest": {
        "properties": {
          "ConsistencyLevel": { "$ref": "#/components/schemas/ConsistencyLevel" },
          "FilterAttributeRanges": { "$ref": "#/components/schemas/TypedLinkAttributeRangeList" },
          "FilterTypedLink": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" },
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "ListOutgoingTypedLinksResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "TypedLinkSpecifiers": { "$ref": "#/components/schemas/TypedLinkSpecifierList" }
        },
        "type": "object"
      },
      "ListPolicyAttachmentsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "PolicyReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["PolicyReference"],
        "type": "object"
      },
      "ListPolicyAttachmentsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectIdentifiers": { "$ref": "#/components/schemas/ObjectIdentifierList" }
        },
        "type": "object"
      },
      "ListPublishedSchemaArnsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "SchemaArn": { "$ref": "#/components/schemas/Arn" }
        },
        "type": "object"
      },
      "ListPublishedSchemaArnsResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "SchemaArns": { "$ref": "#/components/schemas/Arns" }
        },
        "type": "object"
      },
      "ListTagsForResourceRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/TagsNumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ResourceArn": { "$ref": "#/components/schemas/Arn" }
        },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "ListTagsForResourceResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "type": "object"
      },
      "ListTypedLinkFacetAttributesRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "Name": { "$ref": "#/components/schemas/TypedLinkName" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "ListTypedLinkFacetAttributesResponse": {
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/TypedLinkAttributeDefinitionList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListTypedLinkFacetNamesRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListTypedLinkFacetNamesResponse": {
        "properties": {
          "FacetNames": { "$ref": "#/components/schemas/TypedLinkNameList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "LookupPolicyRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/NumberResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference"],
        "type": "object"
      },
      "LookupPolicyResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "PolicyToPathList": { "$ref": "#/components/schemas/PolicyToPathList" }
        },
        "type": "object"
      },
      "NextToken": { "type": "string" },
      "NotIndexException": {},
      "NotNodeException": {},
      "NotPolicyException": {},
      "NumberAttributeValue": { "type": "string" },
      "NumberResults": { "minimum": 1, "type": "integer" },
      "ObjectAlreadyDetachedException": {},
      "ObjectAttributeAction": {
        "description": "The action to take on the object attribute.",
        "properties": {
          "ObjectAttributeActionType": { "$ref": "#/components/schemas/UpdateActionType" },
          "ObjectAttributeUpdateValue": { "$ref": "#/components/schemas/TypedAttributeValue" }
        },
        "type": "object"
      },
      "ObjectAttributeRange": {
        "description": "A range of attributes.",
        "properties": {
          "AttributeKey": { "$ref": "#/components/schemas/AttributeKey" },
          "Range": { "$ref": "#/components/schemas/TypedAttributeValueRange" }
        },
        "type": "object"
      },
      "ObjectAttributeRangeList": { "items": { "$ref": "#/components/schemas/ObjectAttributeRange" }, "type": "array" },
      "ObjectAttributeUpdate": {
        "description": "Structure that contains attribute update information.",
        "properties": {
          "ObjectAttributeAction": { "$ref": "#/components/schemas/ObjectAttributeAction" },
          "ObjectAttributeKey": { "$ref": "#/components/schemas/AttributeKey" }
        },
        "type": "object"
      },
      "ObjectAttributeUpdateList": {
        "items": { "$ref": "#/components/schemas/ObjectAttributeUpdate" },
        "type": "array"
      },
      "ObjectIdentifier": { "type": "string" },
      "ObjectIdentifierAndLinkNameList": {
        "items": { "$ref": "#/components/schemas/ObjectIdentifierAndLinkNameTuple" },
        "type": "array"
      },
      "ObjectIdentifierAndLinkNameTuple": {
        "description": "A pair of ObjectIdentifier and LinkName.",
        "properties": {
          "LinkName": { "$ref": "#/components/schemas/LinkName" },
          "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" }
        },
        "type": "object"
      },
      "ObjectIdentifierList": { "items": { "$ref": "#/components/schemas/ObjectIdentifier" }, "type": "array" },
      "ObjectIdentifierToLinkNameMap": {
        "additionalProperties": { "$ref": "#/components/schemas/LinkName" },
        "type": "object"
      },
      "ObjectNotDetachedException": {},
      "ObjectReference": {
        "description": "The reference that identifies an object.",
        "properties": { "Selector": { "$ref": "#/components/schemas/SelectorObjectReference" } },
        "type": "object"
      },
      "ObjectType": { "enum": ["NODE", "LEAF_NODE", "POLICY", "INDEX"], "type": "string" },
      "PathString": { "type": "string" },
      "PathToObjectIdentifiers": {
        "description": "Returns the path to the <code>ObjectIdentifiers</code> that is associated with the directory.",
        "properties": {
          "ObjectIdentifiers": { "$ref": "#/components/schemas/ObjectIdentifierList" },
          "Path": { "$ref": "#/components/schemas/PathString" }
        },
        "type": "object"
      },
      "PathToObjectIdentifiersList": {
        "items": { "$ref": "#/components/schemas/PathToObjectIdentifiers" },
        "type": "array"
      },
      "PolicyAttachment": {
        "description": "Contains the <code>PolicyType</code>, <code>PolicyId</code>, and the <code>ObjectIdentifier</code> to which it is attached. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies\">Policies</a>.",
        "properties": {
          "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" },
          "PolicyId": { "$ref": "#/components/schemas/ObjectIdentifier" },
          "PolicyType": { "$ref": "#/components/schemas/PolicyType" }
        },
        "type": "object"
      },
      "PolicyAttachmentList": { "items": { "$ref": "#/components/schemas/PolicyAttachment" }, "type": "array" },
      "PolicyToPath": {
        "description": "Used when a regular object exists in a <a>Directory</a> and you want to find all of the policies that are associated with that object and the parent to that object.",
        "properties": {
          "Path": { "$ref": "#/components/schemas/PathString" },
          "Policies": { "$ref": "#/components/schemas/PolicyAttachmentList" }
        },
        "type": "object"
      },
      "PolicyToPathList": { "items": { "$ref": "#/components/schemas/PolicyToPath" }, "type": "array" },
      "PolicyType": { "type": "string" },
      "PublishSchemaRequest": {
        "properties": {
          "MinorVersion": { "$ref": "#/components/schemas/Version" },
          "Name": { "$ref": "#/components/schemas/SchemaName" },
          "Version": { "$ref": "#/components/schemas/Version" }
        },
        "required": ["Version"],
        "type": "object"
      },
      "PublishSchemaResponse": {
        "properties": { "PublishedSchemaArn": { "$ref": "#/components/schemas/Arn" } },
        "type": "object"
      },
      "PutSchemaFromJsonRequest": {
        "properties": { "Document": { "$ref": "#/components/schemas/SchemaJsonDocument" } },
        "required": ["Document"],
        "type": "object"
      },
      "PutSchemaFromJsonResponse": {
        "properties": { "Arn": { "$ref": "#/components/schemas/Arn" } },
        "type": "object"
      },
      "RangeMode": {
        "enum": ["FIRST", "LAST", "LAST_BEFORE_MISSING_VALUES", "INCLUSIVE", "EXCLUSIVE"],
        "type": "string"
      },
      "RemoveFacetFromObjectRequest": {
        "properties": {
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "SchemaFacet": { "$ref": "#/components/schemas/SchemaFacet" }
        },
        "required": ["SchemaFacet", "ObjectReference"],
        "type": "object"
      },
      "RemoveFacetFromObjectResponse": { "properties": {}, "type": "object" },
      "RequiredAttributeBehavior": { "enum": ["REQUIRED_ALWAYS", "NOT_REQUIRED"], "type": "string" },
      "ResourceNotFoundException": {},
      "RetryableConflictException": {},
      "Rule": {
        "description": "Contains an Amazon Resource Name (ARN) and parameters that are associated with the rule.",
        "properties": {
          "Parameters": { "$ref": "#/components/schemas/RuleParameterMap" },
          "Type": { "$ref": "#/components/schemas/RuleType" }
        },
        "type": "object"
      },
      "RuleKey": { "maxLength": 64, "minLength": 1, "pattern": "^[a-zA-Z0-9._-]*$", "type": "string" },
      "RuleMap": { "additionalProperties": { "$ref": "#/components/schemas/Rule" }, "type": "object" },
      "RuleParameterKey": { "type": "string" },
      "RuleParameterMap": {
        "additionalProperties": { "$ref": "#/components/schemas/RuleParameterValue" },
        "type": "object"
      },
      "RuleParameterValue": { "type": "string" },
      "RuleType": {
        "enum": ["BINARY_LENGTH", "NUMBER_COMPARISON", "STRING_FROM_SET", "STRING_LENGTH"],
        "type": "string"
      },
      "SchemaAlreadyExistsException": {},
      "SchemaAlreadyPublishedException": {},
      "SchemaFacet": {
        "description": "A facet.",
        "properties": {
          "FacetName": { "$ref": "#/components/schemas/FacetName" },
          "SchemaArn": { "$ref": "#/components/schemas/Arn" }
        },
        "type": "object"
      },
      "SchemaFacetList": { "items": { "$ref": "#/components/schemas/SchemaFacet" }, "type": "array" },
      "SchemaJsonDocument": { "type": "string" },
      "SchemaName": { "maxLength": 32, "minLength": 1, "pattern": "^[a-zA-Z0-9._-]*$", "type": "string" },
      "SelectorObjectReference": { "type": "string" },
      "StillContainsLinksException": {},
      "StringAttributeValue": { "type": "string" },
      "Tag": {
        "description": "The tag structure that contains a tag key and value.",
        "properties": {
          "Key": { "$ref": "#/components/schemas/TagKey" },
          "Value": { "$ref": "#/components/schemas/TagValue" }
        },
        "type": "object"
      },
      "TagKey": { "type": "string" },
      "TagKeyList": { "items": { "$ref": "#/components/schemas/TagKey" }, "type": "array" },
      "TagList": { "items": { "$ref": "#/components/schemas/Tag" }, "type": "array" },
      "TagResourceRequest": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/Arn" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["ResourceArn", "Tags"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValue": { "type": "string" },
      "TagsNumberResults": { "minimum": 50, "type": "integer" },
      "TypedAttributeValue": {
        "description": "Represents the data for a typed attribute. You can set one, and only one, of the elements. Each attribute in an item is a name-value pair. Attributes have a single value.",
        "properties": {
          "BinaryValue": { "$ref": "#/components/schemas/BinaryAttributeValue" },
          "BooleanValue": { "$ref": "#/components/schemas/BooleanAttributeValue" },
          "DatetimeValue": { "$ref": "#/components/schemas/DatetimeAttributeValue" },
          "NumberValue": { "$ref": "#/components/schemas/NumberAttributeValue" },
          "StringValue": { "$ref": "#/components/schemas/StringAttributeValue" }
        },
        "type": "object"
      },
      "TypedAttributeValueRange": {
        "description": "A range of attribute values. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_range_filters.html\">Range Filters</a>.",
        "properties": {
          "EndMode": { "$ref": "#/components/schemas/RangeMode" },
          "EndValue": { "$ref": "#/components/schemas/TypedAttributeValue" },
          "StartMode": { "$ref": "#/components/schemas/RangeMode" },
          "StartValue": { "$ref": "#/components/schemas/TypedAttributeValue" }
        },
        "required": ["StartMode", "EndMode"],
        "type": "object"
      },
      "TypedLinkAttributeDefinition": {
        "description": "A typed link attribute definition.",
        "properties": {
          "DefaultValue": { "$ref": "#/components/schemas/TypedAttributeValue" },
          "IsImmutable": { "$ref": "#/components/schemas/Bool" },
          "Name": { "$ref": "#/components/schemas/AttributeName" },
          "RequiredBehavior": { "$ref": "#/components/schemas/RequiredAttributeBehavior" },
          "Rules": { "$ref": "#/components/schemas/RuleMap" },
          "Type": { "$ref": "#/components/schemas/FacetAttributeType" }
        },
        "required": ["Name", "Type", "RequiredBehavior"],
        "type": "object"
      },
      "TypedLinkAttributeDefinitionList": {
        "items": { "$ref": "#/components/schemas/TypedLinkAttributeDefinition" },
        "type": "array"
      },
      "TypedLinkAttributeRange": {
        "description": "Identifies the range of attributes that are used by a specified filter.",
        "properties": {
          "AttributeName": { "$ref": "#/components/schemas/AttributeName" },
          "Range": { "$ref": "#/components/schemas/TypedAttributeValueRange" }
        },
        "required": ["Range"],
        "type": "object"
      },
      "TypedLinkAttributeRangeList": {
        "items": { "$ref": "#/components/schemas/TypedLinkAttributeRange" },
        "type": "array"
      },
      "TypedLinkFacet": {
        "description": "Defines the typed links structure and its attributes. To create a typed link facet, use the <a>CreateTypedLinkFacet</a> API.",
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/TypedLinkAttributeDefinitionList" },
          "IdentityAttributeOrder": { "$ref": "#/components/schemas/AttributeNameList" },
          "Name": { "$ref": "#/components/schemas/TypedLinkName" }
        },
        "required": ["Name", "Attributes", "IdentityAttributeOrder"],
        "type": "object"
      },
      "TypedLinkFacetAttributeUpdate": {
        "description": "A typed link facet attribute update.",
        "properties": {
          "Action": { "$ref": "#/components/schemas/UpdateActionType" },
          "Attribute": { "$ref": "#/components/schemas/TypedLinkAttributeDefinition" }
        },
        "required": ["Attribute", "Action"],
        "type": "object"
      },
      "TypedLinkFacetAttributeUpdateList": {
        "items": { "$ref": "#/components/schemas/TypedLinkFacetAttributeUpdate" },
        "type": "array"
      },
      "TypedLinkName": { "pattern": "^[a-zA-Z0-9._-]*$", "type": "string" },
      "TypedLinkNameList": { "items": { "$ref": "#/components/schemas/TypedLinkName" }, "type": "array" },
      "TypedLinkSchemaAndFacetName": {
        "description": "Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.",
        "properties": {
          "SchemaArn": { "$ref": "#/components/schemas/Arn" },
          "TypedLinkName": { "$ref": "#/components/schemas/TypedLinkName" }
        },
        "required": ["SchemaArn", "TypedLinkName"],
        "type": "object"
      },
      "TypedLinkSpecifier": {
        "description": "Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.",
        "properties": {
          "IdentityAttributeValues": { "$ref": "#/components/schemas/AttributeNameAndValueList" },
          "SourceObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TargetObjectReference": { "$ref": "#/components/schemas/ObjectReference" },
          "TypedLinkFacet": { "$ref": "#/components/schemas/TypedLinkSchemaAndFacetName" }
        },
        "required": ["TypedLinkFacet", "SourceObjectReference", "TargetObjectReference", "IdentityAttributeValues"],
        "type": "object"
      },
      "TypedLinkSpecifierList": { "items": { "$ref": "#/components/schemas/TypedLinkSpecifier" }, "type": "array" },
      "UnsupportedIndexTypeException": {},
      "UntagResourceRequest": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/Arn" },
          "TagKeys": { "$ref": "#/components/schemas/TagKeyList" }
        },
        "required": ["ResourceArn", "TagKeys"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UpdateActionType": { "enum": ["CREATE_OR_UPDATE", "DELETE"], "type": "string" },
      "UpdateFacetRequest": {
        "properties": {
          "AttributeUpdates": { "$ref": "#/components/schemas/FacetAttributeUpdateList" },
          "Name": { "$ref": "#/components/schemas/FacetName" },
          "ObjectType": { "$ref": "#/components/schemas/ObjectType" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "UpdateFacetResponse": { "properties": {}, "type": "object" },
      "UpdateLinkAttributesRequest": {
        "properties": {
          "AttributeUpdates": { "$ref": "#/components/schemas/LinkAttributeUpdateList" },
          "TypedLinkSpecifier": { "$ref": "#/components/schemas/TypedLinkSpecifier" }
        },
        "required": ["TypedLinkSpecifier", "AttributeUpdates"],
        "type": "object"
      },
      "UpdateLinkAttributesResponse": { "properties": {}, "type": "object" },
      "UpdateObjectAttributesRequest": {
        "properties": {
          "AttributeUpdates": { "$ref": "#/components/schemas/ObjectAttributeUpdateList" },
          "ObjectReference": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["ObjectReference", "AttributeUpdates"],
        "type": "object"
      },
      "UpdateObjectAttributesResponse": {
        "properties": { "ObjectIdentifier": { "$ref": "#/components/schemas/ObjectIdentifier" } },
        "type": "object"
      },
      "UpdateSchemaRequest": {
        "properties": { "Name": { "$ref": "#/components/schemas/SchemaName" } },
        "required": ["Name"],
        "type": "object"
      },
      "UpdateSchemaResponse": {
        "properties": { "SchemaArn": { "$ref": "#/components/schemas/Arn" } },
        "type": "object"
      },
      "UpdateTypedLinkFacetRequest": {
        "properties": {
          "AttributeUpdates": { "$ref": "#/components/schemas/TypedLinkFacetAttributeUpdateList" },
          "IdentityAttributeOrder": { "$ref": "#/components/schemas/AttributeNameList" },
          "Name": { "$ref": "#/components/schemas/TypedLinkName" }
        },
        "required": ["Name", "AttributeUpdates", "IdentityAttributeOrder"],
        "type": "object"
      },
      "UpdateTypedLinkFacetResponse": { "properties": {}, "type": "object" },
      "UpgradeAppliedSchemaRequest": {
        "properties": {
          "DirectoryArn": { "$ref": "#/components/schemas/Arn" },
          "DryRun": { "$ref": "#/components/schemas/Bool" },
          "PublishedSchemaArn": { "$ref": "#/components/schemas/Arn" }
        },
        "required": ["PublishedSchemaArn", "DirectoryArn"],
        "type": "object"
      },
      "UpgradeAppliedSchemaResponse": {
        "properties": {
          "DirectoryArn": { "$ref": "#/components/schemas/Arn" },
          "UpgradedSchemaArn": { "$ref": "#/components/schemas/Arn" }
        },
        "type": "object"
      },
      "UpgradePublishedSchemaRequest": {
        "properties": {
          "DevelopmentSchemaArn": { "$ref": "#/components/schemas/Arn" },
          "DryRun": { "$ref": "#/components/schemas/Bool" },
          "MinorVersion": { "$ref": "#/components/schemas/Version" },
          "PublishedSchemaArn": { "$ref": "#/components/schemas/Arn" }
        },
        "required": ["DevelopmentSchemaArn", "PublishedSchemaArn", "MinorVersion"],
        "type": "object"
      },
      "UpgradePublishedSchemaResponse": {
        "properties": { "UpgradedSchemaArn": { "$ref": "#/components/schemas/Arn" } },
        "type": "object"
      },
      "ValidationException": {},
      "Version": { "maxLength": 10, "minLength": 1, "pattern": "^[a-zA-Z0-9._-]*$", "type": "string" }
    }
  }
}
