{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS IoT Things Graph",
    "version": "2018-09-06",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iotthingsgraph-2018-09-06.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "iotthingsgraph"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/iotthingsgraph/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=IotThingsGraphFrontEndService.AssociateEntityToThing": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Associates a device with a concrete thing that is in the user's registry.</p> <p>A thing can be associated with only one device at a time. If you associate a thing with a new device id, its previous association will be removed.</p>",
        "operationId": "AssociateEntityToThing",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.AssociateEntityToThing"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AssociateEntityToThingRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AssociateEntityToThingResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.CreateFlowTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a workflow template. Workflows can be created only in the user's namespace. (The public namespace contains only entities.) The workflow can contain only entities in the specified namespace. The workflow is validated against the entities in the latest version of the user's namespace unless another namespace version is specified in the request.",
        "operationId": "CreateFlowTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.CreateFlowTemplate"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateFlowTemplateRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateFlowTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.CreateSystemInstance": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a system instance. </p> <p>This action validates the system instance, prepares the deployment-related resources. For Greengrass deployments, it updates the Greengrass group that is specified by the <code>greengrassGroupName</code> parameter. It also adds a file to the S3 bucket specified by the <code>s3BucketName</code> parameter. You need to call <code>DeploySystemInstance</code> after running this action.</p> <p>For Greengrass deployments, since this action modifies and adds resources to a Greengrass group and an S3 bucket on the caller's behalf, the calling identity must have write permissions to both the specified Greengrass group and S3 bucket. Otherwise, the call will fail with an authorization error.</p> <p>For cloud deployments, this action requires a <code>flowActionsRoleArn</code> value. This is an IAM role that has permissions to access AWS services, such as AWS Lambda and AWS IoT, that the flow uses when it executes.</p> <p>If the definition document doesn't specify a version of the user's namespace, the latest version will be used by default.</p>",
        "operationId": "CreateSystemInstance",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.CreateSystemInstance"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateSystemInstanceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateSystemInstanceResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.CreateSystemTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a system. The system is validated against the entities in the latest version of the user's namespace unless another namespace version is specified in the request.",
        "operationId": "CreateSystemTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.CreateSystemTemplate"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateSystemTemplateRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateSystemTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DeleteFlowTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a workflow. Any new system or deployment that contains this workflow will fail to update or deploy. Existing deployments that contain the workflow will continue to run (since they use a snapshot of the workflow taken at the time of deployment).",
        "operationId": "DeleteFlowTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DeleteFlowTemplate"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteFlowTemplateRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteFlowTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DeleteNamespace": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified namespace. This action deletes all of the entities in the namespace. Delete the systems and flows that use entities in the namespace before performing this action.",
        "operationId": "DeleteNamespace",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DeleteNamespace"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteNamespaceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteNamespaceResponse" } } }
          },
          "480": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DeleteSystemInstance": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes a system instance. Only system instances that have never been deployed, or that have been undeployed can be deleted.</p> <p>Users can create a new system instance that has the same ID as a deleted system instance.</p>",
        "operationId": "DeleteSystemInstance",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DeleteSystemInstance"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSystemInstanceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSystemInstanceResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DeleteSystemTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a system. New deployments can't contain the system after its deletion. Existing deployments that contain the system will continue to work because they use a snapshot of the system that is taken when it is deployed.",
        "operationId": "DeleteSystemTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DeleteSystemTemplate"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSystemTemplateRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteSystemTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DeploySystemInstance": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p> <b>Greengrass and Cloud Deployments</b> </p> <p>Deploys the system instance to the target specified in <code>CreateSystemInstance</code>. </p> <p> <b>Greengrass Deployments</b> </p> <p>If the system or any workflows and entities have been updated before this action is called, then the deployment will create a new Amazon Simple Storage Service resource file and then deploy it.</p> <p>Since this action creates a Greengrass deployment on the caller's behalf, the calling identity must have write permissions to the specified Greengrass group. Otherwise, the call will fail with an authorization error.</p> <p>For information about the artifacts that get added to your Greengrass core device when you use this API, see <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-greengrass.html\">AWS IoT Things Graph and AWS IoT Greengrass</a>.</p>",
        "operationId": "DeploySystemInstance",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DeploySystemInstance"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeploySystemInstanceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeploySystemInstanceResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DeprecateFlowTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deprecates the specified workflow. This action marks the workflow for deletion. Deprecated flows can't be deployed, but existing deployments will continue to run.",
        "operationId": "DeprecateFlowTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DeprecateFlowTemplate"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeprecateFlowTemplateRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeprecateFlowTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DeprecateSystemTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deprecates the specified system.",
        "operationId": "DeprecateSystemTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DeprecateSystemTemplate"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeprecateSystemTemplateRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeprecateSystemTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DescribeNamespace": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the latest version of the user's namespace and the public version that it is tracking.",
        "operationId": "DescribeNamespace",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DescribeNamespace"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeNamespaceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeNamespaceResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.DissociateEntityFromThing": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Dissociates a device entity from a concrete thing. The action takes only the type of the entity that you need to dissociate because only one entity of a particular type can be associated with a thing.",
        "operationId": "DissociateEntityFromThing",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.DissociateEntityFromThing"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DissociateEntityFromThingRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DissociateEntityFromThingResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.GetEntities": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Gets definitions of the specified entities. Uses the latest version of the user's namespace by default. This API returns the following TDM entities.</p> <ul> <li> <p>Properties</p> </li> <li> <p>States</p> </li> <li> <p>Events</p> </li> <li> <p>Actions</p> </li> <li> <p>Capabilities</p> </li> <li> <p>Mappings</p> </li> <li> <p>Devices</p> </li> <li> <p>Device Models</p> </li> <li> <p>Services</p> </li> </ul> <p>This action doesn't return definitions for systems, flows, and deployments.</p>",
        "operationId": "GetEntities",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.GetEntities"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetEntitiesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetEntitiesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.GetFlowTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the latest version of the <code>DefinitionDocument</code> and <code>FlowTemplateSummary</code> for the specified workflow.",
        "operationId": "GetFlowTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.GetFlowTemplate"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetFlowTemplateRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetFlowTemplateResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.GetFlowTemplateRevisions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets revisions of the specified workflow. Only the last 100 revisions are stored. If the workflow has been deprecated, this action will return revisions that occurred before the deprecation. This action won't work for workflows that have been deleted.",
        "operationId": "GetFlowTemplateRevisions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.GetFlowTemplateRevisions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetFlowTemplateRevisionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetFlowTemplateRevisionsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.GetNamespaceDeletionStatus": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the status of a namespace deletion task.",
        "operationId": "GetNamespaceDeletionStatus",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.GetNamespaceDeletionStatus"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetNamespaceDeletionStatusRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetNamespaceDeletionStatusResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.GetSystemInstance": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets a system instance.",
        "operationId": "GetSystemInstance",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.GetSystemInstance"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetSystemInstanceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetSystemInstanceResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.GetSystemTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets a system.",
        "operationId": "GetSystemTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.GetSystemTemplate"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetSystemTemplateRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetSystemTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.GetSystemTemplateRevisions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets revisions made to the specified system template. Only the previous 100 revisions are stored. If the system has been deprecated, this action will return the revisions that occurred before its deprecation. This action won't work with systems that have been deleted.",
        "operationId": "GetSystemTemplateRevisions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.GetSystemTemplateRevisions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetSystemTemplateRevisionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetSystemTemplateRevisionsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.GetUploadStatus": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the status of the specified upload.",
        "operationId": "GetUploadStatus",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.GetUploadStatus"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetUploadStatusRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetUploadStatusResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.ListFlowExecutionMessages": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of objects that contain information about events in a flow execution.",
        "operationId": "ListFlowExecutionMessages",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.ListFlowExecutionMessages"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListFlowExecutionMessagesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListFlowExecutionMessagesResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.ListTagsForResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists all tags on an AWS IoT Things Graph resource.",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.ListTagsForResource"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.SearchEntities": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Searches for entities of the specified type. You can search for entities in your namespace and the public namespace that you're tracking.",
        "operationId": "SearchEntities",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.SearchEntities"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchEntitiesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchEntitiesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.SearchFlowExecutions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Searches for AWS IoT Things Graph workflow execution instances.",
        "operationId": "SearchFlowExecutions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.SearchFlowExecutions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchFlowExecutionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SearchFlowExecutionsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.SearchFlowTemplates": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Searches for summary information about workflows.",
        "operationId": "SearchFlowTemplates",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.SearchFlowTemplates"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchFlowTemplatesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SearchFlowTemplatesResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.SearchSystemInstances": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Searches for system instances in the user's account.",
        "operationId": "SearchSystemInstances",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.SearchSystemInstances"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchSystemInstancesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SearchSystemInstancesResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.SearchSystemTemplates": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Searches for summary information about systems in the user's account. You can filter by the ID of a workflow to return only systems that use the specified workflow.",
        "operationId": "SearchSystemTemplates",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.SearchSystemTemplates"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchSystemTemplatesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SearchSystemTemplatesResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.SearchThings": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Searches for things associated with the specified entity. You can search by both device and device model.</p> <p>For example, if two different devices, camera1 and camera2, implement the camera device model, the user can associate thing1 to camera1 and thing2 to camera2. <code>SearchThings(camera2)</code> will return only thing2, but <code>SearchThings(camera)</code> will return both thing1 and thing2.</p> <p>This action searches for exact matches and doesn't perform partial text matching.</p>",
        "operationId": "SearchThings",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.SearchThings"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchThingsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchThingsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a tag for the specified resource.",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.UndeploySystemInstance": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes a system instance from its target (Cloud or Greengrass).",
        "operationId": "UndeploySystemInstance",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.UndeploySystemInstance"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UndeploySystemInstanceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UndeploySystemInstanceResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResourceInUseException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes a tag from the specified resource.",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.UpdateFlowTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the specified workflow. All deployed systems and system instances that use the workflow will see the changes in the flow when it is redeployed. If you don't want this behavior, copy the workflow (creating a new workflow with a different ID), and update the copy. The workflow can contain only entities in the specified namespace. ",
        "operationId": "UpdateFlowTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.UpdateFlowTemplate"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateFlowTemplateRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateFlowTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.UpdateSystemTemplate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the specified system. You don't need to run this action after updating a workflow. Any deployment that uses the system will see the changes in the system when it is redeployed.",
        "operationId": "UpdateSystemTemplate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.UpdateSystemTemplate"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateSystemTemplateRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateSystemTemplateResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=IotThingsGraphFrontEndService.UploadEntityDefinitions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Asynchronously uploads one or more entity definitions to the user's namespace. The <code>document</code> parameter is required if <code>syncWithPublicNamespace</code> and <code>deleteExistingEntites</code> are false. If the <code>syncWithPublicNamespace</code> parameter is set to <code>true</code>, the user's namespace will synchronize with the latest version of the public namespace. If <code>deprecateExistingEntities</code> is set to true, all entities in the latest version will be deleted before the new <code>DefinitionDocument</code> is uploaded.</p> <p>When a user uploads entity definitions for the first time, the service creates a new namespace for the user. The new namespace tracks the public namespace. Currently users can have only one namespace. The namespace version increments whenever a user uploads entity definitions that are backwards-incompatible and whenever a user sets the <code>syncWithPublicNamespace</code> parameter or the <code>deprecateExistingEntities</code> parameter to <code>true</code>.</p> <p>The IDs for all of the entities should be in URN format. Each entity must be in the user's namespace. Users can't create entities in the public namespace, but entity definitions can refer to entities in the public namespace.</p> <p>Valid entities are <code>Device</code>, <code>DeviceModel</code>, <code>Service</code>, <code>Capability</code>, <code>State</code>, <code>Action</code>, <code>Event</code>, <code>Property</code>, <code>Mapping</code>, <code>Enum</code>. </p>",
        "operationId": "UploadEntityDefinitions",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["IotThingsGraphFrontEndService.UploadEntityDefinitions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UploadEntityDefinitionsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UploadEntityDefinitionsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The AWS IoT Things Graph multi-region endpoint",
      "url": "http://iotthingsgraph.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS IoT Things Graph multi-region endpoint",
      "url": "https://iotthingsgraph.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS IoT Things Graph endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://iotthingsgraph.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The AWS IoT Things Graph endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://iotthingsgraph.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "Arn": { "type": "string" },
      "AssociateEntityToThingRequest": {
        "properties": {
          "entityId": { "$ref": "#/components/schemas/Urn" },
          "namespaceVersion": { "$ref": "#/components/schemas/Version" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "required": ["thingName", "entityId"],
        "type": "object"
      },
      "AssociateEntityToThingResponse": { "properties": {}, "type": "object" },
      "CreateFlowTemplateRequest": {
        "properties": {
          "compatibleNamespaceVersion": { "$ref": "#/components/schemas/Version" },
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" }
        },
        "required": ["definition"],
        "type": "object"
      },
      "CreateFlowTemplateResponse": {
        "properties": { "summary": { "$ref": "#/components/schemas/FlowTemplateSummary" } },
        "type": "object"
      },
      "CreateSystemInstanceRequest": {
        "properties": {
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" },
          "flowActionsRoleArn": { "$ref": "#/components/schemas/RoleArn" },
          "greengrassGroupName": { "$ref": "#/components/schemas/GroupName" },
          "metricsConfiguration": { "$ref": "#/components/schemas/MetricsConfiguration" },
          "s3BucketName": { "$ref": "#/components/schemas/S3BucketName" },
          "tags": { "$ref": "#/components/schemas/TagList" },
          "target": { "$ref": "#/components/schemas/DeploymentTarget" }
        },
        "required": ["definition", "target"],
        "type": "object"
      },
      "CreateSystemInstanceResponse": {
        "properties": { "summary": { "$ref": "#/components/schemas/SystemInstanceSummary" } },
        "type": "object"
      },
      "CreateSystemTemplateRequest": {
        "properties": {
          "compatibleNamespaceVersion": { "$ref": "#/components/schemas/Version" },
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" }
        },
        "required": ["definition"],
        "type": "object"
      },
      "CreateSystemTemplateResponse": {
        "properties": { "summary": { "$ref": "#/components/schemas/SystemTemplateSummary" } },
        "type": "object"
      },
      "DefinitionDocument": {
        "description": "A document that defines an entity. ",
        "properties": {
          "language": { "$ref": "#/components/schemas/DefinitionLanguage" },
          "text": { "$ref": "#/components/schemas/DefinitionText" }
        },
        "required": ["language", "text"],
        "type": "object"
      },
      "DefinitionLanguage": { "enum": ["GRAPHQL"], "type": "string" },
      "DefinitionText": { "maxLength": 1048576, "type": "string" },
      "DeleteFlowTemplateRequest": {
        "properties": { "id": { "$ref": "#/components/schemas/Urn" } },
        "required": ["id"],
        "type": "object"
      },
      "DeleteFlowTemplateResponse": { "properties": {}, "type": "object" },
      "DeleteNamespaceRequest": { "properties": {}, "type": "object" },
      "DeleteNamespaceResponse": {
        "properties": {
          "namespaceArn": { "$ref": "#/components/schemas/Arn" },
          "namespaceName": { "$ref": "#/components/schemas/NamespaceName" }
        },
        "type": "object"
      },
      "DeleteSystemInstanceRequest": {
        "properties": { "id": { "$ref": "#/components/schemas/Urn" } },
        "type": "object"
      },
      "DeleteSystemInstanceResponse": { "properties": {}, "type": "object" },
      "DeleteSystemTemplateRequest": {
        "properties": { "id": { "$ref": "#/components/schemas/Urn" } },
        "required": ["id"],
        "type": "object"
      },
      "DeleteSystemTemplateResponse": { "properties": {}, "type": "object" },
      "DependencyRevision": {
        "description": "An object that contains the ID and revision number of a workflow or system that is part of a deployment.",
        "properties": {
          "id": { "$ref": "#/components/schemas/Urn" },
          "revisionNumber": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "DependencyRevisions": { "items": { "$ref": "#/components/schemas/DependencyRevision" }, "type": "array" },
      "DeploySystemInstanceRequest": {
        "properties": { "id": { "$ref": "#/components/schemas/Urn" } },
        "type": "object"
      },
      "DeploySystemInstanceResponse": {
        "properties": {
          "greengrassDeploymentId": { "$ref": "#/components/schemas/GreengrassDeploymentId" },
          "summary": { "$ref": "#/components/schemas/SystemInstanceSummary" }
        },
        "required": ["summary"],
        "type": "object"
      },
      "DeploymentTarget": { "enum": ["GREENGRASS", "CLOUD"], "type": "string" },
      "DeprecateExistingEntities": { "type": "boolean" },
      "DeprecateFlowTemplateRequest": {
        "properties": { "id": { "$ref": "#/components/schemas/Urn" } },
        "required": ["id"],
        "type": "object"
      },
      "DeprecateFlowTemplateResponse": { "properties": {}, "type": "object" },
      "DeprecateSystemTemplateRequest": {
        "properties": { "id": { "$ref": "#/components/schemas/Urn" } },
        "required": ["id"],
        "type": "object"
      },
      "DeprecateSystemTemplateResponse": { "properties": {}, "type": "object" },
      "DescribeNamespaceRequest": {
        "properties": { "namespaceName": { "$ref": "#/components/schemas/NamespaceName" } },
        "type": "object"
      },
      "DescribeNamespaceResponse": {
        "properties": {
          "namespaceArn": { "$ref": "#/components/schemas/Arn" },
          "namespaceName": { "$ref": "#/components/schemas/NamespaceName" },
          "namespaceVersion": { "$ref": "#/components/schemas/Version" },
          "trackingNamespaceName": { "$ref": "#/components/schemas/NamespaceName" },
          "trackingNamespaceVersion": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "DissociateEntityFromThingRequest": {
        "properties": {
          "entityType": { "$ref": "#/components/schemas/EntityType" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "required": ["thingName", "entityType"],
        "type": "object"
      },
      "DissociateEntityFromThingResponse": { "properties": {}, "type": "object" },
      "Enabled": { "type": "boolean" },
      "EntityDescription": {
        "description": "Describes the properties of an entity.",
        "properties": {
          "arn": { "$ref": "#/components/schemas/Arn" },
          "createdAt": { "$ref": "#/components/schemas/Timestamp" },
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" },
          "id": { "$ref": "#/components/schemas/Urn" },
          "type": { "$ref": "#/components/schemas/EntityType" }
        },
        "type": "object"
      },
      "EntityDescriptions": { "items": { "$ref": "#/components/schemas/EntityDescription" }, "type": "array" },
      "EntityFilter": {
        "description": "An object that filters an entity search. Multiple filters function as OR criteria in the search. For example a search that includes a <code>NAMESPACE</code> and a <code>REFERENCED_ENTITY_ID</code> filter searches for entities in the specified namespace that use the entity specified by the value of <code>REFERENCED_ENTITY_ID</code>.",
        "properties": {
          "name": { "$ref": "#/components/schemas/EntityFilterName" },
          "value": { "$ref": "#/components/schemas/EntityFilterValues" }
        },
        "type": "object"
      },
      "EntityFilterName": {
        "enum": ["NAME", "NAMESPACE", "SEMANTIC_TYPE_PATH", "REFERENCED_ENTITY_ID"],
        "type": "string"
      },
      "EntityFilterValue": { "type": "string" },
      "EntityFilterValues": { "items": { "$ref": "#/components/schemas/EntityFilterValue" }, "type": "array" },
      "EntityFilters": { "items": { "$ref": "#/components/schemas/EntityFilter" }, "type": "array" },
      "EntityType": {
        "enum": [
          "DEVICE",
          "SERVICE",
          "DEVICE_MODEL",
          "CAPABILITY",
          "STATE",
          "ACTION",
          "EVENT",
          "PROPERTY",
          "MAPPING",
          "ENUM"
        ],
        "type": "string"
      },
      "EntityTypes": { "items": { "$ref": "#/components/schemas/EntityType" }, "type": "array" },
      "FlowExecutionEventType": {
        "enum": [
          "EXECUTION_STARTED",
          "EXECUTION_FAILED",
          "EXECUTION_ABORTED",
          "EXECUTION_SUCCEEDED",
          "STEP_STARTED",
          "STEP_FAILED",
          "STEP_SUCCEEDED",
          "ACTIVITY_SCHEDULED",
          "ACTIVITY_STARTED",
          "ACTIVITY_FAILED",
          "ACTIVITY_SUCCEEDED",
          "START_FLOW_EXECUTION_TASK",
          "SCHEDULE_NEXT_READY_STEPS_TASK",
          "THING_ACTION_TASK",
          "THING_ACTION_TASK_FAILED",
          "THING_ACTION_TASK_SUCCEEDED",
          "ACKNOWLEDGE_TASK_MESSAGE"
        ],
        "type": "string"
      },
      "FlowExecutionId": { "type": "string" },
      "FlowExecutionMessage": {
        "description": "An object that contains information about a flow event.",
        "properties": {
          "eventType": { "$ref": "#/components/schemas/FlowExecutionEventType" },
          "messageId": { "$ref": "#/components/schemas/FlowExecutionMessageId" },
          "payload": { "$ref": "#/components/schemas/FlowExecutionMessagePayload" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "FlowExecutionMessageId": { "type": "string" },
      "FlowExecutionMessagePayload": { "type": "string" },
      "FlowExecutionMessages": { "items": { "$ref": "#/components/schemas/FlowExecutionMessage" }, "type": "array" },
      "FlowExecutionStatus": { "enum": ["RUNNING", "ABORTED", "SUCCEEDED", "FAILED"], "type": "string" },
      "FlowExecutionSummaries": { "items": { "$ref": "#/components/schemas/FlowExecutionSummary" }, "type": "array" },
      "FlowExecutionSummary": {
        "description": "An object that contains summary information about a flow execution.",
        "properties": {
          "createdAt": { "$ref": "#/components/schemas/Timestamp" },
          "flowExecutionId": { "$ref": "#/components/schemas/FlowExecutionId" },
          "flowTemplateId": { "$ref": "#/components/schemas/Urn" },
          "status": { "$ref": "#/components/schemas/FlowExecutionStatus" },
          "systemInstanceId": { "$ref": "#/components/schemas/Urn" },
          "updatedAt": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "FlowTemplateDescription": {
        "description": "An object that contains a workflow's definition and summary information.",
        "properties": {
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" },
          "summary": { "$ref": "#/components/schemas/FlowTemplateSummary" },
          "validatedNamespaceVersion": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "FlowTemplateFilter": {
        "description": "An object that filters a workflow search.",
        "properties": {
          "name": { "$ref": "#/components/schemas/FlowTemplateFilterName" },
          "value": { "$ref": "#/components/schemas/FlowTemplateFilterValues" }
        },
        "required": ["name", "value"],
        "type": "object"
      },
      "FlowTemplateFilterName": { "enum": ["DEVICE_MODEL_ID"], "type": "string" },
      "FlowTemplateFilterValue": {
        "pattern": "^urn:tdm:(([a-z]{2}-(gov-)?[a-z]{4,9}-[0-9]{1,3}/[0-9]+/)*[\\p{Alnum}_]+(/[\\p{Alnum}_]+)*):([\\p{Alpha}]*):([\\p{Alnum}_]+(/[\\p{Alnum}_]+)*)$",
        "type": "string"
      },
      "FlowTemplateFilterValues": {
        "items": { "$ref": "#/components/schemas/FlowTemplateFilterValue" },
        "type": "array"
      },
      "FlowTemplateFilters": { "items": { "$ref": "#/components/schemas/FlowTemplateFilter" }, "type": "array" },
      "FlowTemplateSummaries": { "items": { "$ref": "#/components/schemas/FlowTemplateSummary" }, "type": "array" },
      "FlowTemplateSummary": {
        "description": "An object that contains summary information about a workflow.",
        "properties": {
          "arn": { "$ref": "#/components/schemas/Arn" },
          "createdAt": { "$ref": "#/components/schemas/Timestamp" },
          "id": { "$ref": "#/components/schemas/Urn" },
          "revisionNumber": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "GetEntitiesRequest": {
        "properties": {
          "ids": { "$ref": "#/components/schemas/Urns" },
          "namespaceVersion": { "$ref": "#/components/schemas/Version" }
        },
        "required": ["ids"],
        "type": "object"
      },
      "GetEntitiesResponse": {
        "properties": { "descriptions": { "$ref": "#/components/schemas/EntityDescriptions" } },
        "type": "object"
      },
      "GetFlowTemplateRequest": {
        "properties": {
          "id": { "$ref": "#/components/schemas/Urn" },
          "revisionNumber": { "$ref": "#/components/schemas/Version" }
        },
        "required": ["id"],
        "type": "object"
      },
      "GetFlowTemplateResponse": {
        "properties": { "description": { "$ref": "#/components/schemas/FlowTemplateDescription" } },
        "type": "object"
      },
      "GetFlowTemplateRevisionsRequest": {
        "properties": {
          "id": { "$ref": "#/components/schemas/Urn" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "required": ["id"],
        "type": "object"
      },
      "GetFlowTemplateRevisionsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "summaries": { "$ref": "#/components/schemas/FlowTemplateSummaries" }
        },
        "type": "object"
      },
      "GetNamespaceDeletionStatusRequest": { "properties": {}, "type": "object" },
      "GetNamespaceDeletionStatusResponse": {
        "properties": {
          "errorCode": { "$ref": "#/components/schemas/NamespaceDeletionStatusErrorCodes" },
          "errorMessage": { "$ref": "#/components/schemas/String" },
          "namespaceArn": { "$ref": "#/components/schemas/Arn" },
          "namespaceName": { "$ref": "#/components/schemas/NamespaceName" },
          "status": { "$ref": "#/components/schemas/NamespaceDeletionStatus" }
        },
        "type": "object"
      },
      "GetSystemInstanceRequest": {
        "properties": { "id": { "$ref": "#/components/schemas/Urn" } },
        "required": ["id"],
        "type": "object"
      },
      "GetSystemInstanceResponse": {
        "properties": { "description": { "$ref": "#/components/schemas/SystemInstanceDescription" } },
        "type": "object"
      },
      "GetSystemTemplateRequest": {
        "properties": {
          "id": { "$ref": "#/components/schemas/Urn" },
          "revisionNumber": { "$ref": "#/components/schemas/Version" }
        },
        "required": ["id"],
        "type": "object"
      },
      "GetSystemTemplateResponse": {
        "properties": { "description": { "$ref": "#/components/schemas/SystemTemplateDescription" } },
        "type": "object"
      },
      "GetSystemTemplateRevisionsRequest": {
        "properties": {
          "id": { "$ref": "#/components/schemas/Urn" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "required": ["id"],
        "type": "object"
      },
      "GetSystemTemplateRevisionsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "summaries": { "$ref": "#/components/schemas/SystemTemplateSummaries" }
        },
        "type": "object"
      },
      "GetUploadStatusRequest": {
        "properties": { "uploadId": { "$ref": "#/components/schemas/UploadId" } },
        "required": ["uploadId"],
        "type": "object"
      },
      "GetUploadStatusResponse": {
        "properties": {
          "createdDate": { "$ref": "#/components/schemas/Timestamp" },
          "failureReason": { "$ref": "#/components/schemas/StringList" },
          "namespaceArn": { "$ref": "#/components/schemas/Arn" },
          "namespaceName": { "$ref": "#/components/schemas/NamespaceName" },
          "namespaceVersion": { "$ref": "#/components/schemas/Version" },
          "uploadId": { "$ref": "#/components/schemas/UploadId" },
          "uploadStatus": { "$ref": "#/components/schemas/UploadStatus" }
        },
        "required": ["uploadId", "uploadStatus", "createdDate"],
        "type": "object"
      },
      "GreengrassDeploymentId": { "type": "string" },
      "GreengrassGroupId": { "type": "string" },
      "GreengrassGroupVersionId": { "type": "string" },
      "GroupName": { "type": "string" },
      "InternalFailureException": {},
      "InvalidRequestException": {},
      "LimitExceededException": {},
      "ListFlowExecutionMessagesRequest": {
        "properties": {
          "flowExecutionId": { "$ref": "#/components/schemas/FlowExecutionId" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "required": ["flowExecutionId"],
        "type": "object"
      },
      "ListFlowExecutionMessagesResponse": {
        "properties": {
          "messages": { "$ref": "#/components/schemas/FlowExecutionMessages" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListTagsForResourceRequest": {
        "properties": {
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "resourceArn": { "$ref": "#/components/schemas/ResourceArn" }
        },
        "required": ["resourceArn"],
        "type": "object"
      },
      "ListTagsForResourceResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "type": "object"
      },
      "MaxResults": { "maximum": 250, "minimum": 1, "type": "integer" },
      "MetricsConfiguration": {
        "description": "An object that specifies whether cloud metrics are collected in a deployment and, if so, what role is used to collect metrics.",
        "properties": {
          "cloudMetricEnabled": { "$ref": "#/components/schemas/Enabled" },
          "metricRuleRoleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "NamespaceDeletionStatus": { "enum": ["IN_PROGRESS", "SUCCEEDED", "FAILED"], "type": "string" },
      "NamespaceDeletionStatusErrorCodes": { "enum": ["VALIDATION_FAILED"], "type": "string" },
      "NamespaceName": { "maxLength": 128, "type": "string" },
      "NextToken": { "type": "string" },
      "ResourceAlreadyExistsException": {},
      "ResourceArn": { "maxLength": 2048, "minLength": 1, "type": "string" },
      "ResourceInUseException": {},
      "ResourceNotFoundException": {},
      "RoleArn": { "maxLength": 2048, "minLength": 20, "type": "string" },
      "S3BucketName": { "type": "string" },
      "SearchEntitiesRequest": {
        "properties": {
          "entityTypes": { "$ref": "#/components/schemas/EntityTypes" },
          "filters": { "$ref": "#/components/schemas/EntityFilters" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "namespaceVersion": { "$ref": "#/components/schemas/Version" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "required": ["entityTypes"],
        "type": "object"
      },
      "SearchEntitiesResponse": {
        "properties": {
          "descriptions": { "$ref": "#/components/schemas/EntityDescriptions" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "SearchFlowExecutionsRequest": {
        "properties": {
          "endTime": { "$ref": "#/components/schemas/Timestamp" },
          "flowExecutionId": { "$ref": "#/components/schemas/FlowExecutionId" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "startTime": { "$ref": "#/components/schemas/Timestamp" },
          "systemInstanceId": { "$ref": "#/components/schemas/Urn" }
        },
        "required": ["systemInstanceId"],
        "type": "object"
      },
      "SearchFlowExecutionsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "summaries": { "$ref": "#/components/schemas/FlowExecutionSummaries" }
        },
        "type": "object"
      },
      "SearchFlowTemplatesRequest": {
        "properties": {
          "filters": { "$ref": "#/components/schemas/FlowTemplateFilters" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "SearchFlowTemplatesResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "summaries": { "$ref": "#/components/schemas/FlowTemplateSummaries" }
        },
        "type": "object"
      },
      "SearchSystemInstancesRequest": {
        "properties": {
          "filters": { "$ref": "#/components/schemas/SystemInstanceFilters" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "SearchSystemInstancesResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "summaries": { "$ref": "#/components/schemas/SystemInstanceSummaries" }
        },
        "type": "object"
      },
      "SearchSystemTemplatesRequest": {
        "properties": {
          "filters": { "$ref": "#/components/schemas/SystemTemplateFilters" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "SearchSystemTemplatesResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "summaries": { "$ref": "#/components/schemas/SystemTemplateSummaries" }
        },
        "type": "object"
      },
      "SearchThingsRequest": {
        "properties": {
          "entityId": { "$ref": "#/components/schemas/Urn" },
          "maxResults": { "$ref": "#/components/schemas/MaxResults" },
          "namespaceVersion": { "$ref": "#/components/schemas/Version" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "required": ["entityId"],
        "type": "object"
      },
      "SearchThingsResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "things": { "$ref": "#/components/schemas/Things" }
        },
        "type": "object"
      },
      "String": { "type": "string" },
      "StringList": { "items": { "$ref": "#/components/schemas/String" }, "type": "array" },
      "SyncWithPublicNamespace": { "type": "boolean" },
      "SystemInstanceDeploymentStatus": {
        "enum": [
          "NOT_DEPLOYED",
          "BOOTSTRAP",
          "DEPLOY_IN_PROGRESS",
          "DEPLOYED_IN_TARGET",
          "UNDEPLOY_IN_PROGRESS",
          "FAILED",
          "PENDING_DELETE",
          "DELETED_IN_TARGET"
        ],
        "type": "string"
      },
      "SystemInstanceDescription": {
        "description": "An object that contains a system instance definition and summary information.",
        "properties": {
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" },
          "flowActionsRoleArn": { "$ref": "#/components/schemas/RoleArn" },
          "metricsConfiguration": { "$ref": "#/components/schemas/MetricsConfiguration" },
          "s3BucketName": { "$ref": "#/components/schemas/S3BucketName" },
          "summary": { "$ref": "#/components/schemas/SystemInstanceSummary" },
          "validatedDependencyRevisions": { "$ref": "#/components/schemas/DependencyRevisions" },
          "validatedNamespaceVersion": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "SystemInstanceFilter": {
        "description": "An object that filters a system instance search. Multiple filters function as OR criteria in the search. For example a search that includes a GREENGRASS_GROUP_NAME and a STATUS filter searches for system instances in the specified Greengrass group that have the specified status.",
        "properties": {
          "name": { "$ref": "#/components/schemas/SystemInstanceFilterName" },
          "value": { "$ref": "#/components/schemas/SystemInstanceFilterValues" }
        },
        "type": "object"
      },
      "SystemInstanceFilterName": {
        "enum": ["SYSTEM_TEMPLATE_ID", "STATUS", "GREENGRASS_GROUP_NAME"],
        "type": "string"
      },
      "SystemInstanceFilterValue": { "type": "string" },
      "SystemInstanceFilterValues": {
        "items": { "$ref": "#/components/schemas/SystemInstanceFilterValue" },
        "type": "array"
      },
      "SystemInstanceFilters": { "items": { "$ref": "#/components/schemas/SystemInstanceFilter" }, "type": "array" },
      "SystemInstanceSummaries": { "items": { "$ref": "#/components/schemas/SystemInstanceSummary" }, "type": "array" },
      "SystemInstanceSummary": {
        "description": "An object that contains summary information about a system instance.",
        "properties": {
          "arn": { "$ref": "#/components/schemas/Arn" },
          "createdAt": { "$ref": "#/components/schemas/Timestamp" },
          "greengrassGroupId": { "$ref": "#/components/schemas/GreengrassGroupId" },
          "greengrassGroupName": { "$ref": "#/components/schemas/GroupName" },
          "greengrassGroupVersionId": { "$ref": "#/components/schemas/GreengrassGroupVersionId" },
          "id": { "$ref": "#/components/schemas/Urn" },
          "status": { "$ref": "#/components/schemas/SystemInstanceDeploymentStatus" },
          "target": { "$ref": "#/components/schemas/DeploymentTarget" },
          "updatedAt": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "SystemTemplateDescription": {
        "description": "An object that contains a system's definition document and summary information.",
        "properties": {
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" },
          "summary": { "$ref": "#/components/schemas/SystemTemplateSummary" },
          "validatedNamespaceVersion": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "SystemTemplateFilter": {
        "description": "An object that filters a system search.",
        "properties": {
          "name": { "$ref": "#/components/schemas/SystemTemplateFilterName" },
          "value": { "$ref": "#/components/schemas/SystemTemplateFilterValues" }
        },
        "required": ["name", "value"],
        "type": "object"
      },
      "SystemTemplateFilterName": { "enum": ["FLOW_TEMPLATE_ID"], "type": "string" },
      "SystemTemplateFilterValue": {
        "pattern": "^urn:tdm:(([a-z]{2}-(gov-)?[a-z]{4,9}-[0-9]{1,3}/[0-9]+/)*[\\p{Alnum}_]+(/[\\p{Alnum}_]+)*):([\\p{Alpha}]*):([\\p{Alnum}_]+(/[\\p{Alnum}_]+)*)$",
        "type": "string"
      },
      "SystemTemplateFilterValues": {
        "items": { "$ref": "#/components/schemas/SystemTemplateFilterValue" },
        "type": "array"
      },
      "SystemTemplateFilters": { "items": { "$ref": "#/components/schemas/SystemTemplateFilter" }, "type": "array" },
      "SystemTemplateSummaries": { "items": { "$ref": "#/components/schemas/SystemTemplateSummary" }, "type": "array" },
      "SystemTemplateSummary": {
        "description": "An object that contains information about a system.",
        "properties": {
          "arn": { "$ref": "#/components/schemas/Arn" },
          "createdAt": { "$ref": "#/components/schemas/Timestamp" },
          "id": { "$ref": "#/components/schemas/Urn" },
          "revisionNumber": { "$ref": "#/components/schemas/Version" }
        },
        "type": "object"
      },
      "Tag": {
        "description": "Metadata assigned to an AWS IoT Things Graph resource consisting of a key-value pair.",
        "properties": {
          "key": { "$ref": "#/components/schemas/TagKey" },
          "value": { "$ref": "#/components/schemas/TagValue" }
        },
        "required": ["key", "value"],
        "type": "object"
      },
      "TagKey": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "type": "string"
      },
      "TagKeyList": {
        "items": { "$ref": "#/components/schemas/TagKey" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "TagList": { "items": { "$ref": "#/components/schemas/Tag" }, "maxItems": 50, "minItems": 0, "type": "array" },
      "TagResourceRequest": {
        "properties": {
          "resourceArn": { "$ref": "#/components/schemas/ResourceArn" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["resourceArn", "tags"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValue": { "maxLength": 256, "minLength": 1, "type": "string" },
      "Thing": {
        "description": "An AWS IoT thing.",
        "properties": {
          "thingArn": { "$ref": "#/components/schemas/ThingArn" },
          "thingName": { "$ref": "#/components/schemas/ThingName" }
        },
        "type": "object"
      },
      "ThingArn": { "type": "string" },
      "ThingName": { "maxLength": 128, "minLength": 1, "pattern": "[a-zA-Z0-9:_-]+", "type": "string" },
      "Things": { "items": { "$ref": "#/components/schemas/Thing" }, "type": "array" },
      "ThrottlingException": {},
      "Timestamp": { "format": "date-time", "type": "string" },
      "UndeploySystemInstanceRequest": {
        "properties": { "id": { "$ref": "#/components/schemas/Urn" } },
        "type": "object"
      },
      "UndeploySystemInstanceResponse": {
        "properties": { "summary": { "$ref": "#/components/schemas/SystemInstanceSummary" } },
        "type": "object"
      },
      "UntagResourceRequest": {
        "properties": {
          "resourceArn": { "$ref": "#/components/schemas/ResourceArn" },
          "tagKeys": { "$ref": "#/components/schemas/TagKeyList" }
        },
        "required": ["resourceArn", "tagKeys"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UpdateFlowTemplateRequest": {
        "properties": {
          "compatibleNamespaceVersion": { "$ref": "#/components/schemas/Version" },
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" },
          "id": { "$ref": "#/components/schemas/Urn" }
        },
        "required": ["id", "definition"],
        "type": "object"
      },
      "UpdateFlowTemplateResponse": {
        "properties": { "summary": { "$ref": "#/components/schemas/FlowTemplateSummary" } },
        "type": "object"
      },
      "UpdateSystemTemplateRequest": {
        "properties": {
          "compatibleNamespaceVersion": { "$ref": "#/components/schemas/Version" },
          "definition": { "$ref": "#/components/schemas/DefinitionDocument" },
          "id": { "$ref": "#/components/schemas/Urn" }
        },
        "required": ["id", "definition"],
        "type": "object"
      },
      "UpdateSystemTemplateResponse": {
        "properties": { "summary": { "$ref": "#/components/schemas/SystemTemplateSummary" } },
        "type": "object"
      },
      "UploadEntityDefinitionsRequest": {
        "properties": {
          "deprecateExistingEntities": { "$ref": "#/components/schemas/DeprecateExistingEntities" },
          "document": { "$ref": "#/components/schemas/DefinitionDocument" },
          "syncWithPublicNamespace": { "$ref": "#/components/schemas/SyncWithPublicNamespace" }
        },
        "type": "object"
      },
      "UploadEntityDefinitionsResponse": {
        "properties": { "uploadId": { "$ref": "#/components/schemas/UploadId" } },
        "required": ["uploadId"],
        "type": "object"
      },
      "UploadId": { "maxLength": 40, "minLength": 1, "type": "string" },
      "UploadStatus": { "enum": ["IN_PROGRESS", "SUCCEEDED", "FAILED"], "type": "string" },
      "Urn": {
        "maxLength": 160,
        "pattern": "^urn:tdm:(([a-z]{2}-(gov-)?[a-z]{4,9}-[0-9]{1,3}/[0-9]+/)*[\\p{Alnum}_]+(/[\\p{Alnum}_]+)*):([\\p{Alpha}]*):([\\p{Alnum}_]+(/[\\p{Alnum}_]+)*)$",
        "type": "string"
      },
      "Urns": { "items": { "$ref": "#/components/schemas/Urn" }, "maxItems": 25, "minItems": 0, "type": "array" },
      "Version": { "type": "integer" }
    }
  }
}
