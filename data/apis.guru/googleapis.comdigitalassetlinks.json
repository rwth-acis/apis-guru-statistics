{
  "openapi": "3.0.0",
  "info": {
    "contact": { "name": "Google", "url": "https://google.com" },
    "description": "Discovers relationships between online assets such as websites or mobile apps.",
    "license": { "name": "Creative Commons Attribution 3.0", "url": "http://creativecommons.org/licenses/by/3.0/" },
    "termsOfService": "https://developers.google.com/terms/",
    "title": "Digital Asset Links",
    "version": "v1",
    "x-apiClientRegistration": { "url": "https://console.developers.google.com" },
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
    },
    "x-origin": [
      {
        "converter": { "url": "https://github.com/lucybot/api-spec-converter", "version": "2.7.31" },
        "format": "google",
        "url": "https://digitalassetlinks.googleapis.com/$discovery/rest?version=v1",
        "version": "v1"
      }
    ],
    "x-preferred": true,
    "x-providerName": "googleapis.com",
    "x-serviceName": "digitalassetlinks"
  },
  "externalDocs": { "url": "https://developers.google.com/digital-asset-links/" },
  "tags": [{ "name": "assetlinks" }, { "name": "statements" }],
  "paths": {
    "/v1/assetlinks:check": {
      "get": {
        "description": "Determines whether the specified (directional) relationship exists between\nthe specified source and target assets.\n\nThe relation describes the intent of the link between the two assets as\nclaimed by the source asset.  An example for such relationships is the\ndelegation of privileges or permissions.\n\nThis command is most often used by infrastructure systems to check\npreconditions for an action.  For example, a client may want to know if it\nis OK to send a web URL to a particular mobile app instead. The client can\ncheck for the relevant asset link from the website to the mobile app to\ndecide if the operation should be allowed.\n\nA note about security: if you specify a secure asset as the source, such as\nan HTTPS website or an Android app, the API will ensure that any\nstatements used to generate the response have been made in a secure way by\nthe owner of that asset.  Conversely, if the source asset is an insecure\nHTTP website (that is, the URL starts with `http://` instead of\n`https://`), the API cannot verify its statements securely, and it is not\npossible to ensure that the website's statements have not been altered by a\nthird party.  For more information, see the [Digital Asset Links technical\ndesign\nspecification](https://github.com/google/digitalassetlinks/blob/master/well-known/details.md).",
        "operationId": "digitalassetlinks.assetlinks.check",
        "parameters": [
          {
            "description": "Query string for the relation.\n\nWe identify relations with strings of the format `<kind>/<detail>`, where\n`<kind>` must be one of a set of pre-defined purpose categories, and\n`<detail>` is a free-form lowercase alphanumeric string that describes the\nspecific use case of the statement.\n\nRefer to [our API documentation](/digital-asset-links/v1/relation-strings)\nfor the current list of supported relations.\n\nFor a query to match an asset link, both the query's and the asset link's\nrelation strings must match exactly.\n\nExample: A query with relation `delegate_permission/common.handle_all_urls`\nmatches an asset link with relation\n`delegate_permission/common.handle_all_urls`.",
            "in": "query",
            "name": "relation",
            "schema": { "type": "string" }
          },
          {
            "description": "The uppercase SHA-265 fingerprint of the certificate.  From the PEM\n certificate, it can be acquired like this:\n\n    $ keytool -printcert -file $CERTFILE | grep SHA256:\n    SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n        42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\nor like this:\n\n    $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\n    SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n        16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\nIn this example, the contents of this field would be `14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5`.\n\nIf these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).",
            "in": "query",
            "name": "source.androidApp.certificate.sha256Fingerprint",
            "schema": { "type": "string" }
          },
          {
            "description": "Android App assets are naturally identified by their Java package name.\nFor example, the Google Maps app uses the package name\n`com.google.android.apps.maps`.\nREQUIRED",
            "in": "query",
            "name": "source.androidApp.packageName",
            "schema": { "type": "string" }
          },
          {
            "description": "Web assets are identified by a URL that contains only the scheme, hostname\nand port parts.  The format is\n\n    http[s]://<hostname>[:<port>]\n\nHostnames must be fully qualified: they must end in a single period\n(\"`.`\").\n\nOnly the schemes \"http\" and \"https\" are currently allowed.\n\nPort numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.\n\nWe call this limited URL the \"site\".  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.\n\nExample: the asset with the site `https://www.google.com` contains all\nthese URLs:\n\n  *   `https://www.google.com/`\n  *   `https://www.google.com:443/`\n  *   `https://www.google.com/foo`\n  *   `https://www.google.com/foo?bar`\n  *   `https://www.google.com/foo#bar`\n  *   `https://user@password:www.google.com/`\n\nBut it does not contain these URLs:\n\n  *   `http://www.google.com/`       (wrong scheme)\n  *   `https://google.com/`          (hostname does not match)\n  *   `https://www.google.com:444/`  (port does not match)\nREQUIRED",
            "in": "query",
            "name": "source.web.site",
            "schema": { "type": "string" }
          },
          {
            "description": "The uppercase SHA-265 fingerprint of the certificate.  From the PEM\n certificate, it can be acquired like this:\n\n    $ keytool -printcert -file $CERTFILE | grep SHA256:\n    SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n        42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\nor like this:\n\n    $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\n    SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n        16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\nIn this example, the contents of this field would be `14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5`.\n\nIf these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).",
            "in": "query",
            "name": "target.androidApp.certificate.sha256Fingerprint",
            "schema": { "type": "string" }
          },
          {
            "description": "Android App assets are naturally identified by their Java package name.\nFor example, the Google Maps app uses the package name\n`com.google.android.apps.maps`.\nREQUIRED",
            "in": "query",
            "name": "target.androidApp.packageName",
            "schema": { "type": "string" }
          },
          {
            "description": "Web assets are identified by a URL that contains only the scheme, hostname\nand port parts.  The format is\n\n    http[s]://<hostname>[:<port>]\n\nHostnames must be fully qualified: they must end in a single period\n(\"`.`\").\n\nOnly the schemes \"http\" and \"https\" are currently allowed.\n\nPort numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.\n\nWe call this limited URL the \"site\".  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.\n\nExample: the asset with the site `https://www.google.com` contains all\nthese URLs:\n\n  *   `https://www.google.com/`\n  *   `https://www.google.com:443/`\n  *   `https://www.google.com/foo`\n  *   `https://www.google.com/foo?bar`\n  *   `https://www.google.com/foo#bar`\n  *   `https://user@password:www.google.com/`\n\nBut it does not contain these URLs:\n\n  *   `http://www.google.com/`       (wrong scheme)\n  *   `https://google.com/`          (hostname does not match)\n  *   `https://www.google.com:444/`  (port does not match)\nREQUIRED",
            "in": "query",
            "name": "target.web.site",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/CheckResponse" } } }
          }
        },
        "tags": ["assetlinks"]
      },
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ]
    },
    "/v1/statements:list": {
      "get": {
        "description": "Retrieves a list of all statements from a given source that match the\nspecified target and statement string.\n\nThe API guarantees that all statements with secure source assets, such as\nHTTPS websites or Android apps, have been made in a secure way by the owner\nof those assets, as described in the [Digital Asset Links technical design\nspecification](https://github.com/google/digitalassetlinks/blob/master/well-known/details.md).\nSpecifically, you should consider that for insecure websites (that is,\nwhere the URL starts with `http://` instead of `https://`), this guarantee\ncannot be made.\n\nThe `List` command is most useful in cases where the API client wants to\nknow all the ways in which two assets are related, or enumerate all the\nrelationships from a particular source asset.  Example: a feature that\nhelps users navigate to related items.  When a mobile app is running on a\ndevice, the feature would make it easy to navigate to the corresponding web\nsite or Google+ profile.",
        "operationId": "digitalassetlinks.statements.list",
        "parameters": [
          {
            "description": "Use only associations that match the specified relation.\n\nSee the [`Statement`](#Statement) message for a detailed definition of\nrelation strings.\n\nFor a query to match a statement, one of the following must be true:\n\n*    both the query's and the statement's relation strings match exactly,\n     or\n*    the query's relation string is empty or missing.\n\nExample: A query with relation `delegate_permission/common.handle_all_urls`\nmatches an asset link with relation\n`delegate_permission/common.handle_all_urls`.",
            "in": "query",
            "name": "relation",
            "schema": { "type": "string" }
          },
          {
            "description": "The uppercase SHA-265 fingerprint of the certificate.  From the PEM\n certificate, it can be acquired like this:\n\n    $ keytool -printcert -file $CERTFILE | grep SHA256:\n    SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n        42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\nor like this:\n\n    $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\n    SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n        16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\nIn this example, the contents of this field would be `14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5`.\n\nIf these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).",
            "in": "query",
            "name": "source.androidApp.certificate.sha256Fingerprint",
            "schema": { "type": "string" }
          },
          {
            "description": "Android App assets are naturally identified by their Java package name.\nFor example, the Google Maps app uses the package name\n`com.google.android.apps.maps`.\nREQUIRED",
            "in": "query",
            "name": "source.androidApp.packageName",
            "schema": { "type": "string" }
          },
          {
            "description": "Web assets are identified by a URL that contains only the scheme, hostname\nand port parts.  The format is\n\n    http[s]://<hostname>[:<port>]\n\nHostnames must be fully qualified: they must end in a single period\n(\"`.`\").\n\nOnly the schemes \"http\" and \"https\" are currently allowed.\n\nPort numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.\n\nWe call this limited URL the \"site\".  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.\n\nExample: the asset with the site `https://www.google.com` contains all\nthese URLs:\n\n  *   `https://www.google.com/`\n  *   `https://www.google.com:443/`\n  *   `https://www.google.com/foo`\n  *   `https://www.google.com/foo?bar`\n  *   `https://www.google.com/foo#bar`\n  *   `https://user@password:www.google.com/`\n\nBut it does not contain these URLs:\n\n  *   `http://www.google.com/`       (wrong scheme)\n  *   `https://google.com/`          (hostname does not match)\n  *   `https://www.google.com:444/`  (port does not match)\nREQUIRED",
            "in": "query",
            "name": "source.web.site",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/ListResponse" } } }
          }
        },
        "tags": ["statements"]
      },
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ]
    }
  },
  "servers": [{ "url": "https://digitalassetlinks.googleapis.com/" }],
  "components": {
    "parameters": {
      "access_token": {
        "description": "OAuth access token.",
        "in": "query",
        "name": "access_token",
        "schema": { "type": "string" }
      },
      "alt": {
        "description": "Data format for response.",
        "in": "query",
        "name": "alt",
        "schema": { "type": "string", "enum": ["json", "media", "proto"], "default": "json" }
      },
      "callback": { "description": "JSONP", "in": "query", "name": "callback", "schema": { "type": "string" } },
      "fields": {
        "description": "Selector specifying which fields to include in a partial response.",
        "in": "query",
        "name": "fields",
        "schema": { "type": "string" }
      },
      "key": {
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "in": "query",
        "name": "key",
        "schema": { "type": "string" }
      },
      "oauth_token": {
        "description": "OAuth 2.0 token for the current user.",
        "in": "query",
        "name": "oauth_token",
        "schema": { "type": "string" }
      },
      "prettyPrint": {
        "description": "Returns response with indentations and line breaks.",
        "in": "query",
        "name": "prettyPrint",
        "schema": { "type": "boolean", "default": true }
      },
      "quotaUser": {
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "in": "query",
        "name": "quotaUser",
        "schema": { "type": "string" }
      },
      "uploadType": {
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "in": "query",
        "name": "uploadType",
        "schema": { "type": "string" }
      },
      "upload_protocol": {
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "in": "query",
        "name": "upload_protocol",
        "schema": { "type": "string" }
      },
      "_.xgafv": {
        "description": "V1 error format.",
        "in": "query",
        "name": "$.xgafv",
        "schema": { "type": "string", "enum": ["1", "2"] }
      }
    },
    "schemas": {
      "AndroidAppAsset": {
        "description": "Describes an android app asset.",
        "properties": {
          "certificate": { "$ref": "#/components/schemas/CertificateInfo" },
          "packageName": {
            "description": "Android App assets are naturally identified by their Java package name.\nFor example, the Google Maps app uses the package name\n`com.google.android.apps.maps`.\nREQUIRED",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Asset": {
        "description": "Uniquely identifies an asset.\n\nA digital asset is an identifiable and addressable online entity that\ntypically provides some service or content.  Examples of assets are websites,\nAndroid apps, Twitter feeds, and Plus Pages.",
        "properties": {
          "androidApp": { "$ref": "#/components/schemas/AndroidAppAsset" },
          "web": { "$ref": "#/components/schemas/WebAsset" }
        },
        "type": "object"
      },
      "CertificateInfo": {
        "description": "Describes an X509 certificate.",
        "properties": {
          "sha256Fingerprint": {
            "description": "The uppercase SHA-265 fingerprint of the certificate.  From the PEM\n certificate, it can be acquired like this:\n\n    $ keytool -printcert -file $CERTFILE | grep SHA256:\n    SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n        42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\nor like this:\n\n    $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\n    SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n        16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\nIn this example, the contents of this field would be `14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5`.\n\nIf these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CheckResponse": {
        "description": "Response message for the CheckAssetLinks call.",
        "properties": {
          "debugString": {
            "description": "Human-readable message containing information intended to help end users\nunderstand, reproduce and debug the result.\n\n\nThe message will be in English and we are currently not planning to offer\nany translations.\n\nPlease note that no guarantees are made about the contents or format of\nthis string.  Any aspect of it may be subject to change without notice.\nYou should not attempt to programmatically parse this data.  For\nprogrammatic access, use the error_code field below.",
            "type": "string"
          },
          "errorCode": {
            "description": "Error codes that describe the result of the Check operation.",
            "items": {
              "enum": [
                "ERROR_CODE_UNSPECIFIED",
                "ERROR_CODE_INVALID_QUERY",
                "ERROR_CODE_FETCH_ERROR",
                "ERROR_CODE_FAILED_SSL_VALIDATION",
                "ERROR_CODE_REDIRECT",
                "ERROR_CODE_TOO_LARGE",
                "ERROR_CODE_MALFORMED_HTTP_RESPONSE",
                "ERROR_CODE_WRONG_CONTENT_TYPE",
                "ERROR_CODE_MALFORMED_CONTENT",
                "ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE",
                "ERROR_CODE_FETCH_BUDGET_EXHAUSTED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "linked": {
            "description": "Set to true if the assets specified in the request are linked by the\nrelation specified in the request.",
            "type": "boolean"
          },
          "maxAge": {
            "description": "From serving time, how much longer the response should be considered valid\nbarring further updates.\nREQUIRED",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListResponse": {
        "description": "Response message for the List call.",
        "properties": {
          "debugString": {
            "description": "Human-readable message containing information intended to help end users\nunderstand, reproduce and debug the result.\n\n\nThe message will be in English and we are currently not planning to offer\nany translations.\n\nPlease note that no guarantees are made about the contents or format of\nthis string.  Any aspect of it may be subject to change without notice.\nYou should not attempt to programmatically parse this data.  For\nprogrammatic access, use the error_code field below.",
            "type": "string"
          },
          "errorCode": {
            "description": "Error codes that describe the result of the List operation.",
            "items": {
              "enum": [
                "ERROR_CODE_UNSPECIFIED",
                "ERROR_CODE_INVALID_QUERY",
                "ERROR_CODE_FETCH_ERROR",
                "ERROR_CODE_FAILED_SSL_VALIDATION",
                "ERROR_CODE_REDIRECT",
                "ERROR_CODE_TOO_LARGE",
                "ERROR_CODE_MALFORMED_HTTP_RESPONSE",
                "ERROR_CODE_WRONG_CONTENT_TYPE",
                "ERROR_CODE_MALFORMED_CONTENT",
                "ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE",
                "ERROR_CODE_FETCH_BUDGET_EXHAUSTED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "maxAge": {
            "description": "From serving time, how much longer the response should be considered valid\nbarring further updates.\nREQUIRED",
            "format": "google-duration",
            "type": "string"
          },
          "statements": {
            "description": "A list of all the matching statements that have been found.",
            "items": { "$ref": "#/components/schemas/Statement" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Statement": {
        "description": "Describes a reliable statement that has been made about the relationship\nbetween a source asset and a target asset.\n\nStatements are always made by the source asset, either directly or by\ndelegating to a statement list that is stored elsewhere.\n\nFor more detailed definitions of statements and assets, please refer\nto our [API documentation landing\npage](/digital-asset-links/v1/getting-started).",
        "properties": {
          "relation": {
            "description": "The relation identifies the use of the statement as intended by the source\nasset's owner (that is, the person or entity who issued the statement).\nEvery complete statement has a relation.\n\nWe identify relations with strings of the format `<kind>/<detail>`, where\n`<kind>` must be one of a set of pre-defined purpose categories, and\n`<detail>` is a free-form lowercase alphanumeric string that describes the\nspecific use case of the statement.\n\nRefer to [our API documentation](/digital-asset-links/v1/relation-strings)\nfor the current list of supported relations.\n\nExample: `delegate_permission/common.handle_all_urls`\nREQUIRED",
            "type": "string"
          },
          "source": { "$ref": "#/components/schemas/Asset" },
          "target": { "$ref": "#/components/schemas/Asset" }
        },
        "type": "object"
      },
      "WebAsset": {
        "description": "Describes a web asset.",
        "properties": {
          "site": {
            "description": "Web assets are identified by a URL that contains only the scheme, hostname\nand port parts.  The format is\n\n    http[s]://<hostname>[:<port>]\n\nHostnames must be fully qualified: they must end in a single period\n(\"`.`\").\n\nOnly the schemes \"http\" and \"https\" are currently allowed.\n\nPort numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.\n\nWe call this limited URL the \"site\".  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.\n\nExample: the asset with the site `https://www.google.com` contains all\nthese URLs:\n\n  *   `https://www.google.com/`\n  *   `https://www.google.com:443/`\n  *   `https://www.google.com/foo`\n  *   `https://www.google.com/foo?bar`\n  *   `https://www.google.com/foo#bar`\n  *   `https://user@password:www.google.com/`\n\nBut it does not contain these URLs:\n\n  *   `http://www.google.com/`       (wrong scheme)\n  *   `https://google.com/`          (hostname does not match)\n  *   `https://www.google.com:444/`  (port does not match)\nREQUIRED",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  }
}
