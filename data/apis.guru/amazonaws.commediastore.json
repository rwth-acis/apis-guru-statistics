{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. ",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Elemental MediaStore",
    "version": "2017-09-01",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-2017-09-01.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "mediastore"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/mediastore/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=MediaStore_20170901.CreateContainer": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.",
        "operationId": "CreateContainer",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.CreateContainer"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateContainerInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateContainerOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.DeleteContainer": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified container. Before you make a <code>DeleteContainer</code> request, delete any objects in the container or in any folders in the container. You can delete only empty containers. ",
        "operationId": "DeleteContainer",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.DeleteContainer"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteContainerInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteContainerOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.DeleteContainerPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the access policy that is associated with the specified container.",
        "operationId": "DeleteContainerPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.DeleteContainerPolicy"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteContainerPolicyInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteContainerPolicyOutput" } }
            }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "PolicyNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyNotFoundException" } } }
          },
          "483": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.DeleteCorsPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:DeleteCorsPolicy</code> action. The container owner has this permission by default and can grant this permission to others.</p>",
        "operationId": "DeleteCorsPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.DeleteCorsPolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteCorsPolicyInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteCorsPolicyOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "CorsPolicyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CorsPolicyNotFoundException" } }
            }
          },
          "483": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.DeleteLifecyclePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.",
        "operationId": "DeleteLifecyclePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.DeleteLifecyclePolicy"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteLifecyclePolicyInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteLifecyclePolicyOutput" } }
            }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "PolicyNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyNotFoundException" } } }
          },
          "483": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.DescribeContainer": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container's endpoint does not change after it has been assigned. The <code>DescribeContainer</code> request returns a single <code>Container</code> object based on <code>ContainerName</code>. To return all <code>Container</code> objects that are associated with a specified AWS account, use <a>ListContainers</a>.",
        "operationId": "DescribeContainer",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.DescribeContainer"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeContainerInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeContainerOutput" } } }
          },
          "480": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "481": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.GetContainerPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the <a href=\"https://aws.amazon.com/documentation/iam/\">AWS Identity and Access Management User Guide</a>.",
        "operationId": "GetContainerPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.GetContainerPolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetContainerPolicyInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetContainerPolicyOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "PolicyNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyNotFoundException" } } }
          },
          "483": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.GetCorsPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:GetCorsPolicy</code> action. By default, the container owner has this permission and can grant it to others.</p>",
        "operationId": "GetCorsPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.GetCorsPolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCorsPolicyInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCorsPolicyOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "CorsPolicyNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CorsPolicyNotFoundException" } }
            }
          },
          "483": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.GetLifecyclePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Retrieves the object lifecycle policy that is assigned to a container.",
        "operationId": "GetLifecyclePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.GetLifecyclePolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetLifecyclePolicyInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetLifecyclePolicyOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "PolicyNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyNotFoundException" } } }
          },
          "483": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.ListContainers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists the properties of all containers in AWS Elemental MediaStore. </p> <p>You can query to receive all the containers in one response. Or you can include the <code>MaxResults</code> parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the <code>NextToken</code> parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive. </p> <p>See also <a>DescribeContainer</a>, which gets the properties of one container. </p>",
        "operationId": "ListContainers",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.ListContainers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListContainersInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListContainersOutput" } } }
          },
          "480": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.ListTagsForResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of the tags assigned to the specified container. ",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.ListTagsForResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceOutput" } }
            }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.PutContainerPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the <a href=\"https://aws.amazon.com/documentation/iam/\">AWS Identity and Access Management User Guide</a>.</p> <p>For this release of the REST API, you can create only one policy for a container. If you enter <code>PutContainerPolicy</code> twice, the second command modifies the existing policy. </p>",
        "operationId": "PutContainerPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.PutContainerPolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutContainerPolicyInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutContainerPolicyOutput" } } }
          },
          "480": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "481": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.PutCorsPolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser's XMLHttpRequest capability.</p> <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p> <p>To learn more about CORS, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html\">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>",
        "operationId": "PutCorsPolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.PutCorsPolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutCorsPolicyInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutCorsPolicyOutput" } } }
          },
          "480": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "481": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.PutLifecyclePolicy": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.</p> <p>For information about how to construct an object lifecycle policy, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html\">Components of an Object Lifecycle Policy</a>.</p>",
        "operationId": "PutLifecyclePolicy",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.PutLifecyclePolicy"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutLifecyclePolicyInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PutLifecyclePolicyOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.StartAccessLogging": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.",
        "operationId": "StartAccessLogging",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.StartAccessLogging"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartAccessLoggingInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartAccessLoggingOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.StopAccessLogging": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.",
        "operationId": "StopAccessLogging",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.StopAccessLogging"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopAccessLoggingInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopAccessLoggingOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the tag key might be \"customer\" and the tag value might be \"companyA.\" You can specify one or more tags to add to each container. You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href=\"https://aws.amazon.com/documentation/mediastore/tagging\">Tagging Resources in MediaStore</a>.",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=MediaStore_20170901.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes tags from the specified container. You can specify one or more tags to remove. ",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["MediaStore_20170901.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceOutput" } } }
          },
          "480": {
            "description": "ContainerInUseException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContainerInUseException" } } }
          },
          "481": {
            "description": "ContainerNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContainerNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalServerError",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerError" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The MediaStore multi-region endpoint",
      "url": "http://mediastore.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The MediaStore multi-region endpoint",
      "url": "https://mediastore.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The MediaStore endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://mediastore.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The MediaStore endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://mediastore.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AllowedHeaders": {
        "items": { "$ref": "#/components/schemas/Header" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "AllowedMethods": {
        "items": { "$ref": "#/components/schemas/MethodName" },
        "maxItems": 4,
        "minItems": 1,
        "type": "array"
      },
      "AllowedOrigins": {
        "items": { "$ref": "#/components/schemas/Origin" },
        "maxItems": 100,
        "minItems": 1,
        "type": "array"
      },
      "Container": {
        "description": "This section describes operations that you can perform on an AWS Elemental MediaStore container.",
        "properties": {
          "ARN": { "$ref": "#/components/schemas/ContainerARN" },
          "AccessLoggingEnabled": { "$ref": "#/components/schemas/ContainerAccessLoggingEnabled" },
          "CreationTime": { "$ref": "#/components/schemas/TimeStamp" },
          "Endpoint": { "$ref": "#/components/schemas/Endpoint" },
          "Name": { "$ref": "#/components/schemas/ContainerName" },
          "Status": { "$ref": "#/components/schemas/ContainerStatus" }
        },
        "type": "object"
      },
      "ContainerARN": {
        "maxLength": 1024,
        "minLength": 1,
        "pattern": "arn:aws:mediastore:[a-z]+-[a-z]+-\\d:\\d{12}:container/[\\w-]{1,255}",
        "type": "string"
      },
      "ContainerAccessLoggingEnabled": { "type": "boolean" },
      "ContainerInUseException": {},
      "ContainerList": { "items": { "$ref": "#/components/schemas/Container" }, "type": "array" },
      "ContainerListLimit": { "maximum": 100, "minimum": 1, "type": "integer" },
      "ContainerName": { "maxLength": 255, "minLength": 1, "pattern": "[\\w-]+", "type": "string" },
      "ContainerNotFoundException": {},
      "ContainerPolicy": { "maxLength": 8192, "minLength": 1, "pattern": "[\\x00-\\x7F]+", "type": "string" },
      "ContainerStatus": {
        "enum": ["ACTIVE", "CREATING", "DELETING"],
        "maxLength": 16,
        "minLength": 1,
        "type": "string"
      },
      "CorsPolicy": {
        "description": "The CORS policy of the container. ",
        "items": { "$ref": "#/components/schemas/CorsRule" },
        "maxItems": 100,
        "minItems": 1,
        "type": "array"
      },
      "CorsPolicyNotFoundException": {},
      "CorsRule": {
        "description": "A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.",
        "properties": {
          "AllowedHeaders": { "$ref": "#/components/schemas/AllowedHeaders" },
          "AllowedMethods": { "$ref": "#/components/schemas/AllowedMethods" },
          "AllowedOrigins": { "$ref": "#/components/schemas/AllowedOrigins" },
          "ExposeHeaders": { "$ref": "#/components/schemas/ExposeHeaders" },
          "MaxAgeSeconds": { "$ref": "#/components/schemas/MaxAgeSeconds" }
        },
        "required": ["AllowedOrigins", "AllowedHeaders"],
        "type": "object"
      },
      "CreateContainerInput": {
        "properties": {
          "ContainerName": { "$ref": "#/components/schemas/ContainerName" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["ContainerName"],
        "type": "object"
      },
      "CreateContainerOutput": {
        "properties": { "Container": { "$ref": "#/components/schemas/Container" } },
        "required": ["Container"],
        "type": "object"
      },
      "DeleteContainerInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "DeleteContainerOutput": { "properties": {}, "type": "object" },
      "DeleteContainerPolicyInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "DeleteContainerPolicyOutput": { "properties": {}, "type": "object" },
      "DeleteCorsPolicyInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "DeleteCorsPolicyOutput": { "properties": {}, "type": "object" },
      "DeleteLifecyclePolicyInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "DeleteLifecyclePolicyOutput": { "properties": {}, "type": "object" },
      "DescribeContainerInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "type": "object"
      },
      "DescribeContainerOutput": {
        "properties": { "Container": { "$ref": "#/components/schemas/Container" } },
        "type": "object"
      },
      "Endpoint": { "maxLength": 255, "minLength": 1, "type": "string" },
      "ExposeHeaders": {
        "items": { "$ref": "#/components/schemas/Header" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "GetContainerPolicyInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "GetContainerPolicyOutput": {
        "properties": { "Policy": { "$ref": "#/components/schemas/ContainerPolicy" } },
        "required": ["Policy"],
        "type": "object"
      },
      "GetCorsPolicyInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "GetCorsPolicyOutput": {
        "properties": { "CorsPolicy": { "$ref": "#/components/schemas/CorsPolicy" } },
        "required": ["CorsPolicy"],
        "type": "object"
      },
      "GetLifecyclePolicyInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "GetLifecyclePolicyOutput": {
        "properties": { "LifecyclePolicy": { "$ref": "#/components/schemas/LifecyclePolicy" } },
        "required": ["LifecyclePolicy"],
        "type": "object"
      },
      "Header": {
        "maxLength": 8192,
        "minLength": 1,
        "pattern": "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+",
        "type": "string"
      },
      "InternalServerError": {},
      "LifecyclePolicy": {
        "maxLength": 8192,
        "minLength": 0,
        "pattern": "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+",
        "type": "string"
      },
      "LimitExceededException": {},
      "ListContainersInput": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/ContainerListLimit" },
          "NextToken": { "$ref": "#/components/schemas/PaginationToken" }
        },
        "type": "object"
      },
      "ListContainersOutput": {
        "properties": {
          "Containers": { "$ref": "#/components/schemas/ContainerList" },
          "NextToken": { "$ref": "#/components/schemas/PaginationToken" }
        },
        "required": ["Containers"],
        "type": "object"
      },
      "ListTagsForResourceInput": {
        "properties": { "Resource": { "$ref": "#/components/schemas/ContainerARN" } },
        "required": ["Resource"],
        "type": "object"
      },
      "ListTagsForResourceOutput": {
        "properties": { "Tags": { "$ref": "#/components/schemas/TagList" } },
        "type": "object"
      },
      "MaxAgeSeconds": { "maximum": 2147483647, "minimum": 0, "type": "integer" },
      "MethodName": { "enum": ["PUT", "GET", "DELETE", "HEAD"], "type": "string" },
      "Origin": {
        "maxLength": 2048,
        "minLength": 1,
        "pattern": "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+",
        "type": "string"
      },
      "PaginationToken": { "maxLength": 1024, "minLength": 1, "pattern": "[0-9A-Za-z=/+]+", "type": "string" },
      "PolicyNotFoundException": {},
      "PutContainerPolicyInput": {
        "properties": {
          "ContainerName": { "$ref": "#/components/schemas/ContainerName" },
          "Policy": { "$ref": "#/components/schemas/ContainerPolicy" }
        },
        "required": ["ContainerName", "Policy"],
        "type": "object"
      },
      "PutContainerPolicyOutput": { "properties": {}, "type": "object" },
      "PutCorsPolicyInput": {
        "properties": {
          "ContainerName": { "$ref": "#/components/schemas/ContainerName" },
          "CorsPolicy": { "$ref": "#/components/schemas/CorsPolicy" }
        },
        "required": ["ContainerName", "CorsPolicy"],
        "type": "object"
      },
      "PutCorsPolicyOutput": { "properties": {}, "type": "object" },
      "PutLifecyclePolicyInput": {
        "properties": {
          "ContainerName": { "$ref": "#/components/schemas/ContainerName" },
          "LifecyclePolicy": { "$ref": "#/components/schemas/LifecyclePolicy" }
        },
        "required": ["ContainerName", "LifecyclePolicy"],
        "type": "object"
      },
      "PutLifecyclePolicyOutput": { "properties": {}, "type": "object" },
      "StartAccessLoggingInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "StartAccessLoggingOutput": { "properties": {}, "type": "object" },
      "StopAccessLoggingInput": {
        "properties": { "ContainerName": { "$ref": "#/components/schemas/ContainerName" } },
        "required": ["ContainerName"],
        "type": "object"
      },
      "StopAccessLoggingOutput": { "properties": {}, "type": "object" },
      "Tag": {
        "description": "A collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key represents a category (such as \"environment\") and the tag value represents a specific value within that category (such as \"test,\" \"development,\" or \"production\"). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href=\"https://aws.amazon.com/documentation/mediastore/tagging\">Tagging Resources in MediaStore</a>.",
        "properties": {
          "Key": { "$ref": "#/components/schemas/TagKey" },
          "Value": { "$ref": "#/components/schemas/TagValue" }
        },
        "type": "object"
      },
      "TagKey": { "maxLength": 128, "minLength": 1, "type": "string" },
      "TagKeyList": { "items": { "$ref": "#/components/schemas/TagKey" }, "type": "array" },
      "TagList": { "items": { "$ref": "#/components/schemas/Tag" }, "type": "array" },
      "TagResourceInput": {
        "properties": {
          "Resource": { "$ref": "#/components/schemas/ContainerARN" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["Resource", "Tags"],
        "type": "object"
      },
      "TagResourceOutput": { "properties": {}, "type": "object" },
      "TagValue": { "maxLength": 256, "minLength": 0, "type": "string" },
      "TimeStamp": { "format": "date-time", "type": "string" },
      "UntagResourceInput": {
        "properties": {
          "Resource": { "$ref": "#/components/schemas/ContainerARN" },
          "TagKeys": { "$ref": "#/components/schemas/TagKeyList" }
        },
        "required": ["Resource", "TagKeys"],
        "type": "object"
      },
      "UntagResourceOutput": { "properties": {}, "type": "object" }
    }
  }
}
