{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "Definition of the public APIs exposed by Amazon Machine Learning",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Machine Learning",
    "version": "2014-12-12",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/machinelearning-2014-12-12.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "machinelearning"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/machinelearning/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=AmazonML_20141212.AddTags": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds one or more tags to an object, up to a limit of 10. Each tag consists of a key and an optional value. If you add a tag using a key that is already associated with the ML object, <code>AddTags</code> updates the tag's value.",
        "operationId": "AddTags",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.AddTags"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddTagsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddTagsOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "480": {
            "description": "InvalidTagException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTagException" } } }
          },
          "481": {
            "description": "TagLimitExceededException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TagLimitExceededException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.CreateBatchPrediction": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Generates predictions for a group of observations. The observations to process exist in one or more data files referenced by a <code>DataSource</code>. This operation creates a new <code>BatchPrediction</code>, and uses an <code>MLModel</code> and the data files referenced by the <code>DataSource</code> as information sources. </p> <p><code>CreateBatchPrediction</code> is an asynchronous operation. In response to <code>CreateBatchPrediction</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>BatchPrediction</code> status to <code>PENDING</code>. After the <code>BatchPrediction</code> completes, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can poll for status updates by using the <a>GetBatchPrediction</a> operation and checking the <code>Status</code> parameter of the result. After the <code>COMPLETED</code> status appears, the results are available in the location specified by the <code>OutputUri</code> parameter.</p>",
        "operationId": "CreateBatchPrediction",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.CreateBatchPrediction"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateBatchPredictionInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateBatchPredictionOutput" } }
            }
          },
          "400": {
            "description": "IdempotentParameterMismatchException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.CreateDataSourceFromRDS": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a <code>DataSource</code> object from an <a href=\"http://aws.amazon.com/rds/\"> Amazon Relational Database Service</a> (Amazon RDS). A <code>DataSource</code> references data that can be used to perform <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p><code>CreateDataSourceFromRDS</code> is an asynchronous operation. In response to <code>CreateDataSourceFromRDS</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> is created and ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in the <code>COMPLETED</code> or <code>PENDING</code> state can be used only to perform <code>&gt;CreateMLModel</code>&gt;, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML cannot accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p>",
        "operationId": "CreateDataSourceFromRDS",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.CreateDataSourceFromRDS"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateDataSourceFromRDSInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateDataSourceFromRDSOutput" } }
            }
          },
          "400": {
            "description": "IdempotentParameterMismatchException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.CreateDataSourceFromRedshift": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a <code>DataSource</code> from a database hosted on an Amazon Redshift cluster. A <code>DataSource</code> references data that can be used to perform either <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p><code>CreateDataSourceFromRedshift</code> is an asynchronous operation. In response to <code>CreateDataSourceFromRedshift</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> is created and ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in <code>COMPLETED</code> or <code>PENDING</code> states can be used to perform only <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML can't accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p> <p>The observations should be contained in the database hosted on an Amazon Redshift cluster and should be specified by a <code>SelectSqlQuery</code> query. Amazon ML executes an <code>Unload</code> command in Amazon Redshift to transfer the result set of the <code>SelectSqlQuery</code> query to <code>S3StagingLocation</code>.</p> <p>After the <code>DataSource</code> has been created, it's ready for use in evaluations and batch predictions. If you plan to use the <code>DataSource</code> to train an <code>MLModel</code>, the <code>DataSource</code> also requires a recipe. A recipe describes how each input variable will be used in training an <code>MLModel</code>. Will the variable be included or excluded from training? Will the variable be manipulated; for example, will it be combined with another variable or will it be split apart into word combinations? The recipe provides answers to these questions.</p> <?oxy_insert_start author=\"laurama\" timestamp=\"20160406T153842-0700\"><p>You can't change an existing datasource, but you can copy and modify the settings from an existing Amazon Redshift datasource to create a new datasource. To do so, call <code>GetDataSource</code> for an existing datasource and copy the values to a <code>CreateDataSource</code> call. Change the settings that you want to change and make sure that all required fields have the appropriate values.</p> <?oxy_insert_end>",
        "operationId": "CreateDataSourceFromRedshift",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.CreateDataSourceFromRedshift"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateDataSourceFromRedshiftInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateDataSourceFromRedshiftOutput" } }
            }
          },
          "400": {
            "description": "IdempotentParameterMismatchException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.CreateDataSourceFromS3": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a <code>DataSource</code> object. A <code>DataSource</code> references data that can be used to perform <code>CreateMLModel</code>, <code>CreateEvaluation</code>, or <code>CreateBatchPrediction</code> operations.</p> <p><code>CreateDataSourceFromS3</code> is an asynchronous operation. In response to <code>CreateDataSourceFromS3</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>DataSource</code> status to <code>PENDING</code>. After the <code>DataSource</code> has been created and is ready for use, Amazon ML sets the <code>Status</code> parameter to <code>COMPLETED</code>. <code>DataSource</code> in the <code>COMPLETED</code> or <code>PENDING</code> state can be used to perform only <code>CreateMLModel</code>, <code>CreateEvaluation</code> or <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML can't accept the input source, it sets the <code>Status</code> parameter to <code>FAILED</code> and includes an error message in the <code>Message</code> attribute of the <code>GetDataSource</code> operation response. </p> <p>The observation data used in a <code>DataSource</code> should be ready to use; that is, it should have a consistent structure, and missing data values should be kept to a minimum. The observation data must reside in one or more .csv files in an Amazon Simple Storage Service (Amazon S3) location, along with a schema that describes the data items by name and type. The same schema must be used for all of the data files referenced by the <code>DataSource</code>. </p> <p>After the <code>DataSource</code> has been created, it's ready to use in evaluations and batch predictions. If you plan to use the <code>DataSource</code> to train an <code>MLModel</code>, the <code>DataSource</code> also needs a recipe. A recipe describes how each input variable will be used in training an <code>MLModel</code>. Will the variable be included or excluded from training? Will the variable be manipulated; for example, will it be combined with another variable or will it be split apart into word combinations? The recipe provides answers to these questions.</p>",
        "operationId": "CreateDataSourceFromS3",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.CreateDataSourceFromS3"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateDataSourceFromS3Input" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateDataSourceFromS3Output" } }
            }
          },
          "400": {
            "description": "IdempotentParameterMismatchException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.CreateEvaluation": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a new <code>Evaluation</code> of an <code>MLModel</code>. An <code>MLModel</code> is evaluated on a set of observations associated to a <code>DataSource</code>. Like a <code>DataSource</code> for an <code>MLModel</code>, the <code>DataSource</code> for an <code>Evaluation</code> contains values for the <code>Target Variable</code>. The <code>Evaluation</code> compares the predicted result for each observation to the actual outcome and provides a summary so that you know how effective the <code>MLModel</code> functions on the test data. Evaluation generates a relevant performance metric, such as BinaryAUC, RegressionRMSE or MulticlassAvgFScore based on the corresponding <code>MLModelType</code>: <code>BINARY</code>, <code>REGRESSION</code> or <code>MULTICLASS</code>. </p> <p><code>CreateEvaluation</code> is an asynchronous operation. In response to <code>CreateEvaluation</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the evaluation status to <code>PENDING</code>. After the <code>Evaluation</code> is created and ready for use, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can use the <code>GetEvaluation</code> operation to check progress of the evaluation during the creation operation.</p>",
        "operationId": "CreateEvaluation",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.CreateEvaluation"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateEvaluationInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateEvaluationOutput" } } }
          },
          "400": {
            "description": "IdempotentParameterMismatchException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.CreateMLModel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a new <code>MLModel</code> using the <code>DataSource</code> and the recipe as information sources. </p> <p>An <code>MLModel</code> is nearly immutable. Users can update only the <code>MLModelName</code> and the <code>ScoreThreshold</code> in an <code>MLModel</code> without creating a new <code>MLModel</code>. </p> <p><code>CreateMLModel</code> is an asynchronous operation. In response to <code>CreateMLModel</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the <code>MLModel</code> status to <code>PENDING</code>. After the <code>MLModel</code> has been created and ready is for use, Amazon ML sets the status to <code>COMPLETED</code>. </p> <p>You can use the <code>GetMLModel</code> operation to check the progress of the <code>MLModel</code> during the creation operation.</p> <p> <code>CreateMLModel</code> requires a <code>DataSource</code> with computed statistics, which can be created by setting <code>ComputeStatistics</code> to <code>true</code> in <code>CreateDataSourceFromRDS</code>, <code>CreateDataSourceFromS3</code>, or <code>CreateDataSourceFromRedshift</code> operations. </p>",
        "operationId": "CreateMLModel",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.CreateMLModel"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateMLModelInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateMLModelOutput" } } }
          },
          "400": {
            "description": "IdempotentParameterMismatchException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/IdempotentParameterMismatchException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.CreateRealtimeEndpoint": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a real-time endpoint for the <code>MLModel</code>. The endpoint contains the URI of the <code>MLModel</code>; that is, the location to send real-time prediction requests for the specified <code>MLModel</code>.",
        "operationId": "CreateRealtimeEndpoint",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.CreateRealtimeEndpoint"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateRealtimeEndpointInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateRealtimeEndpointOutput" } }
            }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DeleteBatchPrediction": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Assigns the DELETED status to a <code>BatchPrediction</code>, rendering it unusable.</p> <p>After using the <code>DeleteBatchPrediction</code> operation, you can use the <a>GetBatchPrediction</a> operation to verify that the status of the <code>BatchPrediction</code> changed to DELETED.</p> <p><b>Caution:</b> The result of the <code>DeleteBatchPrediction</code> operation is irreversible.</p>",
        "operationId": "DeleteBatchPrediction",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DeleteBatchPrediction"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteBatchPredictionInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteBatchPredictionOutput" } }
            }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DeleteDataSource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Assigns the DELETED status to a <code>DataSource</code>, rendering it unusable.</p> <p>After using the <code>DeleteDataSource</code> operation, you can use the <a>GetDataSource</a> operation to verify that the status of the <code>DataSource</code> changed to DELETED.</p> <p><b>Caution:</b> The results of the <code>DeleteDataSource</code> operation are irreversible.</p>",
        "operationId": "DeleteDataSource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DeleteDataSource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDataSourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteDataSourceOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DeleteEvaluation": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Assigns the <code>DELETED</code> status to an <code>Evaluation</code>, rendering it unusable.</p> <p>After invoking the <code>DeleteEvaluation</code> operation, you can use the <code>GetEvaluation</code> operation to verify that the status of the <code>Evaluation</code> changed to <code>DELETED</code>.</p> <caution><title>Caution</title> <p>The results of the <code>DeleteEvaluation</code> operation are irreversible.</p></caution>",
        "operationId": "DeleteEvaluation",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DeleteEvaluation"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteEvaluationInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteEvaluationOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DeleteMLModel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Assigns the <code>DELETED</code> status to an <code>MLModel</code>, rendering it unusable.</p> <p>After using the <code>DeleteMLModel</code> operation, you can use the <code>GetMLModel</code> operation to verify that the status of the <code>MLModel</code> changed to DELETED.</p> <p><b>Caution:</b> The result of the <code>DeleteMLModel</code> operation is irreversible.</p>",
        "operationId": "DeleteMLModel",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DeleteMLModel"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteMLModelInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteMLModelOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DeleteRealtimeEndpoint": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a real time endpoint of an <code>MLModel</code>.",
        "operationId": "DeleteRealtimeEndpoint",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DeleteRealtimeEndpoint"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRealtimeEndpointInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteRealtimeEndpointOutput" } }
            }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DeleteTags": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes the specified tags associated with an ML object. After this operation is complete, you can't recover deleted tags.</p> <p>If you specify a tag that doesn't exist, Amazon ML ignores it.</p>",
        "operationId": "DeleteTags",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DeleteTags"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTagsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTagsOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "480": {
            "description": "InvalidTagException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidTagException" } } }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DescribeBatchPredictions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of <code>BatchPrediction</code> operations that match the search criteria in the request.",
        "operationId": "DescribeBatchPredictions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DescribeBatchPredictions"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeBatchPredictionsInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeBatchPredictionsOutput" } }
            }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DescribeDataSources": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of <code>DataSource</code> that match the search criteria in the request.",
        "operationId": "DescribeDataSources",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DescribeDataSources"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeDataSourcesInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeDataSourcesOutput" } }
            }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DescribeEvaluations": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of <code>DescribeEvaluations</code> that match the search criteria in the request.",
        "operationId": "DescribeEvaluations",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DescribeEvaluations"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeEvaluationsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeEvaluationsOutput" } }
            }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DescribeMLModels": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of <code>MLModel</code> that match the search criteria in the request.",
        "operationId": "DescribeMLModels",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DescribeMLModels"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeMLModelsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeMLModelsOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.DescribeTags": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Describes one or more of the tags for your Amazon ML object.",
        "operationId": "DescribeTags",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.DescribeTags"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeTagsInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeTagsOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.GetBatchPrediction": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a <code>BatchPrediction</code> that includes detailed metadata, status, and data file information for a <code>Batch Prediction</code> request.",
        "operationId": "GetBatchPrediction",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.GetBatchPrediction"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetBatchPredictionInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetBatchPredictionOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.GetDataSource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns a <code>DataSource</code> that includes metadata and data file information, as well as the current status of the <code>DataSource</code>.</p> <p><code>GetDataSource</code> provides results in normal or verbose format. The verbose format adds the schema description and the list of files pointed to by the DataSource to the normal format.</p>",
        "operationId": "GetDataSource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.GetDataSource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDataSourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDataSourceOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.GetEvaluation": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns an <code>Evaluation</code> that includes metadata as well as the current status of the <code>Evaluation</code>.",
        "operationId": "GetEvaluation",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.GetEvaluation"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetEvaluationInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetEvaluationOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.GetMLModel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns an <code>MLModel</code> that includes detailed metadata, data source information, and the current status of the <code>MLModel</code>.</p> <p><code>GetMLModel</code> provides results in normal or verbose format. </p>",
        "operationId": "GetMLModel",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.GetMLModel"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLModelInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetMLModelOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.Predict": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Generates a prediction for the observation using the specified <code>ML Model</code>.</p> <note><title>Note</title> <p>Not all response parameters will be populated. Whether a response parameter is populated depends on the type of model requested.</p></note>",
        "operationId": "Predict",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.Predict"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PredictInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PredictOutput" } } }
          },
          "400": {
            "description": "PredictorNotMountedException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PredictorNotMountedException" } }
            }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "417": {
            "description": "LimitExceededException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.UpdateBatchPrediction": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the <code>BatchPredictionName</code> of a <code>BatchPrediction</code>.</p> <p>You can use the <code>GetBatchPrediction</code> operation to view the contents of the updated data element.</p>",
        "operationId": "UpdateBatchPrediction",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.UpdateBatchPrediction"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateBatchPredictionInput" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateBatchPredictionOutput" } }
            }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.UpdateDataSource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the <code>DataSourceName</code> of a <code>DataSource</code>.</p> <p>You can use the <code>GetDataSource</code> operation to view the contents of the updated data element.</p>",
        "operationId": "UpdateDataSource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.UpdateDataSource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDataSourceInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDataSourceOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.UpdateEvaluation": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the <code>EvaluationName</code> of an <code>Evaluation</code>.</p> <p>You can use the <code>GetEvaluation</code> operation to view the contents of the updated data element.</p>",
        "operationId": "UpdateEvaluation",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.UpdateEvaluation"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateEvaluationInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateEvaluationOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AmazonML_20141212.UpdateMLModel": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the <code>MLModelName</code> and the <code>ScoreThreshold</code> of an <code>MLModel</code>.</p> <p>You can use the <code>GetMLModel</code> operation to view the contents of the updated data element.</p>",
        "operationId": "UpdateMLModel",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AmazonML_20141212.UpdateMLModel"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateMLModelInput" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateMLModelOutput" } } }
          },
          "400": {
            "description": "InvalidInputException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidInputException" } } }
          },
          "404": {
            "description": "ResourceNotFoundException",
            "x-aws-exception": true,
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "500": {
            "description": "InternalServerException",
            "x-aws-exception": true,
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalServerException" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The Amazon Machine Learning multi-region endpoint",
      "url": "http://machinelearning.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon Machine Learning multi-region endpoint",
      "url": "https://machinelearning.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon Machine Learning endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://machinelearning.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Amazon Machine Learning endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://machinelearning.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AddTagsInput": {
        "properties": {
          "ResourceId": { "$ref": "#/components/schemas/EntityId" },
          "ResourceType": { "$ref": "#/components/schemas/TaggableResourceType" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["Tags", "ResourceId", "ResourceType"],
        "type": "object"
      },
      "AddTagsOutput": {
        "description": "Amazon ML returns the following elements. ",
        "properties": {
          "ResourceId": { "$ref": "#/components/schemas/EntityId" },
          "ResourceType": { "$ref": "#/components/schemas/TaggableResourceType" }
        },
        "type": "object"
      },
      "Algorithm": {
        "description": "<p>The function used to train an <code>MLModel</code>. Training choices supported by Amazon ML include the following:</p> <ul> <li> <code>SGD</code> - Stochastic Gradient Descent.</li> <li> <code>RandomForest</code> - Random forest of decision trees.</li> </ul>",
        "enum": ["sgd"],
        "type": "string"
      },
      "AwsUserArn": {
        "description": "An Amazon Web Service (AWS) user account identifier. The account identifier can be an AWS root account or an AWS Identity and Access Management (IAM) user.",
        "pattern": "arn:aws:iam::[0-9]+:((user/.+)|(root))",
        "type": "string"
      },
      "BatchPrediction": {
        "description": "<p> Represents the output of a <code>GetBatchPrediction</code> operation.</p> <p> The content consists of the detailed metadata, the status, and the data file information of a <code>Batch Prediction</code>.</p>",
        "properties": {
          "BatchPredictionDataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" },
          "ComputeTime": { "$ref": "#/components/schemas/LongType" },
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "CreatedByIamUser": { "$ref": "#/components/schemas/AwsUserArn" },
          "FinishedAt": { "$ref": "#/components/schemas/EpochTime" },
          "InputDataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "InvalidRecordCount": { "$ref": "#/components/schemas/LongType" },
          "LastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "Message": { "$ref": "#/components/schemas/Message" },
          "Name": { "$ref": "#/components/schemas/EntityName" },
          "OutputUri": { "$ref": "#/components/schemas/S3Url" },
          "StartedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Status": { "$ref": "#/components/schemas/EntityStatus" },
          "TotalRecordCount": { "$ref": "#/components/schemas/LongType" }
        },
        "type": "object"
      },
      "BatchPredictionFilterVariable": {
        "description": "<p>A list of the variables to use in searching or filtering <code>BatchPrediction</code>.</p> <ul> <li> <code>CreatedAt</code> - Sets the search criteria to <code>BatchPrediction</code> creation date.</li> <li> <code>Status</code> - Sets the search criteria to <code>BatchPrediction</code> status.</li> <li> <code>Name</code> - Sets the search criteria to the contents of <code>BatchPrediction</code><b> </b> <code>Name</code>.</li> <li> <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>BatchPrediction</code> creation.</li> <li> <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> used in the <code>BatchPrediction</code>.</li> <li> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in the <code>BatchPrediction</code>.</li> <li> <code>DataURI</code> - Sets the search criteria to the data file(s) used in the <code>BatchPrediction</code>. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</li> </ul>",
        "enum": ["CreatedAt", "LastUpdatedAt", "Status", "Name", "IAMUser", "MLModelId", "DataSourceId", "DataURI"],
        "type": "string"
      },
      "BatchPredictions": { "items": { "$ref": "#/components/schemas/BatchPrediction" }, "type": "array" },
      "ComparatorValue": {
        "description": "The value specified in a filtering condition. The <code>ComparatorValue</code> becomes the reference value when matching or evaluating data values in filtering and searching functions.",
        "maxLength": 1024,
        "pattern": ".*\\S.*|^$",
        "type": "string"
      },
      "ComputeStatistics": { "type": "boolean" },
      "CreateBatchPredictionInput": {
        "properties": {
          "BatchPredictionDataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" },
          "BatchPredictionName": { "$ref": "#/components/schemas/EntityName" },
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "OutputUri": { "$ref": "#/components/schemas/S3Url" }
        },
        "required": ["BatchPredictionId", "MLModelId", "BatchPredictionDataSourceId", "OutputUri"],
        "type": "object"
      },
      "CreateBatchPredictionOutput": {
        "description": "<p> Represents the output of a <code>CreateBatchPrediction</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateBatchPrediction</code> operation is asynchronous. You can poll for status updates by using the <code>&gt;GetBatchPrediction</code> operation and checking the <code>Status</code> parameter of the result. </p>",
        "properties": { "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "CreateDataSourceFromRDSInput": {
        "properties": {
          "ComputeStatistics": { "$ref": "#/components/schemas/ComputeStatistics" },
          "DataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "DataSourceName": { "$ref": "#/components/schemas/EntityName" },
          "RDSData": { "$ref": "#/components/schemas/RDSDataSpec" },
          "RoleARN": { "$ref": "#/components/schemas/RoleARN" }
        },
        "required": ["DataSourceId", "RDSData", "RoleARN"],
        "type": "object"
      },
      "CreateDataSourceFromRDSOutput": {
        "description": "<p> Represents the output of a <code>CreateDataSourceFromRDS</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateDataSourceFromRDS</code>&gt; operation is asynchronous. You can poll for updates by using the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. You can inspect the <code>Message</code> when <code>Status</code> shows up as <code>FAILED</code>. You can also check the progress of the copy operation by going to the <code>DataPipeline</code> console and looking up the pipeline using the <code>pipelineId </code> from the describe call.</p>",
        "properties": { "DataSourceId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "CreateDataSourceFromRedshiftInput": {
        "properties": {
          "ComputeStatistics": { "$ref": "#/components/schemas/ComputeStatistics" },
          "DataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "DataSourceName": { "$ref": "#/components/schemas/EntityName" },
          "DataSpec": { "$ref": "#/components/schemas/RedshiftDataSpec" },
          "RoleARN": { "$ref": "#/components/schemas/RoleARN" }
        },
        "required": ["DataSourceId", "DataSpec", "RoleARN"],
        "type": "object"
      },
      "CreateDataSourceFromRedshiftOutput": {
        "description": "<p> Represents the output of a <code>CreateDataSourceFromRedshift</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateDataSourceFromRedshift</code> operation is asynchronous. You can poll for updates by using the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. </p>",
        "properties": { "DataSourceId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "CreateDataSourceFromS3Input": {
        "properties": {
          "ComputeStatistics": { "$ref": "#/components/schemas/ComputeStatistics" },
          "DataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "DataSourceName": { "$ref": "#/components/schemas/EntityName" },
          "DataSpec": { "$ref": "#/components/schemas/S3DataSpec" }
        },
        "required": ["DataSourceId", "DataSpec"],
        "type": "object"
      },
      "CreateDataSourceFromS3Output": {
        "description": "<p> Represents the output of a <code>CreateDataSourceFromS3</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateDataSourceFromS3</code> operation is asynchronous. You can poll for updates by using the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. </p>",
        "properties": { "DataSourceId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "CreateEvaluationInput": {
        "properties": {
          "EvaluationDataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "EvaluationId": { "$ref": "#/components/schemas/EntityId" },
          "EvaluationName": { "$ref": "#/components/schemas/EntityName" },
          "MLModelId": { "$ref": "#/components/schemas/EntityId" }
        },
        "required": ["EvaluationId", "MLModelId", "EvaluationDataSourceId"],
        "type": "object"
      },
      "CreateEvaluationOutput": {
        "description": "<p> Represents the output of a <code>CreateEvaluation</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p><code>CreateEvaluation</code> operation is asynchronous. You can poll for status updates by using the <code>GetEvcaluation</code> operation and checking the <code>Status</code> parameter. </p>",
        "properties": { "EvaluationId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "CreateMLModelInput": {
        "properties": {
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "MLModelName": { "$ref": "#/components/schemas/EntityName" },
          "MLModelType": { "$ref": "#/components/schemas/MLModelType" },
          "Parameters": { "$ref": "#/components/schemas/TrainingParameters" },
          "Recipe": { "$ref": "#/components/schemas/Recipe" },
          "RecipeUri": { "$ref": "#/components/schemas/S3Url" },
          "TrainingDataSourceId": { "$ref": "#/components/schemas/EntityId" }
        },
        "required": ["MLModelId", "MLModelType", "TrainingDataSourceId"],
        "type": "object"
      },
      "CreateMLModelOutput": {
        "description": "<p> Represents the output of a <code>CreateMLModel</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateMLModel</code> operation is asynchronous. You can poll for status updates by using the <code>GetMLModel</code> operation and checking the <code>Status</code> parameter. </p>",
        "properties": { "MLModelId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "CreateRealtimeEndpointInput": {
        "properties": { "MLModelId": { "$ref": "#/components/schemas/EntityId" } },
        "required": ["MLModelId"],
        "type": "object"
      },
      "CreateRealtimeEndpointOutput": {
        "description": "<p>Represents the output of an <code>CreateRealtimeEndpoint</code> operation.</p> <p>The result contains the <code>MLModelId</code> and the endpoint information for the <code>MLModel</code>.</p> <note> <p>The endpoint information includes the URI of the <code>MLModel</code>; that is, the location to send online prediction requests for the specified <code>MLModel</code>.</p> </note>",
        "properties": {
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "RealtimeEndpointInfo": { "$ref": "#/components/schemas/RealtimeEndpointInfo" }
        },
        "type": "object"
      },
      "DataRearrangement": { "type": "string" },
      "DataSchema": {
        "description": "<p>The schema of a <code>DataSource</code>. The <code>DataSchema</code> defines the structure of the observation data in the data file(s) referenced in the <code>DataSource</code>. The DataSource schema is expressed in JSON format.</p> <p><code>DataSchema</code> is not required if you specify a <code>DataSchemaUri</code></p> <p>{ \"version\": \"1.0\", \"recordAnnotationFieldName\": \"F1\", \"recordWeightFieldName\": \"F2\", \"targetFieldName\": \"F3\", \"dataFormat\": \"CSV\", \"dataFileContainsHeader\": true, \"variables\": [ { \"fieldName\": \"F1\", \"fieldType\": \"TEXT\" }, { \"fieldName\": \"F2\", \"fieldType\": \"NUMERIC\" }, { \"fieldName\": \"F3\", \"fieldType\": \"CATEGORICAL\" }, { \"fieldName\": \"F4\", \"fieldType\": \"NUMERIC\" }, { \"fieldName\": \"F5\", \"fieldType\": \"CATEGORICAL\" }, { \"fieldName\": \"F6\", \"fieldType\": \"TEXT\" }, { \"fieldName\": \"F7\", \"fieldType\": \"WEIGHTED_INT_SEQUENCE\" }, { \"fieldName\": \"F8\", \"fieldType\": \"WEIGHTED_STRING_SEQUENCE\" } ], \"excludedVariableNames\": [ \"F6\" ] } </p>",
        "maxLength": 131071,
        "type": "string"
      },
      "DataSource": {
        "description": "<p> Represents the output of the <code>GetDataSource</code> operation. </p> <p> The content consists of the detailed metadata and data file information and the current status of the <code>DataSource</code>. </p>",
        "properties": {
          "ComputeStatistics": { "$ref": "#/components/schemas/ComputeStatistics" },
          "ComputeTime": { "$ref": "#/components/schemas/LongType" },
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "CreatedByIamUser": { "$ref": "#/components/schemas/AwsUserArn" },
          "DataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "DataRearrangement": { "$ref": "#/components/schemas/DataRearrangement" },
          "DataSizeInBytes": { "$ref": "#/components/schemas/LongType" },
          "DataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "FinishedAt": { "$ref": "#/components/schemas/EpochTime" },
          "LastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Message": { "$ref": "#/components/schemas/Message" },
          "Name": { "$ref": "#/components/schemas/EntityName" },
          "NumberOfFiles": { "$ref": "#/components/schemas/LongType" },
          "RDSMetadata": { "$ref": "#/components/schemas/RDSMetadata" },
          "RedshiftMetadata": { "$ref": "#/components/schemas/RedshiftMetadata" },
          "RoleARN": { "$ref": "#/components/schemas/RoleARN" },
          "StartedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Status": { "$ref": "#/components/schemas/EntityStatus" }
        },
        "type": "object"
      },
      "DataSourceFilterVariable": {
        "description": "<p>A list of the variables to use in searching or filtering <code>DataSource</code>.</p> <ul> <li> <code>CreatedAt</code> - Sets the search criteria to <code>DataSource</code> creation date.</li> <li> <code>Status</code> - Sets the search criteria to <code>DataSource</code> status.</li> <li> <code>Name</code> - Sets the search criteria to the contents of <code>DataSource</code> <b> </b> <code>Name</code>.</li> <li> <code>DataUri</code> - Sets the search criteria to the URI of data files used to create the <code>DataSource</code>. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</li> <li> <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>DataSource</code> creation.</li> </ul> <note><title>Note</title> <p>The variable names should match the variable names in the <code>DataSource</code>.</p> </note>",
        "enum": ["CreatedAt", "LastUpdatedAt", "Status", "Name", "DataLocationS3", "IAMUser"],
        "type": "string"
      },
      "DataSources": { "items": { "$ref": "#/components/schemas/DataSource" }, "type": "array" },
      "DeleteBatchPredictionInput": {
        "properties": { "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" } },
        "required": ["BatchPredictionId"],
        "type": "object"
      },
      "DeleteBatchPredictionOutput": {
        "description": "<p> Represents the output of a <code>DeleteBatchPrediction</code> operation.</p> <p>You can use the <code>GetBatchPrediction</code> operation and check the value of the <code>Status</code> parameter to see whether a <code>BatchPrediction</code> is marked as <code>DELETED</code>.</p>",
        "properties": { "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "DeleteDataSourceInput": {
        "properties": { "DataSourceId": { "$ref": "#/components/schemas/EntityId" } },
        "required": ["DataSourceId"],
        "type": "object"
      },
      "DeleteDataSourceOutput": {
        "description": " Represents the output of a <code>DeleteDataSource</code> operation.",
        "properties": { "DataSourceId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "DeleteEvaluationInput": {
        "properties": { "EvaluationId": { "$ref": "#/components/schemas/EntityId" } },
        "required": ["EvaluationId"],
        "type": "object"
      },
      "DeleteEvaluationOutput": {
        "description": "<p> Represents the output of a <code>DeleteEvaluation</code> operation. The output indicates that Amazon Machine Learning (Amazon ML) received the request.</p> <p>You can use the <code>GetEvaluation</code> operation and check the value of the <code>Status</code> parameter to see whether an <code>Evaluation</code> is marked as <code>DELETED</code>.</p>",
        "properties": { "EvaluationId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "DeleteMLModelInput": {
        "properties": { "MLModelId": { "$ref": "#/components/schemas/EntityId" } },
        "required": ["MLModelId"],
        "type": "object"
      },
      "DeleteMLModelOutput": {
        "description": "<p>Represents the output of a <code>DeleteMLModel</code> operation.</p> <p>You can use the <code>GetMLModel</code> operation and check the value of the <code>Status</code> parameter to see whether an <code>MLModel</code> is marked as <code>DELETED</code>.</p>",
        "properties": { "MLModelId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "DeleteRealtimeEndpointInput": {
        "properties": { "MLModelId": { "$ref": "#/components/schemas/EntityId" } },
        "required": ["MLModelId"],
        "type": "object"
      },
      "DeleteRealtimeEndpointOutput": {
        "description": "<p>Represents the output of an <code>DeleteRealtimeEndpoint</code> operation.</p> <p>The result contains the <code>MLModelId</code> and the endpoint information for the <code>MLModel</code>. </p>",
        "properties": {
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "RealtimeEndpointInfo": { "$ref": "#/components/schemas/RealtimeEndpointInfo" }
        },
        "type": "object"
      },
      "DeleteTagsInput": {
        "properties": {
          "ResourceId": { "$ref": "#/components/schemas/EntityId" },
          "ResourceType": { "$ref": "#/components/schemas/TaggableResourceType" },
          "TagKeys": { "$ref": "#/components/schemas/TagKeyList" }
        },
        "required": ["TagKeys", "ResourceId", "ResourceType"],
        "type": "object"
      },
      "DeleteTagsOutput": {
        "description": "Amazon ML returns the following elements. ",
        "properties": {
          "ResourceId": { "$ref": "#/components/schemas/EntityId" },
          "ResourceType": { "$ref": "#/components/schemas/TaggableResourceType" }
        },
        "type": "object"
      },
      "DescribeBatchPredictionsInput": {
        "properties": {
          "EQ": { "$ref": "#/components/schemas/ComparatorValue" },
          "FilterVariable": { "$ref": "#/components/schemas/BatchPredictionFilterVariable" },
          "GE": { "$ref": "#/components/schemas/ComparatorValue" },
          "GT": { "$ref": "#/components/schemas/ComparatorValue" },
          "LE": { "$ref": "#/components/schemas/ComparatorValue" },
          "LT": { "$ref": "#/components/schemas/ComparatorValue" },
          "Limit": { "$ref": "#/components/schemas/PageLimit" },
          "NE": { "$ref": "#/components/schemas/ComparatorValue" },
          "NextToken": { "$ref": "#/components/schemas/StringType" },
          "Prefix": { "$ref": "#/components/schemas/ComparatorValue" },
          "SortOrder": { "$ref": "#/components/schemas/SortOrder" }
        },
        "type": "object"
      },
      "DescribeBatchPredictionsOutput": {
        "description": "Represents the output of a <code>DescribeBatchPredictions</code> operation. The content is essentially a list of <code>BatchPrediction</code>s.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/StringType" },
          "Results": { "$ref": "#/components/schemas/BatchPredictions" }
        },
        "type": "object"
      },
      "DescribeDataSourcesInput": {
        "properties": {
          "EQ": { "$ref": "#/components/schemas/ComparatorValue" },
          "FilterVariable": { "$ref": "#/components/schemas/DataSourceFilterVariable" },
          "GE": { "$ref": "#/components/schemas/ComparatorValue" },
          "GT": { "$ref": "#/components/schemas/ComparatorValue" },
          "LE": { "$ref": "#/components/schemas/ComparatorValue" },
          "LT": { "$ref": "#/components/schemas/ComparatorValue" },
          "Limit": { "$ref": "#/components/schemas/PageLimit" },
          "NE": { "$ref": "#/components/schemas/ComparatorValue" },
          "NextToken": { "$ref": "#/components/schemas/StringType" },
          "Prefix": { "$ref": "#/components/schemas/ComparatorValue" },
          "SortOrder": { "$ref": "#/components/schemas/SortOrder" }
        },
        "type": "object"
      },
      "DescribeDataSourcesOutput": {
        "description": "Represents the query results from a <a>DescribeDataSources</a> operation. The content is essentially a list of <code>DataSource</code>.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/StringType" },
          "Results": { "$ref": "#/components/schemas/DataSources" }
        },
        "type": "object"
      },
      "DescribeEvaluationsInput": {
        "properties": {
          "EQ": { "$ref": "#/components/schemas/ComparatorValue" },
          "FilterVariable": { "$ref": "#/components/schemas/EvaluationFilterVariable" },
          "GE": { "$ref": "#/components/schemas/ComparatorValue" },
          "GT": { "$ref": "#/components/schemas/ComparatorValue" },
          "LE": { "$ref": "#/components/schemas/ComparatorValue" },
          "LT": { "$ref": "#/components/schemas/ComparatorValue" },
          "Limit": { "$ref": "#/components/schemas/PageLimit" },
          "NE": { "$ref": "#/components/schemas/ComparatorValue" },
          "NextToken": { "$ref": "#/components/schemas/StringType" },
          "Prefix": { "$ref": "#/components/schemas/ComparatorValue" },
          "SortOrder": { "$ref": "#/components/schemas/SortOrder" }
        },
        "type": "object"
      },
      "DescribeEvaluationsOutput": {
        "description": "Represents the query results from a <code>DescribeEvaluations</code> operation. The content is essentially a list of <code>Evaluation</code>.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/StringType" },
          "Results": { "$ref": "#/components/schemas/Evaluations" }
        },
        "type": "object"
      },
      "DescribeMLModelsInput": {
        "properties": {
          "EQ": { "$ref": "#/components/schemas/ComparatorValue" },
          "FilterVariable": { "$ref": "#/components/schemas/MLModelFilterVariable" },
          "GE": { "$ref": "#/components/schemas/ComparatorValue" },
          "GT": { "$ref": "#/components/schemas/ComparatorValue" },
          "LE": { "$ref": "#/components/schemas/ComparatorValue" },
          "LT": { "$ref": "#/components/schemas/ComparatorValue" },
          "Limit": { "$ref": "#/components/schemas/PageLimit" },
          "NE": { "$ref": "#/components/schemas/ComparatorValue" },
          "NextToken": { "$ref": "#/components/schemas/StringType" },
          "Prefix": { "$ref": "#/components/schemas/ComparatorValue" },
          "SortOrder": { "$ref": "#/components/schemas/SortOrder" }
        },
        "type": "object"
      },
      "DescribeMLModelsOutput": {
        "description": "Represents the output of a <code>DescribeMLModels</code> operation. The content is essentially a list of <code>MLModel</code>.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/StringType" },
          "Results": { "$ref": "#/components/schemas/MLModels" }
        },
        "type": "object"
      },
      "DescribeTagsInput": {
        "properties": {
          "ResourceId": { "$ref": "#/components/schemas/EntityId" },
          "ResourceType": { "$ref": "#/components/schemas/TaggableResourceType" }
        },
        "required": ["ResourceId", "ResourceType"],
        "type": "object"
      },
      "DescribeTagsOutput": {
        "description": "Amazon ML returns the following elements. ",
        "properties": {
          "ResourceId": { "$ref": "#/components/schemas/EntityId" },
          "ResourceType": { "$ref": "#/components/schemas/TaggableResourceType" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "type": "object"
      },
      "DetailsAttributes": {
        "description": "Contains the key values of <code>DetailsMap</code>: <code>PredictiveModelType</code> - Indicates the type of the <code>MLModel</code>. <code>Algorithm</code> - Indicates the algorithm that was used for the <code>MLModel</code>.",
        "enum": ["PredictiveModelType", "Algorithm"],
        "type": "string"
      },
      "DetailsMap": {
        "additionalProperties": { "$ref": "#/components/schemas/DetailsValue" },
        "description": "Provides any additional details regarding the prediction.",
        "type": "object"
      },
      "DetailsValue": { "minLength": 1, "type": "string" },
      "EDPPipelineId": { "maxLength": 1024, "minLength": 1, "type": "string" },
      "EDPResourceRole": { "maxLength": 64, "minLength": 1, "type": "string" },
      "EDPSecurityGroupId": { "maxLength": 255, "minLength": 1, "type": "string" },
      "EDPSecurityGroupIds": { "items": { "$ref": "#/components/schemas/EDPSecurityGroupId" }, "type": "array" },
      "EDPServiceRole": { "maxLength": 64, "minLength": 1, "type": "string" },
      "EDPSubnetId": { "maxLength": 255, "minLength": 1, "type": "string" },
      "EntityId": { "maxLength": 64, "minLength": 1, "pattern": "[a-zA-Z0-9_.-]+", "type": "string" },
      "EntityName": {
        "description": "A user-supplied name or description of the Amazon ML resource.",
        "maxLength": 1024,
        "pattern": ".*\\S.*|^$",
        "type": "string"
      },
      "EntityStatus": {
        "description": "<p>Object status with the following possible values:</p> <ul> <li><code>PENDING</code></li> <li><code>INPROGRESS</code></li> <li><code>FAILED</code></li> <li><code>COMPLETED</code></li> <li><code>DELETED</code></li> </ul>",
        "enum": ["PENDING", "INPROGRESS", "FAILED", "COMPLETED", "DELETED"],
        "type": "string"
      },
      "EpochTime": { "description": "A timestamp represented in epoch time.", "format": "date-time", "type": "string" },
      "ErrorCode": { "type": "integer" },
      "ErrorMessage": { "maxLength": 2048, "type": "string" },
      "Evaluation": {
        "description": "<p> Represents the output of <code>GetEvaluation</code> operation. </p> <p>The content consists of the detailed metadata and data file information and the current status of the <code>Evaluation</code>.</p>",
        "properties": {
          "ComputeTime": { "$ref": "#/components/schemas/LongType" },
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "CreatedByIamUser": { "$ref": "#/components/schemas/AwsUserArn" },
          "EvaluationDataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "EvaluationId": { "$ref": "#/components/schemas/EntityId" },
          "FinishedAt": { "$ref": "#/components/schemas/EpochTime" },
          "InputDataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "LastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "Message": { "$ref": "#/components/schemas/Message" },
          "Name": { "$ref": "#/components/schemas/EntityName" },
          "PerformanceMetrics": { "$ref": "#/components/schemas/PerformanceMetrics" },
          "StartedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Status": { "$ref": "#/components/schemas/EntityStatus" }
        },
        "type": "object"
      },
      "EvaluationFilterVariable": {
        "description": "<p>A list of the variables to use in searching or filtering <code>Evaluation</code>.</p> <ul> <li> <code>CreatedAt</code> - Sets the search criteria to <code>Evaluation</code> creation date.</li> <li> <code>Status</code> - Sets the search criteria to <code>Evaluation</code> status.</li> <li> <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code> <b> </b> <code>Name</code>.</li> <li> <code>IAMUser</code> - Sets the search criteria to the user account that invoked an evaluation.</li> <li> <code>MLModelId</code> - Sets the search criteria to the <code>Predictor</code> that was evaluated.</li> <li> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in evaluation.</li> <li> <code>DataUri</code> - Sets the search criteria to the data file(s) used in evaluation. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</li> </ul>",
        "enum": ["CreatedAt", "LastUpdatedAt", "Status", "Name", "IAMUser", "MLModelId", "DataSourceId", "DataURI"],
        "type": "string"
      },
      "Evaluations": { "items": { "$ref": "#/components/schemas/Evaluation" }, "type": "array" },
      "GetBatchPredictionInput": {
        "properties": { "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" } },
        "required": ["BatchPredictionId"],
        "type": "object"
      },
      "GetBatchPredictionOutput": {
        "description": "Represents the output of a <code>GetBatchPrediction</code> operation and describes a <code>BatchPrediction</code>.",
        "properties": {
          "BatchPredictionDataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" },
          "ComputeTime": { "$ref": "#/components/schemas/LongType" },
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "CreatedByIamUser": { "$ref": "#/components/schemas/AwsUserArn" },
          "FinishedAt": { "$ref": "#/components/schemas/EpochTime" },
          "InputDataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "InvalidRecordCount": { "$ref": "#/components/schemas/LongType" },
          "LastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "LogUri": { "$ref": "#/components/schemas/PresignedS3Url" },
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "Message": { "$ref": "#/components/schemas/Message" },
          "Name": { "$ref": "#/components/schemas/EntityName" },
          "OutputUri": { "$ref": "#/components/schemas/S3Url" },
          "StartedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Status": { "$ref": "#/components/schemas/EntityStatus" },
          "TotalRecordCount": { "$ref": "#/components/schemas/LongType" }
        },
        "type": "object"
      },
      "GetDataSourceInput": {
        "properties": {
          "DataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "Verbose": { "$ref": "#/components/schemas/Verbose" }
        },
        "required": ["DataSourceId"],
        "type": "object"
      },
      "GetDataSourceOutput": {
        "description": "Represents the output of a <code>GetDataSource</code> operation and describes a <code>DataSource</code>.",
        "properties": {
          "ComputeStatistics": { "$ref": "#/components/schemas/ComputeStatistics" },
          "ComputeTime": { "$ref": "#/components/schemas/LongType" },
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "CreatedByIamUser": { "$ref": "#/components/schemas/AwsUserArn" },
          "DataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "DataRearrangement": { "$ref": "#/components/schemas/DataRearrangement" },
          "DataSizeInBytes": { "$ref": "#/components/schemas/LongType" },
          "DataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "DataSourceSchema": { "$ref": "#/components/schemas/DataSchema" },
          "FinishedAt": { "$ref": "#/components/schemas/EpochTime" },
          "LastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "LogUri": { "$ref": "#/components/schemas/PresignedS3Url" },
          "Message": { "$ref": "#/components/schemas/Message" },
          "Name": { "$ref": "#/components/schemas/EntityName" },
          "NumberOfFiles": { "$ref": "#/components/schemas/LongType" },
          "RDSMetadata": { "$ref": "#/components/schemas/RDSMetadata" },
          "RedshiftMetadata": { "$ref": "#/components/schemas/RedshiftMetadata" },
          "RoleARN": { "$ref": "#/components/schemas/RoleARN" },
          "StartedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Status": { "$ref": "#/components/schemas/EntityStatus" }
        },
        "type": "object"
      },
      "GetEvaluationInput": {
        "properties": { "EvaluationId": { "$ref": "#/components/schemas/EntityId" } },
        "required": ["EvaluationId"],
        "type": "object"
      },
      "GetEvaluationOutput": {
        "description": "Represents the output of a <code>GetEvaluation</code> operation and describes an <code>Evaluation</code>.",
        "properties": {
          "ComputeTime": { "$ref": "#/components/schemas/LongType" },
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "CreatedByIamUser": { "$ref": "#/components/schemas/AwsUserArn" },
          "EvaluationDataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "EvaluationId": { "$ref": "#/components/schemas/EntityId" },
          "FinishedAt": { "$ref": "#/components/schemas/EpochTime" },
          "InputDataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "LastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "LogUri": { "$ref": "#/components/schemas/PresignedS3Url" },
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "Message": { "$ref": "#/components/schemas/Message" },
          "Name": { "$ref": "#/components/schemas/EntityName" },
          "PerformanceMetrics": { "$ref": "#/components/schemas/PerformanceMetrics" },
          "StartedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Status": { "$ref": "#/components/schemas/EntityStatus" }
        },
        "type": "object"
      },
      "GetMLModelInput": {
        "properties": {
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "Verbose": { "$ref": "#/components/schemas/Verbose" }
        },
        "required": ["MLModelId"],
        "type": "object"
      },
      "GetMLModelOutput": {
        "description": "Represents the output of a <code>GetMLModel</code> operation, and provides detailed information about a <code>MLModel</code>.",
        "properties": {
          "ComputeTime": { "$ref": "#/components/schemas/LongType" },
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "CreatedByIamUser": { "$ref": "#/components/schemas/AwsUserArn" },
          "EndpointInfo": { "$ref": "#/components/schemas/RealtimeEndpointInfo" },
          "FinishedAt": { "$ref": "#/components/schemas/EpochTime" },
          "InputDataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "LastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "LogUri": { "$ref": "#/components/schemas/PresignedS3Url" },
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "MLModelType": { "$ref": "#/components/schemas/MLModelType" },
          "Message": { "$ref": "#/components/schemas/Message" },
          "Name": { "$ref": "#/components/schemas/MLModelName" },
          "Recipe": { "$ref": "#/components/schemas/Recipe" },
          "Schema": { "$ref": "#/components/schemas/DataSchema" },
          "ScoreThreshold": { "$ref": "#/components/schemas/ScoreThreshold" },
          "ScoreThresholdLastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "SizeInBytes": { "$ref": "#/components/schemas/LongType" },
          "StartedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Status": { "$ref": "#/components/schemas/EntityStatus" },
          "TrainingDataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "TrainingParameters": { "$ref": "#/components/schemas/TrainingParameters" }
        },
        "type": "object"
      },
      "IdempotentParameterMismatchException": {
        "description": "A second request to use or change an object was not allowed. This can result from retrying a request using a parameter that was not present in the original request.",
        "properties": {
          "code": { "$ref": "#/components/schemas/ErrorCode" },
          "message": { "$ref": "#/components/schemas/ErrorMessage" }
        },
        "type": "object"
      },
      "IntegerType": { "description": "Integer type that is a 32-bit signed number.", "type": "integer" },
      "InternalServerException": {
        "description": "An error on the server occurred when trying to process a request.",
        "properties": {
          "code": { "$ref": "#/components/schemas/ErrorCode" },
          "message": { "$ref": "#/components/schemas/ErrorMessage" }
        },
        "type": "object"
      },
      "InvalidInputException": {
        "description": "An error on the client occurred. Typically, the cause is an invalid input value.",
        "properties": {
          "code": { "$ref": "#/components/schemas/ErrorCode" },
          "message": { "$ref": "#/components/schemas/ErrorMessage" }
        },
        "type": "object"
      },
      "InvalidTagException": {
        "properties": { "message": { "$ref": "#/components/schemas/ErrorMessage" } },
        "type": "object"
      },
      "Label": { "minLength": 1, "type": "string" },
      "LimitExceededException": {
        "description": "The subscriber exceeded the maximum number of operations. This exception can occur when listing objects such as <code>DataSource</code>.",
        "properties": {
          "code": { "$ref": "#/components/schemas/ErrorCode" },
          "message": { "$ref": "#/components/schemas/ErrorMessage" }
        },
        "type": "object"
      },
      "LongType": { "description": "Long integer type that is a 64-bit signed number.", "type": "integer" },
      "MLModel": {
        "description": "<p> Represents the output of a <code>GetMLModel</code> operation. </p> <p>The content consists of the detailed metadata and the current status of the <code>MLModel</code>.</p>",
        "properties": {
          "Algorithm": { "$ref": "#/components/schemas/Algorithm" },
          "ComputeTime": { "$ref": "#/components/schemas/LongType" },
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "CreatedByIamUser": { "$ref": "#/components/schemas/AwsUserArn" },
          "EndpointInfo": { "$ref": "#/components/schemas/RealtimeEndpointInfo" },
          "FinishedAt": { "$ref": "#/components/schemas/EpochTime" },
          "InputDataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "LastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "MLModelType": { "$ref": "#/components/schemas/MLModelType" },
          "Message": { "$ref": "#/components/schemas/Message" },
          "Name": { "$ref": "#/components/schemas/MLModelName" },
          "ScoreThreshold": { "$ref": "#/components/schemas/ScoreThreshold" },
          "ScoreThresholdLastUpdatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "SizeInBytes": { "$ref": "#/components/schemas/LongType" },
          "StartedAt": { "$ref": "#/components/schemas/EpochTime" },
          "Status": { "$ref": "#/components/schemas/EntityStatus" },
          "TrainingDataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "TrainingParameters": { "$ref": "#/components/schemas/TrainingParameters" }
        },
        "type": "object"
      },
      "MLModelFilterVariable": {
        "enum": [
          "CreatedAt",
          "LastUpdatedAt",
          "Status",
          "Name",
          "IAMUser",
          "TrainingDataSourceId",
          "RealtimeEndpointStatus",
          "MLModelType",
          "Algorithm",
          "TrainingDataURI"
        ],
        "type": "string"
      },
      "MLModelName": { "maxLength": 1024, "type": "string" },
      "MLModelType": { "enum": ["REGRESSION", "BINARY", "MULTICLASS"], "type": "string" },
      "MLModels": { "items": { "$ref": "#/components/schemas/MLModel" }, "type": "array" },
      "Message": {
        "description": " Description of the most recent details about an object.",
        "maxLength": 10240,
        "type": "string"
      },
      "PageLimit": { "maximum": 100, "minimum": 1, "type": "integer" },
      "PerformanceMetrics": {
        "description": "<p>Measurements of how well the <code>MLModel</code> performed on known observations. One of the following metrics is returned, based on the type of the <code>MLModel</code>: </p> <ul> <li> <p>BinaryAUC: The binary <code>MLModel</code> uses the Area Under the Curve (AUC) technique to measure performance. </p> </li> <li> <p>RegressionRMSE: The regression <code>MLModel</code> uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.</p> </li> <li> <p>MulticlassAvgFScore: The multiclass <code>MLModel</code> uses the F1 score technique to measure performance. </p> </li> </ul> <p> For more information about performance metrics, please see the <a href=\"http://docs.aws.amazon.com/machine-learning/latest/dg\">Amazon Machine Learning Developer Guide</a>. </p>",
        "properties": { "Properties": { "$ref": "#/components/schemas/PerformanceMetricsProperties" } },
        "type": "object"
      },
      "PerformanceMetricsProperties": {
        "additionalProperties": { "$ref": "#/components/schemas/PerformanceMetricsPropertyValue" },
        "type": "object"
      },
      "PerformanceMetricsPropertyKey": { "type": "string" },
      "PerformanceMetricsPropertyValue": { "type": "string" },
      "PredictInput": {
        "properties": {
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "PredictEndpoint": { "$ref": "#/components/schemas/VipURL" },
          "Record": { "$ref": "#/components/schemas/Record" }
        },
        "required": ["MLModelId", "Record", "PredictEndpoint"],
        "type": "object"
      },
      "PredictOutput": {
        "properties": { "Prediction": { "$ref": "#/components/schemas/Prediction" } },
        "type": "object"
      },
      "Prediction": {
        "description": "<p>The output from a <code>Predict</code> operation: </p> <ul> <li> <p> <code>Details</code> - Contains the following attributes: <code>DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASS</code> <code>DetailsAttributes.ALGORITHM - SGD</code> </p> </li> <li> <p> <code>PredictedLabel</code> - Present for either a <code>BINARY</code> or <code>MULTICLASS</code> <code>MLModel</code> request. </p> </li> <li> <p> <code>PredictedScores</code> - Contains the raw classification score corresponding to each label. </p> </li> <li> <p> <code>PredictedValue</code> - Present for a <code>REGRESSION</code> <code>MLModel</code> request. </p> </li> </ul>",
        "properties": {
          "details": { "$ref": "#/components/schemas/DetailsMap" },
          "predictedLabel": { "$ref": "#/components/schemas/Label" },
          "predictedScores": { "$ref": "#/components/schemas/ScoreValuePerLabelMap" },
          "predictedValue": { "$ref": "#/components/schemas/floatLabel" }
        },
        "type": "object"
      },
      "PredictorNotMountedException": {
        "description": "The exception is thrown when a predict request is made to an unmounted <code>MLModel</code>.",
        "properties": { "message": { "$ref": "#/components/schemas/ErrorMessage" } },
        "type": "object"
      },
      "PresignedS3Url": { "type": "string" },
      "RDSDataSpec": {
        "description": "The data specification of an Amazon Relational Database Service (Amazon RDS) <code>DataSource</code>.",
        "properties": {
          "DataRearrangement": { "$ref": "#/components/schemas/DataRearrangement" },
          "DataSchema": { "$ref": "#/components/schemas/DataSchema" },
          "DataSchemaUri": { "$ref": "#/components/schemas/S3Url" },
          "DatabaseCredentials": { "$ref": "#/components/schemas/RDSDatabaseCredentials" },
          "DatabaseInformation": { "$ref": "#/components/schemas/RDSDatabase" },
          "ResourceRole": { "$ref": "#/components/schemas/EDPResourceRole" },
          "S3StagingLocation": { "$ref": "#/components/schemas/S3Url" },
          "SecurityGroupIds": { "$ref": "#/components/schemas/EDPSecurityGroupIds" },
          "SelectSqlQuery": { "$ref": "#/components/schemas/RDSSelectSqlQuery" },
          "ServiceRole": { "$ref": "#/components/schemas/EDPServiceRole" },
          "SubnetId": { "$ref": "#/components/schemas/EDPSubnetId" }
        },
        "required": [
          "DatabaseInformation",
          "SelectSqlQuery",
          "DatabaseCredentials",
          "S3StagingLocation",
          "ResourceRole",
          "ServiceRole",
          "SubnetId",
          "SecurityGroupIds"
        ],
        "type": "object"
      },
      "RDSDatabase": {
        "description": "The database details of an Amazon RDS database.",
        "properties": {
          "DatabaseName": { "$ref": "#/components/schemas/RDSDatabaseName" },
          "InstanceIdentifier": { "$ref": "#/components/schemas/RDSInstanceIdentifier" }
        },
        "required": ["InstanceIdentifier", "DatabaseName"],
        "type": "object"
      },
      "RDSDatabaseCredentials": {
        "description": "The database credentials to connect to a database on an RDS DB instance.",
        "properties": {
          "Password": { "$ref": "#/components/schemas/RDSDatabasePassword" },
          "Username": { "$ref": "#/components/schemas/RDSDatabaseUsername" }
        },
        "required": ["Username", "Password"],
        "type": "object"
      },
      "RDSDatabaseName": {
        "description": "The name of a database hosted on an RDS DB instance.",
        "maxLength": 64,
        "minLength": 1,
        "type": "string"
      },
      "RDSDatabasePassword": {
        "description": "The password to be used by Amazon ML to connect to a database on an RDS DB instance. The password should have sufficient permissions to execute the <code>RDSSelectQuery</code> query.",
        "maxLength": 128,
        "minLength": 8,
        "type": "string"
      },
      "RDSDatabaseUsername": {
        "description": "The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.",
        "maxLength": 128,
        "minLength": 1,
        "type": "string"
      },
      "RDSInstanceIdentifier": {
        "description": "Identifier of RDS DB Instances.",
        "maxLength": 63,
        "minLength": 1,
        "pattern": "[a-z0-9-]+",
        "type": "string"
      },
      "RDSMetadata": {
        "description": "The datasource details that are specific to Amazon RDS.",
        "properties": {
          "DataPipelineId": { "$ref": "#/components/schemas/EDPPipelineId" },
          "Database": { "$ref": "#/components/schemas/RDSDatabase" },
          "DatabaseUserName": { "$ref": "#/components/schemas/RDSDatabaseUsername" },
          "ResourceRole": { "$ref": "#/components/schemas/EDPResourceRole" },
          "SelectSqlQuery": { "$ref": "#/components/schemas/RDSSelectSqlQuery" },
          "ServiceRole": { "$ref": "#/components/schemas/EDPServiceRole" }
        },
        "type": "object"
      },
      "RDSSelectSqlQuery": {
        "description": "The SQL query to be executed against the Amazon RDS database. The SQL query should be valid for the Amazon RDS type being used. ",
        "maxLength": 16777216,
        "minLength": 1,
        "type": "string"
      },
      "RealtimeEndpointInfo": {
        "description": " Describes the real-time endpoint information for an <code>MLModel</code>.",
        "properties": {
          "CreatedAt": { "$ref": "#/components/schemas/EpochTime" },
          "EndpointStatus": { "$ref": "#/components/schemas/RealtimeEndpointStatus" },
          "EndpointUrl": { "$ref": "#/components/schemas/VipURL" },
          "PeakRequestsPerSecond": { "$ref": "#/components/schemas/IntegerType" }
        },
        "type": "object"
      },
      "RealtimeEndpointStatus": { "enum": ["NONE", "READY", "UPDATING", "FAILED"], "type": "string" },
      "Recipe": { "maxLength": 131071, "type": "string" },
      "Record": {
        "additionalProperties": { "$ref": "#/components/schemas/VariableValue" },
        "description": "A map of variable name-value pairs that represent an observation.",
        "type": "object"
      },
      "RedshiftClusterIdentifier": {
        "description": "The ID of an Amazon Redshift cluster.",
        "maxLength": 63,
        "minLength": 1,
        "pattern": "[a-z0-9-]+",
        "type": "string"
      },
      "RedshiftDataSpec": {
        "description": "Describes the data specification of an Amazon Redshift <code>DataSource</code>.",
        "properties": {
          "DataRearrangement": { "$ref": "#/components/schemas/DataRearrangement" },
          "DataSchema": { "$ref": "#/components/schemas/DataSchema" },
          "DataSchemaUri": { "$ref": "#/components/schemas/S3Url" },
          "DatabaseCredentials": { "$ref": "#/components/schemas/RedshiftDatabaseCredentials" },
          "DatabaseInformation": { "$ref": "#/components/schemas/RedshiftDatabase" },
          "S3StagingLocation": { "$ref": "#/components/schemas/S3Url" },
          "SelectSqlQuery": { "$ref": "#/components/schemas/RedshiftSelectSqlQuery" }
        },
        "required": ["DatabaseInformation", "SelectSqlQuery", "DatabaseCredentials", "S3StagingLocation"],
        "type": "object"
      },
      "RedshiftDatabase": {
        "description": "Describes the database details required to connect to an Amazon Redshift database.",
        "properties": {
          "ClusterIdentifier": { "$ref": "#/components/schemas/RedshiftClusterIdentifier" },
          "DatabaseName": { "$ref": "#/components/schemas/RedshiftDatabaseName" }
        },
        "required": ["DatabaseName", "ClusterIdentifier"],
        "type": "object"
      },
      "RedshiftDatabaseCredentials": {
        "description": " Describes the database credentials for connecting to a database on an Amazon Redshift cluster.",
        "properties": {
          "Password": { "$ref": "#/components/schemas/RedshiftDatabasePassword" },
          "Username": { "$ref": "#/components/schemas/RedshiftDatabaseUsername" }
        },
        "required": ["Username", "Password"],
        "type": "object"
      },
      "RedshiftDatabaseName": {
        "description": "The name of a database hosted on an Amazon Redshift cluster.",
        "maxLength": 64,
        "minLength": 1,
        "pattern": "[a-z0-9]+",
        "type": "string"
      },
      "RedshiftDatabasePassword": {
        "description": "A password to be used by Amazon ML to connect to a database on an Amazon Redshift cluster. The password should have sufficient permissions to execute a <code>RedshiftSelectSqlQuery</code> query. The password should be valid for an Amazon Redshift <a href=\"http://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.",
        "maxLength": 64,
        "minLength": 8,
        "type": "string"
      },
      "RedshiftDatabaseUsername": {
        "description": "A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href=\"http://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">USER</a>.",
        "maxLength": 128,
        "minLength": 1,
        "type": "string"
      },
      "RedshiftMetadata": {
        "description": "Describes the <code>DataSource</code> details specific to Amazon Redshift.",
        "properties": {
          "DatabaseUserName": { "$ref": "#/components/schemas/RedshiftDatabaseUsername" },
          "RedshiftDatabase": { "$ref": "#/components/schemas/RedshiftDatabase" },
          "SelectSqlQuery": { "$ref": "#/components/schemas/RedshiftSelectSqlQuery" }
        },
        "type": "object"
      },
      "RedshiftSelectSqlQuery": {
        "description": " Describes the SQL query to execute on the Amazon Redshift database. The SQL query should be valid for an Amazon Redshift <a href=\"http://docs.aws.amazon.com/redshift/latest/dg/r_SELECT_synopsis.html\">SELECT</a>. ",
        "maxLength": 16777216,
        "minLength": 1,
        "type": "string"
      },
      "ResourceNotFoundException": {
        "description": "A specified resource cannot be located.",
        "properties": {
          "code": { "$ref": "#/components/schemas/ErrorCode" },
          "message": { "$ref": "#/components/schemas/ErrorMessage" }
        },
        "type": "object"
      },
      "RoleARN": {
        "description": "The Amazon Resource Name (ARN) of an <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts\">AWS IAM Role</a>, such as the following: arn:aws:iam::account:role/rolename. ",
        "maxLength": 110,
        "minLength": 1,
        "type": "string"
      },
      "S3DataSpec": {
        "description": " Describes the data specification of a <code>DataSource</code>.",
        "properties": {
          "DataLocationS3": { "$ref": "#/components/schemas/S3Url" },
          "DataRearrangement": { "$ref": "#/components/schemas/DataRearrangement" },
          "DataSchema": { "$ref": "#/components/schemas/DataSchema" },
          "DataSchemaLocationS3": { "$ref": "#/components/schemas/S3Url" }
        },
        "required": ["DataLocationS3"],
        "type": "object"
      },
      "S3Url": {
        "description": "A reference to a file or bucket on Amazon Simple Storage Service (Amazon S3).",
        "maxLength": 2048,
        "pattern": "s3://([^/]+)(/.*)?",
        "type": "string"
      },
      "ScoreThreshold": { "format": "float", "type": "number" },
      "ScoreValue": { "format": "float", "type": "number" },
      "ScoreValuePerLabelMap": {
        "additionalProperties": { "$ref": "#/components/schemas/ScoreValue" },
        "description": "Provides the raw classification score corresponding to each label.",
        "type": "object"
      },
      "SortOrder": {
        "description": "<p>The sort order specified in a listing condition. Possible values include the following:</p> <ul> <li> <code>asc</code> - Present the information in ascending order (from A-Z).</li> <li> <code>dsc</code> - Present the information in descending order (from Z-A).</li> </ul>",
        "enum": ["asc", "dsc"],
        "type": "string"
      },
      "StringType": { "description": "String type.", "type": "string" },
      "Tag": {
        "description": "A custom key-value pair associated with an ML object, such as an ML model.",
        "properties": {
          "Key": { "$ref": "#/components/schemas/TagKey" },
          "Value": { "$ref": "#/components/schemas/TagValue" }
        },
        "type": "object"
      },
      "TagKey": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "type": "string"
      },
      "TagKeyList": { "items": { "$ref": "#/components/schemas/TagKey" }, "maxItems": 100, "type": "array" },
      "TagLimitExceededException": {
        "properties": { "message": { "$ref": "#/components/schemas/ErrorMessage" } },
        "type": "object"
      },
      "TagList": { "items": { "$ref": "#/components/schemas/Tag" }, "maxItems": 100, "type": "array" },
      "TagValue": {
        "maxLength": 256,
        "minLength": 0,
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "type": "string"
      },
      "TaggableResourceType": { "enum": ["BatchPrediction", "DataSource", "Evaluation", "MLModel"], "type": "string" },
      "TrainingParameters": { "additionalProperties": { "$ref": "#/components/schemas/StringType" }, "type": "object" },
      "UpdateBatchPredictionInput": {
        "properties": {
          "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" },
          "BatchPredictionName": { "$ref": "#/components/schemas/EntityName" }
        },
        "required": ["BatchPredictionId", "BatchPredictionName"],
        "type": "object"
      },
      "UpdateBatchPredictionOutput": {
        "description": "<p>Represents the output of an <code>UpdateBatchPrediction</code> operation.</p> <p>You can see the updated content by using the <code>GetBatchPrediction</code> operation.</p>",
        "properties": { "BatchPredictionId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "UpdateDataSourceInput": {
        "properties": {
          "DataSourceId": { "$ref": "#/components/schemas/EntityId" },
          "DataSourceName": { "$ref": "#/components/schemas/EntityName" }
        },
        "required": ["DataSourceId", "DataSourceName"],
        "type": "object"
      },
      "UpdateDataSourceOutput": {
        "description": "<p>Represents the output of an <code>UpdateDataSource</code> operation.</p> <p>You can see the updated content by using the <code>GetBatchPrediction</code> operation.</p>",
        "properties": { "DataSourceId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "UpdateEvaluationInput": {
        "properties": {
          "EvaluationId": { "$ref": "#/components/schemas/EntityId" },
          "EvaluationName": { "$ref": "#/components/schemas/EntityName" }
        },
        "required": ["EvaluationId", "EvaluationName"],
        "type": "object"
      },
      "UpdateEvaluationOutput": {
        "description": "<p>Represents the output of an <code>UpdateEvaluation</code> operation.</p> <p>You can see the updated content by using the <code>GetEvaluation</code> operation.</p>",
        "properties": { "EvaluationId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "UpdateMLModelInput": {
        "properties": {
          "MLModelId": { "$ref": "#/components/schemas/EntityId" },
          "MLModelName": { "$ref": "#/components/schemas/EntityName" },
          "ScoreThreshold": { "$ref": "#/components/schemas/ScoreThreshold" }
        },
        "required": ["MLModelId"],
        "type": "object"
      },
      "UpdateMLModelOutput": {
        "description": "<p>Represents the output of an <code>UpdateMLModel</code> operation.</p> <p>You can see the updated content by using the <code>GetMLModel</code> operation.</p>",
        "properties": { "MLModelId": { "$ref": "#/components/schemas/EntityId" } },
        "type": "object"
      },
      "VariableName": {
        "description": "The name of a variable. Currently it's used to specify the name of the target value, label, weight, and tags.",
        "type": "string"
      },
      "VariableValue": {
        "description": "The value of a variable. Currently it's used to specify values of the target value, weights, and tag variables and for filtering variable values.",
        "type": "string"
      },
      "Verbose": {
        "description": "Specifies whether a describe operation should return exhaustive or abbreviated information.",
        "type": "boolean"
      },
      "VipURL": { "maxLength": 2048, "pattern": "https://[a-zA-Z0-9-.]*\\.amazon(aws)?\\.com[/]?", "type": "string" },
      "floatLabel": { "format": "float", "type": "number" }
    }
  }
}
