{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<p>AWS IoT Analytics allows you to collect large amounts of device data, process messages, and store them. You can then query the data and run sophisticated analytics on it. AWS IoT Analytics enables advanced data exploration through integration with Jupyter Notebooks and data visualization through integration with Amazon QuickSight.</p> <p>Traditional analytics and business intelligence tools are designed to process structured data. IoT data often comes from devices that record noisy processes (such as temperature, motion, or sound). As a result the data from these devices can have significant gaps, corrupted messages, and false readings that must be cleaned up before analysis can occur. Also, IoT data is often only meaningful in the context of other data from external sources. </p> <p>AWS IoT Analytics automates the steps required to analyze data from IoT devices. AWS IoT Analytics filters, transforms, and enriches IoT data before storing it in a time-series data store for analysis. You can set up the service to collect only the data you need from your devices, apply mathematical transforms to process the data, and enrich the data with device-specific metadata such as device type and location before storing it. Then, you can analyze your data by running queries using the built-in SQL query engine, or perform more complex analytics and machine learning inference. AWS IoT Analytics includes pre-built models for common IoT use cases so you can answer questions like which devices are about to fail or which customers are at risk of abandoning their wearable devices.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS IoT Analytics",
    "version": "2017-11-27",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iotanalytics-2017-11-27.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "iotanalytics"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/iotanalytics/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/channels": {
      "get": {
        "description": "Retrieves a list of channels.",
        "operationId": "ListChannels",
        "parameters": [
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "<p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListChannelsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a channel. A channel collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline.",
        "operationId": "CreateChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channelName": {
                    "description": "The name of the channel.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "type": "string"
                  },
                  "channelStorage": {
                    "description": "Where channel data is stored.",
                    "properties": {
                      "customerManagedS3": { "$ref": "#/components/schemas/CustomerManagedChannelS3Storage" },
                      "serviceManagedS3": { "$ref": "#/components/schemas/ServiceManagedChannelS3Storage" }
                    },
                    "type": "object"
                  },
                  "retentionPeriod": {
                    "description": "How long, in days, message data is kept.",
                    "properties": {
                      "numberOfDays": { "$ref": "#/components/schemas/RetentionPeriodInDays" },
                      "unlimited": { "$ref": "#/components/schemas/UnlimitedRetentionPeriod" }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage the channel.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": ["channelName"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateChannelResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/channels/{channelName}": {
      "delete": {
        "description": "Deletes the specified channel.",
        "operationId": "DeleteChannel",
        "parameters": [
          {
            "description": "The name of the channel to delete.",
            "in": "path",
            "name": "channelName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a channel.",
        "operationId": "DescribeChannel",
        "parameters": [
          {
            "description": "The name of the channel whose information is retrieved.",
            "in": "path",
            "name": "channelName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          },
          {
            "description": "If true, additional statistical information about the channel is included in the response.",
            "in": "query",
            "name": "includeStatistics",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeChannelResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates the settings of a channel.",
        "operationId": "UpdateChannel",
        "parameters": [
          {
            "description": "The name of the channel to be updated.",
            "in": "path",
            "name": "channelName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channelStorage": {
                    "description": "Where channel data is stored.",
                    "properties": {
                      "customerManagedS3": { "$ref": "#/components/schemas/CustomerManagedChannelS3Storage" },
                      "serviceManagedS3": { "$ref": "#/components/schemas/ServiceManagedChannelS3Storage" }
                    },
                    "type": "object"
                  },
                  "retentionPeriod": {
                    "description": "How long, in days, message data is kept.",
                    "properties": {
                      "numberOfDays": { "$ref": "#/components/schemas/RetentionPeriodInDays" },
                      "unlimited": { "$ref": "#/components/schemas/UnlimitedRetentionPeriod" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/channels/{channelName}/sample": {
      "get": {
        "description": "Retrieves a sample of messages from the specified channel ingested during the specified timeframe. Up to 10 messages can be retrieved.",
        "operationId": "SampleChannelData",
        "parameters": [
          {
            "description": "The name of the channel whose message samples are retrieved.",
            "in": "path",
            "name": "channelName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          },
          {
            "description": "The number of sample messages to be retrieved. The limit is 10, the default is also 10.",
            "in": "query",
            "name": "maxMessages",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 10 }
          },
          {
            "description": "The start of the time window from which sample messages are retrieved.",
            "in": "query",
            "name": "startTime",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "The end of the time window from which sample messages are retrieved.",
            "in": "query",
            "name": "endTime",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SampleChannelDataResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/datasets": {
      "get": {
        "description": "Retrieves information about data sets.",
        "operationId": "ListDatasets",
        "parameters": [
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "<p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListDatasetsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a data set. A data set stores data retrieved from a data store by applying a \"queryAction\" (a SQL query) or a \"containerAction\" (executing a containerized application). This operation creates the skeleton of a data set. The data set can be populated manually by calling \"CreateDatasetContent\" or automatically according to a \"trigger\" you specify.",
        "operationId": "CreateDataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "actions": {
                    "description": "A list of actions that create the data set contents.",
                    "items": { "$ref": "#/components/schemas/DatasetAction" },
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                  },
                  "contentDeliveryRules": {
                    "description": "When data set contents are created they are delivered to destinations specified here.",
                    "items": { "$ref": "#/components/schemas/DatasetContentDeliveryRule" },
                    "maxItems": 20,
                    "minItems": 0,
                    "type": "array"
                  },
                  "datasetName": {
                    "description": "The name of the data set.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "type": "string"
                  },
                  "retentionPeriod": {
                    "description": "How long, in days, message data is kept.",
                    "properties": {
                      "numberOfDays": { "$ref": "#/components/schemas/RetentionPeriodInDays" },
                      "unlimited": { "$ref": "#/components/schemas/UnlimitedRetentionPeriod" }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage the data set.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "array"
                  },
                  "triggers": {
                    "description": "A list of triggers. A trigger causes data set contents to be populated at a specified time interval or when another data set's contents are created. The list of triggers can be empty or contain up to five <b>DataSetTrigger</b> objects.",
                    "items": { "$ref": "#/components/schemas/DatasetTrigger" },
                    "maxItems": 5,
                    "minItems": 0,
                    "type": "array"
                  },
                  "versioningConfiguration": {
                    "description": "Information about the versioning of data set contents.",
                    "properties": {
                      "maxVersions": { "$ref": "#/components/schemas/MaxVersions" },
                      "unlimited": { "$ref": "#/components/schemas/UnlimitedVersioning" }
                    },
                    "type": "object"
                  }
                },
                "required": ["datasetName", "actions"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDatasetResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/datasets/{datasetName}": {
      "delete": {
        "description": "<p>Deletes the specified data set.</p> <p>You do not have to delete the content of the data set before you perform this operation.</p>",
        "operationId": "DeleteDataset",
        "parameters": [
          {
            "description": "The name of the data set to delete.",
            "in": "path",
            "name": "datasetName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a data set.",
        "operationId": "DescribeDataset",
        "parameters": [
          {
            "description": "The name of the data set whose information is retrieved.",
            "in": "path",
            "name": "datasetName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeDatasetResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates the settings of a data set.",
        "operationId": "UpdateDataset",
        "parameters": [
          {
            "description": "The name of the data set to update.",
            "in": "path",
            "name": "datasetName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "actions": {
                    "description": "A list of \"DatasetAction\" objects.",
                    "items": { "$ref": "#/components/schemas/DatasetAction" },
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                  },
                  "contentDeliveryRules": {
                    "description": "When data set contents are created they are delivered to destinations specified here.",
                    "items": { "$ref": "#/components/schemas/DatasetContentDeliveryRule" },
                    "maxItems": 20,
                    "minItems": 0,
                    "type": "array"
                  },
                  "retentionPeriod": {
                    "description": "How long, in days, message data is kept.",
                    "properties": {
                      "numberOfDays": { "$ref": "#/components/schemas/RetentionPeriodInDays" },
                      "unlimited": { "$ref": "#/components/schemas/UnlimitedRetentionPeriod" }
                    },
                    "type": "object"
                  },
                  "triggers": {
                    "description": "A list of \"DatasetTrigger\" objects. The list can be empty or can contain up to five <b>DataSetTrigger</b> objects.",
                    "items": { "$ref": "#/components/schemas/DatasetTrigger" },
                    "maxItems": 5,
                    "minItems": 0,
                    "type": "array"
                  },
                  "versioningConfiguration": {
                    "description": "Information about the versioning of data set contents.",
                    "properties": {
                      "maxVersions": { "$ref": "#/components/schemas/MaxVersions" },
                      "unlimited": { "$ref": "#/components/schemas/UnlimitedVersioning" }
                    },
                    "type": "object"
                  }
                },
                "required": ["actions"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/datasets/{datasetName}/content": {
      "delete": {
        "description": "Deletes the content of the specified data set.",
        "operationId": "DeleteDatasetContent",
        "parameters": [
          {
            "description": "The name of the data set whose content is deleted.",
            "in": "path",
            "name": "datasetName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          },
          {
            "description": "The version of the data set whose content is deleted. You can also use the strings \"$LATEST\" or \"$LATEST_SUCCEEDED\" to delete the latest or latest successfully completed data set. If not specified, \"$LATEST_SUCCEEDED\" is the default.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": { "type": "string", "minLength": 7, "maxLength": 36 }
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "get": {
        "description": "Retrieves the contents of a data set as pre-signed URIs.",
        "operationId": "GetDatasetContent",
        "parameters": [
          {
            "description": "The name of the data set whose contents are retrieved.",
            "in": "path",
            "name": "datasetName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          },
          {
            "description": "The version of the data set whose contents are retrieved. You can also use the strings \"$LATEST\" or \"$LATEST_SUCCEEDED\" to retrieve the contents of the latest or latest successfully completed data set. If not specified, \"$LATEST_SUCCEEDED\" is the default.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": { "type": "string", "minLength": 7, "maxLength": 36 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetDatasetContentResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates the content of a data set by applying a \"queryAction\" (a SQL query) or a \"containerAction\" (executing a containerized application).",
        "operationId": "CreateDatasetContent",
        "parameters": [
          {
            "description": "The name of the data set.",
            "in": "path",
            "name": "datasetName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateDatasetContentResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/datasets/{datasetName}/contents": {
      "get": {
        "description": "Lists information about data set contents that have been created.",
        "operationId": "ListDatasetContents",
        "parameters": [
          {
            "description": "The name of the data set whose contents information you want to list.",
            "in": "path",
            "name": "datasetName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          },
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The maximum number of results to return in this request.",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          },
          {
            "description": "A filter to limit results to those data set contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the CreateDataset request. (timestamp)",
            "in": "query",
            "name": "scheduledOnOrAfter",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "description": "A filter to limit results to those data set contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the CreateDataset request. (timestamp)",
            "in": "query",
            "name": "scheduledBefore",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListDatasetContentsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/datastores": {
      "get": {
        "description": "Retrieves a list of data stores.",
        "operationId": "ListDatastores",
        "parameters": [
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "<p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListDatastoresResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a data store, which is a repository for messages.",
        "operationId": "CreateDatastore",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "datastoreName": {
                    "description": "The name of the data store.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "type": "string"
                  },
                  "datastoreStorage": {
                    "description": "Where data store data is stored.",
                    "properties": {
                      "customerManagedS3": { "$ref": "#/components/schemas/CustomerManagedDatastoreS3Storage" },
                      "serviceManagedS3": { "$ref": "#/components/schemas/ServiceManagedDatastoreS3Storage" }
                    },
                    "type": "object"
                  },
                  "retentionPeriod": {
                    "description": "How long, in days, message data is kept.",
                    "properties": {
                      "numberOfDays": { "$ref": "#/components/schemas/RetentionPeriodInDays" },
                      "unlimited": { "$ref": "#/components/schemas/UnlimitedRetentionPeriod" }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage the data store.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": ["datastoreName"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDatastoreResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/datastores/{datastoreName}": {
      "delete": {
        "description": "Deletes the specified data store.",
        "operationId": "DeleteDatastore",
        "parameters": [
          {
            "description": "The name of the data store to delete.",
            "in": "path",
            "name": "datastoreName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a data store.",
        "operationId": "DescribeDatastore",
        "parameters": [
          {
            "description": "The name of the data store",
            "in": "path",
            "name": "datastoreName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          },
          {
            "description": "If true, additional statistical information about the datastore is included in the response.",
            "in": "query",
            "name": "includeStatistics",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeDatastoreResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates the settings of a data store.",
        "operationId": "UpdateDatastore",
        "parameters": [
          {
            "description": "The name of the data store to be updated.",
            "in": "path",
            "name": "datastoreName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "datastoreStorage": {
                    "description": "Where data store data is stored.",
                    "properties": {
                      "customerManagedS3": { "$ref": "#/components/schemas/CustomerManagedDatastoreS3Storage" },
                      "serviceManagedS3": { "$ref": "#/components/schemas/ServiceManagedDatastoreS3Storage" }
                    },
                    "type": "object"
                  },
                  "retentionPeriod": {
                    "description": "How long, in days, message data is kept.",
                    "properties": {
                      "numberOfDays": { "$ref": "#/components/schemas/RetentionPeriodInDays" },
                      "unlimited": { "$ref": "#/components/schemas/UnlimitedRetentionPeriod" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/logging": {
      "get": {
        "description": "Retrieves the current settings of the AWS IoT Analytics logging options.",
        "operationId": "DescribeLoggingOptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLoggingOptionsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "<p>Sets or updates the AWS IoT Analytics logging options.</p> <p>Note that if you update the value of any <code>loggingOptions</code> field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the roleArn field (for example, to correct an invalid policy) it takes up to 5 minutes for that change to take effect. </p>",
        "operationId": "PutLoggingOptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "loggingOptions": {
                    "description": "Information about logging options.",
                    "properties": {
                      "enabled": { "$ref": "#/components/schemas/LoggingEnabled" },
                      "level": { "$ref": "#/components/schemas/LoggingLevel" },
                      "roleArn": { "$ref": "#/components/schemas/RoleArn" }
                    },
                    "type": "object"
                  }
                },
                "required": ["loggingOptions"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/messages/batch": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sends messages to a channel.",
        "operationId": "BatchPutMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "channelName": {
                    "description": "The name of the channel where the messages are sent.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "type": "string"
                  },
                  "messages": {
                    "description": "<p>The list of messages to be sent. Each message has format: '{ \"messageId\": \"string\", \"payload\": \"string\"}'.</p> <p>Note that the field names of message payloads (data) that you send to AWS IoT Analytics:</p> <ul> <li> <p>Must contain only alphanumeric characters and undescores (_); no other special characters are allowed.</p> </li> <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> <li> <p>Cannot contain hyphens (-).</p> </li> <li> <p>In regular expression terms: \"^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$\". </p> </li> <li> <p>Cannot be greater than 255 characters.</p> </li> <li> <p>Are case-insensitive. (Fields named \"foo\" and \"FOO\" in the same payload are considered duplicates.)</p> </li> </ul> <p>For example, {\"temp_01\": 29} or {\"_temp_01\": 29} are valid, but {\"temp-01\": 29}, {\"01_temp\": 29} or {\"__temp_01\": 29} are invalid in message payloads. </p>",
                    "items": { "$ref": "#/components/schemas/Message" },
                    "type": "array"
                  }
                },
                "required": ["channelName", "messages"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BatchPutMessageResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/pipelineactivities/run": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Simulates the results of running a pipeline activity on a message payload.",
        "operationId": "RunPipelineActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payloads": {
                    "description": "The sample message payloads on which the pipeline activity is run.",
                    "items": { "$ref": "#/components/schemas/MessagePayload" },
                    "maxItems": 10,
                    "minItems": 1,
                    "type": "array"
                  },
                  "pipelineActivity": {
                    "description": "An activity that performs a transformation on a message.",
                    "properties": {
                      "addAttributes": { "$ref": "#/components/schemas/AddAttributesActivity" },
                      "channel": { "$ref": "#/components/schemas/ChannelActivity" },
                      "datastore": { "$ref": "#/components/schemas/DatastoreActivity" },
                      "deviceRegistryEnrich": { "$ref": "#/components/schemas/DeviceRegistryEnrichActivity" },
                      "deviceShadowEnrich": { "$ref": "#/components/schemas/DeviceShadowEnrichActivity" },
                      "filter": { "$ref": "#/components/schemas/FilterActivity" },
                      "lambda": { "$ref": "#/components/schemas/LambdaActivity" },
                      "math": { "$ref": "#/components/schemas/MathActivity" },
                      "removeAttributes": { "$ref": "#/components/schemas/RemoveAttributesActivity" },
                      "selectAttributes": { "$ref": "#/components/schemas/SelectAttributesActivity" }
                    },
                    "type": "object"
                  }
                },
                "required": ["pipelineActivity", "payloads"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RunPipelineActivityResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/pipelines": {
      "get": {
        "description": "Retrieves a list of pipelines.",
        "operationId": "ListPipelines",
        "parameters": [
          {
            "description": "The token for the next set of results.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "<p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 250 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListPipelinesResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a pipeline. A pipeline consumes messages from one or more channels and allows you to process the messages before storing them in a data store. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.",
        "operationId": "CreatePipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pipelineActivities": {
                    "description": "<p>A list of \"PipelineActivity\" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <b>PipelineActivity</b> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity, for example:</p> <p> <code>pipelineActivities = [ { \"channel\": { ... } }, { \"lambda\": { ... } }, ... ]</code> </p>",
                    "items": { "$ref": "#/components/schemas/PipelineActivity" },
                    "maxItems": 25,
                    "minItems": 1,
                    "type": "array"
                  },
                  "pipelineName": {
                    "description": "The name of the pipeline.",
                    "maxLength": 128,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Metadata which can be used to manage the pipeline.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": ["pipelineName", "pipelineActivities"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreatePipelineResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/pipelines/{pipelineName}": {
      "delete": {
        "description": "Deletes the specified pipeline.",
        "operationId": "DeletePipeline",
        "parameters": [
          {
            "description": "The name of the pipeline to delete.",
            "in": "path",
            "name": "pipelineName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "204": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "get": {
        "description": "Retrieves information about a pipeline.",
        "operationId": "DescribePipeline",
        "parameters": [
          {
            "description": "The name of the pipeline whose information is retrieved.",
            "in": "path",
            "name": "pipelineName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribePipelineResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "put": {
        "description": "Updates the settings of a pipeline. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.",
        "operationId": "UpdatePipeline",
        "parameters": [
          {
            "description": "The name of the pipeline to update.",
            "in": "path",
            "name": "pipelineName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pipelineActivities": {
                    "description": "<p>A list of \"PipelineActivity\" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <b>PipelineActivity</b> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity, for example:</p> <p> <code>pipelineActivities = [ { \"channel\": { ... } }, { \"lambda\": { ... } }, ... ]</code> </p>",
                    "items": { "$ref": "#/components/schemas/PipelineActivity" },
                    "maxItems": 25,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": ["pipelineActivities"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          }
        }
      }
    },
    "/pipelines/{pipelineName}/reprocessing": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts the reprocessing of raw message data through the pipeline.",
        "operationId": "StartPipelineReprocessing",
        "parameters": [
          {
            "description": "The name of the pipeline on which to start reprocessing.",
            "in": "path",
            "name": "pipelineName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "endTime": {
                    "description": "The end time (exclusive) of raw message data that is reprocessed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "The start time (inclusive) of raw message data that is reprocessed.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartPipelineReprocessingResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceAlreadyExistsException" } }
            }
          },
          "482": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "483": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "485": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      }
    },
    "/pipelines/{pipelineName}/reprocessing/{reprocessingId}": {
      "delete": {
        "description": "Cancels the reprocessing of data through the pipeline.",
        "operationId": "CancelPipelineReprocessing",
        "parameters": [
          {
            "description": "The name of pipeline for which data reprocessing is canceled.",
            "in": "path",
            "name": "pipelineName",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "maxLength": 128, "pattern": "^[a-zA-Z0-9_]+$" }
          },
          {
            "description": "The ID of the reprocessing task (returned by \"StartPipelineReprocessing\").",
            "in": "path",
            "name": "reprocessingId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CancelPipelineReprocessingResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "482": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "483": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "484": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    },
    "/tags#resourceArn": {
      "get": {
        "description": "Lists the tags (metadata) which you have assigned to the resource.",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "description": "The ARN of the resource whose tags you want to list.",
            "in": "query",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string", "minLength": 20, "maxLength": 2048 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.",
        "operationId": "TagResource",
        "parameters": [
          {
            "description": "The ARN of the resource whose tags you want to modify.",
            "in": "query",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string", "minLength": 20, "maxLength": 2048 }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "description": "The new or modified tags for the resource.",
                    "items": { "$ref": "#/components/schemas/Tag" },
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": ["tags"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/tags#resourceArn&tagKeys": {
      "delete": {
        "description": "Removes the given tags (metadata) from the resource.",
        "operationId": "UntagResource",
        "parameters": [
          {
            "description": "The ARN of the resource whose tags you want to remove.",
            "in": "query",
            "name": "resourceArn",
            "required": true,
            "schema": { "type": "string", "minLength": 20, "maxLength": 2048 }
          },
          {
            "description": "The keys of those tags which you want to remove.",
            "in": "query",
            "name": "tagKeys",
            "required": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalFailureException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalFailureException" } } }
          },
          "482": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ServiceUnavailableException" } }
            }
          },
          "483": {
            "description": "ThrottlingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ThrottlingException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      },
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ]
    }
  },
  "servers": [
    {
      "description": "The AWS IoT Analytics multi-region endpoint",
      "url": "http://iotanalytics.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS IoT Analytics multi-region endpoint",
      "url": "https://iotanalytics.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The AWS IoT Analytics endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://iotanalytics.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The AWS IoT Analytics endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://iotanalytics.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "ActivityBatchSize": { "maximum": 1000, "minimum": 1, "type": "integer" },
      "ActivityName": { "maxLength": 128, "minLength": 1, "type": "string" },
      "AddAttributesActivity": {
        "description": "An activity that adds other attributes based on existing attributes in the message.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/AttributeNameMapping" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" }
        },
        "required": ["name", "attributes"],
        "type": "object"
      },
      "AttributeName": { "maxLength": 256, "minLength": 1, "type": "string" },
      "AttributeNameMapping": {
        "additionalProperties": { "$ref": "#/components/schemas/AttributeName" },
        "maxProperties": 50,
        "minProperties": 1,
        "type": "object"
      },
      "AttributeNames": {
        "items": { "$ref": "#/components/schemas/AttributeName" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "BatchPutMessageErrorEntries": {
        "items": { "$ref": "#/components/schemas/BatchPutMessageErrorEntry" },
        "type": "array"
      },
      "BatchPutMessageErrorEntry": {
        "description": "Contains informations about errors.",
        "properties": {
          "errorCode": { "$ref": "#/components/schemas/ErrorCode" },
          "errorMessage": { "$ref": "#/components/schemas/ErrorMessage" },
          "messageId": { "$ref": "#/components/schemas/MessageId" }
        },
        "type": "object"
      },
      "BatchPutMessageRequest": {
        "properties": {
          "channelName": { "$ref": "#/components/schemas/ChannelName" },
          "messages": { "$ref": "#/components/schemas/Messages" }
        },
        "required": ["channelName", "messages"],
        "type": "object"
      },
      "BatchPutMessageResponse": {
        "properties": { "batchPutMessageErrorEntries": { "$ref": "#/components/schemas/BatchPutMessageErrorEntries" } },
        "type": "object"
      },
      "BucketKeyExpression": {
        "maxLength": 255,
        "minLength": 1,
        "pattern": "^[a-zA-Z0-9!_.*'()/{}:-]*$",
        "type": "string"
      },
      "BucketName": { "maxLength": 255, "minLength": 3, "pattern": "^[a-zA-Z0-9.\\-_]*$", "type": "string" },
      "CancelPipelineReprocessingRequest": { "properties": {}, "type": "object" },
      "CancelPipelineReprocessingResponse": { "properties": {}, "type": "object" },
      "Channel": {
        "description": "A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.",
        "properties": {
          "arn": { "$ref": "#/components/schemas/ChannelArn" },
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "lastUpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "name": { "$ref": "#/components/schemas/ChannelName" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" },
          "status": { "$ref": "#/components/schemas/ChannelStatus" },
          "storage": { "$ref": "#/components/schemas/ChannelStorage" }
        },
        "type": "object"
      },
      "ChannelActivity": {
        "description": "The activity that determines the source of the messages to be processed.",
        "properties": {
          "channelName": { "$ref": "#/components/schemas/ChannelName" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" }
        },
        "required": ["name", "channelName"],
        "type": "object"
      },
      "ChannelArn": { "type": "string" },
      "ChannelName": { "maxLength": 128, "minLength": 1, "pattern": "^[a-zA-Z0-9_]+$", "type": "string" },
      "ChannelStatistics": {
        "description": "Statistics information about the channel.",
        "properties": { "size": { "$ref": "#/components/schemas/EstimatedResourceSize" } },
        "type": "object"
      },
      "ChannelStatus": { "enum": ["CREATING", "ACTIVE", "DELETING"], "type": "string" },
      "ChannelStorage": {
        "description": "Where channel data is stored.",
        "properties": {
          "customerManagedS3": { "$ref": "#/components/schemas/CustomerManagedChannelS3Storage" },
          "serviceManagedS3": { "$ref": "#/components/schemas/ServiceManagedChannelS3Storage" }
        },
        "type": "object"
      },
      "ChannelStorageSummary": {
        "description": "Where channel data is stored.",
        "properties": {
          "customerManagedS3": { "$ref": "#/components/schemas/CustomerManagedChannelS3StorageSummary" },
          "serviceManagedS3": { "$ref": "#/components/schemas/ServiceManagedChannelS3StorageSummary" }
        },
        "type": "object"
      },
      "ChannelSummaries": { "items": { "$ref": "#/components/schemas/ChannelSummary" }, "type": "array" },
      "ChannelSummary": {
        "description": "A summary of information about a channel.",
        "properties": {
          "channelName": { "$ref": "#/components/schemas/ChannelName" },
          "channelStorage": { "$ref": "#/components/schemas/ChannelStorageSummary" },
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "lastUpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "status": { "$ref": "#/components/schemas/ChannelStatus" }
        },
        "type": "object"
      },
      "ComputeType": { "enum": ["ACU_1", "ACU_2"], "type": "string" },
      "ContainerDatasetAction": {
        "description": "Information needed to run the \"containerAction\" to produce data set contents.",
        "properties": {
          "executionRoleArn": { "$ref": "#/components/schemas/RoleArn" },
          "image": { "$ref": "#/components/schemas/Image" },
          "resourceConfiguration": { "$ref": "#/components/schemas/ResourceConfiguration" },
          "variables": { "$ref": "#/components/schemas/Variables" }
        },
        "required": ["image", "executionRoleArn", "resourceConfiguration"],
        "type": "object"
      },
      "CreateChannelRequest": {
        "properties": {
          "channelName": { "$ref": "#/components/schemas/ChannelName" },
          "channelStorage": { "$ref": "#/components/schemas/ChannelStorage" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["channelName"],
        "type": "object"
      },
      "CreateChannelResponse": {
        "properties": {
          "channelArn": { "$ref": "#/components/schemas/ChannelArn" },
          "channelName": { "$ref": "#/components/schemas/ChannelName" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" }
        },
        "type": "object"
      },
      "CreateDatasetContentRequest": { "properties": {}, "type": "object" },
      "CreateDatasetContentResponse": {
        "properties": { "versionId": { "$ref": "#/components/schemas/DatasetContentVersion" } },
        "type": "object"
      },
      "CreateDatasetRequest": {
        "properties": {
          "actions": { "$ref": "#/components/schemas/DatasetActions" },
          "contentDeliveryRules": { "$ref": "#/components/schemas/DatasetContentDeliveryRules" },
          "datasetName": { "$ref": "#/components/schemas/DatasetName" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" },
          "tags": { "$ref": "#/components/schemas/TagList" },
          "triggers": { "$ref": "#/components/schemas/DatasetTriggers" },
          "versioningConfiguration": { "$ref": "#/components/schemas/VersioningConfiguration" }
        },
        "required": ["datasetName", "actions"],
        "type": "object"
      },
      "CreateDatasetResponse": {
        "properties": {
          "datasetArn": { "$ref": "#/components/schemas/DatasetArn" },
          "datasetName": { "$ref": "#/components/schemas/DatasetName" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" }
        },
        "type": "object"
      },
      "CreateDatastoreRequest": {
        "properties": {
          "datastoreName": { "$ref": "#/components/schemas/DatastoreName" },
          "datastoreStorage": { "$ref": "#/components/schemas/DatastoreStorage" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["datastoreName"],
        "type": "object"
      },
      "CreateDatastoreResponse": {
        "properties": {
          "datastoreArn": { "$ref": "#/components/schemas/DatastoreArn" },
          "datastoreName": { "$ref": "#/components/schemas/DatastoreName" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" }
        },
        "type": "object"
      },
      "CreatePipelineRequest": {
        "properties": {
          "pipelineActivities": { "$ref": "#/components/schemas/PipelineActivities" },
          "pipelineName": { "$ref": "#/components/schemas/PipelineName" },
          "tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["pipelineName", "pipelineActivities"],
        "type": "object"
      },
      "CreatePipelineResponse": {
        "properties": {
          "pipelineArn": { "$ref": "#/components/schemas/PipelineArn" },
          "pipelineName": { "$ref": "#/components/schemas/PipelineName" }
        },
        "type": "object"
      },
      "CustomerManagedChannelS3Storage": {
        "description": "Use this to store channel data in an S3 bucket that you manage.",
        "properties": {
          "bucket": { "$ref": "#/components/schemas/BucketName" },
          "keyPrefix": { "$ref": "#/components/schemas/S3KeyPrefix" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "required": ["bucket", "roleArn"],
        "type": "object"
      },
      "CustomerManagedChannelS3StorageSummary": {
        "description": "Used to store channel data in an S3 bucket that you manage.",
        "properties": {
          "bucket": { "$ref": "#/components/schemas/BucketName" },
          "keyPrefix": { "$ref": "#/components/schemas/S3KeyPrefix" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "CustomerManagedDatastoreS3Storage": {
        "description": "Use this to store data store data in an S3 bucket that you manage.",
        "properties": {
          "bucket": { "$ref": "#/components/schemas/BucketName" },
          "keyPrefix": { "$ref": "#/components/schemas/S3KeyPrefix" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "required": ["bucket", "roleArn"],
        "type": "object"
      },
      "CustomerManagedDatastoreS3StorageSummary": {
        "description": "Used to store data store data in an S3 bucket that you manage.",
        "properties": {
          "bucket": { "$ref": "#/components/schemas/BucketName" },
          "keyPrefix": { "$ref": "#/components/schemas/S3KeyPrefix" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "type": "object"
      },
      "Dataset": {
        "description": "Information about a data set.",
        "properties": {
          "actions": { "$ref": "#/components/schemas/DatasetActions" },
          "arn": { "$ref": "#/components/schemas/DatasetArn" },
          "contentDeliveryRules": { "$ref": "#/components/schemas/DatasetContentDeliveryRules" },
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "lastUpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "name": { "$ref": "#/components/schemas/DatasetName" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" },
          "status": { "$ref": "#/components/schemas/DatasetStatus" },
          "triggers": { "$ref": "#/components/schemas/DatasetTriggers" },
          "versioningConfiguration": { "$ref": "#/components/schemas/VersioningConfiguration" }
        },
        "type": "object"
      },
      "DatasetAction": {
        "description": "A \"DatasetAction\" object that specifies how data set contents are automatically created.",
        "properties": {
          "actionName": { "$ref": "#/components/schemas/DatasetActionName" },
          "containerAction": { "$ref": "#/components/schemas/ContainerDatasetAction" },
          "queryAction": { "$ref": "#/components/schemas/SqlQueryDatasetAction" }
        },
        "type": "object"
      },
      "DatasetActionName": { "maxLength": 128, "minLength": 1, "pattern": "^[a-zA-Z0-9_]+$", "type": "string" },
      "DatasetActionSummaries": {
        "items": { "$ref": "#/components/schemas/DatasetActionSummary" },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "DatasetActionSummary": {
        "description": "Information about the action which automatically creates the data set's contents.",
        "properties": {
          "actionName": { "$ref": "#/components/schemas/DatasetActionName" },
          "actionType": { "$ref": "#/components/schemas/DatasetActionType" }
        },
        "type": "object"
      },
      "DatasetActionType": { "enum": ["QUERY", "CONTAINER"], "type": "string" },
      "DatasetActions": {
        "items": { "$ref": "#/components/schemas/DatasetAction" },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "DatasetArn": { "type": "string" },
      "DatasetContentDeliveryDestination": {
        "description": "The destination to which data set contents are delivered.",
        "properties": {
          "iotEventsDestinationConfiguration": { "$ref": "#/components/schemas/IotEventsDestinationConfiguration" },
          "s3DestinationConfiguration": { "$ref": "#/components/schemas/S3DestinationConfiguration" }
        },
        "type": "object"
      },
      "DatasetContentDeliveryRule": {
        "description": "When data set contents are created they are delivered to destination specified here.",
        "properties": {
          "destination": { "$ref": "#/components/schemas/DatasetContentDeliveryDestination" },
          "entryName": { "$ref": "#/components/schemas/EntryName" }
        },
        "required": ["destination"],
        "type": "object"
      },
      "DatasetContentDeliveryRules": {
        "items": { "$ref": "#/components/schemas/DatasetContentDeliveryRule" },
        "maxItems": 20,
        "minItems": 0,
        "type": "array"
      },
      "DatasetContentState": { "enum": ["CREATING", "SUCCEEDED", "FAILED"], "type": "string" },
      "DatasetContentStatus": {
        "description": "The state of the data set contents and the reason they are in this state.",
        "properties": {
          "reason": { "$ref": "#/components/schemas/Reason" },
          "state": { "$ref": "#/components/schemas/DatasetContentState" }
        },
        "type": "object"
      },
      "DatasetContentSummaries": { "items": { "$ref": "#/components/schemas/DatasetContentSummary" }, "type": "array" },
      "DatasetContentSummary": {
        "description": "Summary information about data set contents.",
        "properties": {
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "scheduleTime": { "$ref": "#/components/schemas/Timestamp" },
          "status": { "$ref": "#/components/schemas/DatasetContentStatus" },
          "version": { "$ref": "#/components/schemas/DatasetContentVersion" }
        },
        "type": "object"
      },
      "DatasetContentVersion": { "maxLength": 36, "minLength": 7, "type": "string" },
      "DatasetContentVersionValue": {
        "description": "The data set whose latest contents are used as input to the notebook or application.",
        "properties": { "datasetName": { "$ref": "#/components/schemas/DatasetName" } },
        "required": ["datasetName"],
        "type": "object"
      },
      "DatasetEntries": { "items": { "$ref": "#/components/schemas/DatasetEntry" }, "type": "array" },
      "DatasetEntry": {
        "description": "The reference to a data set entry.",
        "properties": {
          "dataURI": { "$ref": "#/components/schemas/PresignedURI" },
          "entryName": { "$ref": "#/components/schemas/EntryName" }
        },
        "type": "object"
      },
      "DatasetName": { "maxLength": 128, "minLength": 1, "pattern": "^[a-zA-Z0-9_]+$", "type": "string" },
      "DatasetStatus": { "enum": ["CREATING", "ACTIVE", "DELETING"], "type": "string" },
      "DatasetSummaries": { "items": { "$ref": "#/components/schemas/DatasetSummary" }, "type": "array" },
      "DatasetSummary": {
        "description": "A summary of information about a data set.",
        "properties": {
          "actions": { "$ref": "#/components/schemas/DatasetActionSummaries" },
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "datasetName": { "$ref": "#/components/schemas/DatasetName" },
          "lastUpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "status": { "$ref": "#/components/schemas/DatasetStatus" },
          "triggers": { "$ref": "#/components/schemas/DatasetTriggers" }
        },
        "type": "object"
      },
      "DatasetTrigger": {
        "description": "The \"DatasetTrigger\" that specifies when the data set is automatically updated.",
        "properties": {
          "dataset": { "$ref": "#/components/schemas/TriggeringDataset" },
          "schedule": { "$ref": "#/components/schemas/Schedule" }
        },
        "type": "object"
      },
      "DatasetTriggers": {
        "items": { "$ref": "#/components/schemas/DatasetTrigger" },
        "maxItems": 5,
        "minItems": 0,
        "type": "array"
      },
      "Datastore": {
        "description": "Information about a data store.",
        "properties": {
          "arn": { "$ref": "#/components/schemas/DatastoreArn" },
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "lastUpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "name": { "$ref": "#/components/schemas/DatastoreName" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" },
          "status": { "$ref": "#/components/schemas/DatastoreStatus" },
          "storage": { "$ref": "#/components/schemas/DatastoreStorage" }
        },
        "type": "object"
      },
      "DatastoreActivity": {
        "description": "The 'datastore' activity that specifies where to store the processed data.",
        "properties": {
          "datastoreName": { "$ref": "#/components/schemas/DatastoreName" },
          "name": { "$ref": "#/components/schemas/ActivityName" }
        },
        "required": ["name", "datastoreName"],
        "type": "object"
      },
      "DatastoreArn": { "type": "string" },
      "DatastoreName": { "maxLength": 128, "minLength": 1, "pattern": "^[a-zA-Z0-9_]+$", "type": "string" },
      "DatastoreStatistics": {
        "description": "Statistical information about the data store.",
        "properties": { "size": { "$ref": "#/components/schemas/EstimatedResourceSize" } },
        "type": "object"
      },
      "DatastoreStatus": { "enum": ["CREATING", "ACTIVE", "DELETING"], "type": "string" },
      "DatastoreStorage": {
        "description": "Where data store data is stored.",
        "properties": {
          "customerManagedS3": { "$ref": "#/components/schemas/CustomerManagedDatastoreS3Storage" },
          "serviceManagedS3": { "$ref": "#/components/schemas/ServiceManagedDatastoreS3Storage" }
        },
        "type": "object"
      },
      "DatastoreStorageSummary": {
        "description": "Where data store data is stored.",
        "properties": {
          "customerManagedS3": { "$ref": "#/components/schemas/CustomerManagedDatastoreS3StorageSummary" },
          "serviceManagedS3": { "$ref": "#/components/schemas/ServiceManagedDatastoreS3StorageSummary" }
        },
        "type": "object"
      },
      "DatastoreSummaries": { "items": { "$ref": "#/components/schemas/DatastoreSummary" }, "type": "array" },
      "DatastoreSummary": {
        "description": "A summary of information about a data store.",
        "properties": {
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "datastoreName": { "$ref": "#/components/schemas/DatastoreName" },
          "datastoreStorage": { "$ref": "#/components/schemas/DatastoreStorageSummary" },
          "lastUpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "status": { "$ref": "#/components/schemas/DatastoreStatus" }
        },
        "type": "object"
      },
      "DeleteChannelRequest": { "properties": {}, "type": "object" },
      "DeleteDatasetContentRequest": { "properties": {}, "type": "object" },
      "DeleteDatasetRequest": { "properties": {}, "type": "object" },
      "DeleteDatastoreRequest": { "properties": {}, "type": "object" },
      "DeletePipelineRequest": { "properties": {}, "type": "object" },
      "DeltaTime": {
        "description": "Used to limit data to that which has arrived since the last execution of the action.",
        "properties": {
          "offsetSeconds": { "$ref": "#/components/schemas/OffsetSeconds" },
          "timeExpression": { "$ref": "#/components/schemas/TimeExpression" }
        },
        "required": ["offsetSeconds", "timeExpression"],
        "type": "object"
      },
      "DescribeChannelRequest": { "properties": {}, "type": "object" },
      "DescribeChannelResponse": {
        "properties": {
          "channel": { "$ref": "#/components/schemas/Channel" },
          "statistics": { "$ref": "#/components/schemas/ChannelStatistics" }
        },
        "type": "object"
      },
      "DescribeDatasetRequest": { "properties": {}, "type": "object" },
      "DescribeDatasetResponse": {
        "properties": { "dataset": { "$ref": "#/components/schemas/Dataset" } },
        "type": "object"
      },
      "DescribeDatastoreRequest": { "properties": {}, "type": "object" },
      "DescribeDatastoreResponse": {
        "properties": {
          "datastore": { "$ref": "#/components/schemas/Datastore" },
          "statistics": { "$ref": "#/components/schemas/DatastoreStatistics" }
        },
        "type": "object"
      },
      "DescribeLoggingOptionsRequest": { "properties": {}, "type": "object" },
      "DescribeLoggingOptionsResponse": {
        "properties": { "loggingOptions": { "$ref": "#/components/schemas/LoggingOptions" } },
        "type": "object"
      },
      "DescribePipelineRequest": { "properties": {}, "type": "object" },
      "DescribePipelineResponse": {
        "properties": { "pipeline": { "$ref": "#/components/schemas/Pipeline" } },
        "type": "object"
      },
      "DeviceRegistryEnrichActivity": {
        "description": "An activity that adds data from the AWS IoT device registry to your message.",
        "properties": {
          "attribute": { "$ref": "#/components/schemas/AttributeName" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "thingName": { "$ref": "#/components/schemas/AttributeName" }
        },
        "required": ["name", "attribute", "thingName", "roleArn"],
        "type": "object"
      },
      "DeviceShadowEnrichActivity": {
        "description": "An activity that adds information from the AWS IoT Device Shadows service to a message.",
        "properties": {
          "attribute": { "$ref": "#/components/schemas/AttributeName" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" },
          "thingName": { "$ref": "#/components/schemas/AttributeName" }
        },
        "required": ["name", "attribute", "thingName", "roleArn"],
        "type": "object"
      },
      "DoubleValue": { "format": "double", "type": "number" },
      "EndTime": { "format": "date-time", "type": "string" },
      "EntryName": { "type": "string" },
      "ErrorCode": { "type": "string" },
      "ErrorMessage": { "type": "string" },
      "EstimatedResourceSize": {
        "description": "The estimated size of the resource.",
        "properties": {
          "estimatedOn": { "$ref": "#/components/schemas/Timestamp" },
          "estimatedSizeInBytes": { "$ref": "#/components/schemas/SizeInBytes" }
        },
        "type": "object"
      },
      "FilterActivity": {
        "description": "An activity that filters a message based on its attributes.",
        "properties": {
          "filter": { "$ref": "#/components/schemas/FilterExpression" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" }
        },
        "required": ["name", "filter"],
        "type": "object"
      },
      "FilterExpression": { "maxLength": 256, "minLength": 1, "type": "string" },
      "GetDatasetContentRequest": { "properties": {}, "type": "object" },
      "GetDatasetContentResponse": {
        "properties": {
          "entries": { "$ref": "#/components/schemas/DatasetEntries" },
          "status": { "$ref": "#/components/schemas/DatasetContentStatus" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" }
        },
        "type": "object"
      },
      "GlueConfiguration": {
        "description": "Configuration information for coordination with the AWS Glue ETL (extract, transform and load) service.",
        "properties": {
          "databaseName": { "$ref": "#/components/schemas/GlueDatabaseName" },
          "tableName": { "$ref": "#/components/schemas/GlueTableName" }
        },
        "required": ["tableName", "databaseName"],
        "type": "object"
      },
      "GlueDatabaseName": {
        "maxLength": 150,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "GlueTableName": {
        "maxLength": 150,
        "minLength": 1,
        "type": "string",
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "Image": { "maxLength": 255, "type": "string" },
      "IncludeStatisticsFlag": { "type": "boolean" },
      "InternalFailureException": {},
      "InvalidRequestException": {},
      "IotEventsDestinationConfiguration": {
        "description": "Configuration information for delivery of data set contents to AWS IoT Events.",
        "properties": {
          "inputName": { "$ref": "#/components/schemas/IotEventsInputName" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "required": ["inputName", "roleArn"],
        "type": "object"
      },
      "IotEventsInputName": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
        "type": "string"
      },
      "LambdaActivity": {
        "description": "An activity that runs a Lambda function to modify the message.",
        "properties": {
          "batchSize": { "$ref": "#/components/schemas/ActivityBatchSize" },
          "lambdaName": { "$ref": "#/components/schemas/LambdaName" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" }
        },
        "required": ["name", "lambdaName", "batchSize"],
        "type": "object"
      },
      "LambdaName": { "maxLength": 64, "minLength": 1, "pattern": "^[a-zA-Z0-9_-]+$", "type": "string" },
      "LimitExceededException": {},
      "ListChannelsRequest": { "properties": {}, "type": "object" },
      "ListChannelsResponse": {
        "properties": {
          "channelSummaries": { "$ref": "#/components/schemas/ChannelSummaries" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListDatasetContentsRequest": { "properties": {}, "type": "object" },
      "ListDatasetContentsResponse": {
        "properties": {
          "datasetContentSummaries": { "$ref": "#/components/schemas/DatasetContentSummaries" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListDatasetsRequest": { "properties": {}, "type": "object" },
      "ListDatasetsResponse": {
        "properties": {
          "datasetSummaries": { "$ref": "#/components/schemas/DatasetSummaries" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListDatastoresRequest": { "properties": {}, "type": "object" },
      "ListDatastoresResponse": {
        "properties": {
          "datastoreSummaries": { "$ref": "#/components/schemas/DatastoreSummaries" },
          "nextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListPipelinesRequest": { "properties": {}, "type": "object" },
      "ListPipelinesResponse": {
        "properties": {
          "nextToken": { "$ref": "#/components/schemas/NextToken" },
          "pipelineSummaries": { "$ref": "#/components/schemas/PipelineSummaries" }
        },
        "type": "object"
      },
      "ListTagsForResourceRequest": { "properties": {}, "type": "object" },
      "ListTagsForResourceResponse": {
        "properties": { "tags": { "$ref": "#/components/schemas/TagList" } },
        "type": "object"
      },
      "LogResult": { "type": "string" },
      "LoggingEnabled": { "type": "boolean" },
      "LoggingLevel": { "enum": ["ERROR"], "type": "string" },
      "LoggingOptions": {
        "description": "Information about logging options.",
        "properties": {
          "enabled": { "$ref": "#/components/schemas/LoggingEnabled" },
          "level": { "$ref": "#/components/schemas/LoggingLevel" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "required": ["roleArn", "level", "enabled"],
        "type": "object"
      },
      "MathActivity": {
        "description": "An activity that computes an arithmetic expression using the message's attributes.",
        "properties": {
          "attribute": { "$ref": "#/components/schemas/AttributeName" },
          "math": { "$ref": "#/components/schemas/MathExpression" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" }
        },
        "required": ["name", "attribute", "math"],
        "type": "object"
      },
      "MathExpression": { "maxLength": 256, "minLength": 1, "type": "string" },
      "MaxMessages": { "maximum": 10, "minimum": 1, "type": "integer" },
      "MaxResults": { "maximum": 250, "minimum": 1, "type": "integer" },
      "MaxVersions": { "maximum": 1000, "minimum": 1, "type": "integer" },
      "Message": {
        "description": "Information about a message.",
        "properties": {
          "messageId": { "$ref": "#/components/schemas/MessageId" },
          "payload": { "$ref": "#/components/schemas/MessagePayload" }
        },
        "required": ["messageId", "payload"],
        "type": "object"
      },
      "MessageId": { "maxLength": 128, "minLength": 1, "type": "string" },
      "MessagePayload": { "type": "string" },
      "MessagePayloads": {
        "items": { "$ref": "#/components/schemas/MessagePayload" },
        "maxItems": 10,
        "minItems": 1,
        "type": "array"
      },
      "Messages": { "items": { "$ref": "#/components/schemas/Message" }, "type": "array" },
      "NextToken": { "type": "string" },
      "OffsetSeconds": { "type": "integer" },
      "OutputFileName": { "pattern": "[\\w\\.-]{1,255}", "type": "string" },
      "OutputFileUriValue": {
        "description": "The value of the variable as a structure that specifies an output file URI.",
        "properties": { "fileName": { "$ref": "#/components/schemas/OutputFileName" } },
        "required": ["fileName"],
        "type": "object"
      },
      "Pipeline": {
        "description": "Contains information about a pipeline.",
        "properties": {
          "activities": { "$ref": "#/components/schemas/PipelineActivities" },
          "arn": { "$ref": "#/components/schemas/PipelineArn" },
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "lastUpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "name": { "$ref": "#/components/schemas/PipelineName" },
          "reprocessingSummaries": { "$ref": "#/components/schemas/ReprocessingSummaries" }
        },
        "type": "object"
      },
      "PipelineActivities": {
        "items": { "$ref": "#/components/schemas/PipelineActivity" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "PipelineActivity": {
        "description": "An activity that performs a transformation on a message.",
        "properties": {
          "addAttributes": { "$ref": "#/components/schemas/AddAttributesActivity" },
          "channel": { "$ref": "#/components/schemas/ChannelActivity" },
          "datastore": { "$ref": "#/components/schemas/DatastoreActivity" },
          "deviceRegistryEnrich": { "$ref": "#/components/schemas/DeviceRegistryEnrichActivity" },
          "deviceShadowEnrich": { "$ref": "#/components/schemas/DeviceShadowEnrichActivity" },
          "filter": { "$ref": "#/components/schemas/FilterActivity" },
          "lambda": { "$ref": "#/components/schemas/LambdaActivity" },
          "math": { "$ref": "#/components/schemas/MathActivity" },
          "removeAttributes": { "$ref": "#/components/schemas/RemoveAttributesActivity" },
          "selectAttributes": { "$ref": "#/components/schemas/SelectAttributesActivity" }
        },
        "type": "object"
      },
      "PipelineArn": { "type": "string" },
      "PipelineName": { "maxLength": 128, "minLength": 1, "pattern": "^[a-zA-Z0-9_]+$", "type": "string" },
      "PipelineSummaries": { "items": { "$ref": "#/components/schemas/PipelineSummary" }, "type": "array" },
      "PipelineSummary": {
        "description": "A summary of information about a pipeline.",
        "properties": {
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "lastUpdateTime": { "$ref": "#/components/schemas/Timestamp" },
          "pipelineName": { "$ref": "#/components/schemas/PipelineName" },
          "reprocessingSummaries": { "$ref": "#/components/schemas/ReprocessingSummaries" }
        },
        "type": "object"
      },
      "PresignedURI": { "type": "string" },
      "PutLoggingOptionsRequest": {
        "properties": { "loggingOptions": { "$ref": "#/components/schemas/LoggingOptions" } },
        "required": ["loggingOptions"],
        "type": "object"
      },
      "QueryFilter": {
        "description": "Information which is used to filter message data, to segregate it according to the time frame in which it arrives.",
        "properties": { "deltaTime": { "$ref": "#/components/schemas/DeltaTime" } },
        "type": "object"
      },
      "QueryFilters": {
        "items": { "$ref": "#/components/schemas/QueryFilter" },
        "maxItems": 1,
        "minItems": 0,
        "type": "array"
      },
      "Reason": { "type": "string" },
      "RemoveAttributesActivity": {
        "description": "An activity that removes attributes from a message.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/AttributeNames" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" }
        },
        "required": ["name", "attributes"],
        "type": "object"
      },
      "ReprocessingId": { "type": "string" },
      "ReprocessingStatus": { "enum": ["RUNNING", "SUCCEEDED", "CANCELLED", "FAILED"], "type": "string" },
      "ReprocessingSummaries": { "items": { "$ref": "#/components/schemas/ReprocessingSummary" }, "type": "array" },
      "ReprocessingSummary": {
        "description": "Information about pipeline reprocessing.",
        "properties": {
          "creationTime": { "$ref": "#/components/schemas/Timestamp" },
          "id": { "$ref": "#/components/schemas/ReprocessingId" },
          "status": { "$ref": "#/components/schemas/ReprocessingStatus" }
        },
        "type": "object"
      },
      "ResourceAlreadyExistsException": {},
      "ResourceArn": { "maxLength": 2048, "minLength": 20, "type": "string" },
      "ResourceConfiguration": {
        "description": "The configuration of the resource used to execute the \"containerAction\".",
        "properties": {
          "computeType": { "$ref": "#/components/schemas/ComputeType" },
          "volumeSizeInGB": { "$ref": "#/components/schemas/VolumeSizeInGB" }
        },
        "required": ["computeType", "volumeSizeInGB"],
        "type": "object"
      },
      "ResourceNotFoundException": {},
      "RetentionPeriod": {
        "description": "How long, in days, message data is kept.",
        "properties": {
          "numberOfDays": { "$ref": "#/components/schemas/RetentionPeriodInDays" },
          "unlimited": { "$ref": "#/components/schemas/UnlimitedRetentionPeriod" }
        },
        "type": "object"
      },
      "RetentionPeriodInDays": { "minimum": 1, "type": "integer" },
      "RoleArn": { "maxLength": 2048, "minLength": 20, "type": "string" },
      "RunPipelineActivityRequest": {
        "properties": {
          "payloads": { "$ref": "#/components/schemas/MessagePayloads" },
          "pipelineActivity": { "$ref": "#/components/schemas/PipelineActivity" }
        },
        "required": ["pipelineActivity", "payloads"],
        "type": "object"
      },
      "RunPipelineActivityResponse": {
        "properties": {
          "logResult": { "$ref": "#/components/schemas/LogResult" },
          "payloads": { "$ref": "#/components/schemas/MessagePayloads" }
        },
        "type": "object"
      },
      "S3DestinationConfiguration": {
        "description": "Configuration information for delivery of data set contents to Amazon S3.",
        "properties": {
          "bucket": { "$ref": "#/components/schemas/BucketName" },
          "glueConfiguration": { "$ref": "#/components/schemas/GlueConfiguration" },
          "key": { "$ref": "#/components/schemas/BucketKeyExpression" },
          "roleArn": { "$ref": "#/components/schemas/RoleArn" }
        },
        "required": ["bucket", "key", "roleArn"],
        "type": "object"
      },
      "S3KeyPrefix": { "maxLength": 255, "minLength": 1, "pattern": "^[a-zA-Z0-9!_.*'()/{}:-]*/$", "type": "string" },
      "SampleChannelDataRequest": { "properties": {}, "type": "object" },
      "SampleChannelDataResponse": {
        "properties": { "payloads": { "$ref": "#/components/schemas/MessagePayloads" } },
        "type": "object"
      },
      "Schedule": {
        "description": "The schedule for when to trigger an update.",
        "properties": { "expression": { "$ref": "#/components/schemas/ScheduleExpression" } },
        "type": "object"
      },
      "ScheduleExpression": { "type": "string" },
      "SelectAttributesActivity": {
        "description": "Creates a new message using only the specified attributes from the original message.",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/AttributeNames" },
          "name": { "$ref": "#/components/schemas/ActivityName" },
          "next": { "$ref": "#/components/schemas/ActivityName" }
        },
        "required": ["name", "attributes"],
        "type": "object"
      },
      "ServiceManagedChannelS3Storage": {
        "description": "Use this to store channel data in an S3 bucket managed by the AWS IoT Analytics service.",
        "properties": {},
        "type": "object"
      },
      "ServiceManagedChannelS3StorageSummary": {
        "description": "Used to store channel data in an S3 bucket managed by the AWS IoT Analytics service.",
        "properties": {},
        "type": "object"
      },
      "ServiceManagedDatastoreS3Storage": {
        "description": "Use this to store data store data in an S3 bucket managed by the AWS IoT Analytics service.",
        "properties": {},
        "type": "object"
      },
      "ServiceManagedDatastoreS3StorageSummary": {
        "description": "Used to store data store data in an S3 bucket managed by the AWS IoT Analytics service.",
        "properties": {},
        "type": "object"
      },
      "ServiceUnavailableException": {},
      "SizeInBytes": { "format": "double", "type": "number" },
      "SqlQuery": { "type": "string" },
      "SqlQueryDatasetAction": {
        "description": "The SQL query to modify the message.",
        "properties": {
          "filters": { "$ref": "#/components/schemas/QueryFilters" },
          "sqlQuery": { "$ref": "#/components/schemas/SqlQuery" }
        },
        "required": ["sqlQuery"],
        "type": "object"
      },
      "StartPipelineReprocessingRequest": {
        "properties": {
          "endTime": { "$ref": "#/components/schemas/EndTime" },
          "startTime": { "$ref": "#/components/schemas/StartTime" }
        },
        "type": "object"
      },
      "StartPipelineReprocessingResponse": {
        "properties": { "reprocessingId": { "$ref": "#/components/schemas/ReprocessingId" } },
        "type": "object"
      },
      "StartTime": { "format": "date-time", "type": "string" },
      "StringValue": { "maxLength": 1024, "minLength": 0, "type": "string" },
      "Tag": {
        "description": "A set of key/value pairs which are used to manage the resource.",
        "properties": {
          "key": { "$ref": "#/components/schemas/TagKey" },
          "value": { "$ref": "#/components/schemas/TagValue" }
        },
        "required": ["key", "value"],
        "type": "object"
      },
      "TagKey": { "maxLength": 256, "minLength": 1, "type": "string" },
      "TagKeyList": {
        "items": { "$ref": "#/components/schemas/TagKey" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "TagList": { "items": { "$ref": "#/components/schemas/Tag" }, "maxItems": 50, "minItems": 1, "type": "array" },
      "TagResourceRequest": {
        "properties": { "tags": { "$ref": "#/components/schemas/TagList" } },
        "required": ["tags"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValue": { "maxLength": 256, "minLength": 1, "type": "string" },
      "ThrottlingException": {},
      "TimeExpression": { "type": "string" },
      "Timestamp": { "format": "date-time", "type": "string" },
      "TriggeringDataset": {
        "description": "Information about the data set whose content generation triggers the new data set content generation.",
        "properties": { "name": { "$ref": "#/components/schemas/DatasetName" } },
        "required": ["name"],
        "type": "object"
      },
      "UnlimitedRetentionPeriod": { "type": "boolean" },
      "UnlimitedVersioning": { "type": "boolean" },
      "UntagResourceRequest": { "properties": {}, "type": "object" },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UpdateChannelRequest": {
        "properties": {
          "channelStorage": { "$ref": "#/components/schemas/ChannelStorage" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" }
        },
        "type": "object"
      },
      "UpdateDatasetRequest": {
        "properties": {
          "actions": { "$ref": "#/components/schemas/DatasetActions" },
          "contentDeliveryRules": { "$ref": "#/components/schemas/DatasetContentDeliveryRules" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" },
          "triggers": { "$ref": "#/components/schemas/DatasetTriggers" },
          "versioningConfiguration": { "$ref": "#/components/schemas/VersioningConfiguration" }
        },
        "required": ["actions"],
        "type": "object"
      },
      "UpdateDatastoreRequest": {
        "properties": {
          "datastoreStorage": { "$ref": "#/components/schemas/DatastoreStorage" },
          "retentionPeriod": { "$ref": "#/components/schemas/RetentionPeriod" }
        },
        "type": "object"
      },
      "UpdatePipelineRequest": {
        "properties": { "pipelineActivities": { "$ref": "#/components/schemas/PipelineActivities" } },
        "required": ["pipelineActivities"],
        "type": "object"
      },
      "Variable": {
        "description": "An instance of a variable to be passed to the \"containerAction\" execution. Each variable must have a name and a value given by one of \"stringValue\", \"datasetContentVersionValue\", or \"outputFileUriValue\".",
        "properties": {
          "datasetContentVersionValue": { "$ref": "#/components/schemas/DatasetContentVersionValue" },
          "doubleValue": { "$ref": "#/components/schemas/DoubleValue" },
          "name": { "$ref": "#/components/schemas/VariableName" },
          "outputFileUriValue": { "$ref": "#/components/schemas/OutputFileUriValue" },
          "stringValue": { "$ref": "#/components/schemas/StringValue" }
        },
        "required": ["name"],
        "type": "object"
      },
      "VariableName": { "maxLength": 256, "minLength": 1, "type": "string" },
      "Variables": {
        "items": { "$ref": "#/components/schemas/Variable" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      },
      "VersioningConfiguration": {
        "description": "Information about the versioning of data set contents.",
        "properties": {
          "maxVersions": { "$ref": "#/components/schemas/MaxVersions" },
          "unlimited": { "$ref": "#/components/schemas/UnlimitedVersioning" }
        },
        "type": "object"
      },
      "VolumeSizeInGB": { "maximum": 50, "minimum": 1, "type": "integer" }
    }
  }
}
