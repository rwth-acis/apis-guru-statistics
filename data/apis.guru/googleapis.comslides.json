{
  "openapi": "3.0.0",
  "info": {
    "contact": { "name": "Google", "url": "https://google.com" },
    "description": "Reads and writes Google Slides presentations.",
    "license": { "name": "Creative Commons Attribution 3.0", "url": "http://creativecommons.org/licenses/by/3.0/" },
    "termsOfService": "https://developers.google.com/terms/",
    "title": "Google Slides",
    "version": "v1",
    "x-apiClientRegistration": { "url": "https://console.developers.google.com" },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
    },
    "x-origin": [
      {
        "converter": { "url": "https://github.com/lucybot/api-spec-converter", "version": "2.7.31" },
        "format": "google",
        "url": "https://slides.googleapis.com/$discovery/rest?version=v1",
        "version": "v1"
      }
    ],
    "x-preferred": true,
    "x-providerName": "googleapis.com",
    "x-serviceName": "slides"
  },
  "externalDocs": { "url": "https://developers.google.com/slides/" },
  "tags": [{ "name": "presentations" }],
  "paths": {
    "/v1/presentations": {
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ],
      "post": {
        "description": "Creates a blank presentation using the title given in the request. If a\n`presentationId` is provided, it is used as the ID of the new presentation.\nOtherwise, a new ID is generated. Other fields in the request, including\nany provided content, are ignored.\nReturns the created presentation.",
        "operationId": "slides.presentations.create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Presentation" } } }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/Presentation" } } }
          }
        },
        "security": [
          { "Oauth2": ["https://www.googleapis.com/auth/drive"], "Oauth2c": ["https://www.googleapis.com/auth/drive"] },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.file"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.file"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/presentations"],
            "Oauth2c": ["https://www.googleapis.com/auth/presentations"]
          }
        ],
        "tags": ["presentations"]
      }
    },
    "/v1/presentations/{presentationId}": {
      "get": {
        "description": "Gets the latest version of the specified presentation.",
        "operationId": "slides.presentations.get",
        "parameters": [
          {
            "description": "The ID of the presentation to retrieve.",
            "in": "path",
            "name": "presentationId",
            "required": true,
            "x-reservedExpansion": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/Presentation" } } }
          }
        },
        "security": [
          { "Oauth2": ["https://www.googleapis.com/auth/drive"], "Oauth2c": ["https://www.googleapis.com/auth/drive"] },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.file"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.file"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.readonly"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.readonly"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/presentations"],
            "Oauth2c": ["https://www.googleapis.com/auth/presentations"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/presentations.readonly"],
            "Oauth2c": ["https://www.googleapis.com/auth/presentations.readonly"]
          }
        ],
        "tags": ["presentations"]
      },
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ]
    },
    "/v1/presentations/{presentationId}/pages/{pageObjectId}": {
      "get": {
        "description": "Gets the latest version of the specified page in the presentation.",
        "operationId": "slides.presentations.pages.get",
        "parameters": [
          {
            "description": "The object ID of the page to retrieve.",
            "in": "path",
            "name": "pageObjectId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the presentation to retrieve.",
            "in": "path",
            "name": "presentationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/Page" } } }
          }
        },
        "security": [
          { "Oauth2": ["https://www.googleapis.com/auth/drive"], "Oauth2c": ["https://www.googleapis.com/auth/drive"] },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.file"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.file"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.readonly"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.readonly"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/presentations"],
            "Oauth2c": ["https://www.googleapis.com/auth/presentations"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/presentations.readonly"],
            "Oauth2c": ["https://www.googleapis.com/auth/presentations.readonly"]
          }
        ],
        "tags": ["presentations"]
      },
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ]
    },
    "/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail": {
      "get": {
        "description": "Generates a thumbnail of the latest version of the specified page in the\npresentation and returns a URL to the thumbnail image.\n\nThis request counts as an [expensive read request](/slides/limits) for\nquota purposes.",
        "operationId": "slides.presentations.pages.getThumbnail",
        "parameters": [
          {
            "description": "The object ID of the page whose thumbnail to retrieve.",
            "in": "path",
            "name": "pageObjectId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the presentation to retrieve.",
            "in": "path",
            "name": "presentationId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The optional mime type of the thumbnail image.\n\nIf you don't specify the mime type, the default mime type will be PNG.",
            "in": "query",
            "name": "thumbnailProperties.mimeType",
            "schema": { "type": "string", "enum": ["PNG"] }
          },
          {
            "description": "The optional thumbnail image size.\n\nIf you don't specify the size, the server chooses a default size of the\nimage.",
            "in": "query",
            "name": "thumbnailProperties.thumbnailSize",
            "schema": { "type": "string", "enum": ["THUMBNAIL_SIZE_UNSPECIFIED", "LARGE", "MEDIUM", "SMALL"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/Thumbnail" } } }
          }
        },
        "security": [
          { "Oauth2": ["https://www.googleapis.com/auth/drive"], "Oauth2c": ["https://www.googleapis.com/auth/drive"] },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.file"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.file"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.readonly"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.readonly"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/presentations"],
            "Oauth2c": ["https://www.googleapis.com/auth/presentations"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/presentations.readonly"],
            "Oauth2c": ["https://www.googleapis.com/auth/presentations.readonly"]
          }
        ],
        "tags": ["presentations"]
      },
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ]
    },
    "/v1/presentations/{presentationId}:batchUpdate": {
      "parameters": [
        { "$ref": "#/components/parameters/_.xgafv" },
        { "$ref": "#/components/parameters/access_token" },
        { "$ref": "#/components/parameters/alt" },
        { "$ref": "#/components/parameters/callback" },
        { "$ref": "#/components/parameters/fields" },
        { "$ref": "#/components/parameters/key" },
        { "$ref": "#/components/parameters/oauth_token" },
        { "$ref": "#/components/parameters/prettyPrint" },
        { "$ref": "#/components/parameters/quotaUser" },
        { "$ref": "#/components/parameters/uploadType" },
        { "$ref": "#/components/parameters/upload_protocol" }
      ],
      "post": {
        "description": "Applies one or more updates to the presentation.\n\nEach request is validated before\nbeing applied. If any request is not valid, then the entire request will\nfail and nothing will be applied.\n\nSome requests have replies to\ngive you some information about how they are applied. Other requests do\nnot need to return information; these each return an empty reply.\nThe order of replies matches that of the requests.\n\nFor example, suppose you call batchUpdate with four updates, and only the\nthird one returns information. The response would have two empty replies:\nthe reply to the third request, and another empty reply, in that order.\n\nBecause other users may be editing the presentation, the presentation\nmight not exactly reflect your changes: your changes may\nbe altered with respect to collaborator changes. If there are no\ncollaborators, the presentation should reflect your changes. In any case,\nthe updates in your request are guaranteed to be applied together\natomically.",
        "operationId": "slides.presentations.batchUpdate",
        "parameters": [
          {
            "description": "The presentation to apply the updates to.",
            "in": "path",
            "name": "presentationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BatchUpdatePresentationRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/BatchUpdatePresentationResponse" } } }
          }
        },
        "security": [
          { "Oauth2": ["https://www.googleapis.com/auth/drive"], "Oauth2c": ["https://www.googleapis.com/auth/drive"] },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.file"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.file"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/drive.readonly"],
            "Oauth2c": ["https://www.googleapis.com/auth/drive.readonly"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/presentations"],
            "Oauth2c": ["https://www.googleapis.com/auth/presentations"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/spreadsheets"],
            "Oauth2c": ["https://www.googleapis.com/auth/spreadsheets"]
          },
          {
            "Oauth2": ["https://www.googleapis.com/auth/spreadsheets.readonly"],
            "Oauth2c": ["https://www.googleapis.com/auth/spreadsheets.readonly"]
          }
        ],
        "tags": ["presentations"]
      }
    }
  },
  "servers": [{ "url": "https://slides.googleapis.com/" }],
  "components": {
    "parameters": {
      "access_token": {
        "description": "OAuth access token.",
        "in": "query",
        "name": "access_token",
        "schema": { "type": "string" }
      },
      "alt": {
        "description": "Data format for response.",
        "in": "query",
        "name": "alt",
        "schema": { "type": "string", "enum": ["json", "media", "proto"], "default": "json" }
      },
      "callback": { "description": "JSONP", "in": "query", "name": "callback", "schema": { "type": "string" } },
      "fields": {
        "description": "Selector specifying which fields to include in a partial response.",
        "in": "query",
        "name": "fields",
        "schema": { "type": "string" }
      },
      "key": {
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "in": "query",
        "name": "key",
        "schema": { "type": "string" }
      },
      "oauth_token": {
        "description": "OAuth 2.0 token for the current user.",
        "in": "query",
        "name": "oauth_token",
        "schema": { "type": "string" }
      },
      "prettyPrint": {
        "description": "Returns response with indentations and line breaks.",
        "in": "query",
        "name": "prettyPrint",
        "schema": { "type": "boolean", "default": true }
      },
      "quotaUser": {
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "in": "query",
        "name": "quotaUser",
        "schema": { "type": "string" }
      },
      "uploadType": {
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "in": "query",
        "name": "uploadType",
        "schema": { "type": "string" }
      },
      "upload_protocol": {
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "in": "query",
        "name": "upload_protocol",
        "schema": { "type": "string" }
      },
      "_.xgafv": {
        "description": "V1 error format.",
        "in": "query",
        "name": "$.xgafv",
        "schema": { "type": "string", "enum": ["1", "2"] }
      }
    },
    "securitySchemes": {
      "Oauth2": {
        "description": "Oauth 2.0 implicit authentication",
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "scopes": {
              "https://www.googleapis.com/auth/drive": "See, edit, create, and delete all of your Google Drive files",
              "https://www.googleapis.com/auth/drive.file": "View and manage Google Drive files and folders that you have opened or created with this app",
              "https://www.googleapis.com/auth/drive.readonly": "See and download all your Google Drive files",
              "https://www.googleapis.com/auth/presentations": "View and manage your Google Slides presentations",
              "https://www.googleapis.com/auth/presentations.readonly": "View your Google Slides presentations",
              "https://www.googleapis.com/auth/spreadsheets": "See, edit, create, and delete your spreadsheets in Google Drive",
              "https://www.googleapis.com/auth/spreadsheets.readonly": "View your Google Spreadsheets"
            }
          }
        }
      },
      "Oauth2c": {
        "description": "Oauth 2.0 accessCode authentication",
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "tokenUrl": "https://accounts.google.com/o/oauth2/token",
            "scopes": {
              "https://www.googleapis.com/auth/drive": "See, edit, create, and delete all of your Google Drive files",
              "https://www.googleapis.com/auth/drive.file": "View and manage Google Drive files and folders that you have opened or created with this app",
              "https://www.googleapis.com/auth/drive.readonly": "See and download all your Google Drive files",
              "https://www.googleapis.com/auth/presentations": "View and manage your Google Slides presentations",
              "https://www.googleapis.com/auth/presentations.readonly": "View your Google Slides presentations",
              "https://www.googleapis.com/auth/spreadsheets": "See, edit, create, and delete your spreadsheets in Google Drive",
              "https://www.googleapis.com/auth/spreadsheets.readonly": "View your Google Spreadsheets"
            }
          }
        }
      }
    },
    "schemas": {
      "AffineTransform": {
        "description": "AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ]\nto transform source coordinates (x,y) into destination coordinates (x', y')\naccording to:\n\n      x'  x  =   shear_y  scale_y  translate_y  \n      1  [ 1 ]\n\nAfter transformation,\n\n     x' = scale_x * x + shear_x * y + translate_x;\n     y' = scale_y * y + shear_y * x + translate_y;\n\nThis message is therefore composed of these six matrix elements.",
        "properties": {
          "scaleX": { "description": "The X coordinate scaling element.", "format": "double", "type": "number" },
          "scaleY": { "description": "The Y coordinate scaling element.", "format": "double", "type": "number" },
          "shearX": { "description": "The X coordinate shearing element.", "format": "double", "type": "number" },
          "shearY": { "description": "The Y coordinate shearing element.", "format": "double", "type": "number" },
          "translateX": {
            "description": "The X coordinate translation element.",
            "format": "double",
            "type": "number"
          },
          "translateY": {
            "description": "The Y coordinate translation element.",
            "format": "double",
            "type": "number"
          },
          "unit": {
            "description": "The units for translate elements.",
            "enum": ["UNIT_UNSPECIFIED", "EMU", "PT"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutoText": {
        "description": "A TextElement kind that represents auto text.",
        "properties": {
          "content": { "description": "The rendered content of this auto text, if available.", "type": "string" },
          "style": { "$ref": "#/components/schemas/TextStyle" },
          "type": {
            "description": "The type of this auto text.",
            "enum": ["TYPE_UNSPECIFIED", "SLIDE_NUMBER"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BatchUpdatePresentationRequest": {
        "description": "Request message for PresentationsService.BatchUpdatePresentation.",
        "properties": {
          "requests": {
            "description": "A list of updates to apply to the presentation.",
            "items": { "$ref": "#/components/schemas/Request" },
            "type": "array"
          },
          "writeControl": { "$ref": "#/components/schemas/WriteControl" }
        },
        "type": "object"
      },
      "BatchUpdatePresentationResponse": {
        "description": "Response message from a batch update.",
        "properties": {
          "presentationId": { "description": "The presentation the updates were applied to.", "type": "string" },
          "replies": {
            "description": "The reply of the updates.  This maps 1:1 with the updates, although\nreplies to some requests may be empty.",
            "items": { "$ref": "#/components/schemas/Response" },
            "type": "array"
          },
          "writeControl": { "$ref": "#/components/schemas/WriteControl" }
        },
        "type": "object"
      },
      "Bullet": {
        "description": "Describes the bullet of a paragraph.",
        "properties": {
          "bulletStyle": { "$ref": "#/components/schemas/TextStyle" },
          "glyph": { "description": "The rendered bullet glyph for this paragraph.", "type": "string" },
          "listId": { "description": "The ID of the list this paragraph belongs to.", "type": "string" },
          "nestingLevel": {
            "description": "The nesting level of this paragraph in the list.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ColorScheme": {
        "description": "The palette of predefined colors for a page.",
        "properties": {
          "colors": {
            "description": "The ThemeColorType and corresponding concrete color pairs.",
            "items": { "$ref": "#/components/schemas/ThemeColorPair" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ColorStop": {
        "description": "A color and position in a gradient band.",
        "properties": {
          "alpha": {
            "description": "The alpha value of this color in the gradient band. Defaults to 1.0,\nfully opaque.",
            "format": "float",
            "type": "number"
          },
          "color": { "$ref": "#/components/schemas/OpaqueColor" },
          "position": {
            "description": "The relative position of the color stop in the gradient band measured\nin percentage. The value should be in the interval [0.0, 1.0].",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "CreateImageRequest": {
        "description": "Creates an image.",
        "properties": {
          "elementProperties": { "$ref": "#/components/schemas/PageElementProperties" },
          "objectId": {
            "description": "A user-supplied object ID.\n\nIf you specify an ID, it must be unique among all pages and page elements\nin the presentation. The ID must start with an alphanumeric character or an\nunderscore (matches regex `[a-zA-Z0-9_]`); remaining characters\nmay include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`).\nThe length of the ID must not be less than 5 or greater than 50.\n\nIf you don't specify an ID, a unique one is generated.",
            "type": "string"
          },
          "url": {
            "description": "The image URL.\n\nThe image is fetched once at insertion time and a copy is stored for\ndisplay inside the presentation. Images must be less than 50MB in size,\ncannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF\nformat.\n\nThe provided URL can be at most 2 kB in length. The URL itself is saved\nwith the image, and exposed via the Image.source_url field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateImageResponse": {
        "description": "The result of creating an image.",
        "properties": { "objectId": { "description": "The object ID of the created image.", "type": "string" } },
        "type": "object"
      },
      "CreateLineRequest": {
        "description": "Creates a line.",
        "properties": {
          "category": {
            "description": "The category of the line to be created.\n\nThe exact line type created is\ndetermined based on the category and how it's routed to connect to other\npage elements.\n\nIf you specify both a `category` and a `line_category`, the `category`\ntakes precedence.\n\nIf you do not specify a value for `category`, but specify a value for\n`line_category`, then the specified `line_category` value is used.\n\nIf you do not specify either, then STRAIGHT is used.",
            "enum": ["LINE_CATEGORY_UNSPECIFIED", "STRAIGHT", "BENT", "CURVED"],
            "type": "string"
          },
          "elementProperties": { "$ref": "#/components/schemas/PageElementProperties" },
          "lineCategory": {
            "description": "The category of the line to be created.\n\n<b>Deprecated</b>: use `category` instead.\n\nThe exact line type created is\ndetermined based on the category and how it's routed to connect to other\npage elements.\n\nIf you specify both a `category` and a `line_category`, the `category`\ntakes precedence.",
            "enum": ["STRAIGHT", "BENT", "CURVED"],
            "type": "string"
          },
          "objectId": {
            "description": "A user-supplied object ID.\n\nIf you specify an ID, it must be unique among all pages and page elements\nin the presentation. The ID must start with an alphanumeric character or an\nunderscore (matches regex `[a-zA-Z0-9_]`); remaining characters\nmay include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`).\nThe length of the ID must not be less than 5 or greater than 50.\n\nIf you don't specify an ID, a unique one is generated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateLineResponse": {
        "description": "The result of creating a line.",
        "properties": { "objectId": { "description": "The object ID of the created line.", "type": "string" } },
        "type": "object"
      },
      "CreateParagraphBulletsRequest": {
        "description": "Creates bullets for all of the paragraphs that overlap with the given\ntext index range.\n\nThe nesting level of each paragraph will be determined by counting leading\ntabs in front of each paragraph. To avoid excess space between the bullet and\nthe corresponding paragraph, these leading tabs are removed by this request.\nThis may change the indices of parts of the text.\n\nIf the paragraph immediately before paragraphs being updated is in a list\nwith a matching preset, the paragraphs being updated are added to that\npreceding list.",
        "properties": {
          "bulletPreset": {
            "description": "The kinds of bullet glyphs to be used. Defaults to the\n`BULLET_DISC_CIRCLE_SQUARE` preset.",
            "enum": [
              "BULLET_DISC_CIRCLE_SQUARE",
              "BULLET_DIAMONDX_ARROW3D_SQUARE",
              "BULLET_CHECKBOX",
              "BULLET_ARROW_DIAMOND_DISC",
              "BULLET_STAR_CIRCLE_SQUARE",
              "BULLET_ARROW3D_CIRCLE_SQUARE",
              "BULLET_LEFTTRIANGLE_DIAMOND_DISC",
              "BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE",
              "BULLET_DIAMOND_CIRCLE_SQUARE",
              "NUMBERED_DIGIT_ALPHA_ROMAN",
              "NUMBERED_DIGIT_ALPHA_ROMAN_PARENS",
              "NUMBERED_DIGIT_NESTED",
              "NUMBERED_UPPERALPHA_ALPHA_ROMAN",
              "NUMBERED_UPPERROMAN_UPPERALPHA_DIGIT",
              "NUMBERED_ZERODIGIT_ALPHA_ROMAN"
            ],
            "type": "string"
          },
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "objectId": {
            "description": "The object ID of the shape or table containing the text to add bullets to.",
            "type": "string"
          },
          "textRange": { "$ref": "#/components/schemas/Range" }
        },
        "type": "object"
      },
      "CreateShapeRequest": {
        "description": "Creates a new shape.",
        "properties": {
          "elementProperties": { "$ref": "#/components/schemas/PageElementProperties" },
          "objectId": {
            "description": "A user-supplied object ID.\n\nIf you specify an ID, it must be unique among all pages and page elements\nin the presentation. The ID must start with an alphanumeric character or an\nunderscore (matches regex `[a-zA-Z0-9_]`); remaining characters\nmay include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`).\nThe length of the ID must not be less than 5 or greater than 50.\nIf empty, a unique identifier will be generated.",
            "type": "string"
          },
          "shapeType": {
            "description": "The shape type.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "TEXT_BOX",
              "RECTANGLE",
              "ROUND_RECTANGLE",
              "ELLIPSE",
              "ARC",
              "BENT_ARROW",
              "BENT_UP_ARROW",
              "BEVEL",
              "BLOCK_ARC",
              "BRACE_PAIR",
              "BRACKET_PAIR",
              "CAN",
              "CHEVRON",
              "CHORD",
              "CLOUD",
              "CORNER",
              "CUBE",
              "CURVED_DOWN_ARROW",
              "CURVED_LEFT_ARROW",
              "CURVED_RIGHT_ARROW",
              "CURVED_UP_ARROW",
              "DECAGON",
              "DIAGONAL_STRIPE",
              "DIAMOND",
              "DODECAGON",
              "DONUT",
              "DOUBLE_WAVE",
              "DOWN_ARROW",
              "DOWN_ARROW_CALLOUT",
              "FOLDED_CORNER",
              "FRAME",
              "HALF_FRAME",
              "HEART",
              "HEPTAGON",
              "HEXAGON",
              "HOME_PLATE",
              "HORIZONTAL_SCROLL",
              "IRREGULAR_SEAL_1",
              "IRREGULAR_SEAL_2",
              "LEFT_ARROW",
              "LEFT_ARROW_CALLOUT",
              "LEFT_BRACE",
              "LEFT_BRACKET",
              "LEFT_RIGHT_ARROW",
              "LEFT_RIGHT_ARROW_CALLOUT",
              "LEFT_RIGHT_UP_ARROW",
              "LEFT_UP_ARROW",
              "LIGHTNING_BOLT",
              "MATH_DIVIDE",
              "MATH_EQUAL",
              "MATH_MINUS",
              "MATH_MULTIPLY",
              "MATH_NOT_EQUAL",
              "MATH_PLUS",
              "MOON",
              "NO_SMOKING",
              "NOTCHED_RIGHT_ARROW",
              "OCTAGON",
              "PARALLELOGRAM",
              "PENTAGON",
              "PIE",
              "PLAQUE",
              "PLUS",
              "QUAD_ARROW",
              "QUAD_ARROW_CALLOUT",
              "RIBBON",
              "RIBBON_2",
              "RIGHT_ARROW",
              "RIGHT_ARROW_CALLOUT",
              "RIGHT_BRACE",
              "RIGHT_BRACKET",
              "ROUND_1_RECTANGLE",
              "ROUND_2_DIAGONAL_RECTANGLE",
              "ROUND_2_SAME_RECTANGLE",
              "RIGHT_TRIANGLE",
              "SMILEY_FACE",
              "SNIP_1_RECTANGLE",
              "SNIP_2_DIAGONAL_RECTANGLE",
              "SNIP_2_SAME_RECTANGLE",
              "SNIP_ROUND_RECTANGLE",
              "STAR_10",
              "STAR_12",
              "STAR_16",
              "STAR_24",
              "STAR_32",
              "STAR_4",
              "STAR_5",
              "STAR_6",
              "STAR_7",
              "STAR_8",
              "STRIPED_RIGHT_ARROW",
              "SUN",
              "TRAPEZOID",
              "TRIANGLE",
              "UP_ARROW",
              "UP_ARROW_CALLOUT",
              "UP_DOWN_ARROW",
              "UTURN_ARROW",
              "VERTICAL_SCROLL",
              "WAVE",
              "WEDGE_ELLIPSE_CALLOUT",
              "WEDGE_RECTANGLE_CALLOUT",
              "WEDGE_ROUND_RECTANGLE_CALLOUT",
              "FLOW_CHART_ALTERNATE_PROCESS",
              "FLOW_CHART_COLLATE",
              "FLOW_CHART_CONNECTOR",
              "FLOW_CHART_DECISION",
              "FLOW_CHART_DELAY",
              "FLOW_CHART_DISPLAY",
              "FLOW_CHART_DOCUMENT",
              "FLOW_CHART_EXTRACT",
              "FLOW_CHART_INPUT_OUTPUT",
              "FLOW_CHART_INTERNAL_STORAGE",
              "FLOW_CHART_MAGNETIC_DISK",
              "FLOW_CHART_MAGNETIC_DRUM",
              "FLOW_CHART_MAGNETIC_TAPE",
              "FLOW_CHART_MANUAL_INPUT",
              "FLOW_CHART_MANUAL_OPERATION",
              "FLOW_CHART_MERGE",
              "FLOW_CHART_MULTIDOCUMENT",
              "FLOW_CHART_OFFLINE_STORAGE",
              "FLOW_CHART_OFFPAGE_CONNECTOR",
              "FLOW_CHART_ONLINE_STORAGE",
              "FLOW_CHART_OR",
              "FLOW_CHART_PREDEFINED_PROCESS",
              "FLOW_CHART_PREPARATION",
              "FLOW_CHART_PROCESS",
              "FLOW_CHART_PUNCHED_CARD",
              "FLOW_CHART_PUNCHED_TAPE",
              "FLOW_CHART_SORT",
              "FLOW_CHART_SUMMING_JUNCTION",
              "FLOW_CHART_TERMINATOR",
              "ARROW_EAST",
              "ARROW_NORTH_EAST",
              "ARROW_NORTH",
              "SPEECH",
              "STARBURST",
              "TEARDROP",
              "ELLIPSE_RIBBON",
              "ELLIPSE_RIBBON_2",
              "CLOUD_CALLOUT",
              "CUSTOM"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateShapeResponse": {
        "description": "The result of creating a shape.",
        "properties": { "objectId": { "description": "The object ID of the created shape.", "type": "string" } },
        "type": "object"
      },
      "CreateSheetsChartRequest": {
        "description": "Creates an embedded Google Sheets chart.\n\nNOTE: Chart creation requires at least one of the spreadsheets.readonly,\nspreadsheets, drive.readonly, drive.file, or drive OAuth scopes.",
        "properties": {
          "chartId": {
            "description": "The ID of the specific chart in the Google Sheets spreadsheet.",
            "format": "int32",
            "type": "integer"
          },
          "elementProperties": { "$ref": "#/components/schemas/PageElementProperties" },
          "linkingMode": {
            "description": "The mode with which the chart is linked to the source spreadsheet. When\nnot specified, the chart will be an image that is not linked.",
            "enum": ["NOT_LINKED_IMAGE", "LINKED"],
            "type": "string"
          },
          "objectId": {
            "description": "A user-supplied object ID.\n\nIf specified, the ID must be unique among all pages and page elements in\nthe presentation. The ID should start with a word character [a-zA-Z0-9_]\nand then followed by any number of the following characters [a-zA-Z0-9_-:].\nThe length of the ID should not be less than 5 or greater than 50.\nIf empty, a unique identifier will be generated.",
            "type": "string"
          },
          "spreadsheetId": {
            "description": "The ID of the Google Sheets spreadsheet that contains the chart.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateSheetsChartResponse": {
        "description": "The result of creating an embedded Google Sheets chart.",
        "properties": { "objectId": { "description": "The object ID of the created chart.", "type": "string" } },
        "type": "object"
      },
      "CreateSlideRequest": {
        "description": "Creates a new slide.",
        "properties": {
          "insertionIndex": {
            "description": "The optional zero-based index indicating where to insert the slides.\n\nIf you don't specify an index, the new slide is created at the end.",
            "format": "int32",
            "type": "integer"
          },
          "objectId": {
            "description": "A user-supplied object ID.\n\nIf you specify an ID, it must be unique among all pages and page elements\nin the presentation. The ID must start with an alphanumeric character or an\nunderscore (matches regex `[a-zA-Z0-9_]`); remaining characters\nmay include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`).\nThe length of the ID must not be less than 5 or greater than 50.\n\nIf you don't specify an ID, a unique one is generated.",
            "type": "string"
          },
          "placeholderIdMappings": {
            "description": "An optional list of object ID mappings from the placeholder(s) on the layout to the placeholder(s)\nthat will be created on the new slide from that specified layout. Can only\nbe used when `slide_layout_reference` is specified.",
            "items": { "$ref": "#/components/schemas/LayoutPlaceholderIdMapping" },
            "type": "array"
          },
          "slideLayoutReference": { "$ref": "#/components/schemas/LayoutReference" }
        },
        "type": "object"
      },
      "CreateSlideResponse": {
        "description": "The result of creating a slide.",
        "properties": { "objectId": { "description": "The object ID of the created slide.", "type": "string" } },
        "type": "object"
      },
      "CreateTableRequest": {
        "description": "Creates a new table.",
        "properties": {
          "columns": { "description": "Number of columns in the table.", "format": "int32", "type": "integer" },
          "elementProperties": { "$ref": "#/components/schemas/PageElementProperties" },
          "objectId": {
            "description": "A user-supplied object ID.\n\nIf you specify an ID, it must be unique among all pages and page elements\nin the presentation. The ID must start with an alphanumeric character or an\nunderscore (matches regex `[a-zA-Z0-9_]`); remaining characters\nmay include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`).\nThe length of the ID must not be less than 5 or greater than 50.\n\nIf you don't specify an ID, a unique one is generated.",
            "type": "string"
          },
          "rows": { "description": "Number of rows in the table.", "format": "int32", "type": "integer" }
        },
        "type": "object"
      },
      "CreateTableResponse": {
        "description": "The result of creating a table.",
        "properties": { "objectId": { "description": "The object ID of the created table.", "type": "string" } },
        "type": "object"
      },
      "CreateVideoRequest": {
        "description": "Creates a video.\n\nNOTE: Creating a video from Google Drive requires that the requesting app\nhave at least one of the drive, drive.readonly, or drive.file OAuth scopes.",
        "properties": {
          "elementProperties": { "$ref": "#/components/schemas/PageElementProperties" },
          "id": {
            "description": "The video source's unique identifier for this video.\n\ne.g. For YouTube video https://www.youtube.com/watch?v=7U3axjORYZ0,\nthe ID is 7U3axjORYZ0. For a Google Drive video\nhttps://drive.google.com/file/d/1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q the ID\nis 1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q.",
            "type": "string"
          },
          "objectId": {
            "description": "A user-supplied object ID.\n\nIf you specify an ID, it must be unique among all pages and page elements\nin the presentation. The ID must start with an alphanumeric character or an\nunderscore (matches regex `[a-zA-Z0-9_]`); remaining characters\nmay include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`).\nThe length of the ID must not be less than 5 or greater than 50.\n\nIf you don't specify an ID, a unique one is generated.",
            "type": "string"
          },
          "source": {
            "description": "The video source.",
            "enum": ["SOURCE_UNSPECIFIED", "YOUTUBE", "DRIVE"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateVideoResponse": {
        "description": "The result of creating a video.",
        "properties": { "objectId": { "description": "The object ID of the created video.", "type": "string" } },
        "type": "object"
      },
      "CropProperties": {
        "description": "The crop properties of an object enclosed in a container. For example, an\nImage.\n\nThe crop properties is represented by the offsets of four edges which define\na crop rectangle. The offsets are measured in percentage from the\ncorresponding edges of the object's original bounding rectangle towards\ninside, relative to the object's original dimensions.\n\n- If the offset is in the interval (0, 1), the corresponding edge of crop\nrectangle is positioned inside of the object's original bounding rectangle.\n- If the offset is negative or greater than 1, the corresponding edge of crop\nrectangle is positioned outside of the object's original bounding rectangle.\n- If the left edge of the crop rectangle is on the right side of its right\nedge, the object will be flipped horizontally.\n- If the top edge of the crop rectangle is below its bottom edge, the object\nwill be flipped vertically.\n- If all offsets and rotation angle is 0, the object is not cropped.\n\nAfter cropping, the content in the crop rectangle will be stretched to fit\nits container.",
        "properties": {
          "angle": {
            "description": "The rotation angle of the crop window around its center, in radians.\nRotation angle is applied after the offset.",
            "format": "float",
            "type": "number"
          },
          "bottomOffset": {
            "description": "The offset specifies the bottom edge of the crop rectangle that is located\nabove the original bounding rectangle bottom edge, relative to the object's\noriginal height.",
            "format": "float",
            "type": "number"
          },
          "leftOffset": {
            "description": "The offset specifies the left edge of the crop rectangle that is located to\nthe right of the original bounding rectangle left edge, relative to the\nobject's original width.",
            "format": "float",
            "type": "number"
          },
          "rightOffset": {
            "description": "The offset specifies the right edge of the crop rectangle that is located\nto the left of the original bounding rectangle right edge, relative to the\nobject's original width.",
            "format": "float",
            "type": "number"
          },
          "topOffset": {
            "description": "The offset specifies the top edge of the crop rectangle that is located\nbelow the original bounding rectangle top edge, relative to the object's\noriginal height.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "DeleteObjectRequest": {
        "description": "Deletes an object, either pages or\npage elements, from the\npresentation.",
        "properties": {
          "objectId": {
            "description": "The object ID of the page or page element to delete.\n\nIf after a delete operation a group contains\nonly 1 or no page elements, the group is also deleted.\n\nIf a placeholder is deleted on a layout, any empty inheriting shapes are\nalso deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteParagraphBulletsRequest": {
        "description": "Deletes bullets from all of the paragraphs that overlap with the given text\nindex range.\n\nThe nesting level of each paragraph will be visually preserved by adding\nindent to the start of the corresponding paragraph.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "objectId": {
            "description": "The object ID of the shape or table containing the text to delete bullets\nfrom.",
            "type": "string"
          },
          "textRange": { "$ref": "#/components/schemas/Range" }
        },
        "type": "object"
      },
      "DeleteTableColumnRequest": {
        "description": "Deletes a column from a table.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "tableObjectId": { "description": "The table to delete columns from.", "type": "string" }
        },
        "type": "object"
      },
      "DeleteTableRowRequest": {
        "description": "Deletes a row from a table.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "tableObjectId": { "description": "The table to delete rows from.", "type": "string" }
        },
        "type": "object"
      },
      "DeleteTextRequest": {
        "description": "Deletes text from a shape or a table cell.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "objectId": {
            "description": "The object ID of the shape or table from which the text will be deleted.",
            "type": "string"
          },
          "textRange": { "$ref": "#/components/schemas/Range" }
        },
        "type": "object"
      },
      "Dimension": {
        "description": "A magnitude in a single direction in the specified units.",
        "properties": {
          "magnitude": { "description": "The magnitude.", "format": "double", "type": "number" },
          "unit": {
            "description": "The units for magnitude.",
            "enum": ["UNIT_UNSPECIFIED", "EMU", "PT"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DuplicateObjectRequest": {
        "description": "Duplicates a slide or page element.\n\nWhen duplicating a slide, the duplicate slide will be created immediately\nfollowing the specified slide. When duplicating a page element, the duplicate\nwill be placed on the same page at the same position as the original.",
        "properties": {
          "objectId": { "description": "The ID of the object to duplicate.", "type": "string" },
          "objectIds": {
            "additionalProperties": { "type": "string" },
            "description": "The object being duplicated may contain other objects, for example when\nduplicating a slide or a group page element. This map defines how the IDs\nof duplicated objects are generated: the keys are the IDs of the original\nobjects and its values are the IDs that will be assigned to the\ncorresponding duplicate object. The ID of the source object's duplicate\nmay be specified in this map as well, using the same value of the\n`object_id` field as a key and the newly desired ID as the value.\n\nAll keys must correspond to existing IDs in the presentation. All values\nmust be unique in the presentation and must start with an alphanumeric\ncharacter or an underscore (matches regex `[a-zA-Z0-9_]`); remaining\ncharacters may include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or\ngreater than 50.\n\nIf any IDs of source objects are omitted from the map, a new random ID will\nbe assigned. If the map is empty or unset, all duplicate objects will\nreceive a new random ID.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "DuplicateObjectResponse": {
        "description": "The response of duplicating an object.",
        "properties": { "objectId": { "description": "The ID of the new duplicate object.", "type": "string" } },
        "type": "object"
      },
      "Group": {
        "description": "A PageElement kind representing a\njoined collection of PageElements.",
        "properties": {
          "children": {
            "description": "The collection of elements in the group. The minimum size of a group is 2.",
            "items": { "$ref": "#/components/schemas/PageElement" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupObjectsRequest": {
        "description": "Groups objects to create an object group. For example, groups PageElements to create a Group on the same page as all the children.",
        "properties": {
          "childrenObjectIds": {
            "description": "The object IDs of the objects to group.\n\nOnly page elements can be grouped. There should be at least two page\nelements on the same page that are not already in another group. Some page\nelements, such as videos, tables and placeholder shapes cannot be grouped.",
            "items": { "type": "string" },
            "type": "array"
          },
          "groupObjectId": {
            "description": "A user-supplied object ID for the group to be created.\n\nIf you specify an ID, it must be unique among all pages and page elements\nin the presentation. The ID must start with an alphanumeric character or an\nunderscore (matches regex `[a-zA-Z0-9_]`); remaining characters\nmay include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`).\nThe length of the ID must not be less than 5 or greater than 50.\n\nIf you don't specify an ID, a unique one is generated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupObjectsResponse": {
        "description": "The result of grouping objects.",
        "properties": { "objectId": { "description": "The object ID of the created group.", "type": "string" } },
        "type": "object"
      },
      "Image": {
        "description": "A PageElement kind representing an\nimage.",
        "properties": {
          "contentUrl": {
            "description": "An URL to an image with a default lifetime of 30 minutes.\nThis URL is tagged with the account of the requester. Anyone with the URL\neffectively accesses the image as the original requester. Access to the\nimage may be lost if the presentation's sharing settings change.",
            "type": "string"
          },
          "imageProperties": { "$ref": "#/components/schemas/ImageProperties" },
          "sourceUrl": {
            "description": "The source URL is the URL used to insert the image. The source URL can be\nempty.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImageProperties": {
        "description": "The properties of the Image.",
        "properties": {
          "brightness": {
            "description": "The brightness effect of the image. The value should be in the interval\n[-1.0, 1.0], where 0 means no effect. This property is read-only.",
            "format": "float",
            "type": "number"
          },
          "contrast": {
            "description": "The contrast effect of the image. The value should be in the interval\n[-1.0, 1.0], where 0 means no effect. This property is read-only.",
            "format": "float",
            "type": "number"
          },
          "cropProperties": { "$ref": "#/components/schemas/CropProperties" },
          "link": { "$ref": "#/components/schemas/Link" },
          "outline": { "$ref": "#/components/schemas/Outline" },
          "recolor": { "$ref": "#/components/schemas/Recolor" },
          "shadow": { "$ref": "#/components/schemas/Shadow" },
          "transparency": {
            "description": "The transparency effect of the image. The value should be in the interval\n[0.0, 1.0], where 0 means no effect and 1 means completely transparent.\nThis property is read-only.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "InsertTableColumnsRequest": {
        "description": "Inserts columns into a table.\n\nOther columns in the table will be resized to fit the new column.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "insertRight": {
            "description": "Whether to insert new columns to the right of the reference cell location.\n\n- `True`: insert to the right.\n- `False`: insert to the left.",
            "type": "boolean"
          },
          "number": {
            "description": "The number of columns to be inserted. Maximum 20 per request.",
            "format": "int32",
            "type": "integer"
          },
          "tableObjectId": { "description": "The table to insert columns into.", "type": "string" }
        },
        "type": "object"
      },
      "InsertTableRowsRequest": {
        "description": "Inserts rows into a table.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "insertBelow": {
            "description": "Whether to insert new rows below the reference cell location.\n\n- `True`: insert below the cell.\n- `False`: insert above the cell.",
            "type": "boolean"
          },
          "number": {
            "description": "The number of rows to be inserted. Maximum 20 per request.",
            "format": "int32",
            "type": "integer"
          },
          "tableObjectId": { "description": "The table to insert rows into.", "type": "string" }
        },
        "type": "object"
      },
      "InsertTextRequest": {
        "description": "Inserts text into a shape or a table cell.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "insertionIndex": {
            "description": "The index where the text will be inserted, in Unicode code units, based\non TextElement indexes.\n\nThe index is zero-based and is computed from the start of the string.\nThe index may be adjusted to prevent insertions inside Unicode grapheme\nclusters. In these cases, the text will be inserted immediately after the\ngrapheme cluster.",
            "format": "int32",
            "type": "integer"
          },
          "objectId": {
            "description": "The object ID of the shape or table where the text will be inserted.",
            "type": "string"
          },
          "text": {
            "description": "The text to be inserted.\n\nInserting a newline character will implicitly create a new\nParagraphMarker at that index.\nThe paragraph style of the new paragraph will be copied from the paragraph\nat the current insertion index, including lists and bullets.\n\nText styles for inserted text will be determined automatically, generally\npreserving the styling of neighboring text. In most cases, the text will be\nadded to the TextRun that exists at the\ninsertion index.\n\nSome control characters (U+0000-U+0008, U+000C-U+001F) and characters\nfrom the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF)\nwill be stripped out of the inserted text.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LayoutPlaceholderIdMapping": {
        "description": "The user-specified ID mapping for a placeholder that will be created on a\nslide from a specified layout.",
        "properties": {
          "layoutPlaceholder": { "$ref": "#/components/schemas/Placeholder" },
          "layoutPlaceholderObjectId": {
            "description": "The object ID of the placeholder on a layout that will be applied\nto a slide.",
            "type": "string"
          },
          "objectId": {
            "description": "A user-supplied object ID for the placeholder identified above that to be\ncreated onto a slide.\n\nIf you specify an ID, it must be unique among all pages and page elements\nin the presentation. The ID must start with an alphanumeric character or an\nunderscore (matches regex `[a-zA-Z0-9_]`); remaining characters\nmay include those as well as a hyphen or colon (matches regex\n`[a-zA-Z0-9_-:]`).\nThe length of the ID must not be less than 5 or greater than 50.\n\nIf you don't specify an ID, a unique one is generated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LayoutProperties": {
        "description": "The properties of Page are only\nrelevant for pages with page_type LAYOUT.",
        "properties": {
          "displayName": { "description": "The human-readable name of the layout.", "type": "string" },
          "masterObjectId": {
            "description": "The object ID of the master that this layout is based on.",
            "type": "string"
          },
          "name": { "description": "The name of the layout.", "type": "string" }
        },
        "type": "object"
      },
      "LayoutReference": {
        "description": "Slide layout reference. This may reference either:\n\n- A predefined layout\n- One of the layouts in the presentation.",
        "properties": {
          "layoutId": {
            "description": "Layout ID: the object ID of one of the layouts in the presentation.",
            "type": "string"
          },
          "predefinedLayout": {
            "description": "Predefined layout.",
            "enum": [
              "PREDEFINED_LAYOUT_UNSPECIFIED",
              "BLANK",
              "CAPTION_ONLY",
              "TITLE",
              "TITLE_AND_BODY",
              "TITLE_AND_TWO_COLUMNS",
              "TITLE_ONLY",
              "SECTION_HEADER",
              "SECTION_TITLE_AND_DESCRIPTION",
              "ONE_COLUMN_TEXT",
              "MAIN_POINT",
              "BIG_NUMBER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Line": {
        "description": "A PageElement kind representing a\nnon-connector line, straight connector, curved connector, or bent connector.",
        "properties": {
          "lineCategory": {
            "description": "The category of the line.\n\nIt matches the `category` specified in CreateLineRequest, and can be updated with\nUpdateLineCategoryRequest.",
            "enum": ["LINE_CATEGORY_UNSPECIFIED", "STRAIGHT", "BENT", "CURVED"],
            "type": "string"
          },
          "lineProperties": { "$ref": "#/components/schemas/LineProperties" },
          "lineType": {
            "description": "The type of the line.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "STRAIGHT_CONNECTOR_1",
              "BENT_CONNECTOR_2",
              "BENT_CONNECTOR_3",
              "BENT_CONNECTOR_4",
              "BENT_CONNECTOR_5",
              "CURVED_CONNECTOR_2",
              "CURVED_CONNECTOR_3",
              "CURVED_CONNECTOR_4",
              "CURVED_CONNECTOR_5",
              "STRAIGHT_LINE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "LineConnection": {
        "description": "The properties for one end of a Line\nconnection.",
        "properties": {
          "connectedObjectId": {
            "description": "The object ID of the connected page element.\n\nSome page elements, such as groups, tables, and lines\ndo not have connection sites and therefore cannot be connected to a\nconnector line.",
            "type": "string"
          },
          "connectionSiteIndex": {
            "description": "The index of the connection site on the connected page element.\n\nIn most cases, it corresponds to the predefined connection site index from\nthe ECMA-376 standard. More information on those connection sites can be\nfound in the description of the \"cnx\" attribute in section 20.1.9.9 and\nAnnex H. \"Predefined DrawingML Shape and Text Geometries\" of \"Office Open\nXML File Formats-Fundamentals and Markup Language Reference\", part 1 of\n[ECMA-376 5th edition]\n(http://www.ecma-international.org/publications/standards/Ecma-376.htm).\n\nThe position of each connection site can also be viewed from Slides editor.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LineFill": {
        "description": "The fill of the line.",
        "properties": { "solidFill": { "$ref": "#/components/schemas/SolidFill" } },
        "type": "object"
      },
      "LineProperties": {
        "description": "The properties of the Line.\n\nWhen unset, these fields default to values that match the appearance of\nnew lines created in the Slides editor.",
        "properties": {
          "dashStyle": {
            "description": "The dash style of the line.",
            "enum": ["DASH_STYLE_UNSPECIFIED", "SOLID", "DOT", "DASH", "DASH_DOT", "LONG_DASH", "LONG_DASH_DOT"],
            "type": "string"
          },
          "endArrow": {
            "description": "The style of the arrow at the end of the line.",
            "enum": [
              "ARROW_STYLE_UNSPECIFIED",
              "NONE",
              "STEALTH_ARROW",
              "FILL_ARROW",
              "FILL_CIRCLE",
              "FILL_SQUARE",
              "FILL_DIAMOND",
              "OPEN_ARROW",
              "OPEN_CIRCLE",
              "OPEN_SQUARE",
              "OPEN_DIAMOND"
            ],
            "type": "string"
          },
          "endConnection": { "$ref": "#/components/schemas/LineConnection" },
          "lineFill": { "$ref": "#/components/schemas/LineFill" },
          "link": { "$ref": "#/components/schemas/Link" },
          "startArrow": {
            "description": "The style of the arrow at the beginning of the line.",
            "enum": [
              "ARROW_STYLE_UNSPECIFIED",
              "NONE",
              "STEALTH_ARROW",
              "FILL_ARROW",
              "FILL_CIRCLE",
              "FILL_SQUARE",
              "FILL_DIAMOND",
              "OPEN_ARROW",
              "OPEN_CIRCLE",
              "OPEN_SQUARE",
              "OPEN_DIAMOND"
            ],
            "type": "string"
          },
          "startConnection": { "$ref": "#/components/schemas/LineConnection" },
          "weight": { "$ref": "#/components/schemas/Dimension" }
        },
        "type": "object"
      },
      "Link": {
        "description": "A hypertext link.",
        "properties": {
          "pageObjectId": {
            "description": "If set, indicates this is a link to the specific page in this\npresentation with this ID. A page with this ID may not exist.",
            "type": "string"
          },
          "relativeLink": {
            "description": "If set, indicates this is a link to a slide in this presentation,\naddressed by its position.",
            "enum": ["RELATIVE_SLIDE_LINK_UNSPECIFIED", "NEXT_SLIDE", "PREVIOUS_SLIDE", "FIRST_SLIDE", "LAST_SLIDE"],
            "type": "string"
          },
          "slideIndex": {
            "description": "If set, indicates this is a link to the slide at this zero-based index\nin the presentation. There may not be a slide at this index.",
            "format": "int32",
            "type": "integer"
          },
          "url": {
            "description": "If set, indicates this is a link to the external web page at this URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "List": {
        "description": "A List describes the look and feel of bullets belonging to paragraphs\nassociated with a list. A paragraph that is part of a list has an implicit\nreference to that list's ID.",
        "properties": {
          "listId": { "description": "The ID of the list.", "type": "string" },
          "nestingLevel": {
            "additionalProperties": { "$ref": "#/components/schemas/NestingLevel" },
            "description": "A map of nesting levels to the properties of bullets at the associated\nlevel. A list has at most nine levels of nesting, so the possible values\nfor the keys of this map are 0 through 8, inclusive.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "MasterProperties": {
        "description": "The properties of Page that are only\nrelevant for pages with page_type MASTER.",
        "properties": { "displayName": { "description": "The human-readable name of the master.", "type": "string" } },
        "type": "object"
      },
      "MergeTableCellsRequest": {
        "description": "Merges cells in a Table.",
        "properties": {
          "objectId": { "description": "The object ID of the table.", "type": "string" },
          "tableRange": { "$ref": "#/components/schemas/TableRange" }
        },
        "type": "object"
      },
      "NestingLevel": {
        "description": "Contains properties describing the look and feel of a list bullet at a given\nlevel of nesting.",
        "properties": { "bulletStyle": { "$ref": "#/components/schemas/TextStyle" } },
        "type": "object"
      },
      "NotesProperties": {
        "description": "The properties of Page that are only\nrelevant for pages with page_type NOTES.",
        "properties": {
          "speakerNotesObjectId": {
            "description": "The object ID of the shape on this notes page that contains the speaker\nnotes for the corresponding slide.\nThe actual shape may not always exist on the notes page. Inserting text\nusing this object ID will automatically create the shape. In this case, the\nactual shape may have different object ID. The `GetPresentation` or\n`GetPage` action will always return the latest object ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OpaqueColor": {
        "description": "A themeable solid color value.",
        "properties": {
          "rgbColor": { "$ref": "#/components/schemas/RgbColor" },
          "themeColor": {
            "description": "An opaque theme color.",
            "enum": [
              "THEME_COLOR_TYPE_UNSPECIFIED",
              "DARK1",
              "LIGHT1",
              "DARK2",
              "LIGHT2",
              "ACCENT1",
              "ACCENT2",
              "ACCENT3",
              "ACCENT4",
              "ACCENT5",
              "ACCENT6",
              "HYPERLINK",
              "FOLLOWED_HYPERLINK",
              "TEXT1",
              "BACKGROUND1",
              "TEXT2",
              "BACKGROUND2"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "OptionalColor": {
        "description": "A color that can either be fully opaque or fully transparent.",
        "properties": { "opaqueColor": { "$ref": "#/components/schemas/OpaqueColor" } },
        "type": "object"
      },
      "Outline": {
        "description": "The outline of a PageElement.\n\nIf these fields are unset, they may be inherited from a parent placeholder\nif it exists. If there is no parent, the fields will default to the value\nused for new page elements created in the Slides editor, which may depend on\nthe page element kind.",
        "properties": {
          "dashStyle": {
            "description": "The dash style of the outline.",
            "enum": ["DASH_STYLE_UNSPECIFIED", "SOLID", "DOT", "DASH", "DASH_DOT", "LONG_DASH", "LONG_DASH_DOT"],
            "type": "string"
          },
          "outlineFill": { "$ref": "#/components/schemas/OutlineFill" },
          "propertyState": {
            "description": "The outline property state.\n\nUpdating the outline on a page element will implicitly update this field\nto `RENDERED`, unless another value is specified in the same request. To\nhave no outline on a page element, set this field to `NOT_RENDERED`. In\nthis case, any other outline fields set in the same request will be\nignored.",
            "enum": ["RENDERED", "NOT_RENDERED", "INHERIT"],
            "type": "string"
          },
          "weight": { "$ref": "#/components/schemas/Dimension" }
        },
        "type": "object"
      },
      "OutlineFill": {
        "description": "The fill of the outline.",
        "properties": { "solidFill": { "$ref": "#/components/schemas/SolidFill" } },
        "type": "object"
      },
      "Page": {
        "description": "A page in a presentation.",
        "properties": {
          "layoutProperties": { "$ref": "#/components/schemas/LayoutProperties" },
          "masterProperties": { "$ref": "#/components/schemas/MasterProperties" },
          "notesProperties": { "$ref": "#/components/schemas/NotesProperties" },
          "objectId": {
            "description": "The object ID for this page. Object IDs used by\nPage and\nPageElement share the same namespace.",
            "type": "string"
          },
          "pageElements": {
            "description": "The page elements rendered on the page.",
            "items": { "$ref": "#/components/schemas/PageElement" },
            "type": "array"
          },
          "pageProperties": { "$ref": "#/components/schemas/PageProperties" },
          "pageType": {
            "description": "The type of the page.",
            "enum": ["SLIDE", "MASTER", "LAYOUT", "NOTES", "NOTES_MASTER"],
            "type": "string"
          },
          "revisionId": {
            "description": "The revision ID of the presentation containing this page. Can be used in\nupdate requests to assert that the presentation revision hasn't changed\nsince the last read operation. Only populated if the user has edit access\nto the presentation.\n\nThe format of the revision ID may change over time, so it should be treated\nopaquely. A returned revision ID is only guaranteed to be valid for 24\nhours after it has been returned and cannot be shared across users. If the\nrevision ID is unchanged between calls, then the presentation has not\nchanged. Conversely, a changed ID (for the same presentation and user)\nusually means the presentation has been updated; however, a changed ID can\nalso be due to internal factors such as ID format changes.",
            "type": "string"
          },
          "slideProperties": { "$ref": "#/components/schemas/SlideProperties" }
        },
        "type": "object"
      },
      "PageBackgroundFill": {
        "description": "The page background fill.",
        "properties": {
          "propertyState": {
            "description": "The background fill property state.\n\nUpdating the fill on a page will implicitly update this field to\n`RENDERED`, unless another value is specified in the same request. To\nhave no fill on a page, set this field to `NOT_RENDERED`. In this case,\nany other fill fields set in the same request will be ignored.",
            "enum": ["RENDERED", "NOT_RENDERED", "INHERIT"],
            "type": "string"
          },
          "solidFill": { "$ref": "#/components/schemas/SolidFill" },
          "stretchedPictureFill": { "$ref": "#/components/schemas/StretchedPictureFill" }
        },
        "type": "object"
      },
      "PageElement": {
        "description": "A visual element rendered on a page.",
        "properties": {
          "description": {
            "description": "The description of the page element. Combined with title to display alt\ntext.",
            "type": "string"
          },
          "elementGroup": { "$ref": "#/components/schemas/Group" },
          "image": { "$ref": "#/components/schemas/Image" },
          "line": { "$ref": "#/components/schemas/Line" },
          "objectId": {
            "description": "The object ID for this page element. Object IDs used by\ngoogle.apps.slides.v1.Page and\ngoogle.apps.slides.v1.PageElement share the same namespace.",
            "type": "string"
          },
          "shape": { "$ref": "#/components/schemas/Shape" },
          "sheetsChart": { "$ref": "#/components/schemas/SheetsChart" },
          "size": { "$ref": "#/components/schemas/Size" },
          "table": { "$ref": "#/components/schemas/Table" },
          "title": {
            "description": "The title of the page element. Combined with description to display alt\ntext.",
            "type": "string"
          },
          "transform": { "$ref": "#/components/schemas/AffineTransform" },
          "video": { "$ref": "#/components/schemas/Video" },
          "wordArt": { "$ref": "#/components/schemas/WordArt" }
        },
        "type": "object"
      },
      "PageElementProperties": {
        "description": "Common properties for a page element.\n\nNote: When you initially create a\nPageElement, the API may modify\nthe values of both `size` and `transform`, but the\nvisual size will be unchanged.",
        "properties": {
          "pageObjectId": {
            "description": "The object ID of the page where the element is located.",
            "type": "string"
          },
          "size": { "$ref": "#/components/schemas/Size" },
          "transform": { "$ref": "#/components/schemas/AffineTransform" }
        },
        "type": "object"
      },
      "PageProperties": {
        "description": "The properties of the Page.\n\nThe page will inherit properties from the parent page. Depending on the page\ntype the hierarchy is defined in either\nSlideProperties or\nLayoutProperties.",
        "properties": {
          "colorScheme": { "$ref": "#/components/schemas/ColorScheme" },
          "pageBackgroundFill": { "$ref": "#/components/schemas/PageBackgroundFill" }
        },
        "type": "object"
      },
      "ParagraphMarker": {
        "description": "A TextElement kind that represents the beginning of a new paragraph.",
        "properties": {
          "bullet": { "$ref": "#/components/schemas/Bullet" },
          "style": { "$ref": "#/components/schemas/ParagraphStyle" }
        },
        "type": "object"
      },
      "ParagraphStyle": {
        "description": "Styles that apply to a whole paragraph.\n\nIf this text is contained in a shape with a parent placeholder, then these paragraph styles may be\ninherited from the parent. Which paragraph styles are inherited depend on the\nnesting level of lists:\n\n* A paragraph not in a list will inherit its paragraph style from the\n  paragraph at the 0 nesting level of the list inside the parent placeholder.\n* A paragraph in a list will inherit its paragraph style from the paragraph\n  at its corresponding nesting level of the list inside the parent\n  placeholder.\n\nInherited paragraph styles are represented as unset fields in this message.",
        "properties": {
          "alignment": {
            "description": "The text alignment for this paragraph.",
            "enum": ["ALIGNMENT_UNSPECIFIED", "START", "CENTER", "END", "JUSTIFIED"],
            "type": "string"
          },
          "direction": {
            "description": "The text direction of this paragraph. If unset, the value defaults to\nLEFT_TO_RIGHT since\ntext direction is not inherited.",
            "enum": ["TEXT_DIRECTION_UNSPECIFIED", "LEFT_TO_RIGHT", "RIGHT_TO_LEFT"],
            "type": "string"
          },
          "indentEnd": { "$ref": "#/components/schemas/Dimension" },
          "indentFirstLine": { "$ref": "#/components/schemas/Dimension" },
          "indentStart": { "$ref": "#/components/schemas/Dimension" },
          "lineSpacing": {
            "description": "The amount of space between lines, as a percentage of normal, where normal\nis represented as 100.0. If unset, the value is inherited from the parent.",
            "format": "float",
            "type": "number"
          },
          "spaceAbove": { "$ref": "#/components/schemas/Dimension" },
          "spaceBelow": { "$ref": "#/components/schemas/Dimension" },
          "spacingMode": {
            "description": "The spacing mode for the paragraph.",
            "enum": ["SPACING_MODE_UNSPECIFIED", "NEVER_COLLAPSE", "COLLAPSE_LISTS"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Placeholder": {
        "description": "The placeholder information that uniquely identifies a placeholder shape.",
        "properties": {
          "index": {
            "description": "The index of the placeholder. If the same placeholder types are present in\nthe same page, they would have different index values.",
            "format": "int32",
            "type": "integer"
          },
          "parentObjectId": {
            "description": "The object ID of this shape's parent placeholder.\nIf unset, the parent placeholder shape does not exist, so the shape does\nnot inherit properties from any other shape.",
            "type": "string"
          },
          "type": {
            "description": "The type of the placeholder.",
            "enum": [
              "NONE",
              "BODY",
              "CHART",
              "CLIP_ART",
              "CENTERED_TITLE",
              "DIAGRAM",
              "DATE_AND_TIME",
              "FOOTER",
              "HEADER",
              "MEDIA",
              "OBJECT",
              "PICTURE",
              "SLIDE_NUMBER",
              "SUBTITLE",
              "TABLE",
              "TITLE",
              "SLIDE_IMAGE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Presentation": {
        "description": "A Google Slides presentation.",
        "properties": {
          "layouts": {
            "description": "The layouts in the presentation. A layout is a template that determines\nhow content is arranged and styled on the slides that inherit from that\nlayout.",
            "items": { "$ref": "#/components/schemas/Page" },
            "type": "array"
          },
          "locale": {
            "description": "The locale of the presentation, as an IETF BCP 47 language tag.",
            "type": "string"
          },
          "masters": {
            "description": "The slide masters in the presentation. A slide master contains all common\npage elements and the common properties for a set of layouts. They serve\nthree purposes:\n\n- Placeholder shapes on a master contain the default text styles and shape\n  properties of all placeholder shapes on pages that use that master.\n- The master page properties define the common page properties inherited by\n  its layouts.\n- Any other shapes on the master slide will appear on all slides using that\n  master, regardless of their layout.",
            "items": { "$ref": "#/components/schemas/Page" },
            "type": "array"
          },
          "notesMaster": { "$ref": "#/components/schemas/Page" },
          "pageSize": { "$ref": "#/components/schemas/Size" },
          "presentationId": { "description": "The ID of the presentation.", "type": "string" },
          "revisionId": {
            "description": "The revision ID of the presentation. Can be used in update requests\nto assert that the presentation revision hasn't changed since the last\nread operation. Only populated if the user has edit access to the\npresentation.\n\nThe format of the revision ID may change over time, so it should be treated\nopaquely. A returned revision ID is only guaranteed to be valid for 24\nhours after it has been returned and cannot be shared across users. If the\nrevision ID is unchanged between calls, then the presentation has not\nchanged. Conversely, a changed ID (for the same presentation and user)\nusually means the presentation has been updated; however, a changed ID can\nalso be due to internal factors such as ID format changes.",
            "type": "string"
          },
          "slides": {
            "description": "The slides in the presentation.\nA slide inherits properties from a slide layout.",
            "items": { "$ref": "#/components/schemas/Page" },
            "type": "array"
          },
          "title": { "description": "The title of the presentation.", "type": "string" }
        },
        "type": "object"
      },
      "Range": {
        "description": "Specifies a contiguous range of an indexed collection, such as characters in\ntext.",
        "properties": {
          "endIndex": {
            "description": "The optional zero-based index of the end of the collection.\nRequired for `FIXED_RANGE` ranges.",
            "format": "int32",
            "type": "integer"
          },
          "startIndex": {
            "description": "The optional zero-based index of the beginning of the collection.\nRequired for `FIXED_RANGE` and `FROM_START_INDEX` ranges.",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "The type of range.",
            "enum": ["RANGE_TYPE_UNSPECIFIED", "FIXED_RANGE", "FROM_START_INDEX", "ALL"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Recolor": {
        "description": "A recolor effect applied on an image.",
        "properties": {
          "name": {
            "description": "The name of the recolor effect.\n\nThe name is determined from the `recolor_stops` by matching the gradient\nagainst the colors in the page's current color scheme. This property is\nread-only.",
            "enum": [
              "NONE",
              "LIGHT1",
              "LIGHT2",
              "LIGHT3",
              "LIGHT4",
              "LIGHT5",
              "LIGHT6",
              "LIGHT7",
              "LIGHT8",
              "LIGHT9",
              "LIGHT10",
              "DARK1",
              "DARK2",
              "DARK3",
              "DARK4",
              "DARK5",
              "DARK6",
              "DARK7",
              "DARK8",
              "DARK9",
              "DARK10",
              "GRAYSCALE",
              "NEGATIVE",
              "SEPIA",
              "CUSTOM"
            ],
            "type": "string"
          },
          "recolorStops": {
            "description": "The recolor effect is represented by a gradient, which is a list of color\nstops.\n\nThe colors in the gradient will replace the corresponding colors at\nthe same position in the color palette and apply to the image. This\nproperty is read-only.",
            "items": { "$ref": "#/components/schemas/ColorStop" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RefreshSheetsChartRequest": {
        "description": "Refreshes an embedded Google Sheets chart by replacing it with the latest\nversion of the chart from Google Sheets.\n\nNOTE: Refreshing charts requires  at least one of the spreadsheets.readonly,\nspreadsheets, drive.readonly, or drive OAuth scopes.",
        "properties": { "objectId": { "description": "The object ID of the chart to refresh.", "type": "string" } },
        "type": "object"
      },
      "ReplaceAllShapesWithImageRequest": {
        "description": "Replaces all shapes that match the given criteria with the provided image.\n\nThe images replacing the shapes are rectangular after being inserted into\nthe presentation and do not take on the forms of the shapes.",
        "properties": {
          "containsText": { "$ref": "#/components/schemas/SubstringMatchCriteria" },
          "imageReplaceMethod": {
            "description": "The image replace method.\n\nIf you specify both a `replace_method` and an `image_replace_method`, the\n`image_replace_method` takes precedence.\n\nIf you do not specify a value for `image_replace_method`, but specify a\nvalue for `replace_method`, then the specified `replace_method` value is\nused.\n\nIf you do not specify either, then CENTER_INSIDE is used.",
            "enum": ["IMAGE_REPLACE_METHOD_UNSPECIFIED", "CENTER_INSIDE", "CENTER_CROP"],
            "type": "string"
          },
          "imageUrl": {
            "description": "The image URL.\n\nThe image is fetched once at insertion time and a copy is stored for\ndisplay inside the presentation. Images must be less than 50MB in size,\ncannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF\nformat.\n\nThe provided URL can be at most 2 kB in length. The URL itself is saved\nwith the image, and exposed via the Image.source_url field.",
            "type": "string"
          },
          "pageObjectIds": {
            "description": "If non-empty, limits the matches to page elements only on the given pages.\n\nReturns a 400 bad request error if given the page object ID of a\nnotes page or a\nnotes master, or if a\npage with that object ID doesn't exist in the presentation.",
            "items": { "type": "string" },
            "type": "array"
          },
          "replaceMethod": {
            "description": "The replace method.\n\n<b>Deprecated</b>: use `image_replace_method` instead.\n\nIf you specify both a `replace_method` and an `image_replace_method`, the\n`image_replace_method` takes precedence.",
            "enum": ["CENTER_INSIDE", "CENTER_CROP"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReplaceAllShapesWithImageResponse": {
        "description": "The result of replacing shapes with an image.",
        "properties": {
          "occurrencesChanged": {
            "description": "The number of shapes replaced with images.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReplaceAllShapesWithSheetsChartRequest": {
        "description": "Replaces all shapes that match the given criteria with the provided Google\nSheets chart. The chart will be scaled and centered to fit within the bounds\nof the original shape.\n\nNOTE: Replacing shapes with a chart requires at least one of the\nspreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.",
        "properties": {
          "chartId": {
            "description": "The ID of the specific chart in the Google Sheets spreadsheet.",
            "format": "int32",
            "type": "integer"
          },
          "containsText": { "$ref": "#/components/schemas/SubstringMatchCriteria" },
          "linkingMode": {
            "description": "The mode with which the chart is linked to the source spreadsheet. When\nnot specified, the chart will be an image that is not linked.",
            "enum": ["NOT_LINKED_IMAGE", "LINKED"],
            "type": "string"
          },
          "pageObjectIds": {
            "description": "If non-empty, limits the matches to page elements only on the given pages.\n\nReturns a 400 bad request error if given the page object ID of a\nnotes page or a\nnotes master, or if a\npage with that object ID doesn't exist in the presentation.",
            "items": { "type": "string" },
            "type": "array"
          },
          "spreadsheetId": {
            "description": "The ID of the Google Sheets spreadsheet that contains the chart.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReplaceAllShapesWithSheetsChartResponse": {
        "description": "The result of replacing shapes with a Google Sheets chart.",
        "properties": {
          "occurrencesChanged": {
            "description": "The number of shapes replaced with charts.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReplaceAllTextRequest": {
        "description": "Replaces all instances of text matching a criteria with replace text.",
        "properties": {
          "containsText": { "$ref": "#/components/schemas/SubstringMatchCriteria" },
          "pageObjectIds": {
            "description": "If non-empty, limits the matches to page elements only on the given pages.\n\nReturns a 400 bad request error if given the page object ID of a\nnotes master,\nor if a page with that object ID doesn't exist in the presentation.",
            "items": { "type": "string" },
            "type": "array"
          },
          "replaceText": { "description": "The text that will replace the matched text.", "type": "string" }
        },
        "type": "object"
      },
      "ReplaceAllTextResponse": {
        "description": "The result of replacing text.",
        "properties": {
          "occurrencesChanged": {
            "description": "The number of occurrences changed by replacing all text.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReplaceImageRequest": {
        "description": "Replaces an existing image with a new image.\n\nReplacing an image removes some image effects from the existing image.",
        "properties": {
          "imageObjectId": { "description": "The ID of the existing image that will be replaced.", "type": "string" },
          "imageReplaceMethod": {
            "description": "The replacement method.",
            "enum": ["IMAGE_REPLACE_METHOD_UNSPECIFIED", "CENTER_INSIDE", "CENTER_CROP"],
            "type": "string"
          },
          "url": {
            "description": "The URL of the new image.\n\nThe image is fetched once at insertion time and a copy is stored for\ndisplay inside the presentation. Images must be less than 50MB in size,\ncannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF\nformat.\n\nThe provided URL can be at most 2 kB in length. The URL itself is saved\nwith the image, and exposed via the Image.source_url field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Request": {
        "description": "A single kind of update to apply to a presentation.",
        "properties": {
          "createImage": { "$ref": "#/components/schemas/CreateImageRequest" },
          "createLine": { "$ref": "#/components/schemas/CreateLineRequest" },
          "createParagraphBullets": { "$ref": "#/components/schemas/CreateParagraphBulletsRequest" },
          "createShape": { "$ref": "#/components/schemas/CreateShapeRequest" },
          "createSheetsChart": { "$ref": "#/components/schemas/CreateSheetsChartRequest" },
          "createSlide": { "$ref": "#/components/schemas/CreateSlideRequest" },
          "createTable": { "$ref": "#/components/schemas/CreateTableRequest" },
          "createVideo": { "$ref": "#/components/schemas/CreateVideoRequest" },
          "deleteObject": { "$ref": "#/components/schemas/DeleteObjectRequest" },
          "deleteParagraphBullets": { "$ref": "#/components/schemas/DeleteParagraphBulletsRequest" },
          "deleteTableColumn": { "$ref": "#/components/schemas/DeleteTableColumnRequest" },
          "deleteTableRow": { "$ref": "#/components/schemas/DeleteTableRowRequest" },
          "deleteText": { "$ref": "#/components/schemas/DeleteTextRequest" },
          "duplicateObject": { "$ref": "#/components/schemas/DuplicateObjectRequest" },
          "groupObjects": { "$ref": "#/components/schemas/GroupObjectsRequest" },
          "insertTableColumns": { "$ref": "#/components/schemas/InsertTableColumnsRequest" },
          "insertTableRows": { "$ref": "#/components/schemas/InsertTableRowsRequest" },
          "insertText": { "$ref": "#/components/schemas/InsertTextRequest" },
          "mergeTableCells": { "$ref": "#/components/schemas/MergeTableCellsRequest" },
          "refreshSheetsChart": { "$ref": "#/components/schemas/RefreshSheetsChartRequest" },
          "replaceAllShapesWithImage": { "$ref": "#/components/schemas/ReplaceAllShapesWithImageRequest" },
          "replaceAllShapesWithSheetsChart": { "$ref": "#/components/schemas/ReplaceAllShapesWithSheetsChartRequest" },
          "replaceAllText": { "$ref": "#/components/schemas/ReplaceAllTextRequest" },
          "replaceImage": { "$ref": "#/components/schemas/ReplaceImageRequest" },
          "rerouteLine": { "$ref": "#/components/schemas/RerouteLineRequest" },
          "ungroupObjects": { "$ref": "#/components/schemas/UngroupObjectsRequest" },
          "unmergeTableCells": { "$ref": "#/components/schemas/UnmergeTableCellsRequest" },
          "updateImageProperties": { "$ref": "#/components/schemas/UpdateImagePropertiesRequest" },
          "updateLineCategory": { "$ref": "#/components/schemas/UpdateLineCategoryRequest" },
          "updateLineProperties": { "$ref": "#/components/schemas/UpdateLinePropertiesRequest" },
          "updatePageElementAltText": { "$ref": "#/components/schemas/UpdatePageElementAltTextRequest" },
          "updatePageElementTransform": { "$ref": "#/components/schemas/UpdatePageElementTransformRequest" },
          "updatePageElementsZOrder": { "$ref": "#/components/schemas/UpdatePageElementsZOrderRequest" },
          "updatePageProperties": { "$ref": "#/components/schemas/UpdatePagePropertiesRequest" },
          "updateParagraphStyle": { "$ref": "#/components/schemas/UpdateParagraphStyleRequest" },
          "updateShapeProperties": { "$ref": "#/components/schemas/UpdateShapePropertiesRequest" },
          "updateSlidesPosition": { "$ref": "#/components/schemas/UpdateSlidesPositionRequest" },
          "updateTableBorderProperties": { "$ref": "#/components/schemas/UpdateTableBorderPropertiesRequest" },
          "updateTableCellProperties": { "$ref": "#/components/schemas/UpdateTableCellPropertiesRequest" },
          "updateTableColumnProperties": { "$ref": "#/components/schemas/UpdateTableColumnPropertiesRequest" },
          "updateTableRowProperties": { "$ref": "#/components/schemas/UpdateTableRowPropertiesRequest" },
          "updateTextStyle": { "$ref": "#/components/schemas/UpdateTextStyleRequest" },
          "updateVideoProperties": { "$ref": "#/components/schemas/UpdateVideoPropertiesRequest" }
        },
        "type": "object"
      },
      "RerouteLineRequest": {
        "description": "Reroutes a line such that it's connected at the\ntwo closest connection sites on the connected page elements.",
        "properties": {
          "objectId": {
            "description": "The object ID of the line to reroute.\n\nOnly a line with a category\nindicating it is a \"connector\" can be rerouted. The start and end\nconnections of the line must be on different page elements.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Response": {
        "description": "A single response from an update.",
        "properties": {
          "createImage": { "$ref": "#/components/schemas/CreateImageResponse" },
          "createLine": { "$ref": "#/components/schemas/CreateLineResponse" },
          "createShape": { "$ref": "#/components/schemas/CreateShapeResponse" },
          "createSheetsChart": { "$ref": "#/components/schemas/CreateSheetsChartResponse" },
          "createSlide": { "$ref": "#/components/schemas/CreateSlideResponse" },
          "createTable": { "$ref": "#/components/schemas/CreateTableResponse" },
          "createVideo": { "$ref": "#/components/schemas/CreateVideoResponse" },
          "duplicateObject": { "$ref": "#/components/schemas/DuplicateObjectResponse" },
          "groupObjects": { "$ref": "#/components/schemas/GroupObjectsResponse" },
          "replaceAllShapesWithImage": { "$ref": "#/components/schemas/ReplaceAllShapesWithImageResponse" },
          "replaceAllShapesWithSheetsChart": { "$ref": "#/components/schemas/ReplaceAllShapesWithSheetsChartResponse" },
          "replaceAllText": { "$ref": "#/components/schemas/ReplaceAllTextResponse" }
        },
        "type": "object"
      },
      "RgbColor": {
        "description": "An RGB color.",
        "properties": {
          "blue": {
            "description": "The blue component of the color, from 0.0 to 1.0.",
            "format": "float",
            "type": "number"
          },
          "green": {
            "description": "The green component of the color, from 0.0 to 1.0.",
            "format": "float",
            "type": "number"
          },
          "red": {
            "description": "The red component of the color, from 0.0 to 1.0.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Shadow": {
        "description": "The shadow properties of a page element.\n\nIf these fields are unset, they may be inherited from a parent placeholder\nif it exists. If there is no parent, the fields will default to the value\nused for new page elements created in the Slides editor, which may depend on\nthe page element kind.",
        "properties": {
          "alignment": {
            "description": "The alignment point of the shadow, that sets the origin for translate,\nscale and skew of the shadow. This property is read-only.",
            "enum": [
              "RECTANGLE_POSITION_UNSPECIFIED",
              "TOP_LEFT",
              "TOP_CENTER",
              "TOP_RIGHT",
              "LEFT_CENTER",
              "CENTER",
              "RIGHT_CENTER",
              "BOTTOM_LEFT",
              "BOTTOM_CENTER",
              "BOTTOM_RIGHT"
            ],
            "type": "string"
          },
          "alpha": {
            "description": "The alpha of the shadow's color, from 0.0 to 1.0.",
            "format": "float",
            "type": "number"
          },
          "blurRadius": { "$ref": "#/components/schemas/Dimension" },
          "color": { "$ref": "#/components/schemas/OpaqueColor" },
          "propertyState": {
            "description": "The shadow property state.\n\nUpdating the shadow on a page element will implicitly update this field to\n`RENDERED`, unless another value is specified in the same request. To have\nno shadow on a page element, set this field to `NOT_RENDERED`. In this\ncase, any other shadow fields set in the same request will be ignored.",
            "enum": ["RENDERED", "NOT_RENDERED", "INHERIT"],
            "type": "string"
          },
          "rotateWithShape": {
            "description": "Whether the shadow should rotate with the shape. This property is\nread-only.",
            "type": "boolean"
          },
          "transform": { "$ref": "#/components/schemas/AffineTransform" },
          "type": {
            "description": "The type of the shadow. This property is read-only.",
            "enum": ["SHADOW_TYPE_UNSPECIFIED", "OUTER"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Shape": {
        "description": "A PageElement kind representing a\ngeneric shape that does not have a more specific classification.",
        "properties": {
          "placeholder": { "$ref": "#/components/schemas/Placeholder" },
          "shapeProperties": { "$ref": "#/components/schemas/ShapeProperties" },
          "shapeType": {
            "description": "The type of the shape.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "TEXT_BOX",
              "RECTANGLE",
              "ROUND_RECTANGLE",
              "ELLIPSE",
              "ARC",
              "BENT_ARROW",
              "BENT_UP_ARROW",
              "BEVEL",
              "BLOCK_ARC",
              "BRACE_PAIR",
              "BRACKET_PAIR",
              "CAN",
              "CHEVRON",
              "CHORD",
              "CLOUD",
              "CORNER",
              "CUBE",
              "CURVED_DOWN_ARROW",
              "CURVED_LEFT_ARROW",
              "CURVED_RIGHT_ARROW",
              "CURVED_UP_ARROW",
              "DECAGON",
              "DIAGONAL_STRIPE",
              "DIAMOND",
              "DODECAGON",
              "DONUT",
              "DOUBLE_WAVE",
              "DOWN_ARROW",
              "DOWN_ARROW_CALLOUT",
              "FOLDED_CORNER",
              "FRAME",
              "HALF_FRAME",
              "HEART",
              "HEPTAGON",
              "HEXAGON",
              "HOME_PLATE",
              "HORIZONTAL_SCROLL",
              "IRREGULAR_SEAL_1",
              "IRREGULAR_SEAL_2",
              "LEFT_ARROW",
              "LEFT_ARROW_CALLOUT",
              "LEFT_BRACE",
              "LEFT_BRACKET",
              "LEFT_RIGHT_ARROW",
              "LEFT_RIGHT_ARROW_CALLOUT",
              "LEFT_RIGHT_UP_ARROW",
              "LEFT_UP_ARROW",
              "LIGHTNING_BOLT",
              "MATH_DIVIDE",
              "MATH_EQUAL",
              "MATH_MINUS",
              "MATH_MULTIPLY",
              "MATH_NOT_EQUAL",
              "MATH_PLUS",
              "MOON",
              "NO_SMOKING",
              "NOTCHED_RIGHT_ARROW",
              "OCTAGON",
              "PARALLELOGRAM",
              "PENTAGON",
              "PIE",
              "PLAQUE",
              "PLUS",
              "QUAD_ARROW",
              "QUAD_ARROW_CALLOUT",
              "RIBBON",
              "RIBBON_2",
              "RIGHT_ARROW",
              "RIGHT_ARROW_CALLOUT",
              "RIGHT_BRACE",
              "RIGHT_BRACKET",
              "ROUND_1_RECTANGLE",
              "ROUND_2_DIAGONAL_RECTANGLE",
              "ROUND_2_SAME_RECTANGLE",
              "RIGHT_TRIANGLE",
              "SMILEY_FACE",
              "SNIP_1_RECTANGLE",
              "SNIP_2_DIAGONAL_RECTANGLE",
              "SNIP_2_SAME_RECTANGLE",
              "SNIP_ROUND_RECTANGLE",
              "STAR_10",
              "STAR_12",
              "STAR_16",
              "STAR_24",
              "STAR_32",
              "STAR_4",
              "STAR_5",
              "STAR_6",
              "STAR_7",
              "STAR_8",
              "STRIPED_RIGHT_ARROW",
              "SUN",
              "TRAPEZOID",
              "TRIANGLE",
              "UP_ARROW",
              "UP_ARROW_CALLOUT",
              "UP_DOWN_ARROW",
              "UTURN_ARROW",
              "VERTICAL_SCROLL",
              "WAVE",
              "WEDGE_ELLIPSE_CALLOUT",
              "WEDGE_RECTANGLE_CALLOUT",
              "WEDGE_ROUND_RECTANGLE_CALLOUT",
              "FLOW_CHART_ALTERNATE_PROCESS",
              "FLOW_CHART_COLLATE",
              "FLOW_CHART_CONNECTOR",
              "FLOW_CHART_DECISION",
              "FLOW_CHART_DELAY",
              "FLOW_CHART_DISPLAY",
              "FLOW_CHART_DOCUMENT",
              "FLOW_CHART_EXTRACT",
              "FLOW_CHART_INPUT_OUTPUT",
              "FLOW_CHART_INTERNAL_STORAGE",
              "FLOW_CHART_MAGNETIC_DISK",
              "FLOW_CHART_MAGNETIC_DRUM",
              "FLOW_CHART_MAGNETIC_TAPE",
              "FLOW_CHART_MANUAL_INPUT",
              "FLOW_CHART_MANUAL_OPERATION",
              "FLOW_CHART_MERGE",
              "FLOW_CHART_MULTIDOCUMENT",
              "FLOW_CHART_OFFLINE_STORAGE",
              "FLOW_CHART_OFFPAGE_CONNECTOR",
              "FLOW_CHART_ONLINE_STORAGE",
              "FLOW_CHART_OR",
              "FLOW_CHART_PREDEFINED_PROCESS",
              "FLOW_CHART_PREPARATION",
              "FLOW_CHART_PROCESS",
              "FLOW_CHART_PUNCHED_CARD",
              "FLOW_CHART_PUNCHED_TAPE",
              "FLOW_CHART_SORT",
              "FLOW_CHART_SUMMING_JUNCTION",
              "FLOW_CHART_TERMINATOR",
              "ARROW_EAST",
              "ARROW_NORTH_EAST",
              "ARROW_NORTH",
              "SPEECH",
              "STARBURST",
              "TEARDROP",
              "ELLIPSE_RIBBON",
              "ELLIPSE_RIBBON_2",
              "CLOUD_CALLOUT",
              "CUSTOM"
            ],
            "type": "string"
          },
          "text": { "$ref": "#/components/schemas/TextContent" }
        },
        "type": "object"
      },
      "ShapeBackgroundFill": {
        "description": "The shape background fill.",
        "properties": {
          "propertyState": {
            "description": "The background fill property state.\n\nUpdating the fill on a shape will implicitly update this field to\n`RENDERED`, unless another value is specified in the same request. To\nhave no fill on a shape, set this field to `NOT_RENDERED`. In this case,\nany other fill fields set in the same request will be ignored.",
            "enum": ["RENDERED", "NOT_RENDERED", "INHERIT"],
            "type": "string"
          },
          "solidFill": { "$ref": "#/components/schemas/SolidFill" }
        },
        "type": "object"
      },
      "ShapeProperties": {
        "description": "The properties of a Shape.\n\nIf the shape is a placeholder shape as determined by the\nplaceholder field, then these\nproperties may be inherited from a parent placeholder shape.\nDetermining the rendered value of the property depends on the corresponding\nproperty_state field value.",
        "properties": {
          "contentAlignment": {
            "description": "The alignment of the content in the shape. If unspecified,\nthe alignment is inherited from a parent placeholder if it exists. If the\nshape has no parent, the default alignment matches the alignment for new\nshapes created in the Slides editor.",
            "enum": ["CONTENT_ALIGNMENT_UNSPECIFIED", "CONTENT_ALIGNMENT_UNSUPPORTED", "TOP", "MIDDLE", "BOTTOM"],
            "type": "string"
          },
          "link": { "$ref": "#/components/schemas/Link" },
          "outline": { "$ref": "#/components/schemas/Outline" },
          "shadow": { "$ref": "#/components/schemas/Shadow" },
          "shapeBackgroundFill": { "$ref": "#/components/schemas/ShapeBackgroundFill" }
        },
        "type": "object"
      },
      "SheetsChart": {
        "description": "A PageElement kind representing\na linked chart embedded from Google Sheets.",
        "properties": {
          "chartId": {
            "description": "The ID of the specific chart in the Google Sheets spreadsheet that is\nembedded.",
            "format": "int32",
            "type": "integer"
          },
          "contentUrl": {
            "description": "The URL of an image of the embedded chart, with a default lifetime of 30\nminutes. This URL is tagged with the account of the requester. Anyone with\nthe URL effectively accesses the image as the original requester. Access to\nthe image may be lost if the presentation's sharing settings change.",
            "type": "string"
          },
          "sheetsChartProperties": { "$ref": "#/components/schemas/SheetsChartProperties" },
          "spreadsheetId": {
            "description": "The ID of the Google Sheets spreadsheet that contains the source chart.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SheetsChartProperties": {
        "description": "The properties of the SheetsChart.",
        "properties": { "chartImageProperties": { "$ref": "#/components/schemas/ImageProperties" } },
        "type": "object"
      },
      "Size": {
        "description": "A width and height.",
        "properties": {
          "height": { "$ref": "#/components/schemas/Dimension" },
          "width": { "$ref": "#/components/schemas/Dimension" }
        },
        "type": "object"
      },
      "SlideProperties": {
        "description": "The properties of Page that are only\nrelevant for pages with page_type SLIDE.",
        "properties": {
          "layoutObjectId": {
            "description": "The object ID of the layout that this slide is based on. This property is\nread-only.",
            "type": "string"
          },
          "masterObjectId": {
            "description": "The object ID of the master that this slide is based on. This property is\nread-only.",
            "type": "string"
          },
          "notesPage": { "$ref": "#/components/schemas/Page" }
        },
        "type": "object"
      },
      "SolidFill": {
        "description": "A solid color fill. The page or page element is filled entirely with the\nspecified color value.\n\nIf any field is unset, its value may be inherited from a parent placeholder\nif it exists.",
        "properties": {
          "alpha": {
            "description": "The fraction of this `color` that should be applied to the pixel.\nThat is, the final pixel color is defined by the equation:\n\n  pixel color = alpha * (color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color.",
            "format": "float",
            "type": "number"
          },
          "color": { "$ref": "#/components/schemas/OpaqueColor" }
        },
        "type": "object"
      },
      "StretchedPictureFill": {
        "description": "The stretched picture fill. The page or page element is filled entirely with\nthe specified picture. The picture is stretched to fit its container.",
        "properties": {
          "contentUrl": {
            "description": "Reading the content_url:\n\nAn URL to a picture with a default lifetime of 30 minutes.\nThis URL is tagged with the account of the requester. Anyone with the URL\neffectively accesses the picture as the original requester. Access to the\npicture may be lost if the presentation's sharing settings change.\n\nWriting the content_url:\n\nThe picture is fetched once at insertion time and a copy is stored for\ndisplay inside the presentation. Pictures must be less than 50MB in size,\ncannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF\nformat.\n\nThe provided URL can be at most 2 kB in length.",
            "type": "string"
          },
          "size": { "$ref": "#/components/schemas/Size" }
        },
        "type": "object"
      },
      "SubstringMatchCriteria": {
        "description": "A criteria that matches a specific string of text in a shape or table.",
        "properties": {
          "matchCase": {
            "description": "Indicates whether the search should respect case:\n\n- `True`: the search is case sensitive.\n- `False`: the search is case insensitive.",
            "type": "boolean"
          },
          "text": { "description": "The text to search for in the shape or table.", "type": "string" }
        },
        "type": "object"
      },
      "Table": {
        "description": "A PageElement kind representing a\ntable.",
        "properties": {
          "columns": { "description": "Number of columns in the table.", "format": "int32", "type": "integer" },
          "horizontalBorderRows": {
            "description": "Properties of horizontal cell borders.\n\nA table's horizontal cell borders are represented as a grid. The grid has\none more row than the number of rows in the table and the same number of\ncolumns as the table. For example, if the table is 3 x 3, its horizontal\nborders will be represented as a grid with 4 rows and 3 columns.",
            "items": { "$ref": "#/components/schemas/TableBorderRow" },
            "type": "array"
          },
          "rows": { "description": "Number of rows in the table.", "format": "int32", "type": "integer" },
          "tableColumns": {
            "description": "Properties of each column.",
            "items": { "$ref": "#/components/schemas/TableColumnProperties" },
            "type": "array"
          },
          "tableRows": {
            "description": "Properties and contents of each row.\n\nCells that span multiple rows are contained in only one of these rows and\nhave a row_span greater\nthan 1.",
            "items": { "$ref": "#/components/schemas/TableRow" },
            "type": "array"
          },
          "verticalBorderRows": {
            "description": "Properties of vertical cell borders.\n\nA table's vertical cell borders are represented as a grid. The grid has the\nsame number of rows as the table and one more column than the number of\ncolumns in the table. For example, if the table is 3 x 3, its vertical\nborders will be represented as a grid with 3 rows and 4 columns.",
            "items": { "$ref": "#/components/schemas/TableBorderRow" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TableBorderCell": {
        "description": "The properties of each border cell.",
        "properties": {
          "location": { "$ref": "#/components/schemas/TableCellLocation" },
          "tableBorderProperties": { "$ref": "#/components/schemas/TableBorderProperties" }
        },
        "type": "object"
      },
      "TableBorderFill": {
        "description": "The fill of the border.",
        "properties": { "solidFill": { "$ref": "#/components/schemas/SolidFill" } },
        "type": "object"
      },
      "TableBorderProperties": {
        "description": "The border styling properties of the\nTableBorderCell.",
        "properties": {
          "dashStyle": {
            "description": "The dash style of the border.",
            "enum": ["DASH_STYLE_UNSPECIFIED", "SOLID", "DOT", "DASH", "DASH_DOT", "LONG_DASH", "LONG_DASH_DOT"],
            "type": "string"
          },
          "tableBorderFill": { "$ref": "#/components/schemas/TableBorderFill" },
          "weight": { "$ref": "#/components/schemas/Dimension" }
        },
        "type": "object"
      },
      "TableBorderRow": {
        "description": "Contents of each border row in a table.",
        "properties": {
          "tableBorderCells": {
            "description": "Properties of each border cell. When a border's adjacent table cells are\nmerged, it is not included in the response.",
            "items": { "$ref": "#/components/schemas/TableBorderCell" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TableCell": {
        "description": "Properties and contents of each table cell.",
        "properties": {
          "columnSpan": { "description": "Column span of the cell.", "format": "int32", "type": "integer" },
          "location": { "$ref": "#/components/schemas/TableCellLocation" },
          "rowSpan": { "description": "Row span of the cell.", "format": "int32", "type": "integer" },
          "tableCellProperties": { "$ref": "#/components/schemas/TableCellProperties" },
          "text": { "$ref": "#/components/schemas/TextContent" }
        },
        "type": "object"
      },
      "TableCellBackgroundFill": {
        "description": "The table cell background fill.",
        "properties": {
          "propertyState": {
            "description": "The background fill property state.\n\nUpdating the fill on a table cell will implicitly update this field\nto `RENDERED`, unless another value is specified in the same request. To\nhave no fill on a table cell, set this field to `NOT_RENDERED`. In this\ncase, any other fill fields set in the same request will be ignored.",
            "enum": ["RENDERED", "NOT_RENDERED", "INHERIT"],
            "type": "string"
          },
          "solidFill": { "$ref": "#/components/schemas/SolidFill" }
        },
        "type": "object"
      },
      "TableCellLocation": {
        "description": "A location of a single table cell within a table.",
        "properties": {
          "columnIndex": { "description": "The 0-based column index.", "format": "int32", "type": "integer" },
          "rowIndex": { "description": "The 0-based row index.", "format": "int32", "type": "integer" }
        },
        "type": "object"
      },
      "TableCellProperties": {
        "description": "The properties of the TableCell.",
        "properties": {
          "contentAlignment": {
            "description": "The alignment of the content in the table cell. The default alignment\nmatches the alignment for newly created table cells in the Slides editor.",
            "enum": ["CONTENT_ALIGNMENT_UNSPECIFIED", "CONTENT_ALIGNMENT_UNSUPPORTED", "TOP", "MIDDLE", "BOTTOM"],
            "type": "string"
          },
          "tableCellBackgroundFill": { "$ref": "#/components/schemas/TableCellBackgroundFill" }
        },
        "type": "object"
      },
      "TableColumnProperties": {
        "description": "Properties of each column in a table.",
        "properties": { "columnWidth": { "$ref": "#/components/schemas/Dimension" } },
        "type": "object"
      },
      "TableRange": {
        "description": "A table range represents a reference to a subset of a table.\n\nIt's important to note that the cells specified by a table range do not\nnecessarily form a rectangle. For example, let's say we have a 3 x 3 table\nwhere all the cells of the last row are merged together. The table looks\nlike this:\n\n              \n     [             ]\n\nA table range with location = (0, 0), row span = 3 and column span = 2\nspecifies the following cells:\n\n      x     x \n     [ x    x    x ]",
        "properties": {
          "columnSpan": { "description": "The column span of the table range.", "format": "int32", "type": "integer" },
          "location": { "$ref": "#/components/schemas/TableCellLocation" },
          "rowSpan": { "description": "The row span of the table range.", "format": "int32", "type": "integer" }
        },
        "type": "object"
      },
      "TableRow": {
        "description": "Properties and contents of each row in a table.",
        "properties": {
          "rowHeight": { "$ref": "#/components/schemas/Dimension" },
          "tableCells": {
            "description": "Properties and contents of each cell.\n\nCells that span multiple columns are represented only once with a\ncolumn_span greater\nthan 1. As a result, the length of this collection does not always match\nthe number of columns of the entire table.",
            "items": { "$ref": "#/components/schemas/TableCell" },
            "type": "array"
          },
          "tableRowProperties": { "$ref": "#/components/schemas/TableRowProperties" }
        },
        "type": "object"
      },
      "TableRowProperties": {
        "description": "Properties of each row in a table.",
        "properties": { "minRowHeight": { "$ref": "#/components/schemas/Dimension" } },
        "type": "object"
      },
      "TextContent": {
        "description": "The general text content. The text must reside in a compatible shape (e.g.\ntext box or rectangle) or a table cell in a page.",
        "properties": {
          "lists": {
            "additionalProperties": { "$ref": "#/components/schemas/List" },
            "description": "The bulleted lists contained in this text, keyed by list ID.",
            "type": "object"
          },
          "textElements": {
            "description": "The text contents broken down into its component parts, including styling\ninformation. This property is read-only.",
            "items": { "$ref": "#/components/schemas/TextElement" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TextElement": {
        "description": "A TextElement describes the content of a range of indices in the text content\nof a Shape or TableCell.",
        "properties": {
          "autoText": { "$ref": "#/components/schemas/AutoText" },
          "endIndex": {
            "description": "The zero-based end index of this text element, exclusive, in Unicode code\nunits.",
            "format": "int32",
            "type": "integer"
          },
          "paragraphMarker": { "$ref": "#/components/schemas/ParagraphMarker" },
          "startIndex": {
            "description": "The zero-based start index of this text element, in Unicode code units.",
            "format": "int32",
            "type": "integer"
          },
          "textRun": { "$ref": "#/components/schemas/TextRun" }
        },
        "type": "object"
      },
      "TextRun": {
        "description": "A TextElement kind that represents a run of text that all has the same\nstyling.",
        "properties": {
          "content": { "description": "The text of this run.", "type": "string" },
          "style": { "$ref": "#/components/schemas/TextStyle" }
        },
        "type": "object"
      },
      "TextStyle": {
        "description": "Represents the styling that can be applied to a TextRun.\n\nIf this text is contained in a shape with a parent placeholder, then these text styles may be\ninherited from the parent. Which text styles are inherited depend on the\nnesting level of lists:\n\n* A text run in a paragraph that is not in a list will inherit its text style\n  from the the newline character in the paragraph at the 0 nesting level of\n  the list inside the parent placeholder.\n* A text run in a paragraph that is in a list will inherit its text style\n  from the newline character in the paragraph at its corresponding nesting\n  level of the list inside the parent placeholder.\n\nInherited text styles are represented as unset fields in this message. If\ntext is contained in a shape without a parent placeholder, unsetting these\nfields will revert the style to a value matching the defaults in the Slides\neditor.",
        "properties": {
          "backgroundColor": { "$ref": "#/components/schemas/OptionalColor" },
          "baselineOffset": {
            "description": "The text's vertical offset from its normal position.\n\nText with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically\nrendered in a smaller font size, computed based on the `font_size` field.\nThe `font_size` itself is not affected by changes in this field.",
            "enum": ["BASELINE_OFFSET_UNSPECIFIED", "NONE", "SUPERSCRIPT", "SUBSCRIPT"],
            "type": "string"
          },
          "bold": { "description": "Whether or not the text is rendered as bold.", "type": "boolean" },
          "fontFamily": {
            "description": "The font family of the text.\n\nThe font family can be any font from the Font menu in Slides or from\n[Google Fonts] (https://fonts.google.com/). If the font name is\nunrecognized, the text is rendered in `Arial`.\n\nSome fonts can affect the weight of the text. If an update request\nspecifies values for both `font_family` and `bold`, the explicitly-set\n`bold` value is used.",
            "type": "string"
          },
          "fontSize": { "$ref": "#/components/schemas/Dimension" },
          "foregroundColor": { "$ref": "#/components/schemas/OptionalColor" },
          "italic": { "description": "Whether or not the text is italicized.", "type": "boolean" },
          "link": { "$ref": "#/components/schemas/Link" },
          "smallCaps": { "description": "Whether or not the text is in small capital letters.", "type": "boolean" },
          "strikethrough": { "description": "Whether or not the text is struck through.", "type": "boolean" },
          "underline": { "description": "Whether or not the text is underlined.", "type": "boolean" },
          "weightedFontFamily": { "$ref": "#/components/schemas/WeightedFontFamily" }
        },
        "type": "object"
      },
      "ThemeColorPair": {
        "description": "A pair mapping a theme color type to the concrete color it represents.",
        "properties": {
          "color": { "$ref": "#/components/schemas/RgbColor" },
          "type": {
            "description": "The type of the theme color.",
            "enum": [
              "THEME_COLOR_TYPE_UNSPECIFIED",
              "DARK1",
              "LIGHT1",
              "DARK2",
              "LIGHT2",
              "ACCENT1",
              "ACCENT2",
              "ACCENT3",
              "ACCENT4",
              "ACCENT5",
              "ACCENT6",
              "HYPERLINK",
              "FOLLOWED_HYPERLINK",
              "TEXT1",
              "BACKGROUND1",
              "TEXT2",
              "BACKGROUND2"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Thumbnail": {
        "description": "The thumbnail of a page.",
        "properties": {
          "contentUrl": {
            "description": "The content URL of the thumbnail image.\n\nThe URL to the image has a default lifetime of 30 minutes.\nThis URL is tagged with the account of the requester. Anyone with the URL\neffectively accesses the image as the original requester. Access to the\nimage may be lost if the presentation's sharing settings change.\nThe mime type of the thumbnail image is the same as specified in the\n`GetPageThumbnailRequest`.",
            "type": "string"
          },
          "height": {
            "description": "The positive height in pixels of the thumbnail image.",
            "format": "int32",
            "type": "integer"
          },
          "width": {
            "description": "The positive width in pixels of the thumbnail image.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UngroupObjectsRequest": {
        "description": "Ungroups objects, such as groups.",
        "properties": {
          "objectIds": {
            "description": "The object IDs of the objects to ungroup.\n\nOnly groups that are not inside other\ngroups can be ungrouped. All the groups\nshould be on the same page. The group itself is deleted. The visual sizes\nand positions of all the children are preserved.",
            "items": { "type": "string" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UnmergeTableCellsRequest": {
        "description": "Unmerges cells in a Table.",
        "properties": {
          "objectId": { "description": "The object ID of the table.", "type": "string" },
          "tableRange": { "$ref": "#/components/schemas/TableRange" }
        },
        "type": "object"
      },
      "UpdateImagePropertiesRequest": {
        "description": "Update the properties of an Image.",
        "properties": {
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `imageProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the image outline color, set `fields` to\n`\"outline.outlineFill.solidFill.color\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "imageProperties": { "$ref": "#/components/schemas/ImageProperties" },
          "objectId": { "description": "The object ID of the image the updates are applied to.", "type": "string" }
        },
        "type": "object"
      },
      "UpdateLineCategoryRequest": {
        "description": "Updates the category of a line.",
        "properties": {
          "lineCategory": {
            "description": "The line category to update to.\n\nThe exact line type is determined based\non the category to update to and how it's routed to connect to other page\nelements.",
            "enum": ["LINE_CATEGORY_UNSPECIFIED", "STRAIGHT", "BENT", "CURVED"],
            "type": "string"
          },
          "objectId": {
            "description": "The object ID of the line the update is applied to.\n\nOnly a line with a category\nindicating it is a \"connector\" can be updated.\n\nThe line may be rerouted after updating its category.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateLinePropertiesRequest": {
        "description": "Updates the properties of a Line.",
        "properties": {
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `lineProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the line solid fill color, set `fields` to\n`\"lineFill.solidFill.color\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "lineProperties": { "$ref": "#/components/schemas/LineProperties" },
          "objectId": { "description": "The object ID of the line the update is applied to.", "type": "string" }
        },
        "type": "object"
      },
      "UpdatePageElementAltTextRequest": {
        "description": "Updates the alt text title and/or description of a\npage element.",
        "properties": {
          "description": {
            "description": "The updated alt text description of the page element. If unset the existing\nvalue will be maintained. The description is exposed to screen readers\nand other accessibility interfaces. Only use human readable values related\nto the content of the page element.",
            "type": "string"
          },
          "objectId": {
            "description": "The object ID of the page element the updates are applied to.",
            "type": "string"
          },
          "title": {
            "description": "The updated alt text title of the page element. If unset the\nexisting value will be maintained. The title is exposed to screen readers\nand other accessibility interfaces. Only use human readable values related\nto the content of the page element.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdatePageElementTransformRequest": {
        "description": "Updates the transform of a page element.\n\nUpdating the transform of a group will change the absolute transform of the\npage elements in that group, which can change their visual appearance. See\nthe documentation for PageElement.transform for more details.",
        "properties": {
          "applyMode": {
            "description": "The apply mode of the transform update.",
            "enum": ["APPLY_MODE_UNSPECIFIED", "RELATIVE", "ABSOLUTE"],
            "type": "string"
          },
          "objectId": { "description": "The object ID of the page element to update.", "type": "string" },
          "transform": { "$ref": "#/components/schemas/AffineTransform" }
        },
        "type": "object"
      },
      "UpdatePageElementsZOrderRequest": {
        "description": "Updates the Z-order of page elements. Z-order is an ordering of the elements\non the page from back to front. The page element in the front may cover the\nelements that are behind it.",
        "properties": {
          "operation": {
            "description": "The Z-order operation to apply on the page elements.\n\nWhen applying the operation on multiple page elements, the relative\nZ-orders within these page elements before the operation is maintained.",
            "enum": [
              "Z_ORDER_OPERATION_UNSPECIFIED",
              "BRING_TO_FRONT",
              "BRING_FORWARD",
              "SEND_BACKWARD",
              "SEND_TO_BACK"
            ],
            "type": "string"
          },
          "pageElementObjectIds": {
            "description": "The object IDs of the page elements to update.\n\nAll the page elements must be on the same page and must not be grouped.",
            "items": { "type": "string" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdatePagePropertiesRequest": {
        "description": "Updates the properties of a Page.",
        "properties": {
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `pageProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the page background solid fill color, set `fields`\nto `\"pageBackgroundFill.solidFill.color\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": { "description": "The object ID of the page the update is applied to.", "type": "string" },
          "pageProperties": { "$ref": "#/components/schemas/PageProperties" }
        },
        "type": "object"
      },
      "UpdateParagraphStyleRequest": {
        "description": "Updates the styling for all of the paragraphs within a Shape or Table that\noverlap with the given text index range.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `style` is implied and\nshould not be specified. A single `\"*\"` can be used as short-hand for\nlisting every field.\n\nFor example, to update the paragraph alignment, set `fields` to\n`\"alignment\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": {
            "description": "The object ID of the shape or table with the text to be styled.",
            "type": "string"
          },
          "style": { "$ref": "#/components/schemas/ParagraphStyle" },
          "textRange": { "$ref": "#/components/schemas/Range" }
        },
        "type": "object"
      },
      "UpdateShapePropertiesRequest": {
        "description": "Update the properties of a Shape.",
        "properties": {
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `shapeProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the shape background solid fill color, set `fields`\nto `\"shapeBackgroundFill.solidFill.color\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": { "description": "The object ID of the shape the updates are applied to.", "type": "string" },
          "shapeProperties": { "$ref": "#/components/schemas/ShapeProperties" }
        },
        "type": "object"
      },
      "UpdateSlidesPositionRequest": {
        "description": "Updates the position of slides in the presentation.",
        "properties": {
          "insertionIndex": {
            "description": "The index where the slides should be inserted, based on the slide\narrangement before the move takes place. Must be between zero and the\nnumber of slides in the presentation, inclusive.",
            "format": "int32",
            "type": "integer"
          },
          "slideObjectIds": {
            "description": "The IDs of the slides in the presentation that should be moved.\nThe slides in this list must be in existing presentation order, without\nduplicates.",
            "items": { "type": "string" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateTableBorderPropertiesRequest": {
        "description": "Updates the properties of the table borders in a Table.",
        "properties": {
          "borderPosition": {
            "description": "The border position in the table range the updates should apply to. If a\nborder position is not specified, the updates will apply to all borders in\nthe table range.",
            "enum": ["ALL", "BOTTOM", "INNER", "INNER_HORIZONTAL", "INNER_VERTICAL", "LEFT", "OUTER", "RIGHT", "TOP"],
            "type": "string"
          },
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `tableBorderProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the table border solid fill color, set\n`fields` to `\"tableBorderFill.solidFill.color\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": { "description": "The object ID of the table.", "type": "string" },
          "tableBorderProperties": { "$ref": "#/components/schemas/TableBorderProperties" },
          "tableRange": { "$ref": "#/components/schemas/TableRange" }
        },
        "type": "object"
      },
      "UpdateTableCellPropertiesRequest": {
        "description": "Update the properties of a TableCell.",
        "properties": {
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `tableCellProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the table cell background solid fill color, set\n`fields` to `\"tableCellBackgroundFill.solidFill.color\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": { "description": "The object ID of the table.", "type": "string" },
          "tableCellProperties": { "$ref": "#/components/schemas/TableCellProperties" },
          "tableRange": { "$ref": "#/components/schemas/TableRange" }
        },
        "type": "object"
      },
      "UpdateTableColumnPropertiesRequest": {
        "description": "Updates the properties of a Table column.",
        "properties": {
          "columnIndices": {
            "description": "The list of zero-based indices specifying which columns to update. If no\nindices are provided, all columns in the table will be updated.",
            "items": { "format": "int32", "type": "integer" },
            "type": "array"
          },
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `tableColumnProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the column width, set `fields` to `\"column_width\"`.\n\nIf '\"column_width\"' is included in the field mask but the property is left\nunset, the column width will default to 406,400 EMU (32 points).",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": { "description": "The object ID of the table.", "type": "string" },
          "tableColumnProperties": { "$ref": "#/components/schemas/TableColumnProperties" }
        },
        "type": "object"
      },
      "UpdateTableRowPropertiesRequest": {
        "description": "Updates the properties of a Table row.",
        "properties": {
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `tableRowProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the minimum row height, set `fields` to\n`\"min_row_height\"`.\n\nIf '\"min_row_height\"' is included in the field mask but the property is\nleft unset, the minimum row height will default to 0.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": { "description": "The object ID of the table.", "type": "string" },
          "rowIndices": {
            "description": "The list of zero-based indices specifying which rows to update. If no\nindices are provided, all rows in the table will be updated.",
            "items": { "format": "int32", "type": "integer" },
            "type": "array"
          },
          "tableRowProperties": { "$ref": "#/components/schemas/TableRowProperties" }
        },
        "type": "object"
      },
      "UpdateTextStyleRequest": {
        "description": "Update the styling of text in a Shape or\nTable.",
        "properties": {
          "cellLocation": { "$ref": "#/components/schemas/TableCellLocation" },
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `style` is implied and\nshould not be specified. A single `\"*\"` can be used as short-hand for\nlisting every field.\n\nFor example, to update the text style to bold, set `fields` to `\"bold\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": {
            "description": "The object ID of the shape or table with the text to be styled.",
            "type": "string"
          },
          "style": { "$ref": "#/components/schemas/TextStyle" },
          "textRange": { "$ref": "#/components/schemas/Range" }
        },
        "type": "object"
      },
      "UpdateVideoPropertiesRequest": {
        "description": "Update the properties of a Video.",
        "properties": {
          "fields": {
            "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `videoProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the video outline color, set `fields` to\n`\"outline.outlineFill.solidFill.color\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "objectId": { "description": "The object ID of the video the updates are applied to.", "type": "string" },
          "videoProperties": { "$ref": "#/components/schemas/VideoProperties" }
        },
        "type": "object"
      },
      "Video": {
        "description": "A PageElement kind representing a\nvideo.",
        "properties": {
          "id": { "description": "The video source's unique identifier for this video.", "type": "string" },
          "source": {
            "description": "The video source.",
            "enum": ["SOURCE_UNSPECIFIED", "YOUTUBE", "DRIVE"],
            "type": "string"
          },
          "url": {
            "description": "An URL to a video. The URL is valid as long as the source video exists and\nsharing settings do not change.",
            "type": "string"
          },
          "videoProperties": { "$ref": "#/components/schemas/VideoProperties" }
        },
        "type": "object"
      },
      "VideoProperties": {
        "description": "The properties of the Video.",
        "properties": {
          "autoPlay": {
            "description": "Whether to enable video autoplay when the page is displayed in present\nmode. Defaults to false.",
            "type": "boolean"
          },
          "end": {
            "description": "The time at which to end playback, measured in seconds from the beginning\nof the video.\nIf set, the end time should be after the start time.\nIf not set or if you set this to a value that exceeds the video's length,\nthe video will be played until its end.",
            "format": "uint32",
            "type": "integer"
          },
          "mute": {
            "description": "Whether to mute the audio during video playback. Defaults to false.",
            "type": "boolean"
          },
          "outline": { "$ref": "#/components/schemas/Outline" },
          "start": {
            "description": "The time at which to start playback, measured in seconds from the beginning\nof the video.\nIf set, the start time should be before the end time.\nIf you set this to a value that exceeds the video's length in seconds, the\nvideo will be played from the last second.\nIf not set, the video will be played from the beginning.",
            "format": "uint32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WeightedFontFamily": {
        "description": "Represents a font family and weight used to style a TextRun.",
        "properties": {
          "fontFamily": {
            "description": "The font family of the text.\n\nThe font family can be any font from the Font menu in Slides or from\n[Google Fonts] (https://fonts.google.com/). If the font name is\nunrecognized, the text is rendered in `Arial`.",
            "type": "string"
          },
          "weight": {
            "description": "The rendered weight of the text. This field can have any value that is a\nmultiple of `100` between `100` and `900`, inclusive. This range\ncorresponds to the numerical values described in the CSS 2.1\nSpecification,\n[section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness),\nwith non-numerical values disallowed. Weights greater than or equal to\n`700` are considered bold, and weights less than `700`are not bold. The\ndefault value is `400` (\"normal\").",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WordArt": {
        "description": "A PageElement kind representing\nword art.",
        "properties": { "renderedText": { "description": "The text rendered as word art.", "type": "string" } },
        "type": "object"
      },
      "WriteControl": {
        "description": "Provides control over how write requests are executed.",
        "properties": {
          "requiredRevisionId": {
            "description": "The revision ID of the presentation required for the write request. If\nspecified and the `required_revision_id` doesn't exactly match the\npresentation's current `revision_id`, the request will not be processed and\nwill return a 400 bad request error.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  }
}
