{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS DataSync</fullname> <p>AWS DataSync is a managed data transfer service that makes it simpler for you to automate moving data between on-premises storage and Amazon Simple Storage Service (Amazon S3) or Amazon Elastic File System (Amazon EFS). </p> <p>This API interface reference for AWS DataSync contains documentation for a programming interface that you can use to manage AWS DataSync.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS DataSync",
    "version": "2018-11-09",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/datasync-2018-11-09.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "datasync"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/datasync/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=FmrsService.CancelTaskExecution": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Cancels execution of a task. </p> <p>When you cancel a task execution, the transfer of some files are abruptly interrupted. The contents of files that are transferred to the destination might be incomplete or inconsistent with the source files. However, if you start a new task execution on the same task and you allow the task execution to complete, file content on the destination is complete and consistent. This applies to other unexpected failures that interrupt a task execution. In all of these cases, AWS DataSync successfully complete the transfer when you start the next task execution.</p>",
        "operationId": "CancelTaskExecution",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.CancelTaskExecution"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CancelTaskExecutionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CancelTaskExecutionResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.CreateAgent": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Activates an AWS DataSync agent that you have deployed on your host. The activation process associates your agent with your account. In the activation process, you specify information such as the AWS Region that you want to activate the agent in. You activate the agent in the AWS Region where your target locations (in Amazon S3 or Amazon EFS) reside. Your tasks are created in this AWS Region.</p> <p>You can activate the agent in a VPC (Virtual private Cloud) or provide the agent access to a VPC endpoint so you can run tasks without going over the public Internet.</p> <p>You can use an agent for more than one location. If a task uses multiple agents, all of them need to have status AVAILABLE for the task to run. If you use multiple agents for a source location, the status of all the agents must be AVAILABLE for the task to run. </p> <p>Agents are automatically updated by AWS on a regular basis, using a mechanism that ensures minimal interruption to your tasks.</p> <p/>",
        "operationId": "CreateAgent",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.CreateAgent"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateAgentRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateAgentResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.CreateLocationEfs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates an endpoint for an Amazon EFS file system.",
        "operationId": "CreateLocationEfs",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.CreateLocationEfs"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateLocationEfsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateLocationEfsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.CreateLocationNfs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates an endpoint for a Network File System (NFS) file system.",
        "operationId": "CreateLocationNfs",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.CreateLocationNfs"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateLocationNfsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateLocationNfsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.CreateLocationS3": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates an endpoint for an Amazon S3 bucket.</p> <p>For AWS DataSync to access a destination S3 bucket, it needs an AWS Identity and Access Management (IAM) role that has the required permissions. You can set up the required permissions by creating an IAM policy that grants the required permissions and attaching the policy to the role. An example of such a policy is shown in the examples section.</p> <p>For more information, see Configuring Amazon S3 Location Settings in the <i>AWS DataSync User Guide.</i> </p>",
        "operationId": "CreateLocationS3",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.CreateLocationS3"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateLocationS3Request" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateLocationS3Response" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.CreateLocationSmb": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates an endpoint for a Server Message Block (SMB) file system.",
        "operationId": "CreateLocationSmb",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.CreateLocationSmb"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateLocationSmbRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateLocationSmbResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.CreateTask": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a task. A task is a set of two locations (source and destination) and a set of Options that you use to control the behavior of a task. If you don't specify Options when you create a task, AWS DataSync populates them with service defaults.</p> <p>When you create a task, it first enters the CREATING state. During CREATING AWS DataSync attempts to mount the on-premises Network File System (NFS) location. The task transitions to the AVAILABLE state without waiting for the AWS location to become mounted. If required, AWS DataSync mounts the AWS location before each task execution.</p> <p>If an agent that is associated with a source (NFS) location goes offline, the task transitions to the UNAVAILABLE status. If the status of the task remains in the CREATING status for more than a few minutes, it means that your agent might be having trouble mounting the source NFS file system. Check the task's ErrorCode and ErrorDetail. Mount issues are often caused by either a misconfigured firewall or a mistyped NFS server host name.</p>",
        "operationId": "CreateTask",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.CreateTask"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTaskRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTaskResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DeleteAgent": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes an agent. To specify which agent to delete, use the Amazon Resource Name (ARN) of the agent in your request. The operation disassociates the agent from your AWS account. However, it doesn't delete the agent virtual machine (VM) from your on-premises environment.",
        "operationId": "DeleteAgent",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DeleteAgent"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteAgentRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteAgentResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DeleteLocation": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the configuration of a location used by AWS DataSync. ",
        "operationId": "DeleteLocation",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DeleteLocation"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteLocationRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteLocationResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DeleteTask": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a task.",
        "operationId": "DeleteTask",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DeleteTask"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTaskRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteTaskResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DescribeAgent": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns metadata such as the name, the network interfaces, and the status (that is, whether the agent is running or not) for an agent. To specify which agent to describe, use the Amazon Resource Name (ARN) of the agent in your request. ",
        "operationId": "DescribeAgent",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DescribeAgent"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeAgentRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeAgentResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DescribeLocationEfs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns metadata, such as the path information about an Amazon EFS location.",
        "operationId": "DescribeLocationEfs",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DescribeLocationEfs"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLocationEfsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLocationEfsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DescribeLocationNfs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns metadata, such as the path information, about a NFS location.",
        "operationId": "DescribeLocationNfs",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DescribeLocationNfs"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLocationNfsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLocationNfsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DescribeLocationS3": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns metadata, such as bucket name, about an Amazon S3 bucket location.",
        "operationId": "DescribeLocationS3",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DescribeLocationS3"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLocationS3Request" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLocationS3Response" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DescribeLocationSmb": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns metadata, such as the path and user information about a SMB location.",
        "operationId": "DescribeLocationSmb",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DescribeLocationSmb"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLocationSmbRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeLocationSmbResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DescribeTask": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns metadata about a task.",
        "operationId": "DescribeTask",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DescribeTask"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeTaskRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeTaskResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.DescribeTaskExecution": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns detailed metadata about a task that is being executed.",
        "operationId": "DescribeTaskExecution",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.DescribeTaskExecution"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeTaskExecutionRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeTaskExecutionResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.ListAgents": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns a list of agents owned by an AWS account in the AWS Region specified in the request. The returned list is ordered by agent Amazon Resource Name (ARN).</p> <p>By default, this operation returns a maximum of 100 agents. This operation supports pagination that enables you to optionally reduce the number of agents returned in a response.</p> <p>If you have more agents than are returned in a response (that is, the response returns only a truncated list of your agents), the response contains a marker that you can specify in your next request to fetch the next page of agents.</p>",
        "operationId": "ListAgents",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.ListAgents"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListAgentsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListAgentsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.ListLocations": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Returns a lists of source and destination locations.</p> <p>If you have more locations than are returned in a response (that is, the response returns only a truncated list of your agents), the response contains a token that you can specify in your next request to fetch the next page of locations.</p>",
        "operationId": "ListLocations",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.ListLocations"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListLocationsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListLocationsResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.ListTagsForResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns all the tags associated with a specified resources. ",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.ListTagsForResource"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.ListTaskExecutions": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of executed tasks.",
        "operationId": "ListTaskExecutions",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.ListTaskExecutions"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTaskExecutionsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTaskExecutionsResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.ListTasks": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a list of all the tasks.",
        "operationId": "ListTasks",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.ListTasks"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTasksRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListTasksResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.StartTaskExecution": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Starts a specific invocation of a task. A <code>TaskExecution</code> value represents an individual run of a task. Each task can have at most one <code>TaskExecution</code> at a time.</p> <p> <code>TaskExecution</code> has the following transition phases: INITIALIZING | PREPARING | TRANSFERRING | VERIFYING | SUCCESS/FAILURE. </p> <p>For detailed information, see the Task Execution section in the Components and Terminology topic in the <i>AWS DataSync User Guide</i>.</p>",
        "operationId": "StartTaskExecution",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.StartTaskExecution"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartTaskExecutionRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartTaskExecutionResponse" } }
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Applies a key-value pair to an AWS resource.",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes a tag from an AWS resource.",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.UpdateAgent": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the name of an agent.",
        "operationId": "UpdateAgent",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.UpdateAgent"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAgentRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAgentResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=FmrsService.UpdateTask": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the metadata associated with a task.",
        "operationId": "UpdateTask",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["FmrsService.UpdateTask"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTaskRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTaskResponse" } } }
          },
          "480": {
            "description": "InvalidRequestException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidRequestException" } } }
          },
          "481": {
            "description": "InternalException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalException" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The DataSync multi-region endpoint",
      "url": "http://datasync.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The DataSync multi-region endpoint",
      "url": "https://datasync.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The DataSync endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://datasync.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The DataSync endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://datasync.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "ActivationKey": { "maxLength": 29, "pattern": "[A-Z0-9]{5}(-[A-Z0-9]{5}){4}", "type": "string" },
      "AgentArn": {
        "maxLength": 128,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
        "type": "string"
      },
      "AgentArnList": {
        "items": { "$ref": "#/components/schemas/AgentArn" },
        "maxItems": 64,
        "minItems": 1,
        "type": "array"
      },
      "AgentList": { "items": { "$ref": "#/components/schemas/AgentListEntry" }, "type": "array" },
      "AgentListEntry": {
        "description": "Represents a single entry in a list of agents. <code>AgentListEntry</code> returns an array that contains a list of agents when the <a>ListAgents</a> operation is called.",
        "properties": {
          "AgentArn": { "$ref": "#/components/schemas/AgentArn" },
          "Name": { "$ref": "#/components/schemas/TagValue" },
          "Status": { "$ref": "#/components/schemas/AgentStatus" }
        },
        "type": "object"
      },
      "AgentStatus": { "enum": ["ONLINE", "OFFLINE"], "type": "string" },
      "Atime": { "enum": ["NONE", "BEST_EFFORT"], "type": "string" },
      "BytesPerSecond": { "minimum": -1, "type": "integer" },
      "CancelTaskExecutionRequest": {
        "description": "CancelTaskExecutionRequest",
        "properties": { "TaskExecutionArn": { "$ref": "#/components/schemas/TaskExecutionArn" } },
        "required": ["TaskExecutionArn"],
        "type": "object"
      },
      "CancelTaskExecutionResponse": { "properties": {}, "type": "object" },
      "CreateAgentRequest": {
        "description": "CreateAgentRequest",
        "properties": {
          "ActivationKey": { "$ref": "#/components/schemas/ActivationKey" },
          "AgentName": { "$ref": "#/components/schemas/TagValue" },
          "SecurityGroupArns": { "$ref": "#/components/schemas/PLSecurityGroupArnList" },
          "SubnetArns": { "$ref": "#/components/schemas/PLSubnetArnList" },
          "Tags": { "$ref": "#/components/schemas/TagList" },
          "VpcEndpointId": { "$ref": "#/components/schemas/VpcEndpointId" }
        },
        "required": ["ActivationKey"],
        "type": "object"
      },
      "CreateAgentResponse": {
        "description": "CreateAgentResponse",
        "properties": { "AgentArn": { "$ref": "#/components/schemas/AgentArn" } },
        "type": "object"
      },
      "CreateLocationEfsRequest": {
        "description": "CreateLocationEfsRequest",
        "properties": {
          "Ec2Config": { "$ref": "#/components/schemas/Ec2Config" },
          "EfsFilesystemArn": { "$ref": "#/components/schemas/EfsFilesystemArn" },
          "Subdirectory": { "$ref": "#/components/schemas/Subdirectory" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["EfsFilesystemArn", "Ec2Config"],
        "type": "object"
      },
      "CreateLocationEfsResponse": {
        "description": "CreateLocationEfs",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "type": "object"
      },
      "CreateLocationNfsRequest": {
        "description": "CreateLocationNfsRequest",
        "properties": {
          "MountOptions": { "$ref": "#/components/schemas/NfsMountOptions" },
          "OnPremConfig": { "$ref": "#/components/schemas/OnPremConfig" },
          "ServerHostname": { "$ref": "#/components/schemas/ServerHostname" },
          "Subdirectory": { "$ref": "#/components/schemas/NonEmptySubdirectory" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["Subdirectory", "ServerHostname", "OnPremConfig"],
        "type": "object"
      },
      "CreateLocationNfsResponse": {
        "description": "CreateLocationNfsResponse",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "type": "object"
      },
      "CreateLocationS3Request": {
        "description": "CreateLocationS3Request",
        "properties": {
          "S3BucketArn": { "$ref": "#/components/schemas/S3BucketArn" },
          "S3Config": { "$ref": "#/components/schemas/S3Config" },
          "Subdirectory": { "$ref": "#/components/schemas/Subdirectory" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["S3BucketArn", "S3Config"],
        "type": "object"
      },
      "CreateLocationS3Response": {
        "description": "CreateLocationS3Response",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "type": "object"
      },
      "CreateLocationSmbRequest": {
        "description": "CreateLocationSmbRequest",
        "properties": {
          "AgentArns": { "$ref": "#/components/schemas/AgentArnList" },
          "Domain": { "$ref": "#/components/schemas/SmbDomain" },
          "MountOptions": { "$ref": "#/components/schemas/SmbMountOptions" },
          "Password": { "$ref": "#/components/schemas/SmbPassword" },
          "ServerHostname": { "$ref": "#/components/schemas/ServerHostname" },
          "Subdirectory": { "$ref": "#/components/schemas/NonEmptySubdirectory" },
          "Tags": { "$ref": "#/components/schemas/TagList" },
          "User": { "$ref": "#/components/schemas/SmbUser" }
        },
        "required": ["Subdirectory", "ServerHostname", "User", "Password", "AgentArns"],
        "type": "object"
      },
      "CreateLocationSmbResponse": {
        "description": "CreateLocationSmbResponse",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "type": "object"
      },
      "CreateTaskRequest": {
        "description": "CreateTaskRequest",
        "properties": {
          "CloudWatchLogGroupArn": { "$ref": "#/components/schemas/LogGroupArn" },
          "DestinationLocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "Excludes": { "$ref": "#/components/schemas/FilterList" },
          "Name": { "$ref": "#/components/schemas/TagValue" },
          "Options": { "$ref": "#/components/schemas/Options" },
          "SourceLocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["SourceLocationArn", "DestinationLocationArn"],
        "type": "object"
      },
      "CreateTaskResponse": {
        "description": "CreateTaskResponse",
        "properties": { "TaskArn": { "$ref": "#/components/schemas/TaskArn" } },
        "type": "object"
      },
      "DeleteAgentRequest": {
        "description": "DeleteAgentRequest",
        "properties": { "AgentArn": { "$ref": "#/components/schemas/AgentArn" } },
        "required": ["AgentArn"],
        "type": "object"
      },
      "DeleteAgentResponse": { "properties": {}, "type": "object" },
      "DeleteLocationRequest": {
        "description": "DeleteLocation",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "required": ["LocationArn"],
        "type": "object"
      },
      "DeleteLocationResponse": { "properties": {}, "type": "object" },
      "DeleteTaskRequest": {
        "description": "DeleteTask",
        "properties": { "TaskArn": { "$ref": "#/components/schemas/TaskArn" } },
        "required": ["TaskArn"],
        "type": "object"
      },
      "DeleteTaskResponse": { "properties": {}, "type": "object" },
      "DescribeAgentRequest": {
        "description": "DescribeAgent",
        "properties": { "AgentArn": { "$ref": "#/components/schemas/AgentArn" } },
        "required": ["AgentArn"],
        "type": "object"
      },
      "DescribeAgentResponse": {
        "description": "DescribeAgentResponse",
        "properties": {
          "AgentArn": { "$ref": "#/components/schemas/AgentArn" },
          "CreationTime": { "$ref": "#/components/schemas/Time" },
          "EndpointType": { "$ref": "#/components/schemas/EndpointType" },
          "LastConnectionTime": { "$ref": "#/components/schemas/Time" },
          "Name": { "$ref": "#/components/schemas/TagValue" },
          "PrivateLinkConfig": { "$ref": "#/components/schemas/PrivateLinkConfig" },
          "Status": { "$ref": "#/components/schemas/AgentStatus" }
        },
        "type": "object"
      },
      "DescribeLocationEfsRequest": {
        "description": "DescribeLocationEfsRequest",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "required": ["LocationArn"],
        "type": "object"
      },
      "DescribeLocationEfsResponse": {
        "description": "DescribeLocationEfsResponse",
        "properties": {
          "CreationTime": { "$ref": "#/components/schemas/Time" },
          "Ec2Config": { "$ref": "#/components/schemas/Ec2Config" },
          "LocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "LocationUri": { "$ref": "#/components/schemas/LocationUri" }
        },
        "type": "object"
      },
      "DescribeLocationNfsRequest": {
        "description": "DescribeLocationNfsRequest",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "required": ["LocationArn"],
        "type": "object"
      },
      "DescribeLocationNfsResponse": {
        "description": "DescribeLocationNfsResponse",
        "properties": {
          "CreationTime": { "$ref": "#/components/schemas/Time" },
          "LocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "LocationUri": { "$ref": "#/components/schemas/LocationUri" },
          "MountOptions": { "$ref": "#/components/schemas/NfsMountOptions" },
          "OnPremConfig": { "$ref": "#/components/schemas/OnPremConfig" }
        },
        "type": "object"
      },
      "DescribeLocationS3Request": {
        "description": "DescribeLocationS3Request",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "required": ["LocationArn"],
        "type": "object"
      },
      "DescribeLocationS3Response": {
        "description": "DescribeLocationS3Response",
        "properties": {
          "CreationTime": { "$ref": "#/components/schemas/Time" },
          "LocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "LocationUri": { "$ref": "#/components/schemas/LocationUri" },
          "S3Config": { "$ref": "#/components/schemas/S3Config" }
        },
        "type": "object"
      },
      "DescribeLocationSmbRequest": {
        "description": "DescribeLocationSmbRequest",
        "properties": { "LocationArn": { "$ref": "#/components/schemas/LocationArn" } },
        "required": ["LocationArn"],
        "type": "object"
      },
      "DescribeLocationSmbResponse": {
        "description": "DescribeLocationSmbResponse",
        "properties": {
          "AgentArns": { "$ref": "#/components/schemas/AgentArnList" },
          "CreationTime": { "$ref": "#/components/schemas/Time" },
          "Domain": { "$ref": "#/components/schemas/SmbDomain" },
          "LocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "LocationUri": { "$ref": "#/components/schemas/LocationUri" },
          "MountOptions": { "$ref": "#/components/schemas/SmbMountOptions" },
          "User": { "$ref": "#/components/schemas/SmbUser" }
        },
        "type": "object"
      },
      "DescribeTaskExecutionRequest": {
        "description": "DescribeTaskExecutionRequest",
        "properties": { "TaskExecutionArn": { "$ref": "#/components/schemas/TaskExecutionArn" } },
        "required": ["TaskExecutionArn"],
        "type": "object"
      },
      "DescribeTaskExecutionResponse": {
        "description": "DescribeTaskExecutionResponse",
        "properties": {
          "BytesTransferred": { "$ref": "#/components/schemas/long" },
          "BytesWritten": { "$ref": "#/components/schemas/long" },
          "EstimatedBytesToTransfer": { "$ref": "#/components/schemas/long" },
          "EstimatedFilesToTransfer": { "$ref": "#/components/schemas/long" },
          "Excludes": { "$ref": "#/components/schemas/FilterList" },
          "FilesTransferred": { "$ref": "#/components/schemas/long" },
          "Includes": { "$ref": "#/components/schemas/FilterList" },
          "Options": { "$ref": "#/components/schemas/Options" },
          "Result": { "$ref": "#/components/schemas/TaskExecutionResultDetail" },
          "StartTime": { "$ref": "#/components/schemas/Time" },
          "Status": { "$ref": "#/components/schemas/TaskExecutionStatus" },
          "TaskExecutionArn": { "$ref": "#/components/schemas/TaskExecutionArn" }
        },
        "type": "object"
      },
      "DescribeTaskRequest": {
        "description": "DescribeTaskRequest",
        "properties": { "TaskArn": { "$ref": "#/components/schemas/TaskArn" } },
        "required": ["TaskArn"],
        "type": "object"
      },
      "DescribeTaskResponse": {
        "description": "DescribeTaskResponse",
        "properties": {
          "CloudWatchLogGroupArn": { "$ref": "#/components/schemas/LogGroupArn" },
          "CreationTime": { "$ref": "#/components/schemas/Time" },
          "CurrentTaskExecutionArn": { "$ref": "#/components/schemas/TaskExecutionArn" },
          "DestinationLocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "DestinationNetworkInterfaceArns": { "$ref": "#/components/schemas/DestinationNetworkInterfaceArns" },
          "ErrorCode": { "$ref": "#/components/schemas/string" },
          "ErrorDetail": { "$ref": "#/components/schemas/string" },
          "Excludes": { "$ref": "#/components/schemas/FilterList" },
          "Name": { "$ref": "#/components/schemas/TagValue" },
          "Options": { "$ref": "#/components/schemas/Options" },
          "SourceLocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "SourceNetworkInterfaceArns": { "$ref": "#/components/schemas/SourceNetworkInterfaceArns" },
          "Status": { "$ref": "#/components/schemas/TaskStatus" },
          "TaskArn": { "$ref": "#/components/schemas/TaskArn" }
        },
        "type": "object"
      },
      "DestinationNetworkInterfaceArns": {
        "items": { "$ref": "#/components/schemas/NetworkInterfaceArn" },
        "type": "array"
      },
      "Duration": { "minimum": 0, "type": "integer" },
      "Ec2Config": {
        "description": "The subnet and the security group that DataSync uses to access target EFS file system. The subnet must have at least one mount target for that file system. The security group that you provide needs to be able to communicate with the security group on the mount target in the subnet specified. ",
        "properties": {
          "SecurityGroupArns": { "$ref": "#/components/schemas/Ec2SecurityGroupArnList" },
          "SubnetArn": { "$ref": "#/components/schemas/Ec2SubnetArn" }
        },
        "required": ["SubnetArn", "SecurityGroupArns"],
        "type": "object"
      },
      "Ec2SecurityGroupArn": {
        "maxLength": 128,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):ec2:[a-z\\-0-9]*:[0-9]{12}:security-group/.*$",
        "type": "string"
      },
      "Ec2SecurityGroupArnList": {
        "items": { "$ref": "#/components/schemas/Ec2SecurityGroupArn" },
        "maxItems": 5,
        "minItems": 1,
        "type": "array"
      },
      "Ec2SubnetArn": {
        "maxLength": 128,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):ec2:[a-z\\-0-9]*:[0-9]{12}:subnet/.*$",
        "type": "string"
      },
      "EfsFilesystemArn": {
        "maxLength": 128,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):elasticfilesystem:[a-z\\-0-9]*:[0-9]{12}:file-system/fs-.*$",
        "type": "string"
      },
      "Endpoint": {
        "maxLength": 15,
        "minLength": 7,
        "pattern": "\\A(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\z",
        "type": "string"
      },
      "EndpointType": { "enum": ["PUBLIC", "PRIVATE_LINK"], "type": "string" },
      "FilterList": {
        "items": { "$ref": "#/components/schemas/FilterRule" },
        "maxItems": 1,
        "minItems": 0,
        "type": "array"
      },
      "FilterRule": {
        "description": "Specifies which files, folders and objects to include or exclude when transferring files from source to destination.",
        "properties": {
          "FilterType": { "$ref": "#/components/schemas/FilterType" },
          "Value": { "$ref": "#/components/schemas/FilterValue" }
        },
        "type": "object"
      },
      "FilterType": { "enum": ["SIMPLE_PATTERN"], "maxLength": 128, "pattern": "^[A-Z0-9_]+$", "type": "string" },
      "FilterValue": { "maxLength": 409600, "pattern": "^[^\\x00]+$", "type": "string" },
      "Gid": { "enum": ["NONE", "INT_VALUE", "NAME", "BOTH"], "type": "string" },
      "IamRoleArn": {
        "maxLength": 2048,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):iam::[0-9]{12}:role/.*$",
        "type": "string"
      },
      "InternalException": {},
      "InvalidRequestException": {},
      "ListAgentsRequest": {
        "description": "ListAgentsRequest",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/MaxResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListAgentsResponse": {
        "description": "ListAgentsResponse",
        "properties": {
          "Agents": { "$ref": "#/components/schemas/AgentList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListLocationsRequest": {
        "description": "ListLocationsRequest",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/MaxResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListLocationsResponse": {
        "description": "ListLocationsResponse",
        "properties": {
          "Locations": { "$ref": "#/components/schemas/LocationList" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListTagsForResourceRequest": {
        "description": "ListTagsForResourceRequest",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/MaxResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "ResourceArn": { "$ref": "#/components/schemas/TaggableResourceArn" }
        },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "ListTagsForResourceResponse": {
        "description": "ListTagsForResourceResponse",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "type": "object"
      },
      "ListTaskExecutionsRequest": {
        "description": "ListTaskExecutions",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/MaxResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "TaskArn": { "$ref": "#/components/schemas/TaskArn" }
        },
        "type": "object"
      },
      "ListTaskExecutionsResponse": {
        "description": "ListTaskExecutionsResponse",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "TaskExecutions": { "$ref": "#/components/schemas/TaskExecutionList" }
        },
        "type": "object"
      },
      "ListTasksRequest": {
        "description": "ListTasksRequest",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/MaxResults" },
          "NextToken": { "$ref": "#/components/schemas/NextToken" }
        },
        "type": "object"
      },
      "ListTasksResponse": {
        "description": "ListTasksResponse",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/NextToken" },
          "Tasks": { "$ref": "#/components/schemas/TaskList" }
        },
        "type": "object"
      },
      "LocationArn": {
        "maxLength": 128,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
        "type": "string"
      },
      "LocationList": { "items": { "$ref": "#/components/schemas/LocationListEntry" }, "type": "array" },
      "LocationListEntry": {
        "description": "Represents a single entry in a list of locations. <code>LocationListEntry</code> returns an array that contains a list of locations when the <a>ListLocations</a> operation is called.",
        "properties": {
          "LocationArn": { "$ref": "#/components/schemas/LocationArn" },
          "LocationUri": { "$ref": "#/components/schemas/LocationUri" }
        },
        "type": "object"
      },
      "LocationUri": { "maxLength": 4355, "pattern": "^(efs|nfs|s3|smb)://[a-zA-Z0-9.\\-]+$", "type": "string" },
      "LogGroupArn": {
        "maxLength": 562,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):logs:[a-z\\-0-9]*:[0-9]{12}:log-group:([^:\\*]*)$",
        "type": "string"
      },
      "MaxResults": { "maximum": 100, "minimum": 0, "type": "integer" },
      "Mtime": { "enum": ["NONE", "PRESERVE"], "type": "string" },
      "NetworkInterfaceArn": {
        "maxLength": 128,
        "pattern": "^arn:aws[\\-a-z]{0,}:ec2:[a-z\\-0-9]*:[0-9]{12}:network-interface/eni-[0-9a-f]+$",
        "type": "string"
      },
      "NextToken": { "maxLength": 65535, "pattern": "[a-zA-Z0-9=_-]+", "type": "string" },
      "NfsMountOptions": {
        "description": "Represents the mount options that are available for DataSync to access an NFS location.",
        "properties": { "Version": { "$ref": "#/components/schemas/NfsVersion" } },
        "type": "object"
      },
      "NfsVersion": { "enum": ["AUTOMATIC", "NFS3", "NFS4_0", "NFS4_1"], "type": "string" },
      "NonEmptySubdirectory": { "maxLength": 4096, "pattern": "^[a-zA-Z0-9_\\-\\./]+$", "type": "string" },
      "OnPremConfig": {
        "description": "A list of Amazon Resource Names (ARNs) of agents to use for a Network File System (NFS) location.",
        "properties": { "AgentArns": { "$ref": "#/components/schemas/AgentArnList" } },
        "required": ["AgentArns"],
        "type": "object"
      },
      "Options": {
        "description": "<p>Represents the options that are available to control the behavior of a <a>StartTaskExecution</a> operation. Behavior includes preserving metadata such as user ID (UID), group ID (GID), and file permissions, and also overwriting files in the destination, data integrity verification, and so on.</p> <p>A task has a set of default options associated with it. If you don't specify an option in <a>StartTaskExecution</a>, the default value is used. You can override the defaults options on each task execution by specifying an overriding <code>Options</code> value to <a>StartTaskExecution</a>.</p>",
        "properties": {
          "Atime": { "$ref": "#/components/schemas/Atime" },
          "BytesPerSecond": { "$ref": "#/components/schemas/BytesPerSecond" },
          "Gid": { "$ref": "#/components/schemas/Gid" },
          "Mtime": { "$ref": "#/components/schemas/Mtime" },
          "PosixPermissions": { "$ref": "#/components/schemas/PosixPermissions" },
          "PreserveDeletedFiles": { "$ref": "#/components/schemas/PreserveDeletedFiles" },
          "PreserveDevices": { "$ref": "#/components/schemas/PreserveDevices" },
          "Uid": { "$ref": "#/components/schemas/Uid" },
          "VerifyMode": { "$ref": "#/components/schemas/VerifyMode" }
        },
        "type": "object"
      },
      "PLSecurityGroupArnList": {
        "items": { "$ref": "#/components/schemas/Ec2SecurityGroupArn" },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "PLSubnetArnList": {
        "items": { "$ref": "#/components/schemas/Ec2SubnetArn" },
        "maxItems": 1,
        "minItems": 1,
        "type": "array"
      },
      "PhaseStatus": { "enum": ["PENDING", "SUCCESS", "ERROR"], "type": "string" },
      "PosixPermissions": { "enum": ["NONE", "BEST_EFFORT", "PRESERVE"], "type": "string" },
      "PreserveDeletedFiles": { "enum": ["PRESERVE", "REMOVE"], "type": "string" },
      "PreserveDevices": { "enum": ["NONE", "PRESERVE"], "type": "string" },
      "PrivateLinkConfig": {
        "description": "The VPC endpoint, subnet and security group that an agent uses to access IP addresses in a VPC (Virtual Private Cloud).",
        "properties": {
          "PrivateLinkEndpoint": { "$ref": "#/components/schemas/Endpoint" },
          "SecurityGroupArns": { "$ref": "#/components/schemas/PLSecurityGroupArnList" },
          "SubnetArns": { "$ref": "#/components/schemas/PLSubnetArnList" },
          "VpcEndpointId": { "$ref": "#/components/schemas/VpcEndpointId" }
        },
        "type": "object"
      },
      "S3BucketArn": {
        "maxLength": 76,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):s3:::([^/]*)$",
        "type": "string"
      },
      "S3Config": {
        "description": "<p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that is used to access an Amazon S3 bucket.</p> <p>For detailed information about using such a role, see Creating a Location for Amazon S3 in the <i>AWS DataSync User Guide</i>.</p>",
        "properties": { "BucketAccessRoleArn": { "$ref": "#/components/schemas/IamRoleArn" } },
        "required": ["BucketAccessRoleArn"],
        "type": "object"
      },
      "ServerHostname": {
        "maxLength": 255,
        "pattern": "^(([a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9\\-]*[A-Za-z0-9])$",
        "type": "string"
      },
      "SmbDomain": {
        "maxLength": 253,
        "pattern": "^([A-Za-z0-9]+[A-Za-z0-9-.]*)*[A-Za-z0-9-]*[A-Za-z0-9]$",
        "type": "string"
      },
      "SmbMountOptions": {
        "description": "Represents the mount options that are available for DataSync to access an SMB location.",
        "properties": { "Version": { "$ref": "#/components/schemas/SmbVersion" } },
        "type": "object"
      },
      "SmbPassword": { "maxLength": 104, "pattern": "^.{0,104}$", "type": "string" },
      "SmbUser": { "maxLength": 104, "pattern": "^[^\\\\x5B\\\\x5D\\\\/:;|=,+*?]{1,104}$", "type": "string" },
      "SmbVersion": { "enum": ["AUTOMATIC", "SMB2", "SMB3"], "type": "string" },
      "SourceNetworkInterfaceArns": {
        "items": { "$ref": "#/components/schemas/NetworkInterfaceArn" },
        "type": "array"
      },
      "StartTaskExecutionRequest": {
        "description": "StartTaskExecutionRequest",
        "properties": {
          "Includes": { "$ref": "#/components/schemas/FilterList" },
          "OverrideOptions": { "$ref": "#/components/schemas/Options" },
          "TaskArn": { "$ref": "#/components/schemas/TaskArn" }
        },
        "required": ["TaskArn"],
        "type": "object"
      },
      "StartTaskExecutionResponse": {
        "description": "StartTaskExecutionResponse",
        "properties": { "TaskExecutionArn": { "$ref": "#/components/schemas/TaskExecutionArn" } },
        "type": "object"
      },
      "Subdirectory": { "maxLength": 4096, "pattern": "^[a-zA-Z0-9_\\-\\./]*$", "type": "string" },
      "TagKey": { "maxLength": 256, "minLength": 1, "pattern": "^[a-zA-Z0-9\\s+=._:/-]+$", "type": "string" },
      "TagKeyList": {
        "items": { "$ref": "#/components/schemas/TagKey" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "TagList": {
        "items": { "$ref": "#/components/schemas/TagListEntry" },
        "maxItems": 55,
        "minItems": 0,
        "type": "array"
      },
      "TagListEntry": {
        "description": "Represents a single entry in a list of AWS resource tags. <code>TagListEntry</code> returns an array that contains a list of tasks when the <a>ListTagsForResource</a> operation is called.",
        "properties": {
          "Key": { "$ref": "#/components/schemas/TagKey" },
          "Value": { "$ref": "#/components/schemas/TagValue" }
        },
        "required": ["Key"],
        "type": "object"
      },
      "TagResourceRequest": {
        "description": "TagResourceRequest",
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/TaggableResourceArn" },
          "Tags": { "$ref": "#/components/schemas/TagList" }
        },
        "required": ["ResourceArn", "Tags"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValue": { "maxLength": 256, "minLength": 1, "pattern": "^[a-zA-Z0-9\\s+=._:/-]+$", "type": "string" },
      "TaggableResourceArn": {
        "maxLength": 128,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:(agent|task|location)/(agent|task|loc)-[0-9a-z]{17}$",
        "type": "string"
      },
      "TaskArn": {
        "maxLength": 128,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]*:[0-9]{12}:task/task-[0-9a-f]{17}$",
        "type": "string"
      },
      "TaskExecutionArn": {
        "maxLength": 128,
        "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]*:[0-9]{12}:task/task-[0-9a-f]{17}/execution/exec-[0-9a-f]{17}$",
        "type": "string"
      },
      "TaskExecutionList": { "items": { "$ref": "#/components/schemas/TaskExecutionListEntry" }, "type": "array" },
      "TaskExecutionListEntry": {
        "description": "Represents a single entry in a list of task executions. <code>TaskExecutionListEntry</code> returns an array that contains a list of specific invocations of a task when <a>ListTaskExecutions</a> operation is called.",
        "properties": {
          "Status": { "$ref": "#/components/schemas/TaskExecutionStatus" },
          "TaskExecutionArn": { "$ref": "#/components/schemas/TaskExecutionArn" }
        },
        "type": "object"
      },
      "TaskExecutionResultDetail": {
        "description": "Describes the detailed result of a <code>TaskExecution</code> operation. This result includes the time in milliseconds spent in each phase, the status of the task execution, and the errors encountered.",
        "properties": {
          "ErrorCode": { "$ref": "#/components/schemas/string" },
          "ErrorDetail": { "$ref": "#/components/schemas/string" },
          "PrepareDuration": { "$ref": "#/components/schemas/Duration" },
          "PrepareStatus": { "$ref": "#/components/schemas/PhaseStatus" },
          "TransferDuration": { "$ref": "#/components/schemas/Duration" },
          "TransferStatus": { "$ref": "#/components/schemas/PhaseStatus" },
          "VerifyDuration": { "$ref": "#/components/schemas/Duration" },
          "VerifyStatus": { "$ref": "#/components/schemas/PhaseStatus" }
        },
        "type": "object"
      },
      "TaskExecutionStatus": {
        "enum": ["LAUNCHING", "PREPARING", "TRANSFERRING", "VERIFYING", "SUCCESS", "ERROR"],
        "type": "string"
      },
      "TaskList": { "items": { "$ref": "#/components/schemas/TaskListEntry" }, "type": "array" },
      "TaskListEntry": {
        "description": "Represents a single entry in a list of tasks. <code>TaskListEntry</code> returns an array that contains a list of tasks when the <a>ListTasks</a> operation is called. A task includes the source and destination file systems to sync and the options to use for the tasks.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/TagValue" },
          "Status": { "$ref": "#/components/schemas/TaskStatus" },
          "TaskArn": { "$ref": "#/components/schemas/TaskArn" }
        },
        "type": "object"
      },
      "TaskStatus": { "enum": ["AVAILABLE", "CREATING", "RUNNING", "UNAVAILABLE"], "type": "string" },
      "Time": { "format": "date-time", "type": "string" },
      "Uid": { "enum": ["NONE", "INT_VALUE", "NAME", "BOTH"], "type": "string" },
      "UntagResourceRequest": {
        "description": "UntagResourceRequest",
        "properties": {
          "Keys": { "$ref": "#/components/schemas/TagKeyList" },
          "ResourceArn": { "$ref": "#/components/schemas/TaggableResourceArn" }
        },
        "required": ["ResourceArn", "Keys"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UpdateAgentRequest": {
        "description": "UpdateAgentRequest",
        "properties": {
          "AgentArn": { "$ref": "#/components/schemas/AgentArn" },
          "Name": { "$ref": "#/components/schemas/TagValue" }
        },
        "required": ["AgentArn"],
        "type": "object"
      },
      "UpdateAgentResponse": { "properties": {}, "type": "object" },
      "UpdateTaskRequest": {
        "description": "UpdateTaskResponse",
        "properties": {
          "CloudWatchLogGroupArn": { "$ref": "#/components/schemas/LogGroupArn" },
          "Excludes": { "$ref": "#/components/schemas/FilterList" },
          "Name": { "$ref": "#/components/schemas/TagValue" },
          "Options": { "$ref": "#/components/schemas/Options" },
          "TaskArn": { "$ref": "#/components/schemas/TaskArn" }
        },
        "required": ["TaskArn"],
        "type": "object"
      },
      "UpdateTaskResponse": { "properties": {}, "type": "object" },
      "VerifyMode": { "enum": ["POINT_IN_TIME_CONSISTENT", "NONE"], "type": "string" },
      "VpcEndpointId": { "pattern": "^vpce-[0-9a-f]{17}$", "type": "string" },
      "long": { "type": "integer" },
      "string": { "type": "string" }
    }
  }
}
