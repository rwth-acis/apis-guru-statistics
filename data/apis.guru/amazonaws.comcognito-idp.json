{
  "openapi": "3.0.0",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<p>Using the Amazon Cognito User Pools API, you can create a user pool to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies.</p> <p>This API reference provides information about user pools in Amazon Cognito User Pools.</p> <p>For more information, see the Amazon Cognito Documentation.</p>",
    "license": { "name": "Apache 2.0 License", "url": "http://www.apache.org/licenses/" },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Cognito Identity Provider",
    "version": "2016-04-18",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": { "url": "https://github.com/mermade/aws2openapi", "version": "1.0.0" },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-idp-2016-04-18.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "cognito-idp"
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/cognito-idp/"
  },
  "security": [{ "hmac": [] }],
  "paths": {
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AddCustomAttributes": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Adds additional user attributes to the user pool schema.",
        "operationId": "AddCustomAttributes",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AddCustomAttributes"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AddCustomAttributesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AddCustomAttributesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserImportInProgressException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserImportInProgressException" } }
            }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminAddUserToGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Adds the specified user to the specified group.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminAddUserToGroup",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminAddUserToGroup"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminAddUserToGroupRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminConfirmSignUp": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Confirms user registration as an admin without using a confirmation code. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminConfirmSignUp",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminConfirmSignUp"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminConfirmSignUpRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminConfirmSignUpResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "TooManyFailedAttemptsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TooManyFailedAttemptsException" } }
            }
          },
          "486": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "487": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "488": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "489": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "490": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminCreateUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a new user in the specified user pool.</p> <p>If <code>MessageAction</code> is not set, the default is to send a welcome message via email or phone (SMS).</p> <note> <p>This message is based on a template that you configured in your call to or . This template includes your custom sign-up instructions and placeholders for user name and temporary password.</p> </note> <p>Alternatively, you can call AdminCreateUser with “SUPPRESS” for the <code>MessageAction</code> parameter, and Amazon Cognito will not send any email. </p> <p>In either case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state until they sign in and change their password.</p> <p>AdminCreateUser requires developer credentials.</p>",
        "operationId": "AdminCreateUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminCreateUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminCreateUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminCreateUserResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "483": {
            "description": "UsernameExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UsernameExistsException" } } }
          },
          "484": {
            "description": "InvalidPasswordException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPasswordException" } } }
          },
          "485": {
            "description": "CodeDeliveryFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CodeDeliveryFailureException" } }
            }
          },
          "486": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "487": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "489": {
            "description": "PreconditionNotMetException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PreconditionNotMetException" } }
            }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "492": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "493": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "494": {
            "description": "UnsupportedUserStateException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnsupportedUserStateException" } }
            }
          },
          "495": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes a user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminDeleteUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminDeleteUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminDeleteUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUserAttributes": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes the user attributes in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminDeleteUserAttributes",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminDeleteUserAttributes"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminDeleteUserAttributesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminDeleteUserAttributesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableProviderForUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Disables the user from signing in with the specified external (SAML or social) identity provider. If the user to disable is a Cognito User Pools native username + password user, they are not permitted to use their password to sign-in. If the user to disable is a linked external IdP user, any link between that user and an existing user is removed. The next time the external user (no longer attached to the previously linked <code>DestinationUser</code>) signs in, they must create a new user account. See .</p> <p>This action is enabled only for admin access and requires developer credentials.</p> <p>The <code>ProviderName</code> must match the value specified when creating an IdP for the pool. </p> <p>To disable a native username + password user, the <code>ProviderName</code> value must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code>, with the <code>ProviderAttributeValue</code> being the name that is used in the user pool for the user.</p> <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for social identity providers. The <code>ProviderAttributeValue</code> must always be the exact subject that was used when the user was originally linked as a source user.</p> <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign-in, the <code>ProviderAttributeName</code> and <code>ProviderAttributeValue</code> must be the same values that were used for the <code>SourceUser</code> when the identities were originally linked in the call. (If the linking was done with <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same applies here). However, if the user has already signed in, the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and <code>ProviderAttributeValue</code> must be the subject of the SAML assertion.</p>",
        "operationId": "AdminDisableProviderForUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminDisableProviderForUser"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminDisableProviderForUserRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminDisableProviderForUserResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "AliasExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AliasExistsException" } } }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Disables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminDisableUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminDisableUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminDisableUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminDisableUserResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminEnableUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Enables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminEnableUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminEnableUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminEnableUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminEnableUserResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminForgetDevice": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Forgets the device, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminForgetDevice",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminForgetDevice"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminForgetDeviceRequest" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetDevice": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Gets the device, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminGetDevice",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminGetDevice"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminGetDeviceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminGetDeviceResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "485": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Gets the specified user by user name in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminGetUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminGetUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminGetUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminGetUserResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminInitiateAuth": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Initiates the authentication flow, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminInitiateAuth",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminInitiateAuth"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminInitiateAuthRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminInitiateAuthResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "485": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "486": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "487": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "489": {
            "description": "MFAMethodNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MFAMethodNotFoundException" } }
            }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "492": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "493": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "494": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminLinkProviderForUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an identity from an external identity provider (<code>SourceUser</code>) based on a specified attribute name and value from the external identity provider. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in, so that the federated user identity can be used to sign in as the existing user account. </p> <p> For example, if there is an existing user with a username and password, this API links that user to a federated user identity, so that when the federated user identity is used, the user signs in as the existing user account. </p> <important> <p>Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external identity providers and provider attributes that have been trusted by the application owner.</p> </important> <p>See also .</p> <p>This action is enabled only for admin access and requires developer credentials.</p>",
        "operationId": "AdminLinkProviderForUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminLinkProviderForUser"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminLinkProviderForUserRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminLinkProviderForUserResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "AliasExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AliasExistsException" } } }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListDevices": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists devices, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminListDevices",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminListDevices"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminListDevicesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminListDevicesResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "485": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListGroupsForUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists the groups that the user belongs to.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminListGroupsForUser",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminListGroupsForUser"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminListGroupsForUserRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminListGroupsForUserResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListUserAuthEvents": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists a history of user activity and any risks detected as part of Amazon Cognito advanced security.",
        "operationId": "AdminListUserAuthEvents",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminListUserAuthEvents"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminListUserAuthEventsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminListUserAuthEventsResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "UserPoolAddOnNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserPoolAddOnNotEnabledException" } }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Removes the specified user from the specified group.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminRemoveUserFromGroup",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminRemoveUserFromGroupRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminResetUserPassword": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Resets the specified user's password in a user pool as an administrator. Works on any user.</p> <p>When a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminResetUserPassword",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminResetUserPassword"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminResetUserPasswordRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminResetUserPasswordResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "487": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "488": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "489": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "490": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "492": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Responds to an authentication challenge, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminRespondToAuthChallenge",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminRespondToAuthChallengeRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminRespondToAuthChallengeResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "CodeMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeMismatchException" } } }
          },
          "484": {
            "description": "ExpiredCodeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExpiredCodeException" } } }
          },
          "485": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "486": {
            "description": "InvalidPasswordException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPasswordException" } } }
          },
          "487": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "489": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "490": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "491": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "492": {
            "description": "MFAMethodNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MFAMethodNotFoundException" } }
            }
          },
          "493": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "494": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "495": {
            "description": "AliasExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AliasExistsException" } } }
          },
          "496": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "497": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "498": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "499": {
            "description": "SoftwareTokenMFANotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SoftwareTokenMFANotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserMFAPreference": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sets the user's multi-factor authentication (MFA) preference.",
        "operationId": "AdminSetUserMFAPreference",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminSetUserMFAPreference"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminSetUserMFAPreferenceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminSetUserMFAPreferenceResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserPassword": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "",
        "operationId": "AdminSetUserPassword",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminSetUserPassword"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminSetUserPasswordRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminSetUserPasswordResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "483": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "486": {
            "description": "InvalidPasswordException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPasswordException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserSettings": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Sets all the user settings for a specified user name. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminSetUserSettings",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminSetUserSettings"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminSetUserSettingsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminSetUserSettingsResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Provides feedback for an authentication event as to whether it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.",
        "operationId": "AdminUpdateAuthEventFeedback",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateAuthEventFeedbackRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateAuthEventFeedbackResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "UserPoolAddOnNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserPoolAddOnNotEnabledException" } }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the device status as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminUpdateDeviceStatus",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateDeviceStatusRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateDeviceStatusResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateUserAttributes": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the specified user's attributes, including developer attributes, as an administrator. Works on any user.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>In addition to updating user attributes, this API can also be used to mark phone and email as verified.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminUpdateUserAttributes",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminUpdateUserAttributes"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateUserAttributesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateUserAttributesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "484": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "485": {
            "description": "AliasExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AliasExistsException" } } }
          },
          "486": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "487": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "488": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "489": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "491": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "492": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUserGlobalSignOut": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Signs out users from all devices, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminUserGlobalSignOut",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AdminUserGlobalSignOut"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AdminUserGlobalSignOutRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AdminUserGlobalSignOutResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.AssociateSoftwareToken": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns a unique generated shared secret key code for the user account. The request takes an access token or a session string, but not both.",
        "operationId": "AssociateSoftwareToken",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.AssociateSoftwareToken"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/AssociateSoftwareTokenRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AssociateSoftwareTokenResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "484": {
            "description": "SoftwareTokenMFANotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SoftwareTokenMFANotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ChangePassword": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Changes the password for a specified user in a user pool.",
        "operationId": "ChangePassword",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ChangePassword"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ChangePasswordRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ChangePasswordResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "InvalidPasswordException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPasswordException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "486": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "487": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "488": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "489": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmDevice": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Confirms tracking of the device. This API call is the call that begins device tracking.",
        "operationId": "ConfirmDevice",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ConfirmDevice"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmDeviceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmDeviceResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "InvalidPasswordException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPasswordException" } } }
          },
          "484": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "485": {
            "description": "UsernameExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UsernameExistsException" } } }
          },
          "486": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "487": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "488": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "489": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "490": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "491": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmForgotPassword": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Allows a user to enter a confirmation code to reset a forgotten password.",
        "operationId": "ConfirmForgotPassword",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ConfirmForgotPassword"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmForgotPasswordRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmForgotPasswordResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "482": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "484": {
            "description": "InvalidPasswordException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPasswordException" } } }
          },
          "485": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "486": {
            "description": "CodeMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeMismatchException" } } }
          },
          "487": {
            "description": "ExpiredCodeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExpiredCodeException" } } }
          },
          "488": {
            "description": "TooManyFailedAttemptsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TooManyFailedAttemptsException" } }
            }
          },
          "489": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "490": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "491": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "492": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "493": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "494": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmSignUp": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Confirms registration of a user and handles the existing alias from a previous user.",
        "operationId": "ConfirmSignUp",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ConfirmSignUp"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmSignUpRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmSignUpResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "TooManyFailedAttemptsException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TooManyFailedAttemptsException" } }
            }
          },
          "486": {
            "description": "CodeMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeMismatchException" } } }
          },
          "487": {
            "description": "ExpiredCodeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExpiredCodeException" } } }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "489": {
            "description": "AliasExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AliasExistsException" } } }
          },
          "490": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "491": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "492": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "493": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Creates a new group in the specified user pool.</p> <p>Requires developer credentials.</p>",
        "operationId": "CreateGroup",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.CreateGroup"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateGroupRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateGroupResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "GroupExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GroupExistsException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateIdentityProvider": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates an identity provider for a user pool.",
        "operationId": "CreateIdentityProvider",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.CreateIdentityProvider"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateIdentityProviderRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateIdentityProviderResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "DuplicateProviderException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DuplicateProviderException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateResourceServer": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new OAuth2.0 resource server and defines custom scopes in it.",
        "operationId": "CreateResourceServer",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.CreateResourceServer"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateResourceServerRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateResourceServerResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserImportJob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates the user import job.",
        "operationId": "CreateUserImportJob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.CreateUserImportJob"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserImportJobRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserImportJobResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "PreconditionNotMetException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PreconditionNotMetException" } }
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPool": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new Amazon Cognito user pool and sets the password policy for the pool.",
        "operationId": "CreateUserPool",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.CreateUserPool"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserPoolRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserPoolResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "482": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "483": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "484": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "485": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "486": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "487": {
            "description": "UserPoolTaggingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserPoolTaggingException" } } }
          },
          "488": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolClient": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates the user pool client.",
        "operationId": "CreateUserPoolClient",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.CreateUserPoolClient"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserPoolClientRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserPoolClientResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "ScopeDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ScopeDoesNotExistException" } }
            }
          },
          "486": {
            "description": "InvalidOAuthFlowException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidOAuthFlowException" } }
            }
          },
          "487": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolDomain": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Creates a new domain for a user pool.",
        "operationId": "CreateUserPoolDomain",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.CreateUserPoolDomain"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserPoolDomainRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CreateUserPoolDomainResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Deletes a group. Currently only groups with no members can be deleted.</p> <p>Requires developer credentials.</p>",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DeleteGroup"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteGroupRequest" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteIdentityProvider": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes an identity provider for a user pool.",
        "operationId": "DeleteIdentityProvider",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DeleteIdentityProvider"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteIdentityProviderRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "UnsupportedIdentityProviderException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnsupportedIdentityProviderException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteResourceServer": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a resource server.",
        "operationId": "DeleteResourceServer",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DeleteResourceServer"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteResourceServerRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Allows a user to delete himself or herself.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DeleteUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "485": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "486": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "487": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserAttributes": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the attributes for a user.",
        "operationId": "DeleteUserAttributes",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DeleteUserAttributes"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserAttributesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserAttributesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "485": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "486": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "487": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPool": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes the specified Amazon Cognito user pool.",
        "operationId": "DeleteUserPool",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DeleteUserPool"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserPoolRequest" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserImportInProgressException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserImportInProgressException" } }
            }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolClient": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Allows the developer to delete the user pool client.",
        "operationId": "DeleteUserPoolClient",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DeleteUserPoolClient"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserPoolClientRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolDomain": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Deletes a domain for a user pool.",
        "operationId": "DeleteUserPoolDomain",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DeleteUserPoolDomain"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserPoolDomainRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteUserPoolDomainResponse" } }
            }
          },
          "480": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeIdentityProvider": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets information about a specific identity provider.",
        "operationId": "DescribeIdentityProvider",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DescribeIdentityProvider"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeIdentityProviderRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeIdentityProviderResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeResourceServer": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Describes a resource server.",
        "operationId": "DescribeResourceServer",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DescribeResourceServer"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeResourceServerRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeResourceServerResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeRiskConfiguration": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Describes the risk configuration.",
        "operationId": "DescribeRiskConfiguration",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DescribeRiskConfiguration"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeRiskConfigurationRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeRiskConfigurationResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserPoolAddOnNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserPoolAddOnNotEnabledException" } }
            }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserImportJob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Describes the user import job.",
        "operationId": "DescribeUserImportJob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DescribeUserImportJob"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserImportJobRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserImportJobResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPool": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Returns the configuration information and metadata of the specified user pool.",
        "operationId": "DescribeUserPool",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DescribeUserPool"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserPoolRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserPoolResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserPoolTaggingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserPoolTaggingException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolClient": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Client method for returning the configuration information and metadata of the specified user pool app client.",
        "operationId": "DescribeUserPoolClient",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DescribeUserPoolClient"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserPoolClientRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserPoolClientResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolDomain": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets information about a domain.",
        "operationId": "DescribeUserPoolDomain",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.DescribeUserPoolDomain"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserPoolDomainRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DescribeUserPoolDomainResponse" } }
            }
          },
          "480": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ForgetDevice": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Forgets the specified device.",
        "operationId": "ForgetDevice",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ForgetDevice"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForgetDeviceRequest" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Success" },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "488": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ForgotPassword": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password. For the <code>Username</code> parameter, you can use the username or user alias. If a verified phone number exists for the user, the confirmation code is sent to the phone number. Otherwise, if a verified email exists, the confirmation code is sent to the email. If neither a verified phone number nor a verified email exists, <code>InvalidParameterException</code> is thrown. To use the confirmation code for resetting the password, call .",
        "operationId": "ForgotPassword",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ForgotPassword"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForgotPasswordRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForgotPasswordResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "487": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "488": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "489": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "490": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "491": {
            "description": "CodeDeliveryFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CodeDeliveryFailureException" } }
            }
          },
          "492": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "493": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "494": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetCSVHeader": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the header information for the .csv file to be used as input for the user import job.",
        "operationId": "GetCSVHeader",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.GetCSVHeader"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCSVHeaderRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetCSVHeaderResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetDevice": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the device.",
        "operationId": "GetDevice",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.GetDevice"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDeviceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetDeviceResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "488": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Gets a group.</p> <p>Requires developer credentials.</p>",
        "operationId": "GetGroup",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.GetGroup"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetGroupRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetGroupResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the specified identity provider.",
        "operationId": "GetIdentityProviderByIdentifier",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier"]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetIdentityProviderByIdentifierRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetIdentityProviderByIdentifierResponse" }
              }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetSigningCertificate": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "This method takes a user pool ID, and returns the signing certificate.",
        "operationId": "GetSigningCertificate",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.GetSigningCertificate"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetSigningCertificateRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetSigningCertificateResponse" } }
            }
          },
          "480": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUICustomization": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the UI Customization information for a particular app client's app UI, if there is something set. If nothing is set for the particular client, but there is an existing pool level customization (app <code>clientId</code> will be <code>ALL</code>), then that is returned. If nothing is present, then an empty shape is returned.",
        "operationId": "GetUICustomization",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.GetUICustomization"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetUICustomizationRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetUICustomizationResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUser": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the user attributes and metadata for a user.",
        "operationId": "GetUser",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.GetUser"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetUserRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetUserResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "485": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "486": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "487": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the user attribute verification code for the specified attribute name.",
        "operationId": "GetUserAttributeVerificationCode",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode"]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetUserAttributeVerificationCodeRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetUserAttributeVerificationCodeResponse" }
              }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "485": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "486": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "487": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "488": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "489": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "490": {
            "description": "CodeDeliveryFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CodeDeliveryFailureException" } }
            }
          },
          "491": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "492": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "493": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "494": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "495": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserPoolMfaConfig": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Gets the user pool multi-factor authentication (MFA) configuration.",
        "operationId": "GetUserPoolMfaConfig",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.GetUserPoolMfaConfig"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/GetUserPoolMfaConfigRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetUserPoolMfaConfigResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.GlobalSignOut": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Signs out users from all devices.",
        "operationId": "GlobalSignOut",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.GlobalSignOut"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlobalSignOutRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GlobalSignOutResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "485": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.InitiateAuth": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Initiates the authentication flow.",
        "operationId": "InitiateAuth",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.InitiateAuth"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InitiateAuthRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InitiateAuthResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "485": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "486": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "487": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "488": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "489": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "490": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "491": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListDevices": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the devices.",
        "operationId": "ListDevices",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListDevices"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListDevicesRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListDevicesResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "488": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListGroups": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists the groups associated with a user pool.</p> <p>Requires developer credentials.</p>",
        "operationId": "ListGroups",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListGroups"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListGroupsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListGroupsResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListIdentityProviders": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists information about all identity providers for a user pool.",
        "operationId": "ListIdentityProviders",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListIdentityProviders"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListIdentityProvidersRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListIdentityProvidersResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListResourceServers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the resource servers for a user pool.",
        "operationId": "ListResourceServers",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListResourceServers"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListResourceServersRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListResourceServersResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListTagsForResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists the tags that are assigned to an Amazon Cognito user pool.</p> <p>A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>You can use this action up to 10 times per second, per account.</p>",
        "operationId": "ListTagsForResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListTagsForResource"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListTagsForResourceResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserImportJobs": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the user import jobs.",
        "operationId": "ListUserImportJobs",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListUserImportJobs"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListUserImportJobsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListUserImportJobsResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPoolClients": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the clients that have been created for the specified user pool.",
        "operationId": "ListUserPoolClients",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListUserPoolClients"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ListUserPoolClientsRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListUserPoolClientsResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPools": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the user pools associated with an AWS account.",
        "operationId": "ListUserPools",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListUserPools"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListUserPoolsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListUserPoolsResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsers": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Lists the users in the Amazon Cognito user pool.",
        "operationId": "ListUsers",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListUsers"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListUsersRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListUsersResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsersInGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Lists the users in the specified group.</p> <p>Requires developer credentials.</p>",
        "operationId": "ListUsersInGroup",
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ListUsersInGroup"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListUsersInGroupRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ListUsersInGroupResponse" } } }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.ResendConfirmationCode": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Resends the confirmation (for confirmation of registration) to a specific user in the user pool.",
        "operationId": "ResendConfirmationCode",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.ResendConfirmationCode"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ResendConfirmationCodeRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResendConfirmationCodeResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "487": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "488": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "489": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "490": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "491": {
            "description": "CodeDeliveryFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CodeDeliveryFailureException" } }
            }
          },
          "492": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "493": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.RespondToAuthChallenge": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Responds to the authentication challenge.",
        "operationId": "RespondToAuthChallenge",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.RespondToAuthChallenge"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/RespondToAuthChallengeRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RespondToAuthChallengeResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "CodeMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeMismatchException" } } }
          },
          "484": {
            "description": "ExpiredCodeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExpiredCodeException" } } }
          },
          "485": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "486": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "487": {
            "description": "InvalidPasswordException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPasswordException" } } }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "489": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "490": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "491": {
            "description": "MFAMethodNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MFAMethodNotFoundException" } }
            }
          },
          "492": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "493": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "494": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "495": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "496": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "497": {
            "description": "AliasExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AliasExistsException" } } }
          },
          "498": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "499": {
            "description": "SoftwareTokenMFANotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SoftwareTokenMFANotFoundException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetRiskConfiguration": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Configures actions on detected risks. To delete the risk configuration for <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four configuration types.</p> <p>To enable Amazon Cognito advanced security features, update the user pool to include the <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p> <p>See .</p>",
        "operationId": "SetRiskConfiguration",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.SetRiskConfiguration"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SetRiskConfigurationRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SetRiskConfigurationResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserPoolAddOnNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserPoolAddOnNotEnabledException" } }
            }
          },
          "485": {
            "description": "CodeDeliveryFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CodeDeliveryFailureException" } }
            }
          },
          "486": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "487": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUICustomization": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Sets the UI customization information for a user pool's built-in app UI.</p> <p>You can specify app UI customization settings for a single client (with a specific <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to <code>ALL</code>). If you specify <code>ALL</code>, the default configuration will be used for every client that has no UI customization set previously. If you specify UI customization settings for a particular client, it will no longer fall back to the <code>ALL</code> configuration. </p> <note> <p>To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app's pages, and the service will throw an error.</p> </note>",
        "operationId": "SetUICustomization",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.SetUICustomization"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SetUICustomizationRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SetUICustomizationResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserMFAPreference": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Set the user's multi-factor authentication (MFA) method preference.",
        "operationId": "SetUserMFAPreference",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.SetUserMFAPreference"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SetUserMFAPreferenceRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SetUserMFAPreferenceResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserPoolMfaConfig": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Set the user pool MFA configuration.",
        "operationId": "SetUserPoolMfaConfig",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.SetUserPoolMfaConfig"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SetUserPoolMfaConfigRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SetUserPoolMfaConfigResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "484": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserSettings": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Sets the user settings like multi-factor authentication (MFA). If MFA is to be removed for a particular attribute pass the attribute with code delivery as null. If null list is passed, all MFA options are removed.",
        "operationId": "SetUserSettings",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.SetUserSettings"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SetUserSettingsRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SetUserSettingsResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.SignUp": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Registers the user in the specified user pool and creates a user name, password, and user attributes.",
        "operationId": "SignUp",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.SignUp"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SignUpRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SignUpResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "InvalidPasswordException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InvalidPasswordException" } } }
          },
          "486": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "487": {
            "description": "UsernameExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UsernameExistsException" } } }
          },
          "488": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "489": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "492": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "493": {
            "description": "CodeDeliveryFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CodeDeliveryFailureException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.StartUserImportJob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Starts the user import.",
        "operationId": "StartUserImportJob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.StartUserImportJob"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StartUserImportJobRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StartUserImportJobResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PreconditionNotMetException" } }
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.StopUserImportJob": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Stops the user import job.",
        "operationId": "StopUserImportJob",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.StopUserImportJob"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StopUserImportJobRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StopUserImportJobResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PreconditionNotMetException" } }
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.TagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an <code>Environment</code> tag key to both user pools. The value of this key might be <code>Test</code> for one user pool and <code>Production</code> for the other.</p> <p>Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an IAM policy, you can constrain permissions for user pools based on specific tags or tag values.</p> <p>You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.</p>",
        "operationId": "TagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.TagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagResourceResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UntagResource": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account",
        "operationId": "UntagResource",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UntagResource"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UntagResourceResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateAuthEventFeedback": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Provides the feedback for an authentication event whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.",
        "operationId": "UpdateAuthEventFeedback",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateAuthEventFeedback"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAuthEventFeedbackRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAuthEventFeedbackResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "485": {
            "description": "UserPoolAddOnNotEnabledException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserPoolAddOnNotEnabledException" } }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateDeviceStatus": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the device status.",
        "operationId": "UpdateDeviceStatus",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateDeviceStatus"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDeviceStatusRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDeviceStatusResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "488": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateGroup": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the specified group with the specified attributes.</p> <p>Requires developer credentials.</p>",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateGroup"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateGroupRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateGroupResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateIdentityProvider": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates identity provider information for a user pool.",
        "operationId": "UpdateIdentityProvider",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateIdentityProvider"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateIdentityProviderRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateIdentityProviderResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "UnsupportedIdentityProviderException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnsupportedIdentityProviderException" } }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateResourceServer": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the name and scopes of resource server. All other fields are read-only.",
        "operationId": "UpdateResourceServer",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateResourceServer"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateResourceServerRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateResourceServerResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserAttributes": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Allows a user to update a specific attribute (one at a time).",
        "operationId": "UpdateUserAttributes",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateUserAttributes"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserAttributesRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserAttributesResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "CodeMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeMismatchException" } } }
          },
          "483": {
            "description": "ExpiredCodeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExpiredCodeException" } } }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "UnexpectedLambdaException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UnexpectedLambdaException" } }
            }
          },
          "486": {
            "description": "UserLambdaValidationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserLambdaValidationException" } }
            }
          },
          "487": {
            "description": "InvalidLambdaResponseException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidLambdaResponseException" } }
            }
          },
          "488": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "489": {
            "description": "AliasExistsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AliasExistsException" } } }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "492": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          },
          "493": {
            "description": "CodeDeliveryFailureException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CodeDeliveryFailureException" } }
            }
          },
          "494": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "495": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "496": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "497": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPool": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the specified user pool with the specified attributes. If you don't provide a value for an attribute, it will be set to the default value. You can get a list of the current user pool settings with .",
        "operationId": "UpdateUserPool",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateUserPool"] }
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserPoolRequest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserPoolResponse" } } }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "UserImportInProgressException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserImportInProgressException" } }
            }
          },
          "486": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "487": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidSmsRoleAccessPolicyException" } }
            }
          },
          "488": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvalidSmsRoleTrustRelationshipException" }
              }
            }
          },
          "489": {
            "description": "UserPoolTaggingException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserPoolTaggingException" } } }
          },
          "490": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidEmailRoleAccessPolicyException" } }
            }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolClient": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Updates the specified user pool app client with the specified attributes. If you don't provide a value for an attribute, it will be set to the default value. You can get a list of the current user pool app client settings with .",
        "operationId": "UpdateUserPoolClient",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateUserPoolClient"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserPoolClientRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserPoolClientResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConcurrentModificationException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "ScopeDoesNotExistException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ScopeDoesNotExistException" } }
            }
          },
          "486": {
            "description": "InvalidOAuthFlowException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidOAuthFlowException" } }
            }
          },
          "487": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolDomain": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "<p>Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.</p> <p>You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You cannot use it to change the domain for a user pool.</p> <p>A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with AWS Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.</p> <p>Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.</p> <p>However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.</p> <p>When you add your new certificate in ACM, you must choose US East (N. Virginia) as the AWS Region.</p> <p>After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.</p> <p>For more information about adding a custom domain to your user pool, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\">Using Your Own Domain for the Hosted UI</a>.</p>",
        "operationId": "UpdateUserPoolDomain",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.UpdateUserPoolDomain"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserPoolDomainRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserPoolDomainResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "484": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.VerifySoftwareToken": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Use this API to register a user's entered TOTP code and mark the user's software token MFA status as \"verified\" if successful. The request takes an access token or a session string, but not both.",
        "operationId": "VerifySoftwareToken",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.VerifySoftwareToken"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/VerifySoftwareTokenRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/VerifySoftwareTokenResponse" } }
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidUserPoolConfigurationException" } }
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "488": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          },
          "489": {
            "description": "EnableSoftwareTokenMFAException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EnableSoftwareTokenMFAException" } }
            }
          },
          "490": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "491": {
            "description": "SoftwareTokenMFANotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SoftwareTokenMFANotFoundException" } }
            }
          },
          "492": {
            "description": "CodeMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeMismatchException" } } }
          }
        }
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityProviderService.VerifyUserAttribute": {
      "parameters": [
        { "$ref": "#/components/parameters/X-Amz-Content-Sha256" },
        { "$ref": "#/components/parameters/X-Amz-Date" },
        { "$ref": "#/components/parameters/X-Amz-Algorithm" },
        { "$ref": "#/components/parameters/X-Amz-Credential" },
        { "$ref": "#/components/parameters/X-Amz-Security-Token" },
        { "$ref": "#/components/parameters/X-Amz-Signature" },
        { "$ref": "#/components/parameters/X-Amz-SignedHeaders" }
      ],
      "post": {
        "description": "Verifies the specified user attributes in the user pool.",
        "operationId": "VerifyUserAttribute",
        "parameters": [
          {
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "schema": { "type": "string", "enum": ["AWSCognitoIdentityProviderService.VerifyUserAttribute"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/VerifyUserAttributeRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/VerifyUserAttributeResponse" } }
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ResourceNotFoundException" } }
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/InvalidParameterException" } }
            }
          },
          "482": {
            "description": "CodeMismatchException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeMismatchException" } } }
          },
          "483": {
            "description": "ExpiredCodeException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExpiredCodeException" } } }
          },
          "484": {
            "description": "NotAuthorizedException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotAuthorizedException" } } }
          },
          "485": {
            "description": "TooManyRequestsException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TooManyRequestsException" } } }
          },
          "486": {
            "description": "LimitExceededException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LimitExceededException" } } }
          },
          "487": {
            "description": "PasswordResetRequiredException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PasswordResetRequiredException" } }
            }
          },
          "488": {
            "description": "UserNotFoundException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserNotFoundException" } } }
          },
          "489": {
            "description": "UserNotConfirmedException",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserNotConfirmedException" } }
            }
          },
          "490": {
            "description": "InternalErrorException",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/InternalErrorException" } } }
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "The Amazon Cognito Identity Provider multi-region endpoint",
      "url": "http://cognito-idp.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon Cognito Identity Provider multi-region endpoint",
      "url": "https://cognito-idp.{region}.amazonaws.com",
      "variables": {
        "region": {
          "default": "us-east-1",
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-south-1",
            "sa-east-1"
          ]
        }
      }
    },
    {
      "description": "The Amazon Cognito Identity Provider endpoint for China (Beijing) and China (Ningxia)",
      "url": "http://cognito-idp.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    },
    {
      "description": "The Amazon Cognito Identity Provider endpoint for China (Beijing) and China (Ningxia)",
      "url": "https://cognito-idp.{region}.amazonaws.com.cn",
      "variables": {
        "region": { "default": "cn-north-1", "description": "The AWS region", "enum": ["cn-north-1", "cn-northwest-1"] }
      }
    }
  ],
  "components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Date": { "in": "header", "name": "X-Amz-Date", "required": false, "schema": { "type": "string" } },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "schema": { "type": "string" }
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "hmac": {
        "description": "Amazon Signature authorization v4",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AWSAccountIdType": { "type": "string" },
      "AccountTakeoverActionNotifyType": { "type": "boolean" },
      "AccountTakeoverActionType": {
        "description": "Account takeover action type.",
        "properties": {
          "EventAction": { "$ref": "#/components/schemas/AccountTakeoverEventActionType" },
          "Notify": { "$ref": "#/components/schemas/AccountTakeoverActionNotifyType" }
        },
        "required": ["Notify", "EventAction"],
        "type": "object"
      },
      "AccountTakeoverActionsType": {
        "description": "Account takeover actions type.",
        "properties": {
          "HighAction": { "$ref": "#/components/schemas/AccountTakeoverActionType" },
          "LowAction": { "$ref": "#/components/schemas/AccountTakeoverActionType" },
          "MediumAction": { "$ref": "#/components/schemas/AccountTakeoverActionType" }
        },
        "type": "object"
      },
      "AccountTakeoverEventActionType": {
        "enum": ["BLOCK", "MFA_IF_CONFIGURED", "MFA_REQUIRED", "NO_ACTION"],
        "type": "string"
      },
      "AccountTakeoverRiskConfigurationType": {
        "description": "Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.",
        "properties": {
          "Actions": { "$ref": "#/components/schemas/AccountTakeoverActionsType" },
          "NotifyConfiguration": { "$ref": "#/components/schemas/NotifyConfigurationType" }
        },
        "required": ["Actions"],
        "type": "object"
      },
      "AddCustomAttributesRequest": {
        "description": "Represents the request to add custom attributes.",
        "properties": {
          "CustomAttributes": { "$ref": "#/components/schemas/CustomAttributesListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "CustomAttributes"],
        "type": "object"
      },
      "AddCustomAttributesResponse": {
        "description": "Represents the response from the server for the request to add custom attributes.",
        "properties": {},
        "type": "object"
      },
      "AdminAddUserToGroupRequest": {
        "properties": {
          "GroupName": { "$ref": "#/components/schemas/GroupNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "GroupName"],
        "type": "object"
      },
      "AdminConfirmSignUpRequest": {
        "description": "Represents the request to confirm user registration.",
        "properties": {
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminConfirmSignUpResponse": {
        "description": "Represents the response from the server for the request to confirm registration.",
        "properties": {},
        "type": "object"
      },
      "AdminCreateUserConfigType": {
        "description": "The configuration for creating a new user profile.",
        "properties": {
          "AllowAdminCreateUserOnly": { "$ref": "#/components/schemas/BooleanType" },
          "InviteMessageTemplate": { "$ref": "#/components/schemas/MessageTemplateType" },
          "UnusedAccountValidityDays": { "$ref": "#/components/schemas/AdminCreateUserUnusedAccountValidityDaysType" }
        },
        "type": "object"
      },
      "AdminCreateUserRequest": {
        "description": "Represents the request to create a user in the specified user pool.",
        "properties": {
          "DesiredDeliveryMediums": { "$ref": "#/components/schemas/DeliveryMediumListType" },
          "ForceAliasCreation": { "$ref": "#/components/schemas/ForceAliasCreation" },
          "MessageAction": { "$ref": "#/components/schemas/MessageActionType" },
          "TemporaryPassword": { "$ref": "#/components/schemas/PasswordType" },
          "UserAttributes": { "$ref": "#/components/schemas/AttributeListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" },
          "ValidationData": { "$ref": "#/components/schemas/AttributeListType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminCreateUserResponse": {
        "description": "Represents the response from the server to the request to create the user.",
        "properties": { "User": { "$ref": "#/components/schemas/UserType" } },
        "type": "object"
      },
      "AdminCreateUserUnusedAccountValidityDaysType": { "maximum": 365, "minimum": 0, "type": "integer" },
      "AdminDeleteUserAttributesRequest": {
        "description": "Represents the request to delete user attributes as an administrator.",
        "properties": {
          "UserAttributeNames": { "$ref": "#/components/schemas/AttributeNameListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "UserAttributeNames"],
        "type": "object"
      },
      "AdminDeleteUserAttributesResponse": {
        "description": "Represents the response received from the server for a request to delete user attributes.",
        "properties": {},
        "type": "object"
      },
      "AdminDeleteUserRequest": {
        "description": "Represents the request to delete a user as an administrator.",
        "properties": {
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminDisableProviderForUserRequest": {
        "properties": {
          "User": { "$ref": "#/components/schemas/ProviderUserIdentifierType" },
          "UserPoolId": { "$ref": "#/components/schemas/StringType" }
        },
        "required": ["UserPoolId", "User"],
        "type": "object"
      },
      "AdminDisableProviderForUserResponse": { "properties": {}, "type": "object" },
      "AdminDisableUserRequest": {
        "description": "Represents the request to disable any user as an administrator.",
        "properties": {
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminDisableUserResponse": {
        "description": "Represents the response received from the server to disable the user as an administrator.",
        "properties": {},
        "type": "object"
      },
      "AdminEnableUserRequest": {
        "description": "Represents the request that enables the user as an administrator.",
        "properties": {
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminEnableUserResponse": {
        "description": "Represents the response from the server for the request to enable a user as an administrator.",
        "properties": {},
        "type": "object"
      },
      "AdminForgetDeviceRequest": {
        "description": "Sends the forgot device request, as an administrator.",
        "properties": {
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "DeviceKey"],
        "type": "object"
      },
      "AdminGetDeviceRequest": {
        "description": "Represents the request to get the device, as an administrator.",
        "properties": {
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["DeviceKey", "UserPoolId", "Username"],
        "type": "object"
      },
      "AdminGetDeviceResponse": {
        "description": "Gets the device response, as an administrator.",
        "properties": { "Device": { "$ref": "#/components/schemas/DeviceType" } },
        "required": ["Device"],
        "type": "object"
      },
      "AdminGetUserRequest": {
        "description": "Represents the request to get the specified user as an administrator.",
        "properties": {
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminGetUserResponse": {
        "description": "Represents the response from the server from the request to get the specified user as an administrator.",
        "properties": {
          "Enabled": { "$ref": "#/components/schemas/BooleanType" },
          "MFAOptions": { "$ref": "#/components/schemas/MFAOptionListType" },
          "PreferredMfaSetting": { "$ref": "#/components/schemas/StringType" },
          "UserAttributes": { "$ref": "#/components/schemas/AttributeListType" },
          "UserCreateDate": { "$ref": "#/components/schemas/DateType" },
          "UserLastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "UserMFASettingList": { "$ref": "#/components/schemas/UserMFASettingListType" },
          "UserStatus": { "$ref": "#/components/schemas/UserStatusType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["Username"],
        "type": "object"
      },
      "AdminInitiateAuthRequest": {
        "description": "Initiates the authorization request, as an administrator.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "AuthFlow": { "$ref": "#/components/schemas/AuthFlowType" },
          "AuthParameters": { "$ref": "#/components/schemas/AuthParametersType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ClientMetadata": { "$ref": "#/components/schemas/ClientMetadataType" },
          "ContextData": { "$ref": "#/components/schemas/ContextDataType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "ClientId", "AuthFlow"],
        "type": "object"
      },
      "AdminInitiateAuthResponse": {
        "description": "Initiates the authentication response, as an administrator.",
        "properties": {
          "AuthenticationResult": { "$ref": "#/components/schemas/AuthenticationResultType" },
          "ChallengeName": { "$ref": "#/components/schemas/ChallengeNameType" },
          "ChallengeParameters": { "$ref": "#/components/schemas/ChallengeParametersType" },
          "Session": { "$ref": "#/components/schemas/SessionType" }
        },
        "type": "object"
      },
      "AdminLinkProviderForUserRequest": {
        "properties": {
          "DestinationUser": { "$ref": "#/components/schemas/ProviderUserIdentifierType" },
          "SourceUser": { "$ref": "#/components/schemas/ProviderUserIdentifierType" },
          "UserPoolId": { "$ref": "#/components/schemas/StringType" }
        },
        "required": ["UserPoolId", "DestinationUser", "SourceUser"],
        "type": "object"
      },
      "AdminLinkProviderForUserResponse": { "properties": {}, "type": "object" },
      "AdminListDevicesRequest": {
        "description": "Represents the request to list devices, as an administrator.",
        "properties": {
          "Limit": { "$ref": "#/components/schemas/QueryLimitType" },
          "PaginationToken": { "$ref": "#/components/schemas/SearchPaginationTokenType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminListDevicesResponse": {
        "description": "Lists the device's response, as an administrator.",
        "properties": {
          "Devices": { "$ref": "#/components/schemas/DeviceListType" },
          "PaginationToken": { "$ref": "#/components/schemas/SearchPaginationTokenType" }
        },
        "type": "object"
      },
      "AdminListGroupsForUserRequest": {
        "properties": {
          "Limit": { "$ref": "#/components/schemas/QueryLimitType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["Username", "UserPoolId"],
        "type": "object"
      },
      "AdminListGroupsForUserResponse": {
        "properties": {
          "Groups": { "$ref": "#/components/schemas/GroupListType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "type": "object"
      },
      "AdminListUserAuthEventsRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/QueryLimitType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminListUserAuthEventsResponse": {
        "properties": {
          "AuthEvents": { "$ref": "#/components/schemas/AuthEventsType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "type": "object"
      },
      "AdminRemoveUserFromGroupRequest": {
        "properties": {
          "GroupName": { "$ref": "#/components/schemas/GroupNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "GroupName"],
        "type": "object"
      },
      "AdminResetUserPasswordRequest": {
        "description": "Represents the request to reset a user's password as an administrator.",
        "properties": {
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminResetUserPasswordResponse": {
        "description": "Represents the response from the server to reset a user password as an administrator.",
        "properties": {},
        "type": "object"
      },
      "AdminRespondToAuthChallengeRequest": {
        "description": "The request to respond to the authentication challenge, as an administrator.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "ChallengeName": { "$ref": "#/components/schemas/ChallengeNameType" },
          "ChallengeResponses": { "$ref": "#/components/schemas/ChallengeResponsesType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ContextData": { "$ref": "#/components/schemas/ContextDataType" },
          "Session": { "$ref": "#/components/schemas/SessionType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "ClientId", "ChallengeName"],
        "type": "object"
      },
      "AdminRespondToAuthChallengeResponse": {
        "description": "Responds to the authentication challenge, as an administrator.",
        "properties": {
          "AuthenticationResult": { "$ref": "#/components/schemas/AuthenticationResultType" },
          "ChallengeName": { "$ref": "#/components/schemas/ChallengeNameType" },
          "ChallengeParameters": { "$ref": "#/components/schemas/ChallengeParametersType" },
          "Session": { "$ref": "#/components/schemas/SessionType" }
        },
        "type": "object"
      },
      "AdminSetUserMFAPreferenceRequest": {
        "properties": {
          "SMSMfaSettings": { "$ref": "#/components/schemas/SMSMfaSettingsType" },
          "SoftwareTokenMfaSettings": { "$ref": "#/components/schemas/SoftwareTokenMfaSettingsType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["Username", "UserPoolId"],
        "type": "object"
      },
      "AdminSetUserMFAPreferenceResponse": { "properties": {}, "type": "object" },
      "AdminSetUserPasswordRequest": {
        "properties": {
          "Password": { "$ref": "#/components/schemas/PasswordType" },
          "Permanent": { "$ref": "#/components/schemas/BooleanType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "Password"],
        "type": "object"
      },
      "AdminSetUserPasswordResponse": { "properties": {}, "type": "object" },
      "AdminSetUserSettingsRequest": {
        "description": "Represents the request to set user settings as an administrator.",
        "properties": {
          "MFAOptions": { "$ref": "#/components/schemas/MFAOptionListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "MFAOptions"],
        "type": "object"
      },
      "AdminSetUserSettingsResponse": {
        "description": "Represents the response from the server to set user settings as an administrator.",
        "properties": {},
        "type": "object"
      },
      "AdminUpdateAuthEventFeedbackRequest": {
        "properties": {
          "EventId": { "$ref": "#/components/schemas/EventIdType" },
          "FeedbackValue": { "$ref": "#/components/schemas/FeedbackValueType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "EventId", "FeedbackValue"],
        "type": "object"
      },
      "AdminUpdateAuthEventFeedbackResponse": { "properties": {}, "type": "object" },
      "AdminUpdateDeviceStatusRequest": {
        "description": "The request to update the device status, as an administrator.",
        "properties": {
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" },
          "DeviceRememberedStatus": { "$ref": "#/components/schemas/DeviceRememberedStatusType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "DeviceKey"],
        "type": "object"
      },
      "AdminUpdateDeviceStatusResponse": {
        "description": "The status response from the request to update the device, as an administrator.",
        "properties": {},
        "type": "object"
      },
      "AdminUpdateUserAttributesRequest": {
        "description": "Represents the request to update the user's attributes as an administrator.",
        "properties": {
          "UserAttributes": { "$ref": "#/components/schemas/AttributeListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "UserAttributes"],
        "type": "object"
      },
      "AdminUpdateUserAttributesResponse": {
        "description": "Represents the response from the server for the request to update user attributes as an administrator.",
        "properties": {},
        "type": "object"
      },
      "AdminUserGlobalSignOutRequest": {
        "description": "The request to sign out of all devices, as an administrator.",
        "properties": {
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username"],
        "type": "object"
      },
      "AdminUserGlobalSignOutResponse": {
        "description": "The global sign-out response, as an administrator.",
        "properties": {},
        "type": "object"
      },
      "AdvancedSecurityModeType": { "enum": ["OFF", "AUDIT", "ENFORCED"], "type": "string" },
      "AliasAttributeType": { "enum": ["phone_number", "email", "preferred_username"], "type": "string" },
      "AliasAttributesListType": { "items": { "$ref": "#/components/schemas/AliasAttributeType" }, "type": "array" },
      "AliasExistsException": {},
      "AnalyticsConfigurationType": {
        "description": "The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.",
        "properties": {
          "ApplicationId": { "$ref": "#/components/schemas/HexStringType" },
          "ExternalId": { "$ref": "#/components/schemas/StringType" },
          "RoleArn": { "$ref": "#/components/schemas/ArnType" },
          "UserDataShared": { "$ref": "#/components/schemas/BooleanType" }
        },
        "required": ["ApplicationId", "RoleArn", "ExternalId"],
        "type": "object"
      },
      "AnalyticsMetadataType": {
        "description": "<p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p>",
        "properties": { "AnalyticsEndpointId": { "$ref": "#/components/schemas/StringType" } },
        "type": "object"
      },
      "ArnType": {
        "maxLength": 2048,
        "minLength": 20,
        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
        "type": "string"
      },
      "AssociateSoftwareTokenRequest": {
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "Session": { "$ref": "#/components/schemas/SessionType" }
        },
        "type": "object"
      },
      "AssociateSoftwareTokenResponse": {
        "properties": {
          "SecretCode": { "$ref": "#/components/schemas/SecretCodeType" },
          "Session": { "$ref": "#/components/schemas/SessionType" }
        },
        "type": "object"
      },
      "AttributeDataType": { "enum": ["String", "Number", "DateTime", "Boolean"], "type": "string" },
      "AttributeListType": { "items": { "$ref": "#/components/schemas/AttributeType" }, "type": "array" },
      "AttributeMappingKeyType": { "maxLength": 32, "minLength": 1, "type": "string" },
      "AttributeMappingType": {
        "additionalProperties": { "$ref": "#/components/schemas/StringType" },
        "type": "object"
      },
      "AttributeNameListType": { "items": { "$ref": "#/components/schemas/AttributeNameType" }, "type": "array" },
      "AttributeNameType": {
        "maxLength": 32,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "AttributeType": {
        "description": "Specifies whether the attribute is standard or custom.",
        "properties": {
          "Name": { "$ref": "#/components/schemas/AttributeNameType" },
          "Value": { "$ref": "#/components/schemas/AttributeValueType" }
        },
        "required": ["Name"],
        "type": "object"
      },
      "AttributeValueType": { "format": "password", "maxLength": 2048, "type": "string" },
      "AuthEventType": {
        "description": "The authentication event type.",
        "properties": {
          "ChallengeResponses": { "$ref": "#/components/schemas/ChallengeResponseListType" },
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "EventContextData": { "$ref": "#/components/schemas/EventContextDataType" },
          "EventFeedback": { "$ref": "#/components/schemas/EventFeedbackType" },
          "EventId": { "$ref": "#/components/schemas/StringType" },
          "EventResponse": { "$ref": "#/components/schemas/EventResponseType" },
          "EventRisk": { "$ref": "#/components/schemas/EventRiskType" },
          "EventType": { "$ref": "#/components/schemas/EventType" }
        },
        "type": "object"
      },
      "AuthEventsType": { "items": { "$ref": "#/components/schemas/AuthEventType" }, "type": "array" },
      "AuthFlowType": {
        "enum": [
          "USER_SRP_AUTH",
          "REFRESH_TOKEN_AUTH",
          "REFRESH_TOKEN",
          "CUSTOM_AUTH",
          "ADMIN_NO_SRP_AUTH",
          "USER_PASSWORD_AUTH"
        ],
        "type": "string"
      },
      "AuthParametersType": { "additionalProperties": { "$ref": "#/components/schemas/StringType" }, "type": "object" },
      "AuthenticationResultType": {
        "description": "The authentication result.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "ExpiresIn": { "$ref": "#/components/schemas/IntegerType" },
          "IdToken": { "$ref": "#/components/schemas/TokenModelType" },
          "NewDeviceMetadata": { "$ref": "#/components/schemas/NewDeviceMetadataType" },
          "RefreshToken": { "$ref": "#/components/schemas/TokenModelType" },
          "TokenType": { "$ref": "#/components/schemas/StringType" }
        },
        "type": "object"
      },
      "BlockedIPRangeListType": {
        "items": { "$ref": "#/components/schemas/StringType" },
        "maxItems": 20,
        "type": "array"
      },
      "BooleanType": { "type": "boolean" },
      "CSSType": { "type": "string" },
      "CSSVersionType": { "type": "string" },
      "CallbackURLsListType": {
        "items": { "$ref": "#/components/schemas/RedirectUrlType" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "ChallengeName": { "enum": ["Password", "Mfa"], "type": "string" },
      "ChallengeNameType": {
        "enum": [
          "SMS_MFA",
          "SOFTWARE_TOKEN_MFA",
          "SELECT_MFA_TYPE",
          "MFA_SETUP",
          "PASSWORD_VERIFIER",
          "CUSTOM_CHALLENGE",
          "DEVICE_SRP_AUTH",
          "DEVICE_PASSWORD_VERIFIER",
          "ADMIN_NO_SRP_AUTH",
          "NEW_PASSWORD_REQUIRED"
        ],
        "type": "string"
      },
      "ChallengeParametersType": {
        "additionalProperties": { "$ref": "#/components/schemas/StringType" },
        "type": "object"
      },
      "ChallengeResponse": { "enum": ["Success", "Failure"], "type": "string" },
      "ChallengeResponseListType": {
        "items": { "$ref": "#/components/schemas/ChallengeResponseType" },
        "type": "array"
      },
      "ChallengeResponseType": {
        "description": "The challenge response type.",
        "properties": {
          "ChallengeName": { "$ref": "#/components/schemas/ChallengeName" },
          "ChallengeResponse": { "$ref": "#/components/schemas/ChallengeResponse" }
        },
        "type": "object"
      },
      "ChallengeResponsesType": {
        "additionalProperties": { "$ref": "#/components/schemas/StringType" },
        "type": "object"
      },
      "ChangePasswordRequest": {
        "description": "Represents the request to change a user password.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "PreviousPassword": { "$ref": "#/components/schemas/PasswordType" },
          "ProposedPassword": { "$ref": "#/components/schemas/PasswordType" }
        },
        "required": ["PreviousPassword", "ProposedPassword", "AccessToken"],
        "type": "object"
      },
      "ChangePasswordResponse": {
        "description": "The response from the server to the change password request.",
        "properties": {},
        "type": "object"
      },
      "ClientIdType": {
        "format": "password",
        "maxLength": 128,
        "minLength": 1,
        "pattern": "[\\w+]+",
        "type": "string"
      },
      "ClientMetadataType": { "additionalProperties": { "$ref": "#/components/schemas/StringType" }, "type": "object" },
      "ClientNameType": { "maxLength": 128, "minLength": 1, "pattern": "[\\w\\s+=,.@-]+", "type": "string" },
      "ClientPermissionListType": { "items": { "$ref": "#/components/schemas/ClientPermissionType" }, "type": "array" },
      "ClientPermissionType": { "maxLength": 2048, "minLength": 1, "type": "string" },
      "ClientSecretType": {
        "format": "password",
        "maxLength": 64,
        "minLength": 1,
        "pattern": "[\\w+]+",
        "type": "string"
      },
      "CodeDeliveryDetailsListType": {
        "items": { "$ref": "#/components/schemas/CodeDeliveryDetailsType" },
        "type": "array"
      },
      "CodeDeliveryDetailsType": {
        "description": "The code delivery details being returned from the server.",
        "properties": {
          "AttributeName": { "$ref": "#/components/schemas/AttributeNameType" },
          "DeliveryMedium": { "$ref": "#/components/schemas/DeliveryMediumType" },
          "Destination": { "$ref": "#/components/schemas/StringType" }
        },
        "type": "object"
      },
      "CodeDeliveryFailureException": {},
      "CodeMismatchException": {},
      "CompletionMessageType": { "maxLength": 128, "minLength": 1, "pattern": "[\\w]+", "type": "string" },
      "CompromisedCredentialsActionsType": {
        "description": "The compromised credentials actions type",
        "properties": { "EventAction": { "$ref": "#/components/schemas/CompromisedCredentialsEventActionType" } },
        "required": ["EventAction"],
        "type": "object"
      },
      "CompromisedCredentialsEventActionType": { "enum": ["BLOCK", "NO_ACTION"], "type": "string" },
      "CompromisedCredentialsRiskConfigurationType": {
        "description": "The compromised credentials risk configuration type.",
        "properties": {
          "Actions": { "$ref": "#/components/schemas/CompromisedCredentialsActionsType" },
          "EventFilter": { "$ref": "#/components/schemas/EventFiltersType" }
        },
        "required": ["Actions"],
        "type": "object"
      },
      "ConcurrentModificationException": {},
      "ConfirmDeviceRequest": {
        "description": "Confirms the device request.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" },
          "DeviceName": { "$ref": "#/components/schemas/DeviceNameType" },
          "DeviceSecretVerifierConfig": { "$ref": "#/components/schemas/DeviceSecretVerifierConfigType" }
        },
        "required": ["AccessToken", "DeviceKey"],
        "type": "object"
      },
      "ConfirmDeviceResponse": {
        "description": "Confirms the device response.",
        "properties": { "UserConfirmationNecessary": { "$ref": "#/components/schemas/BooleanType" } },
        "type": "object"
      },
      "ConfirmForgotPasswordRequest": {
        "description": "The request representing the confirmation for a password reset.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ConfirmationCode": { "$ref": "#/components/schemas/ConfirmationCodeType" },
          "Password": { "$ref": "#/components/schemas/PasswordType" },
          "SecretHash": { "$ref": "#/components/schemas/SecretHashType" },
          "UserContextData": { "$ref": "#/components/schemas/UserContextDataType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["ClientId", "Username", "ConfirmationCode", "Password"],
        "type": "object"
      },
      "ConfirmForgotPasswordResponse": {
        "description": "The response from the server that results from a user's request to retrieve a forgotten password.",
        "properties": {},
        "type": "object"
      },
      "ConfirmSignUpRequest": {
        "description": "Represents the request to confirm registration of a user.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ConfirmationCode": { "$ref": "#/components/schemas/ConfirmationCodeType" },
          "ForceAliasCreation": { "$ref": "#/components/schemas/ForceAliasCreation" },
          "SecretHash": { "$ref": "#/components/schemas/SecretHashType" },
          "UserContextData": { "$ref": "#/components/schemas/UserContextDataType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["ClientId", "Username", "ConfirmationCode"],
        "type": "object"
      },
      "ConfirmSignUpResponse": {
        "description": "Represents the response from the server for the registration confirmation.",
        "properties": {},
        "type": "object"
      },
      "ConfirmationCodeType": { "maxLength": 2048, "minLength": 1, "pattern": "[\\S]+", "type": "string" },
      "ContextDataType": {
        "description": "Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
        "properties": {
          "EncodedData": { "$ref": "#/components/schemas/StringType" },
          "HttpHeaders": { "$ref": "#/components/schemas/HttpHeaderList" },
          "IpAddress": { "$ref": "#/components/schemas/StringType" },
          "ServerName": { "$ref": "#/components/schemas/StringType" },
          "ServerPath": { "$ref": "#/components/schemas/StringType" }
        },
        "required": ["IpAddress", "ServerName", "ServerPath", "HttpHeaders"],
        "type": "object"
      },
      "CreateGroupRequest": {
        "properties": {
          "Description": { "$ref": "#/components/schemas/DescriptionType" },
          "GroupName": { "$ref": "#/components/schemas/GroupNameType" },
          "Precedence": { "$ref": "#/components/schemas/PrecedenceType" },
          "RoleArn": { "$ref": "#/components/schemas/ArnType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["GroupName", "UserPoolId"],
        "type": "object"
      },
      "CreateGroupResponse": {
        "properties": { "Group": { "$ref": "#/components/schemas/GroupType" } },
        "type": "object"
      },
      "CreateIdentityProviderRequest": {
        "properties": {
          "AttributeMapping": { "$ref": "#/components/schemas/AttributeMappingType" },
          "IdpIdentifiers": { "$ref": "#/components/schemas/IdpIdentifiersListType" },
          "ProviderDetails": { "$ref": "#/components/schemas/ProviderDetailsType" },
          "ProviderName": { "$ref": "#/components/schemas/ProviderNameTypeV1" },
          "ProviderType": { "$ref": "#/components/schemas/IdentityProviderTypeType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "ProviderName", "ProviderType", "ProviderDetails"],
        "type": "object"
      },
      "CreateIdentityProviderResponse": {
        "properties": { "IdentityProvider": { "$ref": "#/components/schemas/IdentityProviderType" } },
        "required": ["IdentityProvider"],
        "type": "object"
      },
      "CreateResourceServerRequest": {
        "properties": {
          "Identifier": { "$ref": "#/components/schemas/ResourceServerIdentifierType" },
          "Name": { "$ref": "#/components/schemas/ResourceServerNameType" },
          "Scopes": { "$ref": "#/components/schemas/ResourceServerScopeListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "Identifier", "Name"],
        "type": "object"
      },
      "CreateResourceServerResponse": {
        "properties": { "ResourceServer": { "$ref": "#/components/schemas/ResourceServerType" } },
        "required": ["ResourceServer"],
        "type": "object"
      },
      "CreateUserImportJobRequest": {
        "description": "Represents the request to create the user import job.",
        "properties": {
          "CloudWatchLogsRoleArn": { "$ref": "#/components/schemas/ArnType" },
          "JobName": { "$ref": "#/components/schemas/UserImportJobNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["JobName", "UserPoolId", "CloudWatchLogsRoleArn"],
        "type": "object"
      },
      "CreateUserImportJobResponse": {
        "description": "Represents the response from the server to the request to create the user import job.",
        "properties": { "UserImportJob": { "$ref": "#/components/schemas/UserImportJobType" } },
        "type": "object"
      },
      "CreateUserPoolClientRequest": {
        "description": "Represents the request to create a user pool client.",
        "properties": {
          "AllowedOAuthFlows": { "$ref": "#/components/schemas/OAuthFlowsType" },
          "AllowedOAuthFlowsUserPoolClient": { "$ref": "#/components/schemas/BooleanType" },
          "AllowedOAuthScopes": { "$ref": "#/components/schemas/ScopeListType" },
          "AnalyticsConfiguration": { "$ref": "#/components/schemas/AnalyticsConfigurationType" },
          "CallbackURLs": { "$ref": "#/components/schemas/CallbackURLsListType" },
          "ClientName": { "$ref": "#/components/schemas/ClientNameType" },
          "DefaultRedirectURI": { "$ref": "#/components/schemas/RedirectUrlType" },
          "ExplicitAuthFlows": { "$ref": "#/components/schemas/ExplicitAuthFlowsListType" },
          "GenerateSecret": { "$ref": "#/components/schemas/GenerateSecret" },
          "LogoutURLs": { "$ref": "#/components/schemas/LogoutURLsListType" },
          "ReadAttributes": { "$ref": "#/components/schemas/ClientPermissionListType" },
          "RefreshTokenValidity": { "$ref": "#/components/schemas/RefreshTokenValidityType" },
          "SupportedIdentityProviders": { "$ref": "#/components/schemas/SupportedIdentityProvidersListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "WriteAttributes": { "$ref": "#/components/schemas/ClientPermissionListType" }
        },
        "required": ["UserPoolId", "ClientName"],
        "type": "object"
      },
      "CreateUserPoolClientResponse": {
        "description": "Represents the response from the server to create a user pool client.",
        "properties": { "UserPoolClient": { "$ref": "#/components/schemas/UserPoolClientType" } },
        "type": "object"
      },
      "CreateUserPoolDomainRequest": {
        "properties": {
          "CustomDomainConfig": { "$ref": "#/components/schemas/CustomDomainConfigType" },
          "Domain": { "$ref": "#/components/schemas/DomainType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["Domain", "UserPoolId"],
        "type": "object"
      },
      "CreateUserPoolDomainResponse": {
        "properties": { "CloudFrontDomain": { "$ref": "#/components/schemas/DomainType" } },
        "type": "object"
      },
      "CreateUserPoolRequest": {
        "description": "Represents the request to create a user pool.",
        "properties": {
          "AdminCreateUserConfig": { "$ref": "#/components/schemas/AdminCreateUserConfigType" },
          "AliasAttributes": { "$ref": "#/components/schemas/AliasAttributesListType" },
          "AutoVerifiedAttributes": { "$ref": "#/components/schemas/VerifiedAttributesListType" },
          "DeviceConfiguration": { "$ref": "#/components/schemas/DeviceConfigurationType" },
          "EmailConfiguration": { "$ref": "#/components/schemas/EmailConfigurationType" },
          "EmailVerificationMessage": { "$ref": "#/components/schemas/EmailVerificationMessageType" },
          "EmailVerificationSubject": { "$ref": "#/components/schemas/EmailVerificationSubjectType" },
          "LambdaConfig": { "$ref": "#/components/schemas/LambdaConfigType" },
          "MfaConfiguration": { "$ref": "#/components/schemas/UserPoolMfaType" },
          "Policies": { "$ref": "#/components/schemas/UserPoolPolicyType" },
          "PoolName": { "$ref": "#/components/schemas/UserPoolNameType" },
          "Schema": { "$ref": "#/components/schemas/SchemaAttributesListType" },
          "SmsAuthenticationMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" },
          "SmsConfiguration": { "$ref": "#/components/schemas/SmsConfigurationType" },
          "SmsVerificationMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" },
          "UserPoolAddOns": { "$ref": "#/components/schemas/UserPoolAddOnsType" },
          "UserPoolTags": { "$ref": "#/components/schemas/UserPoolTagsType" },
          "UsernameAttributes": { "$ref": "#/components/schemas/UsernameAttributesListType" },
          "VerificationMessageTemplate": { "$ref": "#/components/schemas/VerificationMessageTemplateType" }
        },
        "required": ["PoolName"],
        "type": "object"
      },
      "CreateUserPoolResponse": {
        "description": "Represents the response from the server for the request to create a user pool.",
        "properties": { "UserPool": { "$ref": "#/components/schemas/UserPoolType" } },
        "type": "object"
      },
      "CustomAttributeNameType": {
        "maxLength": 20,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "CustomAttributesListType": {
        "items": { "$ref": "#/components/schemas/SchemaAttributeType" },
        "maxItems": 25,
        "minItems": 1,
        "type": "array"
      },
      "CustomDomainConfigType": {
        "description": "The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.",
        "properties": { "CertificateArn": { "$ref": "#/components/schemas/ArnType" } },
        "required": ["CertificateArn"],
        "type": "object"
      },
      "DateType": { "format": "date-time", "type": "string" },
      "DefaultEmailOptionType": { "enum": ["CONFIRM_WITH_LINK", "CONFIRM_WITH_CODE"], "type": "string" },
      "DeleteGroupRequest": {
        "properties": {
          "GroupName": { "$ref": "#/components/schemas/GroupNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["GroupName", "UserPoolId"],
        "type": "object"
      },
      "DeleteIdentityProviderRequest": {
        "properties": {
          "ProviderName": { "$ref": "#/components/schemas/ProviderNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "ProviderName"],
        "type": "object"
      },
      "DeleteResourceServerRequest": {
        "properties": {
          "Identifier": { "$ref": "#/components/schemas/ResourceServerIdentifierType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "Identifier"],
        "type": "object"
      },
      "DeleteUserAttributesRequest": {
        "description": "Represents the request to delete user attributes.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "UserAttributeNames": { "$ref": "#/components/schemas/AttributeNameListType" }
        },
        "required": ["UserAttributeNames", "AccessToken"],
        "type": "object"
      },
      "DeleteUserAttributesResponse": {
        "description": "Represents the response from the server to delete user attributes.",
        "properties": {},
        "type": "object"
      },
      "DeleteUserPoolClientRequest": {
        "description": "Represents the request to delete a user pool client.",
        "properties": {
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "ClientId"],
        "type": "object"
      },
      "DeleteUserPoolDomainRequest": {
        "properties": {
          "Domain": { "$ref": "#/components/schemas/DomainType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["Domain", "UserPoolId"],
        "type": "object"
      },
      "DeleteUserPoolDomainResponse": { "properties": {}, "type": "object" },
      "DeleteUserPoolRequest": {
        "description": "Represents the request to delete a user pool.",
        "properties": { "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" } },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "DeleteUserRequest": {
        "description": "Represents the request to delete a user.",
        "properties": { "AccessToken": { "$ref": "#/components/schemas/TokenModelType" } },
        "required": ["AccessToken"],
        "type": "object"
      },
      "DeliveryMediumListType": { "items": { "$ref": "#/components/schemas/DeliveryMediumType" }, "type": "array" },
      "DeliveryMediumType": { "enum": ["SMS", "EMAIL"], "type": "string" },
      "DescribeIdentityProviderRequest": {
        "properties": {
          "ProviderName": { "$ref": "#/components/schemas/ProviderNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "ProviderName"],
        "type": "object"
      },
      "DescribeIdentityProviderResponse": {
        "properties": { "IdentityProvider": { "$ref": "#/components/schemas/IdentityProviderType" } },
        "required": ["IdentityProvider"],
        "type": "object"
      },
      "DescribeResourceServerRequest": {
        "properties": {
          "Identifier": { "$ref": "#/components/schemas/ResourceServerIdentifierType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "Identifier"],
        "type": "object"
      },
      "DescribeResourceServerResponse": {
        "properties": { "ResourceServer": { "$ref": "#/components/schemas/ResourceServerType" } },
        "required": ["ResourceServer"],
        "type": "object"
      },
      "DescribeRiskConfigurationRequest": {
        "properties": {
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "DescribeRiskConfigurationResponse": {
        "properties": { "RiskConfiguration": { "$ref": "#/components/schemas/RiskConfigurationType" } },
        "required": ["RiskConfiguration"],
        "type": "object"
      },
      "DescribeUserImportJobRequest": {
        "description": "Represents the request to describe the user import job.",
        "properties": {
          "JobId": { "$ref": "#/components/schemas/UserImportJobIdType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "JobId"],
        "type": "object"
      },
      "DescribeUserImportJobResponse": {
        "description": "Represents the response from the server to the request to describe the user import job.",
        "properties": { "UserImportJob": { "$ref": "#/components/schemas/UserImportJobType" } },
        "type": "object"
      },
      "DescribeUserPoolClientRequest": {
        "description": "Represents the request to describe a user pool client.",
        "properties": {
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "ClientId"],
        "type": "object"
      },
      "DescribeUserPoolClientResponse": {
        "description": "Represents the response from the server from a request to describe the user pool client.",
        "properties": { "UserPoolClient": { "$ref": "#/components/schemas/UserPoolClientType" } },
        "type": "object"
      },
      "DescribeUserPoolDomainRequest": {
        "properties": { "Domain": { "$ref": "#/components/schemas/DomainType" } },
        "required": ["Domain"],
        "type": "object"
      },
      "DescribeUserPoolDomainResponse": {
        "properties": { "DomainDescription": { "$ref": "#/components/schemas/DomainDescriptionType" } },
        "type": "object"
      },
      "DescribeUserPoolRequest": {
        "description": "Represents the request to describe the user pool.",
        "properties": { "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" } },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "DescribeUserPoolResponse": {
        "description": "Represents the response to describe the user pool.",
        "properties": { "UserPool": { "$ref": "#/components/schemas/UserPoolType" } },
        "type": "object"
      },
      "DescriptionType": { "maxLength": 2048, "type": "string" },
      "DeviceConfigurationType": {
        "description": "The configuration for the user pool's device tracking.",
        "properties": {
          "ChallengeRequiredOnNewDevice": { "$ref": "#/components/schemas/BooleanType" },
          "DeviceOnlyRememberedOnUserPrompt": { "$ref": "#/components/schemas/BooleanType" }
        },
        "type": "object"
      },
      "DeviceKeyType": { "maxLength": 55, "minLength": 1, "pattern": "[\\w-]+_[0-9a-f-]+", "type": "string" },
      "DeviceListType": { "items": { "$ref": "#/components/schemas/DeviceType" }, "type": "array" },
      "DeviceNameType": { "maxLength": 1024, "minLength": 1, "type": "string" },
      "DeviceRememberedStatusType": { "enum": ["remembered", "not_remembered"], "type": "string" },
      "DeviceSecretVerifierConfigType": {
        "description": "The device verifier against which it will be authenticated.",
        "properties": {
          "PasswordVerifier": { "$ref": "#/components/schemas/StringType" },
          "Salt": { "$ref": "#/components/schemas/StringType" }
        },
        "type": "object"
      },
      "DeviceType": {
        "description": "The device type.",
        "properties": {
          "DeviceAttributes": { "$ref": "#/components/schemas/AttributeListType" },
          "DeviceCreateDate": { "$ref": "#/components/schemas/DateType" },
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" },
          "DeviceLastAuthenticatedDate": { "$ref": "#/components/schemas/DateType" },
          "DeviceLastModifiedDate": { "$ref": "#/components/schemas/DateType" }
        },
        "type": "object"
      },
      "DomainDescriptionType": {
        "description": "A container for information about a domain.",
        "properties": {
          "AWSAccountId": { "$ref": "#/components/schemas/AWSAccountIdType" },
          "CloudFrontDistribution": { "$ref": "#/components/schemas/StringType" },
          "CustomDomainConfig": { "$ref": "#/components/schemas/CustomDomainConfigType" },
          "Domain": { "$ref": "#/components/schemas/DomainType" },
          "S3Bucket": { "$ref": "#/components/schemas/S3BucketType" },
          "Status": { "$ref": "#/components/schemas/DomainStatusType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Version": { "$ref": "#/components/schemas/DomainVersionType" }
        },
        "type": "object"
      },
      "DomainStatusType": { "enum": ["CREATING", "DELETING", "UPDATING", "ACTIVE", "FAILED"], "type": "string" },
      "DomainType": {
        "maxLength": 63,
        "minLength": 1,
        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
        "type": "string"
      },
      "DomainVersionType": { "maxLength": 20, "minLength": 1, "type": "string" },
      "DuplicateProviderException": {},
      "EmailAddressType": {
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "EmailConfigurationType": {
        "description": "The email configuration type.",
        "properties": {
          "EmailSendingAccount": { "$ref": "#/components/schemas/EmailSendingAccountType" },
          "ReplyToEmailAddress": { "$ref": "#/components/schemas/EmailAddressType" },
          "SourceArn": { "$ref": "#/components/schemas/ArnType" }
        },
        "type": "object"
      },
      "EmailNotificationBodyType": {
        "maxLength": 20000,
        "minLength": 6,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
        "type": "string"
      },
      "EmailNotificationSubjectType": {
        "maxLength": 140,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
        "type": "string"
      },
      "EmailSendingAccountType": { "enum": ["COGNITO_DEFAULT", "DEVELOPER"], "type": "string" },
      "EmailVerificationMessageByLinkType": {
        "maxLength": 20000,
        "minLength": 6,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
        "type": "string"
      },
      "EmailVerificationMessageType": {
        "maxLength": 20000,
        "minLength": 6,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
        "type": "string"
      },
      "EmailVerificationSubjectByLinkType": {
        "maxLength": 140,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
        "type": "string"
      },
      "EmailVerificationSubjectType": {
        "maxLength": 140,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
        "type": "string"
      },
      "EnableSoftwareTokenMFAException": {},
      "EventContextDataType": {
        "description": "Specifies the user context data captured at the time of an event request.",
        "properties": {
          "City": { "$ref": "#/components/schemas/StringType" },
          "Country": { "$ref": "#/components/schemas/StringType" },
          "DeviceName": { "$ref": "#/components/schemas/StringType" },
          "IpAddress": { "$ref": "#/components/schemas/StringType" },
          "Timezone": { "$ref": "#/components/schemas/StringType" }
        },
        "type": "object"
      },
      "EventFeedbackType": {
        "description": "Specifies the event feedback type.",
        "properties": {
          "FeedbackDate": { "$ref": "#/components/schemas/DateType" },
          "FeedbackValue": { "$ref": "#/components/schemas/FeedbackValueType" },
          "Provider": { "$ref": "#/components/schemas/StringType" }
        },
        "required": ["FeedbackValue", "Provider"],
        "type": "object"
      },
      "EventFilterType": { "enum": ["SIGN_IN", "PASSWORD_CHANGE", "SIGN_UP"], "type": "string" },
      "EventFiltersType": { "items": { "$ref": "#/components/schemas/EventFilterType" }, "type": "array" },
      "EventIdType": { "maxLength": 50, "minLength": 1, "pattern": "[\\w+-]+", "type": "string" },
      "EventResponseType": { "enum": ["Success", "Failure"], "type": "string" },
      "EventRiskType": {
        "description": "The event risk type.",
        "properties": {
          "RiskDecision": { "$ref": "#/components/schemas/RiskDecisionType" },
          "RiskLevel": { "$ref": "#/components/schemas/RiskLevelType" }
        },
        "type": "object"
      },
      "EventType": { "enum": ["SignIn", "SignUp", "ForgotPassword"], "type": "string" },
      "ExpiredCodeException": {},
      "ExplicitAuthFlowsListType": {
        "items": { "$ref": "#/components/schemas/ExplicitAuthFlowsType" },
        "type": "array"
      },
      "ExplicitAuthFlowsType": {
        "enum": ["ADMIN_NO_SRP_AUTH", "CUSTOM_AUTH_FLOW_ONLY", "USER_PASSWORD_AUTH"],
        "type": "string"
      },
      "FeedbackValueType": { "enum": ["Valid", "Invalid"], "type": "string" },
      "ForceAliasCreation": { "type": "boolean" },
      "ForgetDeviceRequest": {
        "description": "Represents the request to forget the device.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" }
        },
        "required": ["DeviceKey"],
        "type": "object"
      },
      "ForgotPasswordRequest": {
        "description": "Represents the request to reset a user's password.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "SecretHash": { "$ref": "#/components/schemas/SecretHashType" },
          "UserContextData": { "$ref": "#/components/schemas/UserContextDataType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["ClientId", "Username"],
        "type": "object"
      },
      "ForgotPasswordResponse": {
        "description": "Respresents the response from the server regarding the request to reset a password.",
        "properties": { "CodeDeliveryDetails": { "$ref": "#/components/schemas/CodeDeliveryDetailsType" } },
        "type": "object"
      },
      "GenerateSecret": { "type": "boolean" },
      "GetCSVHeaderRequest": {
        "description": "Represents the request to get the header information for the .csv file for the user import job.",
        "properties": { "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" } },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "GetCSVHeaderResponse": {
        "description": "Represents the response from the server to the request to get the header information for the .csv file for the user import job.",
        "properties": {
          "CSVHeader": { "$ref": "#/components/schemas/ListOfStringTypes" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "type": "object"
      },
      "GetDeviceRequest": {
        "description": "Represents the request to get the device.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" }
        },
        "required": ["DeviceKey"],
        "type": "object"
      },
      "GetDeviceResponse": {
        "description": "Gets the device response.",
        "properties": { "Device": { "$ref": "#/components/schemas/DeviceType" } },
        "required": ["Device"],
        "type": "object"
      },
      "GetGroupRequest": {
        "properties": {
          "GroupName": { "$ref": "#/components/schemas/GroupNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["GroupName", "UserPoolId"],
        "type": "object"
      },
      "GetGroupResponse": { "properties": { "Group": { "$ref": "#/components/schemas/GroupType" } }, "type": "object" },
      "GetIdentityProviderByIdentifierRequest": {
        "properties": {
          "IdpIdentifier": { "$ref": "#/components/schemas/IdpIdentifierType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "IdpIdentifier"],
        "type": "object"
      },
      "GetIdentityProviderByIdentifierResponse": {
        "properties": { "IdentityProvider": { "$ref": "#/components/schemas/IdentityProviderType" } },
        "required": ["IdentityProvider"],
        "type": "object"
      },
      "GetSigningCertificateRequest": {
        "description": "Request to get a signing certificate from Cognito.",
        "properties": { "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" } },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "GetSigningCertificateResponse": {
        "description": "Response from Cognito for a signing certificate request.",
        "properties": { "Certificate": { "$ref": "#/components/schemas/StringType" } },
        "type": "object"
      },
      "GetUICustomizationRequest": {
        "properties": {
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "GetUICustomizationResponse": {
        "properties": { "UICustomization": { "$ref": "#/components/schemas/UICustomizationType" } },
        "required": ["UICustomization"],
        "type": "object"
      },
      "GetUserAttributeVerificationCodeRequest": {
        "description": "Represents the request to get user attribute verification.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "AttributeName": { "$ref": "#/components/schemas/AttributeNameType" }
        },
        "required": ["AccessToken", "AttributeName"],
        "type": "object"
      },
      "GetUserAttributeVerificationCodeResponse": {
        "description": "The verification code response returned by the server response to get the user attribute verification code.",
        "properties": { "CodeDeliveryDetails": { "$ref": "#/components/schemas/CodeDeliveryDetailsType" } },
        "type": "object"
      },
      "GetUserPoolMfaConfigRequest": {
        "properties": { "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" } },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "GetUserPoolMfaConfigResponse": {
        "properties": {
          "MfaConfiguration": { "$ref": "#/components/schemas/UserPoolMfaType" },
          "SmsMfaConfiguration": { "$ref": "#/components/schemas/SmsMfaConfigType" },
          "SoftwareTokenMfaConfiguration": { "$ref": "#/components/schemas/SoftwareTokenMfaConfigType" }
        },
        "type": "object"
      },
      "GetUserRequest": {
        "description": "Represents the request to get information about the user.",
        "properties": { "AccessToken": { "$ref": "#/components/schemas/TokenModelType" } },
        "required": ["AccessToken"],
        "type": "object"
      },
      "GetUserResponse": {
        "description": "Represents the response from the server from the request to get information about the user.",
        "properties": {
          "MFAOptions": { "$ref": "#/components/schemas/MFAOptionListType" },
          "PreferredMfaSetting": { "$ref": "#/components/schemas/StringType" },
          "UserAttributes": { "$ref": "#/components/schemas/AttributeListType" },
          "UserMFASettingList": { "$ref": "#/components/schemas/UserMFASettingListType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["Username", "UserAttributes"],
        "type": "object"
      },
      "GlobalSignOutRequest": {
        "description": "Represents the request to sign out all devices.",
        "properties": { "AccessToken": { "$ref": "#/components/schemas/TokenModelType" } },
        "required": ["AccessToken"],
        "type": "object"
      },
      "GlobalSignOutResponse": {
        "description": "The response to the request to sign out all devices.",
        "properties": {},
        "type": "object"
      },
      "GroupExistsException": {},
      "GroupListType": { "items": { "$ref": "#/components/schemas/GroupType" }, "type": "array" },
      "GroupNameType": {
        "maxLength": 128,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "GroupType": {
        "description": "The group type.",
        "properties": {
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "Description": { "$ref": "#/components/schemas/DescriptionType" },
          "GroupName": { "$ref": "#/components/schemas/GroupNameType" },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "Precedence": { "$ref": "#/components/schemas/PrecedenceType" },
          "RoleArn": { "$ref": "#/components/schemas/ArnType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "type": "object"
      },
      "HexStringType": { "pattern": "^[0-9a-fA-F]+$", "type": "string" },
      "HttpHeader": {
        "description": "The HTTP header.",
        "properties": {
          "headerName": { "$ref": "#/components/schemas/StringType" },
          "headerValue": { "$ref": "#/components/schemas/StringType" }
        },
        "type": "object"
      },
      "HttpHeaderList": { "items": { "$ref": "#/components/schemas/HttpHeader" }, "type": "array" },
      "IdentityProviderType": {
        "description": "A container for information about an identity provider.",
        "properties": {
          "AttributeMapping": { "$ref": "#/components/schemas/AttributeMappingType" },
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "IdpIdentifiers": { "$ref": "#/components/schemas/IdpIdentifiersListType" },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "ProviderDetails": { "$ref": "#/components/schemas/ProviderDetailsType" },
          "ProviderName": { "$ref": "#/components/schemas/ProviderNameType" },
          "ProviderType": { "$ref": "#/components/schemas/IdentityProviderTypeType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "type": "object"
      },
      "IdentityProviderTypeType": {
        "enum": ["SAML", "Facebook", "Google", "LoginWithAmazon", "OIDC"],
        "type": "string"
      },
      "IdpIdentifierType": { "maxLength": 40, "minLength": 1, "pattern": "[\\w\\s+=.@-]+", "type": "string" },
      "IdpIdentifiersListType": {
        "items": { "$ref": "#/components/schemas/IdpIdentifierType" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      },
      "ImageFileType": { "type": "string" },
      "ImageUrlType": { "type": "string" },
      "InitiateAuthRequest": {
        "description": "Initiates the authentication request.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "AuthFlow": { "$ref": "#/components/schemas/AuthFlowType" },
          "AuthParameters": { "$ref": "#/components/schemas/AuthParametersType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ClientMetadata": { "$ref": "#/components/schemas/ClientMetadataType" },
          "UserContextData": { "$ref": "#/components/schemas/UserContextDataType" }
        },
        "required": ["AuthFlow", "ClientId"],
        "type": "object"
      },
      "InitiateAuthResponse": {
        "description": "Initiates the authentication response.",
        "properties": {
          "AuthenticationResult": { "$ref": "#/components/schemas/AuthenticationResultType" },
          "ChallengeName": { "$ref": "#/components/schemas/ChallengeNameType" },
          "ChallengeParameters": { "$ref": "#/components/schemas/ChallengeParametersType" },
          "Session": { "$ref": "#/components/schemas/SessionType" }
        },
        "type": "object"
      },
      "IntegerType": { "type": "integer" },
      "InternalErrorException": {},
      "InvalidEmailRoleAccessPolicyException": {},
      "InvalidLambdaResponseException": {},
      "InvalidOAuthFlowException": {},
      "InvalidParameterException": {},
      "InvalidPasswordException": {},
      "InvalidSmsRoleAccessPolicyException": {},
      "InvalidSmsRoleTrustRelationshipException": {},
      "InvalidUserPoolConfigurationException": {},
      "LambdaConfigType": {
        "description": "Specifies the configuration for AWS Lambda triggers.",
        "properties": {
          "CreateAuthChallenge": { "$ref": "#/components/schemas/ArnType" },
          "CustomMessage": { "$ref": "#/components/schemas/ArnType" },
          "DefineAuthChallenge": { "$ref": "#/components/schemas/ArnType" },
          "PostAuthentication": { "$ref": "#/components/schemas/ArnType" },
          "PostConfirmation": { "$ref": "#/components/schemas/ArnType" },
          "PreAuthentication": { "$ref": "#/components/schemas/ArnType" },
          "PreSignUp": { "$ref": "#/components/schemas/ArnType" },
          "PreTokenGeneration": { "$ref": "#/components/schemas/ArnType" },
          "UserMigration": { "$ref": "#/components/schemas/ArnType" },
          "VerifyAuthChallengeResponse": { "$ref": "#/components/schemas/ArnType" }
        },
        "type": "object"
      },
      "LimitExceededException": {},
      "ListDevicesRequest": {
        "description": "Represents the request to list the devices.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "Limit": { "$ref": "#/components/schemas/QueryLimitType" },
          "PaginationToken": { "$ref": "#/components/schemas/SearchPaginationTokenType" }
        },
        "required": ["AccessToken"],
        "type": "object"
      },
      "ListDevicesResponse": {
        "description": "Represents the response to list devices.",
        "properties": {
          "Devices": { "$ref": "#/components/schemas/DeviceListType" },
          "PaginationToken": { "$ref": "#/components/schemas/SearchPaginationTokenType" }
        },
        "type": "object"
      },
      "ListGroupsRequest": {
        "properties": {
          "Limit": { "$ref": "#/components/schemas/QueryLimitType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "ListGroupsResponse": {
        "properties": {
          "Groups": { "$ref": "#/components/schemas/GroupListType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" }
        },
        "type": "object"
      },
      "ListIdentityProvidersRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/ListProvidersLimitType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKeyType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "ListIdentityProvidersResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/PaginationKeyType" },
          "Providers": { "$ref": "#/components/schemas/ProvidersListType" }
        },
        "required": ["Providers"],
        "type": "object"
      },
      "ListOfStringTypes": { "items": { "$ref": "#/components/schemas/StringType" }, "type": "array" },
      "ListProvidersLimitType": { "maximum": 60, "minimum": 0, "type": "integer" },
      "ListResourceServersLimitType": { "maximum": 50, "minimum": 1, "type": "integer" },
      "ListResourceServersRequest": {
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/ListResourceServersLimitType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKeyType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "ListResourceServersResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/PaginationKeyType" },
          "ResourceServers": { "$ref": "#/components/schemas/ResourceServersListType" }
        },
        "required": ["ResourceServers"],
        "type": "object"
      },
      "ListTagsForResourceRequest": {
        "properties": { "ResourceArn": { "$ref": "#/components/schemas/ArnType" } },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "ListTagsForResourceResponse": {
        "properties": { "Tags": { "$ref": "#/components/schemas/UserPoolTagsType" } },
        "type": "object"
      },
      "ListUserImportJobsRequest": {
        "description": "Represents the request to list the user import jobs.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PoolQueryLimitType" },
          "PaginationToken": { "$ref": "#/components/schemas/PaginationKeyType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "MaxResults"],
        "type": "object"
      },
      "ListUserImportJobsResponse": {
        "description": "Represents the response from the server to the request to list the user import jobs.",
        "properties": {
          "PaginationToken": { "$ref": "#/components/schemas/PaginationKeyType" },
          "UserImportJobs": { "$ref": "#/components/schemas/UserImportJobsListType" }
        },
        "type": "object"
      },
      "ListUserPoolClientsRequest": {
        "description": "Represents the request to list the user pool clients.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/QueryLimit" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "ListUserPoolClientsResponse": {
        "description": "Represents the response from the server that lists user pool clients.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" },
          "UserPoolClients": { "$ref": "#/components/schemas/UserPoolClientListType" }
        },
        "type": "object"
      },
      "ListUserPoolsRequest": {
        "description": "Represents the request to list user pools.",
        "properties": {
          "MaxResults": { "$ref": "#/components/schemas/PoolQueryLimitType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKeyType" }
        },
        "required": ["MaxResults"],
        "type": "object"
      },
      "ListUserPoolsResponse": {
        "description": "Represents the response to list user pools.",
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/PaginationKeyType" },
          "UserPools": { "$ref": "#/components/schemas/UserPoolListType" }
        },
        "type": "object"
      },
      "ListUsersInGroupRequest": {
        "properties": {
          "GroupName": { "$ref": "#/components/schemas/GroupNameType" },
          "Limit": { "$ref": "#/components/schemas/QueryLimitType" },
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "GroupName"],
        "type": "object"
      },
      "ListUsersInGroupResponse": {
        "properties": {
          "NextToken": { "$ref": "#/components/schemas/PaginationKey" },
          "Users": { "$ref": "#/components/schemas/UsersListType" }
        },
        "type": "object"
      },
      "ListUsersRequest": {
        "description": "Represents the request to list users.",
        "properties": {
          "AttributesToGet": { "$ref": "#/components/schemas/SearchedAttributeNamesListType" },
          "Filter": { "$ref": "#/components/schemas/UserFilterType" },
          "Limit": { "$ref": "#/components/schemas/QueryLimitType" },
          "PaginationToken": { "$ref": "#/components/schemas/SearchPaginationTokenType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "ListUsersResponse": {
        "description": "The response from the request to list users.",
        "properties": {
          "PaginationToken": { "$ref": "#/components/schemas/SearchPaginationTokenType" },
          "Users": { "$ref": "#/components/schemas/UsersListType" }
        },
        "type": "object"
      },
      "LogoutURLsListType": {
        "items": { "$ref": "#/components/schemas/RedirectUrlType" },
        "maxItems": 100,
        "minItems": 0,
        "type": "array"
      },
      "LongType": { "type": "integer" },
      "MFAMethodNotFoundException": {},
      "MFAOptionListType": { "items": { "$ref": "#/components/schemas/MFAOptionType" }, "type": "array" },
      "MFAOptionType": {
        "description": "Specifies the different settings for multi-factor authentication (MFA).",
        "properties": {
          "AttributeName": { "$ref": "#/components/schemas/AttributeNameType" },
          "DeliveryMedium": { "$ref": "#/components/schemas/DeliveryMediumType" }
        },
        "type": "object"
      },
      "MessageActionType": { "enum": ["RESEND", "SUPPRESS"], "type": "string" },
      "MessageTemplateType": {
        "description": "The message template structure.",
        "properties": {
          "EmailMessage": { "$ref": "#/components/schemas/EmailVerificationMessageType" },
          "EmailSubject": { "$ref": "#/components/schemas/EmailVerificationSubjectType" },
          "SMSMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" }
        },
        "type": "object"
      },
      "NewDeviceMetadataType": {
        "description": "The new device metadata type.",
        "properties": {
          "DeviceGroupKey": { "$ref": "#/components/schemas/StringType" },
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" }
        },
        "type": "object"
      },
      "NotAuthorizedException": {},
      "NotifyConfigurationType": {
        "description": "The notify configuration type.",
        "properties": {
          "BlockEmail": { "$ref": "#/components/schemas/NotifyEmailType" },
          "From": { "$ref": "#/components/schemas/StringType" },
          "MfaEmail": { "$ref": "#/components/schemas/NotifyEmailType" },
          "NoActionEmail": { "$ref": "#/components/schemas/NotifyEmailType" },
          "ReplyTo": { "$ref": "#/components/schemas/StringType" },
          "SourceArn": { "$ref": "#/components/schemas/ArnType" }
        },
        "required": ["SourceArn"],
        "type": "object"
      },
      "NotifyEmailType": {
        "description": "The notify email type.",
        "properties": {
          "HtmlBody": { "$ref": "#/components/schemas/EmailNotificationBodyType" },
          "Subject": { "$ref": "#/components/schemas/EmailNotificationSubjectType" },
          "TextBody": { "$ref": "#/components/schemas/EmailNotificationBodyType" }
        },
        "required": ["Subject"],
        "type": "object"
      },
      "NumberAttributeConstraintsType": {
        "description": "The minimum and maximum value of an attribute that is of the number data type.",
        "properties": {
          "MaxValue": { "$ref": "#/components/schemas/StringType" },
          "MinValue": { "$ref": "#/components/schemas/StringType" }
        },
        "type": "object"
      },
      "OAuthFlowType": { "enum": ["code", "implicit", "client_credentials"], "type": "string" },
      "OAuthFlowsType": {
        "items": { "$ref": "#/components/schemas/OAuthFlowType" },
        "maxItems": 3,
        "minItems": 0,
        "type": "array"
      },
      "PaginationKey": { "minLength": 1, "pattern": "[\\S]+", "type": "string" },
      "PaginationKeyType": { "minLength": 1, "pattern": "[\\S]+", "type": "string" },
      "PasswordPolicyMinLengthType": { "maximum": 99, "minimum": 6, "type": "integer" },
      "PasswordPolicyType": {
        "description": "The password policy type.",
        "properties": {
          "MinimumLength": { "$ref": "#/components/schemas/PasswordPolicyMinLengthType" },
          "RequireLowercase": { "$ref": "#/components/schemas/BooleanType" },
          "RequireNumbers": { "$ref": "#/components/schemas/BooleanType" },
          "RequireSymbols": { "$ref": "#/components/schemas/BooleanType" },
          "RequireUppercase": { "$ref": "#/components/schemas/BooleanType" },
          "TemporaryPasswordValidityDays": { "$ref": "#/components/schemas/TemporaryPasswordValidityDaysType" }
        },
        "type": "object"
      },
      "PasswordResetRequiredException": {},
      "PasswordType": { "format": "password", "maxLength": 256, "minLength": 6, "pattern": "[\\S]+", "type": "string" },
      "PoolQueryLimitType": { "maximum": 60, "minimum": 1, "type": "integer" },
      "PreSignedUrlType": { "maxLength": 2048, "minLength": 0, "type": "string" },
      "PrecedenceType": { "minimum": 0, "type": "integer" },
      "PreconditionNotMetException": {},
      "ProviderDescription": {
        "description": "A container for identity provider details.",
        "properties": {
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "ProviderName": { "$ref": "#/components/schemas/ProviderNameType" },
          "ProviderType": { "$ref": "#/components/schemas/IdentityProviderTypeType" }
        },
        "type": "object"
      },
      "ProviderDetailsType": {
        "additionalProperties": { "$ref": "#/components/schemas/StringType" },
        "type": "object"
      },
      "ProviderNameType": {
        "maxLength": 32,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "ProviderNameTypeV1": {
        "maxLength": 32,
        "minLength": 1,
        "pattern": "[^_][\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}][^_]+",
        "type": "string"
      },
      "ProviderUserIdentifierType": {
        "description": "A container for information about an identity provider for a user pool.",
        "properties": {
          "ProviderAttributeName": { "$ref": "#/components/schemas/StringType" },
          "ProviderAttributeValue": { "$ref": "#/components/schemas/StringType" },
          "ProviderName": { "$ref": "#/components/schemas/ProviderNameType" }
        },
        "type": "object"
      },
      "ProvidersListType": {
        "items": { "$ref": "#/components/schemas/ProviderDescription" },
        "maxItems": 50,
        "minItems": 0,
        "type": "array"
      },
      "QueryLimit": { "maximum": 60, "minimum": 1, "type": "integer" },
      "QueryLimitType": { "maximum": 60, "minimum": 0, "type": "integer" },
      "RedirectUrlType": {
        "maxLength": 1024,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "RefreshTokenValidityType": { "maximum": 3650, "minimum": 0, "type": "integer" },
      "ResendConfirmationCodeRequest": {
        "description": "Represents the request to resend the confirmation code.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "SecretHash": { "$ref": "#/components/schemas/SecretHashType" },
          "UserContextData": { "$ref": "#/components/schemas/UserContextDataType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["ClientId", "Username"],
        "type": "object"
      },
      "ResendConfirmationCodeResponse": {
        "description": "The response from the server when the Amazon Cognito Your User Pools service makes the request to resend a confirmation code.",
        "properties": { "CodeDeliveryDetails": { "$ref": "#/components/schemas/CodeDeliveryDetailsType" } },
        "type": "object"
      },
      "ResourceNotFoundException": {},
      "ResourceServerIdentifierType": {
        "maxLength": 256,
        "minLength": 1,
        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
        "type": "string"
      },
      "ResourceServerNameType": { "maxLength": 256, "minLength": 1, "pattern": "[\\w\\s+=,.@-]+", "type": "string" },
      "ResourceServerScopeDescriptionType": { "maxLength": 256, "minLength": 1, "type": "string" },
      "ResourceServerScopeListType": {
        "items": { "$ref": "#/components/schemas/ResourceServerScopeType" },
        "maxItems": 25,
        "type": "array"
      },
      "ResourceServerScopeNameType": {
        "maxLength": 256,
        "minLength": 1,
        "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
        "type": "string"
      },
      "ResourceServerScopeType": {
        "description": "A resource server scope.",
        "properties": {
          "ScopeDescription": { "$ref": "#/components/schemas/ResourceServerScopeDescriptionType" },
          "ScopeName": { "$ref": "#/components/schemas/ResourceServerScopeNameType" }
        },
        "required": ["ScopeName", "ScopeDescription"],
        "type": "object"
      },
      "ResourceServerType": {
        "description": "A container for information about a resource server for a user pool.",
        "properties": {
          "Identifier": { "$ref": "#/components/schemas/ResourceServerIdentifierType" },
          "Name": { "$ref": "#/components/schemas/ResourceServerNameType" },
          "Scopes": { "$ref": "#/components/schemas/ResourceServerScopeListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "type": "object"
      },
      "ResourceServersListType": { "items": { "$ref": "#/components/schemas/ResourceServerType" }, "type": "array" },
      "RespondToAuthChallengeRequest": {
        "description": "The request to respond to an authentication challenge.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "ChallengeName": { "$ref": "#/components/schemas/ChallengeNameType" },
          "ChallengeResponses": { "$ref": "#/components/schemas/ChallengeResponsesType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "Session": { "$ref": "#/components/schemas/SessionType" },
          "UserContextData": { "$ref": "#/components/schemas/UserContextDataType" }
        },
        "required": ["ClientId", "ChallengeName"],
        "type": "object"
      },
      "RespondToAuthChallengeResponse": {
        "description": "The response to respond to the authentication challenge.",
        "properties": {
          "AuthenticationResult": { "$ref": "#/components/schemas/AuthenticationResultType" },
          "ChallengeName": { "$ref": "#/components/schemas/ChallengeNameType" },
          "ChallengeParameters": { "$ref": "#/components/schemas/ChallengeParametersType" },
          "Session": { "$ref": "#/components/schemas/SessionType" }
        },
        "type": "object"
      },
      "RiskConfigurationType": {
        "description": "The risk configuration type.",
        "properties": {
          "AccountTakeoverRiskConfiguration": { "$ref": "#/components/schemas/AccountTakeoverRiskConfigurationType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "CompromisedCredentialsRiskConfiguration": {
            "$ref": "#/components/schemas/CompromisedCredentialsRiskConfigurationType"
          },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "RiskExceptionConfiguration": { "$ref": "#/components/schemas/RiskExceptionConfigurationType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "type": "object"
      },
      "RiskDecisionType": { "enum": ["NoRisk", "AccountTakeover", "Block"], "type": "string" },
      "RiskExceptionConfigurationType": {
        "description": "The type of the configuration to override the risk decision.",
        "properties": {
          "BlockedIPRangeList": { "$ref": "#/components/schemas/BlockedIPRangeListType" },
          "SkippedIPRangeList": { "$ref": "#/components/schemas/SkippedIPRangeListType" }
        },
        "type": "object"
      },
      "RiskLevelType": { "enum": ["Low", "Medium", "High"], "type": "string" },
      "S3BucketType": {
        "maxLength": 1024,
        "minLength": 3,
        "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
        "type": "string"
      },
      "SMSMfaSettingsType": {
        "description": "The SMS multi-factor authentication (MFA) settings type.",
        "properties": {
          "Enabled": { "$ref": "#/components/schemas/BooleanType" },
          "PreferredMfa": { "$ref": "#/components/schemas/BooleanType" }
        },
        "type": "object"
      },
      "SchemaAttributeType": {
        "description": "Contains information about the schema attribute.",
        "properties": {
          "AttributeDataType": { "$ref": "#/components/schemas/AttributeDataType" },
          "DeveloperOnlyAttribute": { "$ref": "#/components/schemas/BooleanType" },
          "Mutable": { "$ref": "#/components/schemas/BooleanType" },
          "Name": { "$ref": "#/components/schemas/CustomAttributeNameType" },
          "NumberAttributeConstraints": { "$ref": "#/components/schemas/NumberAttributeConstraintsType" },
          "Required": { "$ref": "#/components/schemas/BooleanType" },
          "StringAttributeConstraints": { "$ref": "#/components/schemas/StringAttributeConstraintsType" }
        },
        "type": "object"
      },
      "SchemaAttributesListType": {
        "items": { "$ref": "#/components/schemas/SchemaAttributeType" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "ScopeDoesNotExistException": {},
      "ScopeListType": { "items": { "$ref": "#/components/schemas/ScopeType" }, "maxItems": 25, "type": "array" },
      "ScopeType": { "maxLength": 256, "minLength": 1, "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+", "type": "string" },
      "SearchPaginationTokenType": { "minLength": 1, "pattern": "[\\S]+", "type": "string" },
      "SearchedAttributeNamesListType": {
        "items": { "$ref": "#/components/schemas/AttributeNameType" },
        "type": "array"
      },
      "SecretCodeType": { "format": "password", "minLength": 16, "pattern": "[A-Za-z0-9]+", "type": "string" },
      "SecretHashType": {
        "format": "password",
        "maxLength": 128,
        "minLength": 1,
        "pattern": "[\\w+=/]+",
        "type": "string"
      },
      "SessionType": { "maxLength": 2048, "minLength": 20, "type": "string" },
      "SetRiskConfigurationRequest": {
        "properties": {
          "AccountTakeoverRiskConfiguration": { "$ref": "#/components/schemas/AccountTakeoverRiskConfigurationType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "CompromisedCredentialsRiskConfiguration": {
            "$ref": "#/components/schemas/CompromisedCredentialsRiskConfigurationType"
          },
          "RiskExceptionConfiguration": { "$ref": "#/components/schemas/RiskExceptionConfigurationType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "SetRiskConfigurationResponse": {
        "properties": { "RiskConfiguration": { "$ref": "#/components/schemas/RiskConfigurationType" } },
        "required": ["RiskConfiguration"],
        "type": "object"
      },
      "SetUICustomizationRequest": {
        "properties": {
          "CSS": { "$ref": "#/components/schemas/CSSType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ImageFile": { "$ref": "#/components/schemas/ImageFileType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "SetUICustomizationResponse": {
        "properties": { "UICustomization": { "$ref": "#/components/schemas/UICustomizationType" } },
        "required": ["UICustomization"],
        "type": "object"
      },
      "SetUserMFAPreferenceRequest": {
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "SMSMfaSettings": { "$ref": "#/components/schemas/SMSMfaSettingsType" },
          "SoftwareTokenMfaSettings": { "$ref": "#/components/schemas/SoftwareTokenMfaSettingsType" }
        },
        "required": ["AccessToken"],
        "type": "object"
      },
      "SetUserMFAPreferenceResponse": { "properties": {}, "type": "object" },
      "SetUserPoolMfaConfigRequest": {
        "properties": {
          "MfaConfiguration": { "$ref": "#/components/schemas/UserPoolMfaType" },
          "SmsMfaConfiguration": { "$ref": "#/components/schemas/SmsMfaConfigType" },
          "SoftwareTokenMfaConfiguration": { "$ref": "#/components/schemas/SoftwareTokenMfaConfigType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "SetUserPoolMfaConfigResponse": {
        "properties": {
          "MfaConfiguration": { "$ref": "#/components/schemas/UserPoolMfaType" },
          "SmsMfaConfiguration": { "$ref": "#/components/schemas/SmsMfaConfigType" },
          "SoftwareTokenMfaConfiguration": { "$ref": "#/components/schemas/SoftwareTokenMfaConfigType" }
        },
        "type": "object"
      },
      "SetUserSettingsRequest": {
        "description": "Represents the request to set user settings.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "MFAOptions": { "$ref": "#/components/schemas/MFAOptionListType" }
        },
        "required": ["AccessToken", "MFAOptions"],
        "type": "object"
      },
      "SetUserSettingsResponse": {
        "description": "The response from the server for a set user settings request.",
        "properties": {},
        "type": "object"
      },
      "SignUpRequest": {
        "description": "Represents the request to register a user.",
        "properties": {
          "AnalyticsMetadata": { "$ref": "#/components/schemas/AnalyticsMetadataType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "Password": { "$ref": "#/components/schemas/PasswordType" },
          "SecretHash": { "$ref": "#/components/schemas/SecretHashType" },
          "UserAttributes": { "$ref": "#/components/schemas/AttributeListType" },
          "UserContextData": { "$ref": "#/components/schemas/UserContextDataType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" },
          "ValidationData": { "$ref": "#/components/schemas/AttributeListType" }
        },
        "required": ["ClientId", "Username", "Password"],
        "type": "object"
      },
      "SignUpResponse": {
        "description": "The response from the server for a registration request.",
        "properties": {
          "CodeDeliveryDetails": { "$ref": "#/components/schemas/CodeDeliveryDetailsType" },
          "UserConfirmed": { "$ref": "#/components/schemas/BooleanType" },
          "UserSub": { "$ref": "#/components/schemas/StringType" }
        },
        "required": ["UserConfirmed", "UserSub"],
        "type": "object"
      },
      "SkippedIPRangeListType": {
        "items": { "$ref": "#/components/schemas/StringType" },
        "maxItems": 20,
        "type": "array"
      },
      "SmsConfigurationType": {
        "description": "The SMS configuration type.",
        "properties": {
          "ExternalId": { "$ref": "#/components/schemas/StringType" },
          "SnsCallerArn": { "$ref": "#/components/schemas/ArnType" }
        },
        "required": ["SnsCallerArn"],
        "type": "object"
      },
      "SmsMfaConfigType": {
        "description": "The SMS text message multi-factor authentication (MFA) configuration type.",
        "properties": {
          "SmsAuthenticationMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" },
          "SmsConfiguration": { "$ref": "#/components/schemas/SmsConfigurationType" }
        },
        "type": "object"
      },
      "SmsVerificationMessageType": { "maxLength": 140, "minLength": 6, "pattern": ".*\\{####\\}.*", "type": "string" },
      "SoftwareTokenMFANotFoundException": {},
      "SoftwareTokenMFAUserCodeType": { "maxLength": 6, "minLength": 6, "pattern": "[0-9]+", "type": "string" },
      "SoftwareTokenMfaConfigType": {
        "description": "The type used for enabling software token MFA at the user pool level.",
        "properties": { "Enabled": { "$ref": "#/components/schemas/BooleanType" } },
        "type": "object"
      },
      "SoftwareTokenMfaSettingsType": {
        "description": "The type used for enabling software token MFA at the user level.",
        "properties": {
          "Enabled": { "$ref": "#/components/schemas/BooleanType" },
          "PreferredMfa": { "$ref": "#/components/schemas/BooleanType" }
        },
        "type": "object"
      },
      "StartUserImportJobRequest": {
        "description": "Represents the request to start the user import job.",
        "properties": {
          "JobId": { "$ref": "#/components/schemas/UserImportJobIdType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "JobId"],
        "type": "object"
      },
      "StartUserImportJobResponse": {
        "description": "Represents the response from the server to the request to start the user import job.",
        "properties": { "UserImportJob": { "$ref": "#/components/schemas/UserImportJobType" } },
        "type": "object"
      },
      "StatusType": { "enum": ["Enabled", "Disabled"], "type": "string" },
      "StopUserImportJobRequest": {
        "description": "Represents the request to stop the user import job.",
        "properties": {
          "JobId": { "$ref": "#/components/schemas/UserImportJobIdType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "JobId"],
        "type": "object"
      },
      "StopUserImportJobResponse": {
        "description": "Represents the response from the server to the request to stop the user import job.",
        "properties": { "UserImportJob": { "$ref": "#/components/schemas/UserImportJobType" } },
        "type": "object"
      },
      "StringAttributeConstraintsType": {
        "description": "The constraints associated with a string attribute.",
        "properties": {
          "MaxLength": { "$ref": "#/components/schemas/StringType" },
          "MinLength": { "$ref": "#/components/schemas/StringType" }
        },
        "type": "object"
      },
      "StringType": { "type": "string" },
      "SupportedIdentityProvidersListType": {
        "items": { "$ref": "#/components/schemas/ProviderNameType" },
        "type": "array"
      },
      "TagKeysType": { "maxLength": 128, "minLength": 1, "type": "string" },
      "TagResourceRequest": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/ArnType" },
          "Tags": { "$ref": "#/components/schemas/UserPoolTagsType" }
        },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "TagResourceResponse": { "properties": {}, "type": "object" },
      "TagValueType": { "maxLength": 256, "minLength": 0, "type": "string" },
      "TemporaryPasswordValidityDaysType": { "maximum": 365, "minimum": 0, "type": "integer" },
      "TokenModelType": { "format": "password", "pattern": "[A-Za-z0-9-_=.]+", "type": "string" },
      "TooManyFailedAttemptsException": {},
      "TooManyRequestsException": {},
      "UICustomizationType": {
        "description": "A container for the UI customization information for a user pool's built-in app UI.",
        "properties": {
          "CSS": { "$ref": "#/components/schemas/CSSType" },
          "CSSVersion": { "$ref": "#/components/schemas/CSSVersionType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "ImageUrl": { "$ref": "#/components/schemas/ImageUrlType" },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "type": "object"
      },
      "UnexpectedLambdaException": {},
      "UnsupportedIdentityProviderException": {},
      "UnsupportedUserStateException": {},
      "UntagResourceRequest": {
        "properties": {
          "ResourceArn": { "$ref": "#/components/schemas/ArnType" },
          "TagKeys": { "$ref": "#/components/schemas/UserPoolTagsListType" }
        },
        "required": ["ResourceArn"],
        "type": "object"
      },
      "UntagResourceResponse": { "properties": {}, "type": "object" },
      "UpdateAuthEventFeedbackRequest": {
        "properties": {
          "EventId": { "$ref": "#/components/schemas/EventIdType" },
          "FeedbackToken": { "$ref": "#/components/schemas/TokenModelType" },
          "FeedbackValue": { "$ref": "#/components/schemas/FeedbackValueType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "required": ["UserPoolId", "Username", "EventId", "FeedbackToken", "FeedbackValue"],
        "type": "object"
      },
      "UpdateAuthEventFeedbackResponse": { "properties": {}, "type": "object" },
      "UpdateDeviceStatusRequest": {
        "description": "Represents the request to update the device status.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "DeviceKey": { "$ref": "#/components/schemas/DeviceKeyType" },
          "DeviceRememberedStatus": { "$ref": "#/components/schemas/DeviceRememberedStatusType" }
        },
        "required": ["AccessToken", "DeviceKey"],
        "type": "object"
      },
      "UpdateDeviceStatusResponse": {
        "description": "The response to the request to update the device status.",
        "properties": {},
        "type": "object"
      },
      "UpdateGroupRequest": {
        "properties": {
          "Description": { "$ref": "#/components/schemas/DescriptionType" },
          "GroupName": { "$ref": "#/components/schemas/GroupNameType" },
          "Precedence": { "$ref": "#/components/schemas/PrecedenceType" },
          "RoleArn": { "$ref": "#/components/schemas/ArnType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["GroupName", "UserPoolId"],
        "type": "object"
      },
      "UpdateGroupResponse": {
        "properties": { "Group": { "$ref": "#/components/schemas/GroupType" } },
        "type": "object"
      },
      "UpdateIdentityProviderRequest": {
        "properties": {
          "AttributeMapping": { "$ref": "#/components/schemas/AttributeMappingType" },
          "IdpIdentifiers": { "$ref": "#/components/schemas/IdpIdentifiersListType" },
          "ProviderDetails": { "$ref": "#/components/schemas/ProviderDetailsType" },
          "ProviderName": { "$ref": "#/components/schemas/ProviderNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "ProviderName"],
        "type": "object"
      },
      "UpdateIdentityProviderResponse": {
        "properties": { "IdentityProvider": { "$ref": "#/components/schemas/IdentityProviderType" } },
        "required": ["IdentityProvider"],
        "type": "object"
      },
      "UpdateResourceServerRequest": {
        "properties": {
          "Identifier": { "$ref": "#/components/schemas/ResourceServerIdentifierType" },
          "Name": { "$ref": "#/components/schemas/ResourceServerNameType" },
          "Scopes": { "$ref": "#/components/schemas/ResourceServerScopeListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["UserPoolId", "Identifier", "Name"],
        "type": "object"
      },
      "UpdateResourceServerResponse": {
        "properties": { "ResourceServer": { "$ref": "#/components/schemas/ResourceServerType" } },
        "required": ["ResourceServer"],
        "type": "object"
      },
      "UpdateUserAttributesRequest": {
        "description": "Represents the request to update user attributes.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "UserAttributes": { "$ref": "#/components/schemas/AttributeListType" }
        },
        "required": ["UserAttributes", "AccessToken"],
        "type": "object"
      },
      "UpdateUserAttributesResponse": {
        "description": "Represents the response from the server for the request to update user attributes.",
        "properties": { "CodeDeliveryDetailsList": { "$ref": "#/components/schemas/CodeDeliveryDetailsListType" } },
        "type": "object"
      },
      "UpdateUserPoolClientRequest": {
        "description": "Represents the request to update the user pool client.",
        "properties": {
          "AllowedOAuthFlows": { "$ref": "#/components/schemas/OAuthFlowsType" },
          "AllowedOAuthFlowsUserPoolClient": { "$ref": "#/components/schemas/BooleanType" },
          "AllowedOAuthScopes": { "$ref": "#/components/schemas/ScopeListType" },
          "AnalyticsConfiguration": { "$ref": "#/components/schemas/AnalyticsConfigurationType" },
          "CallbackURLs": { "$ref": "#/components/schemas/CallbackURLsListType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ClientName": { "$ref": "#/components/schemas/ClientNameType" },
          "DefaultRedirectURI": { "$ref": "#/components/schemas/RedirectUrlType" },
          "ExplicitAuthFlows": { "$ref": "#/components/schemas/ExplicitAuthFlowsListType" },
          "LogoutURLs": { "$ref": "#/components/schemas/LogoutURLsListType" },
          "ReadAttributes": { "$ref": "#/components/schemas/ClientPermissionListType" },
          "RefreshTokenValidity": { "$ref": "#/components/schemas/RefreshTokenValidityType" },
          "SupportedIdentityProviders": { "$ref": "#/components/schemas/SupportedIdentityProvidersListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "WriteAttributes": { "$ref": "#/components/schemas/ClientPermissionListType" }
        },
        "required": ["UserPoolId", "ClientId"],
        "type": "object"
      },
      "UpdateUserPoolClientResponse": {
        "description": "Represents the response from the server to the request to update the user pool client.",
        "properties": { "UserPoolClient": { "$ref": "#/components/schemas/UserPoolClientType" } },
        "type": "object"
      },
      "UpdateUserPoolDomainRequest": {
        "description": "The UpdateUserPoolDomain request input.",
        "properties": {
          "CustomDomainConfig": { "$ref": "#/components/schemas/CustomDomainConfigType" },
          "Domain": { "$ref": "#/components/schemas/DomainType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "required": ["Domain", "UserPoolId", "CustomDomainConfig"],
        "type": "object"
      },
      "UpdateUserPoolDomainResponse": {
        "description": "The UpdateUserPoolDomain response output.",
        "properties": { "CloudFrontDomain": { "$ref": "#/components/schemas/DomainType" } },
        "type": "object"
      },
      "UpdateUserPoolRequest": {
        "description": "Represents the request to update the user pool.",
        "properties": {
          "AdminCreateUserConfig": { "$ref": "#/components/schemas/AdminCreateUserConfigType" },
          "AutoVerifiedAttributes": { "$ref": "#/components/schemas/VerifiedAttributesListType" },
          "DeviceConfiguration": { "$ref": "#/components/schemas/DeviceConfigurationType" },
          "EmailConfiguration": { "$ref": "#/components/schemas/EmailConfigurationType" },
          "EmailVerificationMessage": { "$ref": "#/components/schemas/EmailVerificationMessageType" },
          "EmailVerificationSubject": { "$ref": "#/components/schemas/EmailVerificationSubjectType" },
          "LambdaConfig": { "$ref": "#/components/schemas/LambdaConfigType" },
          "MfaConfiguration": { "$ref": "#/components/schemas/UserPoolMfaType" },
          "Policies": { "$ref": "#/components/schemas/UserPoolPolicyType" },
          "SmsAuthenticationMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" },
          "SmsConfiguration": { "$ref": "#/components/schemas/SmsConfigurationType" },
          "SmsVerificationMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" },
          "UserPoolAddOns": { "$ref": "#/components/schemas/UserPoolAddOnsType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "UserPoolTags": { "$ref": "#/components/schemas/UserPoolTagsType" },
          "VerificationMessageTemplate": { "$ref": "#/components/schemas/VerificationMessageTemplateType" }
        },
        "required": ["UserPoolId"],
        "type": "object"
      },
      "UpdateUserPoolResponse": {
        "description": "Represents the response from the server when you make a request to update the user pool.",
        "properties": {},
        "type": "object"
      },
      "UserContextDataType": {
        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
        "properties": { "EncodedData": { "$ref": "#/components/schemas/StringType" } },
        "type": "object"
      },
      "UserFilterType": { "maxLength": 256, "type": "string" },
      "UserImportInProgressException": {},
      "UserImportJobIdType": { "maxLength": 55, "minLength": 1, "pattern": "import-[0-9a-zA-Z-]+", "type": "string" },
      "UserImportJobNameType": { "maxLength": 128, "minLength": 1, "pattern": "[\\w\\s+=,.@-]+", "type": "string" },
      "UserImportJobStatusType": {
        "enum": ["Created", "Pending", "InProgress", "Stopping", "Expired", "Stopped", "Failed", "Succeeded"],
        "type": "string"
      },
      "UserImportJobType": {
        "description": "The user import job type.",
        "properties": {
          "CloudWatchLogsRoleArn": { "$ref": "#/components/schemas/ArnType" },
          "CompletionDate": { "$ref": "#/components/schemas/DateType" },
          "CompletionMessage": { "$ref": "#/components/schemas/CompletionMessageType" },
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "FailedUsers": { "$ref": "#/components/schemas/LongType" },
          "ImportedUsers": { "$ref": "#/components/schemas/LongType" },
          "JobId": { "$ref": "#/components/schemas/UserImportJobIdType" },
          "JobName": { "$ref": "#/components/schemas/UserImportJobNameType" },
          "PreSignedUrl": { "$ref": "#/components/schemas/PreSignedUrlType" },
          "SkippedUsers": { "$ref": "#/components/schemas/LongType" },
          "StartDate": { "$ref": "#/components/schemas/DateType" },
          "Status": { "$ref": "#/components/schemas/UserImportJobStatusType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "type": "object"
      },
      "UserImportJobsListType": {
        "items": { "$ref": "#/components/schemas/UserImportJobType" },
        "maxItems": 50,
        "minItems": 1,
        "type": "array"
      },
      "UserLambdaValidationException": {},
      "UserMFASettingListType": { "items": { "$ref": "#/components/schemas/StringType" }, "type": "array" },
      "UserNotConfirmedException": {},
      "UserNotFoundException": {},
      "UserPoolAddOnNotEnabledException": {},
      "UserPoolAddOnsType": {
        "description": "The user pool add-ons type.",
        "properties": { "AdvancedSecurityMode": { "$ref": "#/components/schemas/AdvancedSecurityModeType" } },
        "required": ["AdvancedSecurityMode"],
        "type": "object"
      },
      "UserPoolClientDescription": {
        "description": "The description of the user pool client.",
        "properties": {
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ClientName": { "$ref": "#/components/schemas/ClientNameType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" }
        },
        "type": "object"
      },
      "UserPoolClientListType": {
        "items": { "$ref": "#/components/schemas/UserPoolClientDescription" },
        "type": "array"
      },
      "UserPoolClientType": {
        "description": "Contains information about a user pool client.",
        "properties": {
          "AllowedOAuthFlows": { "$ref": "#/components/schemas/OAuthFlowsType" },
          "AllowedOAuthFlowsUserPoolClient": { "$ref": "#/components/schemas/BooleanType" },
          "AllowedOAuthScopes": { "$ref": "#/components/schemas/ScopeListType" },
          "AnalyticsConfiguration": { "$ref": "#/components/schemas/AnalyticsConfigurationType" },
          "CallbackURLs": { "$ref": "#/components/schemas/CallbackURLsListType" },
          "ClientId": { "$ref": "#/components/schemas/ClientIdType" },
          "ClientName": { "$ref": "#/components/schemas/ClientNameType" },
          "ClientSecret": { "$ref": "#/components/schemas/ClientSecretType" },
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "DefaultRedirectURI": { "$ref": "#/components/schemas/RedirectUrlType" },
          "ExplicitAuthFlows": { "$ref": "#/components/schemas/ExplicitAuthFlowsListType" },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "LogoutURLs": { "$ref": "#/components/schemas/LogoutURLsListType" },
          "ReadAttributes": { "$ref": "#/components/schemas/ClientPermissionListType" },
          "RefreshTokenValidity": { "$ref": "#/components/schemas/RefreshTokenValidityType" },
          "SupportedIdentityProviders": { "$ref": "#/components/schemas/SupportedIdentityProvidersListType" },
          "UserPoolId": { "$ref": "#/components/schemas/UserPoolIdType" },
          "WriteAttributes": { "$ref": "#/components/schemas/ClientPermissionListType" }
        },
        "type": "object"
      },
      "UserPoolDescriptionType": {
        "description": "A user pool description.",
        "properties": {
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "Id": { "$ref": "#/components/schemas/UserPoolIdType" },
          "LambdaConfig": { "$ref": "#/components/schemas/LambdaConfigType" },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "Name": { "$ref": "#/components/schemas/UserPoolNameType" },
          "Status": { "$ref": "#/components/schemas/StatusType" }
        },
        "type": "object"
      },
      "UserPoolIdType": { "maxLength": 55, "minLength": 1, "pattern": "[\\w-]+_[0-9a-zA-Z]+", "type": "string" },
      "UserPoolListType": { "items": { "$ref": "#/components/schemas/UserPoolDescriptionType" }, "type": "array" },
      "UserPoolMfaType": { "enum": ["OFF", "ON", "OPTIONAL"], "type": "string" },
      "UserPoolNameType": { "maxLength": 128, "minLength": 1, "pattern": "[\\w\\s+=,.@-]+", "type": "string" },
      "UserPoolPolicyType": {
        "description": "The policy associated with a user pool.",
        "properties": { "PasswordPolicy": { "$ref": "#/components/schemas/PasswordPolicyType" } },
        "type": "object"
      },
      "UserPoolTaggingException": {},
      "UserPoolTagsListType": { "items": { "$ref": "#/components/schemas/TagKeysType" }, "type": "array" },
      "UserPoolTagsType": { "additionalProperties": { "$ref": "#/components/schemas/TagValueType" }, "type": "object" },
      "UserPoolType": {
        "description": "A container for information about the user pool.",
        "properties": {
          "AdminCreateUserConfig": { "$ref": "#/components/schemas/AdminCreateUserConfigType" },
          "AliasAttributes": { "$ref": "#/components/schemas/AliasAttributesListType" },
          "Arn": { "$ref": "#/components/schemas/ArnType" },
          "AutoVerifiedAttributes": { "$ref": "#/components/schemas/VerifiedAttributesListType" },
          "CreationDate": { "$ref": "#/components/schemas/DateType" },
          "CustomDomain": { "$ref": "#/components/schemas/DomainType" },
          "DeviceConfiguration": { "$ref": "#/components/schemas/DeviceConfigurationType" },
          "Domain": { "$ref": "#/components/schemas/DomainType" },
          "EmailConfiguration": { "$ref": "#/components/schemas/EmailConfigurationType" },
          "EmailConfigurationFailure": { "$ref": "#/components/schemas/StringType" },
          "EmailVerificationMessage": { "$ref": "#/components/schemas/EmailVerificationMessageType" },
          "EmailVerificationSubject": { "$ref": "#/components/schemas/EmailVerificationSubjectType" },
          "EstimatedNumberOfUsers": { "$ref": "#/components/schemas/IntegerType" },
          "Id": { "$ref": "#/components/schemas/UserPoolIdType" },
          "LambdaConfig": { "$ref": "#/components/schemas/LambdaConfigType" },
          "LastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "MfaConfiguration": { "$ref": "#/components/schemas/UserPoolMfaType" },
          "Name": { "$ref": "#/components/schemas/UserPoolNameType" },
          "Policies": { "$ref": "#/components/schemas/UserPoolPolicyType" },
          "SchemaAttributes": { "$ref": "#/components/schemas/SchemaAttributesListType" },
          "SmsAuthenticationMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" },
          "SmsConfiguration": { "$ref": "#/components/schemas/SmsConfigurationType" },
          "SmsConfigurationFailure": { "$ref": "#/components/schemas/StringType" },
          "SmsVerificationMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" },
          "Status": { "$ref": "#/components/schemas/StatusType" },
          "UserPoolAddOns": { "$ref": "#/components/schemas/UserPoolAddOnsType" },
          "UserPoolTags": { "$ref": "#/components/schemas/UserPoolTagsType" },
          "UsernameAttributes": { "$ref": "#/components/schemas/UsernameAttributesListType" },
          "VerificationMessageTemplate": { "$ref": "#/components/schemas/VerificationMessageTemplateType" }
        },
        "type": "object"
      },
      "UserStatusType": {
        "enum": [
          "UNCONFIRMED",
          "CONFIRMED",
          "ARCHIVED",
          "COMPROMISED",
          "UNKNOWN",
          "RESET_REQUIRED",
          "FORCE_CHANGE_PASSWORD"
        ],
        "type": "string"
      },
      "UserType": {
        "description": "The user type.",
        "properties": {
          "Attributes": { "$ref": "#/components/schemas/AttributeListType" },
          "Enabled": { "$ref": "#/components/schemas/BooleanType" },
          "MFAOptions": { "$ref": "#/components/schemas/MFAOptionListType" },
          "UserCreateDate": { "$ref": "#/components/schemas/DateType" },
          "UserLastModifiedDate": { "$ref": "#/components/schemas/DateType" },
          "UserStatus": { "$ref": "#/components/schemas/UserStatusType" },
          "Username": { "$ref": "#/components/schemas/UsernameType" }
        },
        "type": "object"
      },
      "UsernameAttributeType": { "enum": ["phone_number", "email"], "type": "string" },
      "UsernameAttributesListType": {
        "items": { "$ref": "#/components/schemas/UsernameAttributeType" },
        "type": "array"
      },
      "UsernameExistsException": {},
      "UsernameType": {
        "format": "password",
        "maxLength": 128,
        "minLength": 1,
        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
        "type": "string"
      },
      "UsersListType": { "items": { "$ref": "#/components/schemas/UserType" }, "type": "array" },
      "VerificationMessageTemplateType": {
        "description": "The template for verification messages.",
        "properties": {
          "DefaultEmailOption": { "$ref": "#/components/schemas/DefaultEmailOptionType" },
          "EmailMessage": { "$ref": "#/components/schemas/EmailVerificationMessageType" },
          "EmailMessageByLink": { "$ref": "#/components/schemas/EmailVerificationMessageByLinkType" },
          "EmailSubject": { "$ref": "#/components/schemas/EmailVerificationSubjectType" },
          "EmailSubjectByLink": { "$ref": "#/components/schemas/EmailVerificationSubjectByLinkType" },
          "SmsMessage": { "$ref": "#/components/schemas/SmsVerificationMessageType" }
        },
        "type": "object"
      },
      "VerifiedAttributeType": { "enum": ["phone_number", "email"], "type": "string" },
      "VerifiedAttributesListType": {
        "items": { "$ref": "#/components/schemas/VerifiedAttributeType" },
        "type": "array"
      },
      "VerifySoftwareTokenRequest": {
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "FriendlyDeviceName": { "$ref": "#/components/schemas/StringType" },
          "Session": { "$ref": "#/components/schemas/SessionType" },
          "UserCode": { "$ref": "#/components/schemas/SoftwareTokenMFAUserCodeType" }
        },
        "required": ["UserCode"],
        "type": "object"
      },
      "VerifySoftwareTokenResponse": {
        "properties": {
          "Session": { "$ref": "#/components/schemas/SessionType" },
          "Status": { "$ref": "#/components/schemas/VerifySoftwareTokenResponseType" }
        },
        "type": "object"
      },
      "VerifySoftwareTokenResponseType": { "enum": ["SUCCESS", "ERROR"], "type": "string" },
      "VerifyUserAttributeRequest": {
        "description": "Represents the request to verify user attributes.",
        "properties": {
          "AccessToken": { "$ref": "#/components/schemas/TokenModelType" },
          "AttributeName": { "$ref": "#/components/schemas/AttributeNameType" },
          "Code": { "$ref": "#/components/schemas/ConfirmationCodeType" }
        },
        "required": ["AccessToken", "AttributeName", "Code"],
        "type": "object"
      },
      "VerifyUserAttributeResponse": {
        "description": "A container representing the response from the server from the request to verify user attributes.",
        "properties": {},
        "type": "object"
      }
    }
  }
}
